
water_level_indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000250  00800100  00002bd0  00002c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000284  00800350  00800350  00002eb4  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00002eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008d34  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034b8  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038c5  00000000  00000000  0000f908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012d4  00000000  00000000  000131d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d09  00000000  00000000  000144a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003bbe  00000000  00000000  000161ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  00019d6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_1>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__vector_9>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__vector_16>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_18>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_21>
      58:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_22>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <PIN>:
	uint8_t ret=1;
	PopInterface(&data);
	if(DebugArrayindex<10 && data!='&' )
	{
	   DebugArray[DebugArrayindex]=data;
	   DebugArrayindex++;
      68:	23 00 26 00 29 00                                   #.&.).

0000006e <DDR>:
	   uart_char(data);
      6e:	24 00 27 00 2a 00                                   $.'.*.

00000074 <Port>:
		   }
		   break;
	   case 1:
	      if(populateArray()==0)
		  {
			DebugStates++;
      74:	25 00 28 00 2b 00                                   %.(.+.

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
}

static void  DebugBufferCheck()
{ 
   static uint8_t debugdat=10;
   switch(DebugArray[0])
      86:	13 e0       	ldi	r17, 0x03	; 3
   {
	   case '2':
	       if(DebugArray[1]=='E')
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e0 ed       	ldi	r30, 0xD0	; 208
      8e:	fb e2       	ldi	r31, 0x2B	; 43
		   {
			 //AddEvent((uint8_t *)&DebugArray[3],DebugArray[0]); 
			 //uart_num((uint8_t)(DebugArray[2]-'0'));
			 StoreNVM((uint8_t)(DebugArray[2]-'0'),&DebugArray[2],0);
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a0 35       	cpi	r26, 0x50	; 80
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	25 e0       	ldi	r18, 0x05	; 5
      9e:	a0 e5       	ldi	r26, 0x50	; 80
      a0:	b3 e0       	ldi	r27, 0x03	; 3
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
			 uart_string("IAM");
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a4 3d       	cpi	r26, 0xD4	; 212
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <main>
      b0:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <SetBlink>:

static Ports Prt;
void SetBlink(Pin p,uint16_t Duration /*higher for the id and lower nibble for number of blinks in a second*/,Ports port)
{   
	
	if((Duration&0x00ff)>DurationTime)
      b8:	9b 01       	movw	r18, r22
      ba:	33 27       	eor	r19, r19
      bc:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <__data_end>
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	e2 17       	cp	r30, r18
      c4:	f3 07       	cpc	r31, r19
      c6:	68 f4       	brcc	.+26     	; 0xe2 <SetBlink+0x2a>
	{
			BlinkPin=p;
      c8:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <BlinkPin>
			DurationTime=Duration&0x00FF;
      cc:	60 93 50 03 	sts	0x0350, r22	; 0x800350 <__data_end>
			CurrentBlink=Duration&0xf000;
      d0:	66 27       	eor	r22, r22
      d2:	70 7f       	andi	r23, 0xF0	; 240
      d4:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <CurrentBlink+0x1>
      d8:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <CurrentBlink>
			Prt=port;
      dc:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <Prt>
      e0:	08 95       	ret
	}
    else if((Duration&0x00ff)==0)
      e2:	23 2b       	or	r18, r19
      e4:	59 f4       	brne	.+22     	; 0xfc <SetBlink+0x44>
	{
		if((Duration&0xf000)==CurrentBlink)
      e6:	66 27       	eor	r22, r22
      e8:	70 7f       	andi	r23, 0xF0	; 240
      ea:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <CurrentBlink>
      ee:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <CurrentBlink+0x1>
      f2:	68 17       	cp	r22, r24
      f4:	79 07       	cpc	r23, r25
      f6:	11 f4       	brne	.+4      	; 0xfc <SetBlink+0x44>
		{
			
			DurationTime=0;
      f8:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <__data_end>
      fc:	08 95       	ret

000000fe <Blink>:

void Blink()
{
	static uint16_t countBlink;
	static uint8_t BlinkOut;
	if(DurationTime)
      fe:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <__data_end>
     102:	66 23       	and	r22, r22
     104:	31 f1       	breq	.+76     	; 0x152 <Blink+0x54>
	{ 
		
	if(countBlink>=((5000/Timeslice)/DurationTime))
     106:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <countBlink.1631>
     10a:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <countBlink.1631+0x1>
     10e:	88 ee       	ldi	r24, 0xE8	; 232
     110:	93 e0       	ldi	r25, 0x03	; 3
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__divmodhi4>
     118:	26 17       	cp	r18, r22
     11a:	37 07       	cpc	r19, r23
     11c:	98 f0       	brcs	.+38     	; 0x144 <Blink+0x46>
	{
		BlinkOut=BlinkOut^1;
     11e:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <BlinkOut.1632>
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	89 27       	eor	r24, r25
     126:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <BlinkOut.1632>
		PinOutput(BlinkOut,BlinkPin,Prt);
     12a:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <Prt>
     12e:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <BlinkPin>
     132:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
		countBlink=0;
		countBlink++;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <countBlink.1631+0x1>
     13e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <countBlink.1631>
     142:	08 95       	ret
	}
	else
	{
		countBlink++;		
     144:	2f 5f       	subi	r18, 0xFF	; 255
     146:	3f 4f       	sbci	r19, 0xFF	; 255
     148:	30 93 56 03 	sts	0x0356, r19	; 0x800356 <countBlink.1631+0x1>
     14c:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <countBlink.1631>
     150:	08 95       	ret
	}
	}
	else
	{
		PinOutput(0,BlinkPin,Prt);
     152:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <Prt>
     156:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <BlinkPin>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
     160:	08 95       	ret

00000162 <ESPreadvalue>:
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
{
     162:	4f 92       	push	r4
     164:	5f 92       	push	r5
     166:	6f 92       	push	r6
     168:	7f 92       	push	r7
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	1f 92       	push	r1
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	7c 01       	movw	r14, r24
	 unsigned char data='&';
     18a:	86 e2       	ldi	r24, 0x26	; 38
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	0f 2e       	mov	r0, r31
     190:	f6 e0       	ldi	r31, 0x06	; 6
     192:	af 2e       	mov	r10, r31
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	bf 2e       	mov	r11, r31
     198:	f0 2d       	mov	r31, r0
     19a:	0f 2e       	mov	r0, r31
     19c:	f5 e0       	ldi	r31, 0x05	; 5
     19e:	cf 2e       	mov	r12, r31
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	df 2e       	mov	r13, r31
     1a4:	f0 2d       	mov	r31, r0
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     1a6:	02 e7       	ldi	r16, 0x72	; 114
     1a8:	11 e0       	ldi	r17, 0x01	; 1
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
					  k=0;
     1aa:	51 2c       	mov	r5, r1
     1ac:	75 2c       	mov	r7, r5
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     1ae:	99 24       	eor	r9, r9
     1b0:	93 94       	inc	r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     1b2:	4a c0       	rjmp	.+148    	; 0x248 <ESPreadvalue+0xe6>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     1b4:	c9 01       	movw	r24, r18
     1b6:	d9 01       	movw	r26, r18
     1b8:	12 97       	sbiw	r26, 0x02	; 2
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     1ba:	4c 91       	ld	r20, X
     1bc:	41 30       	cpi	r20, 0x01	; 1
     1be:	11 f5       	brne	.+68     	; 0x204 <ESPreadvalue+0xa2>
     1c0:	66 32       	cpi	r22, 0x26	; 38
     1c2:	01 f1       	breq	.+64     	; 0x204 <ESPreadvalue+0xa2>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     1c4:	af 01       	movw	r20, r30
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     1c6:	60 80       	ld	r6, Z
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     1c8:	d9 01       	movw	r26, r18
     1ca:	14 97       	sbiw	r26, 0x04	; 4
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     1cc:	0d 90       	ld	r0, X+
     1ce:	bc 91       	ld	r27, X
     1d0:	a0 2d       	mov	r26, r0
     1d2:	a6 0d       	add	r26, r6
     1d4:	b1 1d       	adc	r27, r1
     1d6:	ac 91       	ld	r26, X
     1d8:	6a 13       	cpse	r22, r26
     1da:	0f c0       	rjmp	.+30     	; 0x1fa <ESPreadvalue+0x98>
			{
			  if(Esp_Commands_a[i].MatchCounter<Esp_Commands_a[i].ResposeLength )
     1dc:	d9 01       	movw	r26, r18
     1de:	4c 90       	ld	r4, X
     1e0:	64 14       	cp	r6, r4
     1e2:	10 f4       	brcc	.+4      	; 0x1e8 <ESPreadvalue+0x86>
			  {
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
     1e4:	63 94       	inc	r6
     1e6:	60 82       	st	Z, r6
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
     1e8:	da 01       	movw	r26, r20
     1ea:	4c 91       	ld	r20, X
     1ec:	dc 01       	movw	r26, r24
     1ee:	8c 91       	ld	r24, X
     1f0:	48 13       	cpse	r20, r24
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <ESPreadvalue+0xa2>
			  {

					  Datalog=1;
					  k=0;
     1f4:	87 2c       	mov	r8, r7
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     1f6:	79 2d       	mov	r23, r9
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <ESPreadvalue+0xa2>
					  k=0;
			  }
			}
			else if(Esp_Commands_a[i].MatchCounter<(Esp_Commands_a[i].ResposeLength))
     1fa:	d9 01       	movw	r26, r18
     1fc:	8c 91       	ld	r24, X
     1fe:	68 16       	cp	r6, r24
     200:	08 f4       	brcc	.+2      	; 0x204 <ESPreadvalue+0xa2>
			{
				Esp_Commands_a[i].MatchCounter=0;
     202:	10 82       	st	Z, r1
     204:	27 5f       	subi	r18, 0xF7	; 247
     206:	3f 4f       	sbci	r19, 0xFF	; 255
     208:	39 96       	adiw	r30, 0x09	; 9
	{
		unsigned char *reg;
		uint8_t i;
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     20a:	20 17       	cp	r18, r16
     20c:	31 07       	cpc	r19, r17
     20e:	91 f6       	brne	.-92     	; 0x1b4 <ESPreadvalue+0x52>
     210:	70 93 59 03 	sts	0x0359, r23	; 0x800359 <Datalog.1773>
     214:	80 92 5a 03 	sts	0x035A, r8	; 0x80035a <k.1774>
				//k=0;
			}
			
		}
	}
	if(Datalog==1)
     218:	71 30       	cpi	r23, 0x01	; 1
     21a:	b1 f4       	brne	.+44     	; 0x248 <ESPreadvalue+0xe6>
	{
		if(data!='&'){
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	86 32       	cpi	r24, 0x26	; 38
     220:	09 f1       	breq	.+66     	; 0x264 <ESPreadvalue+0x102>
		EspDataBuffer[k]=data;
     222:	e8 2d       	mov	r30, r8
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	e5 5a       	subi	r30, 0xA5	; 165
     228:	fc 4f       	sbci	r31, 0xFC	; 252
     22a:	80 83       	st	Z, r24
		k++;
     22c:	98 2d       	mov	r25, r8
     22e:	9f 5f       	subi	r25, 0xFF	; 255
     230:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <k.1774>
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     234:	9c 31       	cpi	r25, 0x1C	; 28
     236:	11 f0       	breq	.+4      	; 0x23c <ESPreadvalue+0xda>
     238:	8a 30       	cpi	r24, 0x0A	; 10
     23a:	31 f4       	brne	.+12     	; 0x248 <ESPreadvalue+0xe6>
		{
			Datalog=0;
     23c:	50 92 59 03 	sts	0x0359, r5	; 0x800359 <Datalog.1773>
			k=0;
     240:	50 92 5a 03 	sts	0x035A, r5	; 0x80035a <k.1774>
			datagot=1;
     244:	90 92 7a 03 	sts	0x037A, r9	; 0x80037a <datagot>
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     248:	ce 01       	movw	r24, r28
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	f7 01       	movw	r30, r14
     24e:	09 95       	icall
     250:	81 11       	cpse	r24, r1
     252:	0c c0       	rjmp	.+24     	; 0x26c <ESPreadvalue+0x10a>
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	70 91 59 03 	lds	r23, 0x0359	; 0x800359 <Datalog.1773>
     25a:	80 90 5a 03 	lds	r8, 0x035A	; 0x80035a <k.1774>
     25e:	95 01       	movw	r18, r10
     260:	f6 01       	movw	r30, r12
     262:	a8 cf       	rjmp	.-176    	; 0x1b4 <ESPreadvalue+0x52>
		if(data!='&'){
		EspDataBuffer[k]=data;
		k++;
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     264:	fc e1       	ldi	r31, 0x1C	; 28
     266:	8f 12       	cpse	r8, r31
     268:	ef cf       	rjmp	.-34     	; 0x248 <ESPreadvalue+0xe6>
     26a:	e8 cf       	rjmp	.-48     	; 0x23c <ESPreadvalue+0xda>
			//Esp_Commands_a[Wait_Command].MatchCounter=0;
		}
	}
	}
	return 0;
}
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	bf 90       	pop	r11
     284:	af 90       	pop	r10
     286:	9f 90       	pop	r9
     288:	8f 90       	pop	r8
     28a:	7f 90       	pop	r7
     28c:	6f 90       	pop	r6
     28e:	5f 90       	pop	r5
     290:	4f 90       	pop	r4
     292:	08 95       	ret

00000294 <ESP_Init>:
    
	return ReturnValue;
}

void ESP_Init()
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	e6 e0       	ldi	r30, 0x06	; 6
     29a:	f1 e0       	ldi	r31, 0x01	; 1
	
    
	return ReturnValue;
}

void ESP_Init()
     29c:	82 e7       	ldi	r24, 0x72	; 114
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	ef 01       	movw	r28, r30
     2a2:	24 97       	sbiw	r28, 0x04	; 4
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
     2a4:	a8 81       	ld	r26, Y
     2a6:	b9 81       	ldd	r27, Y+1	; 0x01
     2a8:	ed 01       	movw	r28, r26
     2aa:	09 90       	ld	r0, Y+
     2ac:	00 20       	and	r0, r0
     2ae:	e9 f7       	brne	.-6      	; 0x2aa <ESP_Init+0x16>
     2b0:	21 97       	sbiw	r28, 0x01	; 1
     2b2:	ca 1b       	sub	r28, r26
     2b4:	db 0b       	sbc	r29, r27
     2b6:	c0 83       	st	Z, r28
     2b8:	39 96       	adiw	r30, 0x09	; 9
	return ReturnValue;
}

void ESP_Init()
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     2ba:	e8 17       	cp	r30, r24
     2bc:	f9 07       	cpc	r31, r25
     2be:	81 f7       	brne	.-32     	; 0x2a0 <ESP_Init+0xc>
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
        
	}
	
	Esp_Commands_a[Disconnect_Command].state=1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Esp_Commands_a+0x5e>
    Esp_Commands_a[Connection_Wait].state=1;
     2c6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <Esp_Commands_a+0xd>
	Esp_Commands_a[Uart_command].state=1;
     2ca:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <Esp_Commands_a+0x67>
	
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <CipSend>:

ESPRetVal CipSend(void)
{
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	00 d0       	rcall	.+0      	; 0x2dc <CipSend+0x8>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <CipSend+0xa>
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
  ESPRetVal ReturnValue=ESP_CmdSndBusy;
      char Val[4];
	  Val[0]=(char)PortSel;
     2e2:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <PortSel>
     2e6:	89 83       	std	Y+1, r24	; 0x01
	  Val[1]='\0';
     2e8:	1a 82       	std	Y+2, r1	; 0x02
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
     2ea:	ce 01       	movw	r24, r28
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
	  RTE_WriteBufferUart(",");
     2f2:	84 ea       	ldi	r24, 0xA4	; 164
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
     2fa:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <EspDataCount>
     2fe:	30 91 80 03 	lds	r19, 0x0380	; 0x800380 <EspDataCount+0x1>
     302:	e2 2f       	mov	r30, r18
}

static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
     304:	49 e2       	ldi	r20, 0x29	; 41
     306:	24 9f       	mul	r18, r20
     308:	41 2d       	mov	r20, r1
     30a:	11 24       	eor	r1, r1
     30c:	42 95       	swap	r20
     30e:	4f 70       	andi	r20, 0x0F	; 15
	T=(num - (H*100))/10;
     310:	1c e9       	ldi	r17, 0x9C	; 156
     312:	14 03       	mulsu	r17, r20
     314:	c0 01       	movw	r24, r0
     316:	11 24       	eor	r1, r1
     318:	82 0f       	add	r24, r18
     31a:	91 1d       	adc	r25, r1
     31c:	6a e0       	ldi	r22, 0x0A	; 10
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__divmodhi4>
	O=(num - (H*100) - (T*10));

	Ustring[0]=(H+48);
     324:	84 2f       	mov	r24, r20
     326:	80 5d       	subi	r24, 0xD0	; 208
     328:	89 83       	std	Y+1, r24	; 0x01
	Ustring[1]=(T+48);
     32a:	86 2f       	mov	r24, r22
     32c:	80 5d       	subi	r24, 0xD0	; 208
     32e:	8a 83       	std	Y+2, r24	; 0x02
static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
     330:	e0 5d       	subi	r30, 0xD0	; 208
     332:	41 9f       	mul	r20, r17
     334:	e0 0d       	add	r30, r0
     336:	11 24       	eor	r1, r1
     338:	66 0f       	add	r22, r22
     33a:	96 2f       	mov	r25, r22
     33c:	99 0f       	add	r25, r25
     33e:	99 0f       	add	r25, r25
     340:	69 0f       	add	r22, r25

	Ustring[0]=(H+48);
	Ustring[1]=(T+48);
	Ustring[2]=(O+48);
     342:	e6 1b       	sub	r30, r22
     344:	eb 83       	std	Y+3, r30	; 0x03
	  Val[1]='\0';
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
	  RTE_WriteBufferUart(",");
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
	  Val[3]='\0';
     346:	1c 82       	std	Y+4, r1	; 0x04
	  if(EspDataCount<10)
     348:	2a 30       	cpi	r18, 0x0A	; 10
     34a:	31 05       	cpc	r19, r1
     34c:	1c f4       	brge	.+6      	; 0x354 <CipSend+0x80>
	  {
		  Val[0]=Val[2];
     34e:	e9 83       	std	Y+1, r30	; 0x01
		  Val[1]='\0';		  
     350:	1a 82       	std	Y+2, r1	; 0x02
     352:	06 c0       	rjmp	.+12     	; 0x360 <CipSend+0x8c>
	  }
	  else if(EspDataCount<100)
     354:	24 36       	cpi	r18, 0x64	; 100
     356:	31 05       	cpc	r19, r1
     358:	1c f4       	brge	.+6      	; 0x360 <CipSend+0x8c>
	  {
		  Val[0]=Val[1]; 
     35a:	89 83       	std	Y+1, r24	; 0x01
		  Val[1]=Val[2]; 
     35c:	ea 83       	std	Y+2, r30	; 0x02
		  Val[2]='\0'; 
     35e:	1b 82       	std	Y+3, r1	; 0x03
	  }
	  RTE_WriteBufferUart(Val);//uart_char(Recieved[0]);
     360:	ce 01       	movw	r24, r28
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
	  //uart_char(Recieved[1]); 
	  RTE_WriteBufferUart("\r\n");//uart_string("\r\n");
     368:	86 ea       	ldi	r24, 0xA6	; 166
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>

}
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	08 95       	ret

00000380 <WifiDisconnectCheck>:

ESPRetVal WifiDisconnectCheck()
{
		if(Esp_Commands_a[Disconnect_Command].MatchCounter==Esp_Commands_a[Disconnect_Command].ResposeLength)
     380:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Esp_Commands_a+0x5f>
     384:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <Esp_Commands_a+0x60>
     388:	98 13       	cpse	r25, r24
     38a:	04 c0       	rjmp	.+8      	; 0x394 <WifiDisconnectCheck+0x14>
		{
			//Esp_Commands_a[Connection_Wait].MatchCounter=0;
			Esp_Commands_a[Disconnect_Command].MatchCounter=0;
     38c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <Esp_Commands_a+0x5f>
			return ESP_CmdSndOK;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret
		}
	return ESP_CmdSNDFailed;
     394:	82 e0       	ldi	r24, 0x02	; 2
}
     396:	08 95       	ret

00000398 <EspGlobalCounter>:
return FuncRet;
}
uint16_t EspGlobalCounter(uint8_t state)
{
	
	if(state==1)
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	29 f4       	brne	.+10     	; 0x3a6 <EspGlobalCounter+0xe>
	{
	  	counter1=0;
     39c:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <counter1+0x1>
     3a0:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <counter1>
     3a4:	0b c0       	rjmp	.+22     	; 0x3bc <EspGlobalCounter+0x24>
	}
	else if(state==2)
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	49 f4       	brne	.+18     	; 0x3bc <EspGlobalCounter+0x24>
	{
		counter1++;
     3aa:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <counter1>
     3ae:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <counter1+0x1>
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <counter1+0x1>
     3b8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <counter1>
	}

return	counter1;
}
     3bc:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <counter1>
     3c0:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <counter1+0x1>
     3c4:	08 95       	ret

000003c6 <CommandSend>:
	}
	return 0;
}

ESPRetVal CommandSend(ESP_CommandIndex Index)
{
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	c8 2f       	mov	r28, r24
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
	if(ConnectionFlag==0)
     3d0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <ConnectionFlag.1785>
     3d4:	81 11       	cpse	r24, r1
     3d6:	27 c0       	rjmp	.+78     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		RTE_WriteBufferUart(Esp_Commands_a[Index].ustring);//uart_string(Esp_Commands_a[Index].ustring);
     3d8:	0c 2f       	mov	r16, r28
     3da:	10 e0       	ldi	r17, 0x00	; 0
     3dc:	f8 01       	movw	r30, r16
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	e0 0f       	add	r30, r16
     3ec:	f1 1f       	adc	r31, r17
     3ee:	e0 50       	subi	r30, 0x00	; 0
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
		if(Index==Send_Command)
     3fa:	c7 30       	cpi	r28, 0x07	; 7
     3fc:	11 f4       	brne	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			(void)CipSend();
     3fe:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CipSend>
		}
		Esp_Commands_a[Index].state=1;
     402:	f8 01       	movw	r30, r16
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	0e 0f       	add	r16, r30
     412:	1f 1f       	adc	r17, r31
     414:	f8 01       	movw	r30, r16
     416:	e0 50       	subi	r30, 0x00	; 0
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	84 83       	std	Z+4, r24	; 0x04
		ConnectionFlag=1;
     41e:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <ConnectionFlag.1785>
		EspGlobalCounter(1);
     422:	0e 94 cc 01 	call	0x398	; 0x398 <EspGlobalCounter>
	}
	if((Esp_Commands_a[Index].MatchCounter)==Esp_Commands_a[Index].ResposeLength)
     426:	d0 e0       	ldi	r29, 0x00	; 0
     428:	fe 01       	movw	r30, r28
     42a:	ee 0f       	add	r30, r30
     42c:	ff 1f       	adc	r31, r31
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ec 0f       	add	r30, r28
     438:	fd 1f       	adc	r31, r29
     43a:	e0 50       	subi	r30, 0x00	; 0
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	95 81       	ldd	r25, Z+5	; 0x05
     440:	86 81       	ldd	r24, Z+6	; 0x06
     442:	98 13       	cpse	r25, r24
     444:	11 c0       	rjmp	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		Esp_Commands_a[Index].state=0;
     446:	fe 01       	movw	r30, r28
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ec 0f       	add	r30, r28
     456:	fd 1f       	adc	r31, r29
     458:	e0 50       	subi	r30, 0x00	; 0
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	14 82       	std	Z+4, r1	; 0x04
		Esp_Commands_a[Index].MatchCounter=0;
     45e:	15 82       	std	Z+5, r1	; 0x05
		ConnectionFlag=0;
     460:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <ConnectionFlag.1785>
		ReturnValue=ESP_CmdSndOK;
     464:	10 e0       	ldi	r17, 0x00	; 0
     466:	01 c0       	rjmp	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
ESPRetVal CommandSend(ESP_CommandIndex Index)
{
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
     468:	11 e0       	ldi	r17, 0x01	; 1
		Esp_Commands_a[Index].state=0;
		Esp_Commands_a[Index].MatchCounter=0;
		ConnectionFlag=0;
		ReturnValue=ESP_CmdSndOK;
	}
	counter=EspGlobalCounter(2);
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	0e 94 cc 01 	call	0x398	; 0x398 <EspGlobalCounter>
	
	if(counter>Esp_Commands_a[Index].WaitTime)
     470:	fe 01       	movw	r30, r28
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	ec 0f       	add	r30, r28
     480:	fd 1f       	adc	r31, r29
     482:	e0 50       	subi	r30, 0x00	; 0
     484:	ff 4f       	sbci	r31, 0xFF	; 255
     486:	27 81       	ldd	r18, Z+7	; 0x07
     488:	30 85       	ldd	r19, Z+8	; 0x08
     48a:	28 17       	cp	r18, r24
     48c:	39 07       	cpc	r19, r25
     48e:	60 f4       	brcc	.+24     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{
	  Esp_Commands_a[Index].state=0;
     490:	14 82       	std	Z+4, r1	; 0x04
	  Esp_Commands_a[Index].MatchCounter=0;
     492:	15 82       	std	Z+5, r1	; 0x05
	  counter1=0;
     494:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <counter1+0x1>
     498:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <counter1>
	  ConnectionFlag=0;
     49c:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <ConnectionFlag.1785>
	  EspGlobalCounter(1);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 cc 01 	call	0x398	; 0x398 <EspGlobalCounter>
	  ReturnValue=ESP_CmdSNDFailed;
     4a6:	12 e0       	ldi	r17, 0x02	; 2
	  
	}
	
    
	return ReturnValue;
}
     4a8:	81 2f       	mov	r24, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <ESPAsServer>:
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
  if(flag==0)
     4b4:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <flag.1806>
     4b8:	81 11       	cpse	r24, r1
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <ESPAsServer+0x14>
  {
	index=Server_Command;
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <index.1805>
	flag=1;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <flag.1806>
  }
  
	  ReturnValue=CommandSend(index);
     4c8:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <index.1805>
     4cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CommandSend>
	  if(ReturnValue==ESP_CmdSndOK)
     4d0:	81 11       	cpse	r24, r1
     4d2:	0b c0       	rjmp	.+22     	; 0x4ea <ESPAsServer+0x36>
	  {
		  index=index+1;
     4d4:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <index.1805>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <index.1805>
		    if(index==Wait_Command)
     4de:	86 30       	cpi	r24, 0x06	; 6
     4e0:	89 f5       	brne	.+98     	; 0x544 <ESPAsServer+0x90>
		    {
			    FuncRet= ESP_CmdSndOK;
				flag=0;
     4e2:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <flag.1806>
	  if(ReturnValue==ESP_CmdSndOK)
	  {
		  index=index+1;
		    if(index==Wait_Command)
		    {
			    FuncRet= ESP_CmdSndOK;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret
				flag=0;
		    }
	  }
	 else if(ReturnValue==ESP_CmdSNDFailed)
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	69 f5       	brne	.+90     	; 0x548 <ESPAsServer+0x94>
	  {
		   if(RetryCounts>4)
     4ee:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <RetryCounts.1807>
     4f2:	85 30       	cpi	r24, 0x05	; 5
     4f4:	00 f1       	brcs	.+64     	; 0x536 <ESPAsServer+0x82>
		   {
			   if(index==Mode_Command)
     4f6:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <index.1805>
     4fa:	22 30       	cpi	r18, 0x02	; 2
     4fc:	31 f4       	brne	.+12     	; 0x50a <ESPAsServer+0x56>
			   {
				   RetryCounts=0;
     4fe:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <RetryCounts.1807>
				   FuncRet= ESP_CmdSNDFailed;
				   flag=0;
     502:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <flag.1806>
		   if(RetryCounts>4)
		   {
			   if(index==Mode_Command)
			   {
				   RetryCounts=0;
				   FuncRet= ESP_CmdSNDFailed;
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	17 c0       	rjmp	.+46     	; 0x538 <ESPAsServer+0x84>
				   flag=0;
			   }
			   else
			   {
				   
				   Esp_Commands_a[index].state=0;
     50a:	e2 2f       	mov	r30, r18
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	cf 01       	movw	r24, r30
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	e8 0f       	add	r30, r24
     51e:	f9 1f       	adc	r31, r25
     520:	e0 50       	subi	r30, 0x00	; 0
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	14 82       	std	Z+4, r1	; 0x04
				   Esp_Commands_a[index].MatchCounter=0;
     526:	15 82       	std	Z+5, r1	; 0x05
				   index=index-1;
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <index.1805>
				   RetryCounts=0;
     52e:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <RetryCounts.1807>
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <ESPAsServer+0x84>
     536:	81 e0       	ldi	r24, 0x01	; 1
				   Esp_Commands_a[index].MatchCounter=0;
				   index=index-1;
				   RetryCounts=0;
			   }
		   }
		  RetryCounts++;
     538:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <RetryCounts.1807>
     53c:	9f 5f       	subi	r25, 0xFF	; 255
     53e:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <RetryCounts.1807>
     542:	08 95       	ret
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
     548:	81 e0       	ldi	r24, 0x01	; 1
	  



  return FuncRet;
}
     54a:	08 95       	ret

0000054c <findpos>:
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     54c:	fc 01       	movw	r30, r24
     54e:	e6 0f       	add	r30, r22
     550:	f1 1d       	adc	r31, r1
     552:	20 81       	ld	r18, Z
     554:	22 23       	and	r18, r18
     556:	89 f0       	breq	.+34     	; 0x57a <findpos+0x2e>
	{
		if(ustring[pos]==sub)
     558:	24 13       	cpse	r18, r20
     55a:	06 c0       	rjmp	.+12     	; 0x568 <findpos+0x1c>
     55c:	02 c0       	rjmp	.+4      	; 0x562 <findpos+0x16>
     55e:	24 13       	cpse	r18, r20
     560:	03 c0       	rjmp	.+6      	; 0x568 <findpos+0x1c>
		{
			return pos+1;
     562:	86 2f       	mov	r24, r22
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	08 95       	ret
		}
		pos++;
     568:	6f 5f       	subi	r22, 0xFF	; 255
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     56a:	fc 01       	movw	r30, r24
     56c:	e6 0f       	add	r30, r22
     56e:	f1 1d       	adc	r31, r1
     570:	20 81       	ld	r18, Z
     572:	21 11       	cpse	r18, r1
     574:	f4 cf       	rjmp	.-24     	; 0x55e <findpos+0x12>
		{
			return pos+1;
		}
		pos++;
	}
	return 0;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	08 95       	ret
     57a:	80 e0       	ldi	r24, 0x00	; 0
}
     57c:	08 95       	ret

0000057e <PortCopy>:

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     57e:	42 17       	cp	r20, r18
     580:	70 f4       	brcc	.+28     	; 0x59e <PortCopy+0x20>
     582:	fb 01       	movw	r30, r22
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     584:	30 e0       	ldi	r19, 0x00	; 0
	while(start<end && pos<4 )
	{
		copy[pos]=ustring[start];
     586:	dc 01       	movw	r26, r24
     588:	a4 0f       	add	r26, r20
     58a:	b1 1d       	adc	r27, r1
     58c:	5c 91       	ld	r21, X
     58e:	51 93       	st	Z+, r21
		pos++;
     590:	3f 5f       	subi	r19, 0xFF	; 255
		start++;
     592:	4f 5f       	subi	r20, 0xFF	; 255
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     594:	42 17       	cp	r20, r18
     596:	20 f4       	brcc	.+8      	; 0x5a0 <PortCopy+0x22>
     598:	34 30       	cpi	r19, 0x04	; 4
     59a:	a9 f7       	brne	.-22     	; 0x586 <PortCopy+0x8>
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <PortCopy+0x22>
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     59e:	30 e0       	ldi	r19, 0x00	; 0
	{
		copy[pos]=ustring[start];
		pos++;
		start++;
	}
	copy[pos]=ustring[start];
     5a0:	fc 01       	movw	r30, r24
     5a2:	e4 0f       	add	r30, r20
     5a4:	f1 1d       	adc	r31, r1
     5a6:	80 81       	ld	r24, Z
     5a8:	fb 01       	movw	r30, r22
     5aa:	e3 0f       	add	r30, r19
     5ac:	f1 1d       	adc	r31, r1
     5ae:	80 83       	st	Z, r24
	PortLen=pos;
     5b0:	30 93 96 03 	sts	0x0396, r19	; 0x800396 <PortLen>
     5b4:	08 95       	ret

000005b6 <SendData>:
	
}

ESPRetVal SendData(uint8_t count)
{
	EspDataCount=count;
     5b6:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <EspDataCount>
     5ba:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <EspDataCount+0x1>
	return CommandSend(Send_Command);
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CommandSend>
}
     5c4:	08 95       	ret

000005c6 <ConnectCommand>:


ESPRetVal ConnectCommand()
{
	//uart_num(Esp_Commands_a[Connection_Wait].MatchCounter);
	if(Esp_Commands_a[Connection_Wait].MatchCounter==Esp_Commands_a[Connection_Wait].ResposeLength)
     5c6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Esp_Commands_a+0xe>
     5ca:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Esp_Commands_a+0xf>
     5ce:	98 13       	cpse	r25, r24
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <ConnectCommand+0x14>
	{
		//uart_string("wifi connected");
		Esp_Commands_a[Connection_Wait].MatchCounter=0;
     5d2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Esp_Commands_a+0xe>
		//Esp_Commands_a[Disconnect_Command].MatchCounter=0;
		return ESP_CmdSndOK;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
	}
	return ESP_CmdSNDFailed;
     5da:	82 e0       	ldi	r24, 0x02	; 2
}
     5dc:	08 95       	ret

000005de <CheckInput>:
uint8_t CheckInput()
{
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	//uart_string(EspDataBuffer);
	if(datagot==1)
     5e6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <datagot>
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <CheckInput+0x12>
     5ee:	48 c0       	rjmp	.+144    	; 0x680 <CheckInput+0xa2>
	{
		//if(Esp_Commands_a[Wait_Command].MatchCounter==Esp_Commands_a[Wait_Command].ResposeLength)
		//{ 
			Esp_Commands_a[Wait_Command].state=1;
     5f0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <Esp_Commands_a+0x3a>
			Esp_Commands_a[Wait_Command].MatchCounter=0;	
     5f4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <Esp_Commands_a+0x3b>
			PortStart=findpos(EspDataBuffer,0,',');
     5f8:	4c e2       	ldi	r20, 0x2C	; 44
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	8b e5       	ldi	r24, 0x5B	; 91
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	0e 94 a6 02 	call	0x54c	; 0x54c <findpos>
     604:	c8 2f       	mov	r28, r24
			PortEnd=findpos(EspDataBuffer,PortStart,',');
     606:	4c e2       	ldi	r20, 0x2C	; 44
     608:	68 2f       	mov	r22, r24
     60a:	8b e5       	ldi	r24, 0x5B	; 91
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 a6 02 	call	0x54c	; 0x54c <findpos>
     612:	08 2f       	mov	r16, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortStart,PortEnd);
     614:	28 2f       	mov	r18, r24
     616:	4c 2f       	mov	r20, r28
     618:	67 e8       	ldi	r22, 0x87	; 135
     61a:	73 e0       	ldi	r23, 0x03	; 3
     61c:	8b e5       	ldi	r24, 0x5B	; 91
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 bf 02 	call	0x57e	; 0x57e <PortCopy>
			PortSel=EspPortBuffer[0];
     624:	c7 e8       	ldi	r28, 0x87	; 135
     626:	d3 e0       	ldi	r29, 0x03	; 3
     628:	88 81       	ld	r24, Y
     62a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <PortSel>
			PortStart=findpos(EspDataBuffer,PortEnd,':');
     62e:	4a e3       	ldi	r20, 0x3A	; 58
     630:	60 2f       	mov	r22, r16
     632:	8b e5       	ldi	r24, 0x5B	; 91
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	0e 94 a6 02 	call	0x54c	; 0x54c <findpos>
     63a:	18 2f       	mov	r17, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     63c:	28 2f       	mov	r18, r24
     63e:	40 2f       	mov	r20, r16
     640:	be 01       	movw	r22, r28
     642:	8b e5       	ldi	r24, 0x5B	; 91
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	0e 94 bf 02 	call	0x57e	; 0x57e <PortCopy>
			Recieved[0]=EspPortBuffer[0];
     64a:	c8 81       	ld	r28, Y
     64c:	c0 93 99 03 	sts	0x0399, r28	; 0x800399 <Recieved>
			Recieved[1]=EspPortBuffer[1];
     650:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <EspPortBuffer+0x1>
     654:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <Recieved+0x1>
			uint8_t initial ;
			initial=(uint8_t )EspPortBuffer[0];
			PortEnd=PortStart;
     658:	10 93 98 03 	sts	0x0398, r17	; 0x800398 <PortEnd>
			PortStart=PortStart+(uint8_t )EspPortBuffer[0];
     65c:	c1 0f       	add	r28, r17
     65e:	c0 93 97 03 	sts	0x0397, r28	; 0x800397 <PortStart>
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     662:	2c 2f       	mov	r18, r28
     664:	41 2f       	mov	r20, r17
     666:	67 e8       	ldi	r22, 0x87	; 135
     668:	73 e0       	ldi	r23, 0x03	; 3
     66a:	8b e5       	ldi	r24, 0x5B	; 91
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0e 94 bf 02 	call	0x57e	; 0x57e <PortCopy>
			for( posi=PortEnd;posi<PortStart;posi++)
			{
				Recieved[posi]=EspDataBuffer[posi];
				
			}*/
			EspPortBuffer[PortStart-2]='\0';
     672:	ec 2f       	mov	r30, r28
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	eb 57       	subi	r30, 0x7B	; 123
     678:	fc 4f       	sbci	r31, 0xFC	; 252
     67a:	10 82       	st	Z, r1
			//RTE_WriteBufferUart(EspPortBuffer);//uart_string(EspPortBuffer);
			//RTE_WriteBufferUart(EspDataBuffer);
			
		//}
		//uart_string(EspDataBuffer);
		datagot=0;
     67c:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <datagot>
	}
	if(Esp_Commands_a[Uart_command].MatchCounter==Esp_Commands_a[Uart_command].ResposeLength)
     680:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <Esp_Commands_a+0x68>
     684:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Esp_Commands_a+0x69>
     688:	98 13       	cpse	r25, r24
     68a:	03 c0       	rjmp	.+6      	; 0x692 <CheckInput+0xb4>
	{
		//uart_string("uart debug mode enabled");
		UartEvents=0x01;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <UartEvents>
	}
	
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <RequestWait>:
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
	  static ESPRetVal ReturnValue=ESP_CmdSndBusy;
	  if(FlagReq==0)
     69c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <FlagReq.1813>
     6a0:	81 11       	cpse	r24, r1
     6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <RequestWait+0x18>
	  {
		    indexReq=Wait_Command;
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <indexReq.1812>
		    FlagReq=1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <FlagReq.1813>
	        BUFFEREnable=1;
     6b0:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <BUFFEREnable>
			 
			
	  }

 
	  	  if(ReturnValue!=ESP_CmdSndOK )
     6b4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ReturnValue.1816>
     6b8:	88 23       	and	r24, r24
     6ba:	39 f0       	breq	.+14     	; 0x6ca <RequestWait+0x2e>
	  	  { 
				ReturnValue=CommandSend(Wait_Command);
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CommandSend>
     6c2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ReturnValue.1816>
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	08 95       	ret
				ReturnValue=CommandSend(Wait_Command);

		  }
		  else
		  {
					if(datagot==1)
     6ca:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <datagot>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	59 f4       	brne	.+22     	; 0x6e8 <RequestWait+0x4c>
					{
						FlagReq=0;
     6d2:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <FlagReq.1813>
						BUFFEREnable=0;
     6d6:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <BUFFEREnable>
						CheckInput();
     6da:	0e 94 ef 02 	call	0x5de	; 0x5de <CheckInput>
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
						ReturnValue=ESP_CmdSndBusy;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ReturnValue.1816>
						FlagReq=0;
						BUFFEREnable=0;
						CheckInput();
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	08 95       	ret
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
					}		   
		  }

	  	  
return FuncRet;
}
     6ea:	08 95       	ret

000006ec <enable>:

uint8_t enable()
{
	
   return ESP_DataRead_a[0].Purpose;
}
     6ec:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <ESP_DataRead_a+0x2>
     6f0:	08 95       	ret

000006f2 <checkRecievedData>:

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     6f2:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <ESP_DataRead_a>
     6f6:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <ESP_DataRead_a+0x1>
     6fa:	87 e8       	ldi	r24, 0x87	; 135
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e 94 dd 15 	call	0x2bba	; 0x2bba <strcmp>
     702:	28 2f       	mov	r18, r24
     704:	39 2f       	mov	r19, r25
     706:	23 2b       	or	r18, r19
     708:	21 f4       	brne	.+8      	; 0x712 <checkRecievedData+0x20>
			{
				ESP_DataRead_a[i].Purpose=0;
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ESP_DataRead_a+0x2>
     710:	02 c0       	rjmp	.+4      	; 0x716 <checkRecievedData+0x24>
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
			{
				ESP_DataRead_a[i].Purpose=0;
     712:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <ESP_DataRead_a+0x2>

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     716:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <ESP_DataRead_a+0x3>
     71a:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <ESP_DataRead_a+0x4>
     71e:	87 e8       	ldi	r24, 0x87	; 135
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 dd 15 	call	0x2bba	; 0x2bba <strcmp>
     726:	28 2f       	mov	r18, r24
     728:	39 2f       	mov	r19, r25
     72a:	23 2b       	or	r18, r19
     72c:	19 f0       	breq	.+6      	; 0x734 <checkRecievedData+0x42>
			{
				ESP_DataRead_a[i].Purpose=0;
     72e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <ESP_DataRead_a+0x5>
     732:	08 95       	ret
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <ESP_DataRead_a+0x5>
     73a:	08 95       	ret

0000073c <ESPpop>:
}

uint8_t ESPpop(char *Bytex)
{
	static uint8_t PosByte;
	EspDataBuffer[30]='!';
     73c:	21 e2       	ldi	r18, 0x21	; 33
     73e:	20 93 79 03 	sts	0x0379, r18	; 0x800379 <EspDataBuffer+0x1e>
	*Bytex=EspDataBuffer[PosByte+7];
     742:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <PosByte.1879>
     746:	e2 2f       	mov	r30, r18
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e5 5a       	subi	r30, 0xA5	; 165
     74c:	fc 4f       	sbci	r31, 0xFC	; 252
     74e:	37 81       	ldd	r19, Z+7	; 0x07
     750:	fc 01       	movw	r30, r24
     752:	30 83       	st	Z, r19
	if(PosByte==23)
     754:	27 31       	cpi	r18, 0x17	; 23
     756:	21 f4       	brne	.+8      	; 0x760 <ESPpop+0x24>
	{
		PosByte=0;
     758:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <PosByte.1879>
		return 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret
	}
	else
	{
		PosByte++;
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <PosByte.1879>
	}
	return 0;
     766:	80 e0       	ldi	r24, 0x00	; 0
}
     768:	08 95       	ret

0000076a <ESPCallBack>:

void ESPCallBack(void *fillcallback)
{
	char* mediator;
	mediator=(char*)fillcallback;
	EspDataBuffer[28]=mediator[0];
     76a:	fc 01       	movw	r30, r24
     76c:	20 81       	ld	r18, Z
     76e:	20 93 77 03 	sts	0x0377, r18	; 0x800377 <EspDataBuffer+0x1c>
	EspDataBuffer[29]=mediator[1];
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <EspDataBuffer+0x1d>
     778:	08 95       	ret

0000077a <UartHandlerInit>:
	
}


void UartHandlerInit()
{
     77a:	08 95       	ret

0000077c <adc_init>:
 */ 
#include "ADC.h"
#include "..\BaseLayer\UART.h"
void adc_init(void){

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHzjkh
     77c:	ea e7       	ldi	r30, 0x7A	; 122
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	87 60       	ori	r24, 0x07	; 7
     784:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0)|(1 << REFS1); // Set ADC reference to 2.56 internal
     786:	ac e7       	ldi	r26, 0x7C	; 124
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	8c 91       	ld	r24, X
     78c:	80 6c       	ori	r24, 0xC0	; 192
     78e:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     790:	8c 91       	ld	r24, X
     792:	80 62       	ori	r24, 0x20	; 32
     794:	8c 93       	st	X, r24

	// No MUX values needed to be changed to use ADC0

	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	ADCSRA |= (1 << ADIE);	
     796:	80 81       	ld	r24, Z
     798:	88 60       	ori	r24, 0x08	; 8
     79a:	80 83       	st	Z, r24
     79c:	08 95       	ret

0000079e <adc_read>:
    //ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
}

void adc_read(unsigned char ch){
    ADCSRA |= (1 << ADEN);
     79e:	ea e7       	ldi	r30, 0x7A	; 122
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	90 81       	ld	r25, Z
     7a4:	90 68       	ori	r25, 0x80	; 128
     7a6:	90 83       	st	Z, r25
	ADMUX &= 0xF8; // clear bottom 3 bits
     7a8:	ac e7       	ldi	r26, 0x7C	; 124
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	9c 91       	ld	r25, X
     7ae:	98 7f       	andi	r25, 0xF8	; 248
     7b0:	9c 93       	st	X, r25
	ADMUX |= ch; // then set bottom 3 bits to channel n
     7b2:	9c 91       	ld	r25, X
     7b4:	89 2b       	or	r24, r25
     7b6:	8c 93       	st	X, r24

	//uart_num(ch);
	ADCSRA |= (1 << ADSC);//|(1<<ADEN);  // Start A2D Conversions
     7b8:	80 81       	ld	r24, Z
     7ba:	80 64       	ori	r24, 0x40	; 64
     7bc:	80 83       	st	Z, r24
     7be:	08 95       	ret

000007c0 <ADC_State>:
	
}

uint8_t ADC_State()
{	
	return bit_is_set(ADCSRA,ADSC);
     7c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
     7c4:	80 74       	andi	r24, 0x40	; 64
     7c6:	08 95       	ret

000007c8 <ADCValue>:
uint16_t ADCValue()
{
		uint8_t thelow=ADCL;
     7c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		uint16_t tenbit=ADCH<<2|thelow>>6;
     7cc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     7d0:	82 95       	swap	r24
     7d2:	86 95       	lsr	r24
     7d4:	86 95       	lsr	r24
     7d6:	83 70       	andi	r24, 0x03	; 3
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	22 0f       	add	r18, r18
     7dc:	33 1f       	adc	r19, r19
     7de:	22 0f       	add	r18, r18
     7e0:	33 1f       	adc	r19, r19
     7e2:	28 2b       	or	r18, r24
		//PORTD=tenbit;
		//uart_num(thelow);
		//uart_num(ADMUX&0x07);
		return(tenbit);

}
     7e4:	82 2f       	mov	r24, r18
     7e6:	93 2f       	mov	r25, r19
     7e8:	08 95       	ret

000007ea <__vector_21>:

ISR(ADC_vect)
{
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	8f 93       	push	r24
	uint8_t thelow=ADCL;
     7f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint16_t tenbit=ADCH<<2|thelow>>6;
     7fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	//PORTD=tenbit;
	
	
     7fe:	8f 91       	pop	r24
     800:	0f 90       	pop	r0
     802:	0f be       	out	0x3f, r0	; 63
     804:	0f 90       	pop	r0
     806:	1f 90       	pop	r1
     808:	18 95       	reti

0000080a <PushIntoCircularBuffer>:
 *  Author: Nikhil
 */ 
#include "CircularQueue.h"
#include "UART.h"
CbuffState_t PushIntoCircularBuffer(Cbuff_t* CircularBuffer,unsigned char data)
{
     80a:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
     80c:	92 81       	ldd	r25, Z+2	; 0x02
     80e:	89 2f       	mov	r24, r25
     810:	8f 5f       	subi	r24, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
     812:	24 81       	ldd	r18, Z+4	; 0x04
     814:	82 17       	cp	r24, r18
     816:	08 f0       	brcs	.+2      	; 0x81a <PushIntoCircularBuffer+0x10>
	{
		next=0;
     818:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
     81a:	23 81       	ldd	r18, Z+3	; 0x03
     81c:	28 17       	cp	r18, r24
     81e:	41 f0       	breq	.+16     	; 0x830 <PushIntoCircularBuffer+0x26>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
     820:	a0 81       	ld	r26, Z
     822:	b1 81       	ldd	r27, Z+1	; 0x01
     824:	a9 0f       	add	r26, r25
     826:	b1 1d       	adc	r27, r1
     828:	6c 93       	st	X, r22
		CircularBuffer->head=next;
     82a:	82 83       	std	Z+2, r24	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
     830:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
     832:	08 95       	ret

00000834 <PopFromCircularBuffer>:

CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
     834:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
     836:	83 81       	ldd	r24, Z+3	; 0x03
     838:	98 2f       	mov	r25, r24
     83a:	9f 5f       	subi	r25, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
     83c:	22 81       	ldd	r18, Z+2	; 0x02
     83e:	82 17       	cp	r24, r18
     840:	71 f0       	breq	.+28     	; 0x85e <PopFromCircularBuffer+0x2a>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
     842:	24 81       	ldd	r18, Z+4	; 0x04
     844:	92 17       	cp	r25, r18
     846:	08 f0       	brcs	.+2      	; 0x84a <PopFromCircularBuffer+0x16>
	{
		next=0;
     848:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
     84a:	a0 81       	ld	r26, Z
     84c:	b1 81       	ldd	r27, Z+1	; 0x01
     84e:	a8 0f       	add	r26, r24
     850:	b1 1d       	adc	r27, r1
     852:	8c 91       	ld	r24, X
     854:	db 01       	movw	r26, r22
     856:	8c 93       	st	X, r24
	 CircularBuffer->tail=next;
     858:	93 83       	std	Z+3, r25	; 0x03
	 
  return BuffOk;
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	08 95       	ret
CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
     85e:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	 CircularBuffer->tail=next;
	 
  return BuffOk;
}
     860:	08 95       	ret

00000862 <IsBuffempty>:

CbuffState_t IsBuffempty(Cbuff_t  *CircularBuffer)
{
     862:	fc 01       	movw	r30, r24
		if(CircularBuffer->tail==CircularBuffer->head)
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	23 81       	ldd	r18, Z+3	; 0x03
     868:	92 81       	ldd	r25, Z+2	; 0x02
     86a:	29 13       	cpse	r18, r25
     86c:	80 e0       	ldi	r24, 0x00	; 0
		{
			return BuffEmpty;
		}
	return BuffOk;
}
     86e:	08 95       	ret

00000870 <HeadTailDiff>:

uint8_t HeadTailDiff(Cbuff_t  *CircularBuffer,uint8_t dat)
{
     870:	fc 01       	movw	r30, r24
	if(CircularBuffer->tail>CircularBuffer->head)
     872:	93 81       	ldd	r25, Z+3	; 0x03
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	89 17       	cp	r24, r25
     878:	20 f4       	brcc	.+8      	; 0x882 <HeadTailDiff+0x12>
	{
		return ((CircularBuffer->MaxLen-CircularBuffer->tail)+CircularBuffer->head);
     87a:	24 81       	ldd	r18, Z+4	; 0x04
     87c:	82 0f       	add	r24, r18
     87e:	89 1b       	sub	r24, r25
     880:	08 95       	ret
	}
	else
	{
		return (CircularBuffer->head-CircularBuffer->tail);
     882:	89 1b       	sub	r24, r25
	}
     884:	08 95       	ret

00000886 <TriggerUltraSonic>:
	
}

static void TriggerUltraSonic(void)
{
	PinOutput(0,PIN_OUT8,D);
     886:	42 e0       	ldi	r20, 0x02	; 2
     888:	67 e0       	ldi	r22, 0x07	; 7
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     890:	00 c0       	rjmp	.+0      	; 0x892 <TriggerUltraSonic+0xc>
	_delay_us(2);
	PinOutput(1,PIN_OUT8,D);
     892:	42 e0       	ldi	r20, 0x02	; 2
     894:	67 e0       	ldi	r22, 0x07	; 7
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <TriggerUltraSonic+0x18>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <TriggerUltraSonic+0x1a>
     8a0:	00 00       	nop
	_delay_us(5);
	PinOutput(0,PIN_OUT8,D);
     8a2:	42 e0       	ldi	r20, 0x02	; 2
     8a4:	67 e0       	ldi	r22, 0x07	; 7
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
     8ac:	08 95       	ret

000008ae <changeIntLogic>:
}

void changeIntLogic(uint8_t logic)
{
	 
	if(logic==1)
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	31 f4       	brne	.+12     	; 0x8be <changeIntLogic+0x10>
	{
		//EICRA  |= (1 << ISC00)| (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     8b2:	e9 e6       	ldi	r30, 0x69	; 105
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	81 60       	ori	r24, 0x01	; 1
     8ba:	80 83       	st	Z, r24
     8bc:	08 95       	ret
	}
	else
	{
		//EICRA  &=~(1<<ISC00);
		//EICRA  |= (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     8be:	e9 e6       	ldi	r30, 0x69	; 105
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	81 60       	ori	r24, 0x01	; 1
     8c6:	80 83       	st	Z, r24
     8c8:	08 95       	ret

000008ca <__vector_1>:
	Start=0;
	Status=1;
}

ISR (INT0_vect)
{   
     8ca:	1f 92       	push	r1
     8cc:	0f 92       	push	r0
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	0f 92       	push	r0
     8d2:	11 24       	eor	r1, r1
     8d4:	2f 93       	push	r18
     8d6:	3f 93       	push	r19
     8d8:	4f 93       	push	r20
     8da:	5f 93       	push	r21
     8dc:	6f 93       	push	r22
     8de:	7f 93       	push	r23
     8e0:	8f 93       	push	r24
     8e2:	9f 93       	push	r25
     8e4:	af 93       	push	r26
     8e6:	bf 93       	push	r27
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
	//uart_string("nIKHIL");
	if(Start==0)
     8ec:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <Start>
     8f0:	81 11       	cpse	r24, r1
     8f2:	0a c0       	rjmp	.+20     	; 0x908 <__stack+0x9>
	{
		Timer2Enable();
     8f4:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer2Enable>
		changeIntLogic(0);
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 57 04 	call	0x8ae	; 0x8ae <changeIntLogic>
		Start=1; 
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <Start>
     906:	0b c0       	rjmp	.+22     	; 0x91e <__stack+0x1f>
		      
	}/* interrupt code here */
	else
	{   	
		Timer2Count();
     908:	0e 94 0a 07 	call	0xe14	; 0xe14 <Timer2Count>
		changeIntLogic(1);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 57 04 	call	0x8ae	; 0x8ae <changeIntLogic>
		Start=0;
     914:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <Start>
		Status=1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <Status>
		  
	}
	
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <ExtIntInit>:
#include "pinout.h"
#include "UART.h"
void ExtIntInit()
{
	
	changeIntLogic(1);//MCUCR |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 57 04 	call	0x8ae	; 0x8ae <changeIntLogic>
	EIMSK  |= (1 << INT0);      // Turns on INT0
     948:	e8 9a       	sbi	0x1d, 0	; 29
	Start=0;
     94a:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <Start>
	Status=1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <Status>
     954:	08 95       	ret

00000956 <InterfacePulse>:
		EICRA  |= (1 << ISC00);
	}
}

uint16_t InterfacePulse(uint16_t Pulse)
{
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
	static uint8_t timeout=0;
	uint8_t *Data=&Pulse;
    
	if(timeout>1)
     95c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timeout.1762>
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	60 f0       	brcs	.+24     	; 0x97c <InterfacePulse+0x26>
	{
		changeIntLogic(1);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 57 04 	call	0x8ae	; 0x8ae <changeIntLogic>
		TriggerUltraSonic();
     96a:	0e 94 43 04 	call	0x886	; 0x886 <TriggerUltraSonic>
		Status=0;
     96e:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <Status>
		Start=0;
     972:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <Start>
		timeout=0;
     976:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timeout.1762>
     97a:	3b c0       	rjmp	.+118    	; 0x9f2 <InterfacePulse+0x9c>
		//uart_num(timeout);
	}
	else
	{
		
			if(Status==1)
     97c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <Status>
     980:	91 30       	cpi	r25, 0x01	; 1
     982:	99 f5       	brne	.+102    	; 0x9ea <InterfacePulse+0x94>
			{
				//TriggerUltraSonic();
				TimerValue=TimerValue+(overflowfag*255);
     984:	20 91 b3 04 	lds	r18, 0x04B3	; 0x8004b3 <overflowfag>
     988:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <TimerValue>
     98c:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <TimerValue+0x1>
     990:	3f ef       	ldi	r19, 0xFF	; 255
     992:	23 9f       	mul	r18, r19
     994:	80 0d       	add	r24, r0
     996:	91 1d       	adc	r25, r1
     998:	11 24       	eor	r1, r1
     99a:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <TimerValue+0x1>
     99e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <TimerValue>
				TimerValue=(16*TimerValue)/58;// PRESCALER IS 256 so 1 count is 16us
     9a2:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <TimerValue>
     9a6:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <TimerValue+0x1>
     9aa:	22 95       	swap	r18
     9ac:	32 95       	swap	r19
     9ae:	30 7f       	andi	r19, 0xF0	; 240
     9b0:	32 27       	eor	r19, r18
     9b2:	20 7f       	andi	r18, 0xF0	; 240
     9b4:	32 27       	eor	r19, r18
     9b6:	af e9       	ldi	r26, 0x9F	; 159
     9b8:	b6 e4       	ldi	r27, 0x46	; 70
     9ba:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
     9be:	92 95       	swap	r25
     9c0:	82 95       	swap	r24
     9c2:	8f 70       	andi	r24, 0x0F	; 15
     9c4:	89 27       	eor	r24, r25
     9c6:	9f 70       	andi	r25, 0x0F	; 15
     9c8:	89 27       	eor	r24, r25
     9ca:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <TimerValue+0x1>
     9ce:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <TimerValue>
				Pulse=TimerValue;
     9d2:	c0 91 b1 04 	lds	r28, 0x04B1	; 0x8004b1 <TimerValue>
     9d6:	d0 91 b2 04 	lds	r29, 0x04B2	; 0x8004b2 <TimerValue+0x1>
				Pulse|=0X8000;
     9da:	d0 68       	ori	r29, 0x80	; 128
				timeout=0;
     9dc:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timeout.1762>
				Status=0;
     9e0:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <Status>
				TriggerUltraSonic();
     9e4:	0e 94 43 04 	call	0x886	; 0x886 <TriggerUltraSonic>
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <InterfacePulse+0x9c>
			}
			else
			{
				Pulse|=0x1000;
     9ea:	d0 61       	ori	r29, 0x10	; 16
				timeout++;
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timeout.1762>
			}

	}
	return Pulse;
}
     9f2:	8c 2f       	mov	r24, r28
     9f4:	9d 2f       	mov	r25, r29
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     9fc:	ec eb       	ldi	r30, 0xBC	; 188
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     a02:	94 ea       	ldi	r25, 0xA4	; 164
     a04:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a06:	90 81       	ld	r25, Z
     a08:	99 23       	and	r25, r25
     a0a:	ec f7       	brge	.-6      	; 0xa06 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     a0c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     a10:	98 7f       	andi	r25, 0xF8	; 248
     a12:	98 30       	cpi	r25, 0x08	; 8
     a14:	a1 f4       	brne	.+40     	; 0xa3e <i2c_start+0x42>
	//uart_string("hrrr");
	// load slave address into data register
	TWDR = address;
     a16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     a1a:	84 e8       	ldi	r24, 0x84	; 132
     a1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a20:	ec eb       	ldi	r30, 0xBC	; 188
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	88 23       	and	r24, r24
     a28:	ec f7       	brge	.-6      	; 0xa24 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     a2a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     a2e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     a30:	98 31       	cpi	r25, 0x18	; 24
     a32:	39 f0       	breq	.+14     	; 0xa42 <i2c_start+0x46>
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 34       	cpi	r25, 0x40	; 64
     a38:	29 f4       	brne	.+10     	; 0xa44 <i2c_start+0x48>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     a42:	80 e0       	ldi	r24, 0x00	; 0
}
     a44:	08 95       	ret

00000a46 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     a46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a4a:	84 e8       	ldi	r24, 0x84	; 132
     a4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a50:	ec eb       	ldi	r30, 0xBC	; 188
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	88 23       	and	r24, r24
     a58:	ec f7       	brge	.-6      	; 0xa54 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     a5a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     a5e:	98 7f       	andi	r25, 0xF8	; 248
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	98 32       	cpi	r25, 0x28	; 40
     a64:	09 f4       	brne	.+2      	; 0xa68 <i2c_write+0x22>
     a66:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     a68:	08 95       	ret

00000a6a <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a6a:	84 e9       	ldi	r24, 0x94	; 148
     a6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     a70:	08 95       	ret

00000a72 <ssd1306_char_font6x8>:
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	c8 2f       	mov	r28, r24
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
     a7a:	88 e7       	ldi	r24, 0x78	; 120
     a7c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <i2c_start>
     a80:	81 11       	cpse	r24, r1
     a82:	1b c0       	rjmp	.+54     	; 0xaba <ssd1306_char_font6x8+0x48>
	i2c_write(0x40);
     a84:	80 e4       	ldi	r24, 0x40	; 64
     a86:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
     a8a:	c0 52       	subi	r28, 0x20	; 32
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     a8c:	8c 2f       	mov	r24, r28
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	ec 01       	movw	r28, r24
     a92:	cc 0f       	add	r28, r28
     a94:	dd 1f       	adc	r29, r29
     a96:	8c 0f       	add	r24, r28
     a98:	9d 1f       	adc	r25, r29
     a9a:	ec 01       	movw	r28, r24
     a9c:	cc 0f       	add	r28, r28
     a9e:	dd 1f       	adc	r29, r29
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     aa0:	cd 51       	subi	r28, 0x1D	; 29
     aa2:	dd 4f       	sbci	r29, 0xFD	; 253
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
     aa4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     aa6:	89 91       	ld	r24, Y+
     aa8:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
     aac:	81 11       	cpse	r24, r1
     aae:	05 c0       	rjmp	.+10     	; 0xaba <ssd1306_char_font6x8+0x48>

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
     ab0:	1f 5f       	subi	r17, 0xFF	; 255
     ab2:	16 30       	cpi	r17, 0x06	; 6
     ab4:	c1 f7       	brne	.-16     	; 0xaa6 <ssd1306_char_font6x8+0x34>
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
     ab6:	0e 94 35 05 	call	0xa6a	; 0xa6a <i2c_stop>
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	08 95       	ret

00000ac2 <ssd1306_setpos>:
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
void ssd1306_setpos(uint8_t x, uint8_t y)
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	c8 2f       	mov	r28, r24
     ac8:	d6 2f       	mov	r29, r22
	if (i2c_start(0x78 | 0x00)) return 1;
     aca:	88 e7       	ldi	r24, 0x78	; 120
     acc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <i2c_start>
     ad0:	81 11       	cpse	r24, r1
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <ssd1306_setpos+0x36>
	i2c_write(0x00);
     ad4:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
	i2c_write(0xb0 + y);
     ad8:	8d 2f       	mov	r24, r29
     ada:	80 55       	subi	r24, 0x50	; 80
     adc:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
	i2c_write((x & 0x0f));
     ae0:	8c 2f       	mov	r24, r28
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
	i2c_write(((x & 0xf0) >> 4) | 0x10); // | 0x10
     ae8:	8c 2f       	mov	r24, r28
     aea:	82 95       	swap	r24
     aec:	8f 70       	andi	r24, 0x0F	; 15
     aee:	80 61       	ori	r24, 0x10	; 16
     af0:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
	/* TODO: Verify correctness */	 // | 0x01
	i2c_stop();
     af4:	0e 94 35 05 	call	0xa6a	; 0xa6a <i2c_stop>
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <ssd1306_String_font6x8>:
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
     b04:	86 2f       	mov	r24, r22
	ssd1306_setpos(x,y);
     b06:	64 2f       	mov	r22, r20
     b08:	0e 94 61 05 	call	0xac2	; 0xac2 <ssd1306_setpos>
	while ( *SSDstring)
     b0c:	88 81       	ld	r24, Y
     b0e:	88 23       	and	r24, r24
     b10:	31 f0       	breq	.+12     	; 0xb1e <ssd1306_String_font6x8+0x20>
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
     b12:	21 96       	adiw	r28, 0x01	; 1
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
	{
     ssd1306_char_font6x8(*SSDstring++);
     b14:	0e 94 39 05 	call	0xa72	; 0xa72 <ssd1306_char_font6x8>
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
     b18:	89 91       	ld	r24, Y+
     b1a:	81 11       	cpse	r24, r1
     b1c:	fb cf       	rjmp	.-10     	; 0xb14 <ssd1306_String_font6x8+0x16>
	{
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <ssd1306_Fill_Rectangle>:
		i2c_write(0x01);
	}
	i2c_stop();
}
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	d4 2f       	mov	r29, r20
		ssd1306_setpos(x,y);
     b2a:	0e 94 61 05 	call	0xac2	; 0xac2 <ssd1306_setpos>
		if (i2c_start(0x78 | 0x00)) return 1;
     b2e:	88 e7       	ldi	r24, 0x78	; 120
     b30:	0e 94 fe 04 	call	0x9fc	; 0x9fc <i2c_start>
     b34:	81 11       	cpse	r24, r1
     b36:	19 c0       	rjmp	.+50     	; 0xb6a <ssd1306_Fill_Rectangle+0x46>
		i2c_write(0x40);
     b38:	80 e4       	ldi	r24, 0x40	; 64
     b3a:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
		for(uint8_t i=0;i<data;i++)
     b3e:	d1 11       	cpse	r29, r1
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <ssd1306_Fill_Rectangle+0x22>
     b42:	cd 2f       	mov	r28, r29
     b44:	0a c0       	rjmp	.+20     	; 0xb5a <ssd1306_Fill_Rectangle+0x36>
     b46:	c0 e0       	ldi	r28, 0x00	; 0
		{
			i2c_write(0xff);
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
		ssd1306_setpos(x,y);
		if (i2c_start(0x78 | 0x00)) return 1;
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
     b4e:	cf 5f       	subi	r28, 0xFF	; 255
     b50:	cd 13       	cpse	r28, r29
     b52:	fa cf       	rjmp	.-12     	; 0xb48 <ssd1306_Fill_Rectangle+0x24>
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     b54:	df 37       	cpi	r29, 0x7F	; 127
     b56:	a8 f3       	brcs	.-22     	; 0xb42 <ssd1306_Fill_Rectangle+0x1e>
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <ssd1306_Fill_Rectangle+0x42>
		{
		  i2c_write(0x01);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 23 05 	call	0xa46	; 0xa46 <i2c_write>
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     b60:	cf 5f       	subi	r28, 0xFF	; 255
     b62:	cf 37       	cpi	r28, 0x7F	; 127
     b64:	d0 f3       	brcs	.-12     	; 0xb5a <ssd1306_Fill_Rectangle+0x36>
		{
		  i2c_write(0x01);
		}
		i2c_stop();
     b66:	0e 94 35 05 	call	0xa6a	; 0xa6a <i2c_stop>
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <SwitchNvmOff>:
	NVMState=0;
}

static void SwitchNvmOff()
{
	EECR &= ~(1<<EERIE);
     b70:	fb 98       	cbi	0x1f, 3	; 31
	NVMState=2;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <NVMState>
     b78:	08 95       	ret

00000b7a <__vector_22>:
uint8_t *message;
//EEPROM writing ISR
volatile uint8_t WriteSize;
static void SwitchNvmOff();
ISR(EE_READY_vect)
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	/*check if not end of string and address
	didn't reach end of EEPROM*/
	
	if(WriteorRead==0)
     b9c:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <WriteorRead>
     ba0:	81 11       	cpse	r24, r1
     ba2:	27 c0       	rjmp	.+78     	; 0xbf2 <__vector_22+0x78>
	{
		//uart_num(eepromaddress);
		//uart_string("\n");
	if (WriteSize!=0)
     ba4:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <WriteSize>
     ba8:	88 23       	and	r24, r24
     baa:	01 f1       	breq	.+64     	; 0xbec <__vector_22+0x72>
	{
		//loads address and increments for next load
		NVMState=1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <NVMState>
		EEAR=eepromaddress++;
     bb2:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <eepromaddress>
     bb6:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <eepromaddress+0x1>
     bba:	92 bd       	out	0x22, r25	; 34
     bbc:	81 bd       	out	0x21, r24	; 33
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <eepromaddress+0x1>
     bc4:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <eepromaddress>
		//loads current byte and increments index for next load
		WriteSize--;
     bc8:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <WriteSize>
     bcc:	81 50       	subi	r24, 0x01	; 1
     bce:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <WriteSize>
		EEDR=message[WriteSize];
     bd2:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <WriteSize>
     bd6:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <message>
     bda:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <message+0x1>
     bde:	e8 0f       	add	r30, r24
     be0:	f1 1d       	adc	r31, r1
     be2:	80 81       	ld	r24, Z
     be4:	80 bd       	out	0x20, r24	; 32
		//uart_num(message[WriteSize]);
		//master write enable
		EECR|=(1<<EEMPE);
     be6:	fa 9a       	sbi	0x1f, 2	; 31
		//strobe eeprom write
		EECR|=(1<<EEPE);
     be8:	f9 9a       	sbi	0x1f, 1	; 31
     bea:	44 c0       	rjmp	.+136    	; 0xc74 <__vector_22+0xfa>
	}
	else
	{
		//disable eeprom ready interrupt
		//uart_string("switch off");
		SwitchNvmOff();
     bec:	0e 94 b8 05 	call	0xb70	; 0xb70 <SwitchNvmOff>
     bf0:	41 c0       	rjmp	.+130    	; 0xc74 <__vector_22+0xfa>
    }
	}
	else
	{
	
	if(eepromaddress<=(eepromaddressCopy))
     bf2:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <eepromaddress>
     bf6:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <eepromaddress+0x1>
     bfa:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <eepromaddressCopy>
     bfe:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <eepromaddressCopy+0x1>
     c02:	82 17       	cp	r24, r18
     c04:	93 07       	cpc	r25, r19
     c06:	50 f1       	brcs	.+84     	; 0xc5c <__vector_22+0xe2>
	{
		NVMState=1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <NVMState>
		EEAR=eepromaddress++;
     c0e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <eepromaddress>
     c12:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <eepromaddress+0x1>
     c16:	92 bd       	out	0x22, r25	; 34
     c18:	81 bd       	out	0x21, r24	; 33
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <eepromaddress+0x1>
     c20:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <eepromaddress>
		EECR|=(1<<EERE);
     c24:	f8 9a       	sbi	0x1f, 0	; 31
		message[IndexNvmCount]=EEDR;
     c26:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <IndexNvmCount>
     c2a:	80 b5       	in	r24, 0x20	; 32
     c2c:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <message>
     c30:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <message+0x1>
     c34:	e9 0f       	add	r30, r25
     c36:	f1 1d       	adc	r31, r1
     c38:	80 83       	st	Z, r24
		uart_num(message[IndexNvmCount]);
     c3a:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <IndexNvmCount>
     c3e:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <message>
     c42:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <message+0x1>
     c46:	e8 0f       	add	r30, r24
     c48:	f1 1d       	adc	r31, r1
     c4a:	80 81       	ld	r24, Z
     c4c:	0e 94 90 07 	call	0xf20	; 0xf20 <uart_num>
		IndexNvmCount--;
     c50:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <IndexNvmCount>
     c54:	81 50       	subi	r24, 0x01	; 1
     c56:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <IndexNvmCount>
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <__vector_22+0xfa>
	}
		else
		{
			//disable eeprom ready interrupt
			uart_string("switch read");
     c5c:	89 ee       	ldi	r24, 0xE9	; 233
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 bd 07 	call	0xf7a	; 0xf7a <uart_string>
			SwitchNvmOff();
     c64:	0e 94 b8 05 	call	0xb70	; 0xb70 <SwitchNvmOff>
			IndexNvmCount=0;
     c68:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <IndexNvmCount>
			eepromaddressCopy=0;
     c6c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <eepromaddressCopy+0x1>
     c70:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <eepromaddressCopy>
			
		}
	}
}
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <PinOutConfig>:
//static Port PORTB_OUT;

void PinOutConfig(uint8_t State,Pin Pin_s,Ports Port_s)
{
   volatile uint8_t *Reg;
   Reg=portModeRegister(Port_s);
     c96:	e4 2f       	mov	r30, r20
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e2 59       	subi	r30, 0x92	; 146
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	25 91       	lpm	r18, Z+
     ca4:	34 91       	lpm	r19, Z
     ca6:	e2 2f       	mov	r30, r18
     ca8:	f3 2f       	mov	r31, r19
  if(State==1)
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	69 f4       	brne	.+26     	; 0xcc8 <PinOutConfig+0x32>
  {
	  
	  *Reg|=1<<Pin_s;
     cae:	20 81       	ld	r18, Z
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	ac 01       	movw	r20, r24
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <PinOutConfig+0x26>
     cb8:	44 0f       	add	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	6a 95       	dec	r22
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <PinOutConfig+0x22>
     cc0:	ba 01       	movw	r22, r20
     cc2:	62 2b       	or	r22, r18
     cc4:	60 83       	st	Z, r22
     cc6:	08 95       	ret
  }
  else 
  {
	  *Reg&=~(1<<Pin_s);
     cc8:	20 81       	ld	r18, Z
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	ac 01       	movw	r20, r24
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <PinOutConfig+0x40>
     cd2:	44 0f       	add	r20, r20
     cd4:	55 1f       	adc	r21, r21
     cd6:	6a 95       	dec	r22
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <PinOutConfig+0x3c>
     cda:	ba 01       	movw	r22, r20
     cdc:	60 95       	com	r22
     cde:	62 23       	and	r22, r18
     ce0:	60 83       	st	Z, r22
     ce2:	08 95       	ret

00000ce4 <PinOutput>:
  } 
}
void PinOutput(uint8_t Out,Pin Pin_s,Ports Port_s )
{
    volatile uint8_t *out;
	out=portOutRegister(Port_s);
     ce4:	e4 2f       	mov	r30, r20
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ec 58       	subi	r30, 0x8C	; 140
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	25 91       	lpm	r18, Z+
     cf2:	34 91       	lpm	r19, Z
     cf4:	e2 2f       	mov	r30, r18
     cf6:	f3 2f       	mov	r31, r19
	    if(Out==ON)
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	69 f4       	brne	.+26     	; 0xd16 <PinOutput+0x32>
		{
			*out=*out|(1<<Pin_s);
     cfc:	20 81       	ld	r18, Z
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	ac 01       	movw	r20, r24
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <PinOutput+0x26>
     d06:	44 0f       	add	r20, r20
     d08:	55 1f       	adc	r21, r21
     d0a:	6a 95       	dec	r22
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <PinOutput+0x22>
     d0e:	ba 01       	movw	r22, r20
     d10:	62 2b       	or	r22, r18
     d12:	60 83       	st	Z, r22
     d14:	08 95       	ret
		}
		else
		{
			*out&=~(1<<Pin_s);
     d16:	20 81       	ld	r18, Z
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	ac 01       	movw	r20, r24
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <PinOutput+0x40>
     d20:	44 0f       	add	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	6a 95       	dec	r22
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <PinOutput+0x3c>
     d28:	ba 01       	movw	r22, r20
     d2a:	60 95       	com	r22
     d2c:	62 23       	and	r22, r18
     d2e:	60 83       	st	Z, r22
     d30:	08 95       	ret

00000d32 <PinValue>:


void PinValue(uint8_t *Value,Pin Pin_s,Ports Port_s)
{
	    volatile uint8_t *out;
	    out=portInputRegister(Port_s);
     d32:	e4 2f       	mov	r30, r20
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	e8 59       	subi	r30, 0x98	; 152
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	25 91       	lpm	r18, Z+
     d40:	34 91       	lpm	r19, Z
     d42:	e2 2f       	mov	r30, r18
     d44:	f3 2f       	mov	r31, r19
		
		//*Value=bit_is_clear(*out,Pin_s);
		*Value=bit_is_set(*out,Pin_s);
     d46:	40 81       	ld	r20, Z
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	f9 01       	movw	r30, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <PinValue+0x22>
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	6a 95       	dec	r22
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <PinValue+0x1e>
     d58:	bf 01       	movw	r22, r30
     d5a:	64 23       	and	r22, r20
     d5c:	fc 01       	movw	r30, r24
     d5e:	60 83       	st	Z, r22
     d60:	08 95       	ret

00000d62 <spi_init_master>:
uint8_t ClockSpeed1[Endoflist]={0,1,2,3,0,1,2,3};
	
void spi_init_master (void)
{
	// Set MOSI, SCK as Output
	DDRB = DDRB|(1<<5)|(1<<3)|(1<<2);
     d62:	84 b1       	in	r24, 0x04	; 4
     d64:	8c 62       	ori	r24, 0x2C	; 44
     d66:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master
	//Prescaler: Fosc/16, Enable Interrupts
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     d68:	81 e5       	ldi	r24, 0x51	; 81
     d6a:	8c bd       	out	0x2c, r24	; 44
     d6c:	08 95       	ret

00000d6e <spi_dataorder>:
}

void spi_dataorder(uint8_t data )
{
	
	SPCR |=(data<<DORD);//1 lsb first
     d6e:	2c b5       	in	r18, 0x2c	; 44
     d70:	30 e2       	ldi	r19, 0x20	; 32
     d72:	83 9f       	mul	r24, r19
     d74:	c0 01       	movw	r24, r0
     d76:	11 24       	eor	r1, r1
     d78:	82 2b       	or	r24, r18
     d7a:	8c bd       	out	0x2c, r24	; 44
     d7c:	08 95       	ret

00000d7e <spi_clockspeed>:
}

void spi_clockspeed(SPI_CLK_Divider clock)
{
	
	if(clock==2||clock==8||clock==32||clock==64)
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	31 f0       	breq	.+12     	; 0xd8e <spi_clockspeed+0x10>
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	21 f0       	breq	.+8      	; 0xd8e <spi_clockspeed+0x10>
     d86:	80 32       	cpi	r24, 0x20	; 32
     d88:	11 f0       	breq	.+4      	; 0xd8e <spi_clockspeed+0x10>
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	a1 f4       	brne	.+40     	; 0xdb6 <spi_clockspeed+0x38>
	{
		
		SPCR =SPCR|1<<ClockSpeed1[clock];//ClockSpeed1[clock];//1 for fosc/4,rest till 4
     d8e:	4c b5       	in	r20, 0x2c	; 44
     d90:	e8 2f       	mov	r30, r24
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	e7 5e       	subi	r30, 0xE7	; 231
     d96:	fd 4f       	sbci	r31, 0xFD	; 253
     d98:	21 e0       	ldi	r18, 0x01	; 1
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	c9 01       	movw	r24, r18
     d9e:	00 80       	ld	r0, Z
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <spi_clockspeed+0x28>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <spi_clockspeed+0x24>
     daa:	84 2b       	or	r24, r20
     dac:	8c bd       	out	0x2c, r24	; 44
		SPSR=SPSR|0x01;
     dae:	8d b5       	in	r24, 0x2d	; 45
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	8d bd       	out	0x2d, r24	; 45
     db4:	08 95       	ret
	}
	else if(clock==4||clock==16||clock==64||clock==128)
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	21 f0       	breq	.+8      	; 0xdc2 <spi_clockspeed+0x44>
     dba:	80 31       	cpi	r24, 0x10	; 16
     dbc:	11 f0       	breq	.+4      	; 0xdc2 <spi_clockspeed+0x44>
     dbe:	80 38       	cpi	r24, 0x80	; 128
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <spi_clockspeed+0x4a>
	{
		
		SPCR =SPCR|clock;	
     dc2:	ec b5       	in	r30, 0x2c	; 44
     dc4:	8e 2b       	or	r24, r30
     dc6:	8c bd       	out	0x2c, r24	; 44
     dc8:	08 95       	ret

00000dca <spi_clockphase>:

void spi_clockphase(uint8_t data)
{
	
	
	SPCR|=1<<CPOL;//1 to 4
     dca:	8c b5       	in	r24, 0x2c	; 44
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	8c bd       	out	0x2c, r24	; 44
     dd0:	08 95       	ret

00000dd2 <spi_tranceiver>:
	
}
unsigned char spi_tranceiver (unsigned char data)
{
	// Load data into the buffer
	SPDR = data;
     dd2:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
     dd4:	0d b4       	in	r0, 0x2d	; 45
     dd6:	07 fe       	sbrs	r0, 7
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <spi_tranceiver+0x2>
	
	// Return received data
	return(SPDR);
     dda:	8e b5       	in	r24, 0x2e	; 46
     ddc:	08 95       	ret

00000dde <Timer2Enable>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "UART.h"
void Timer2Enable()
{
	overflowfag=0;
     dde:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <overflowfag>
	TimeReady=0;
     de2:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <TimeReady>
	TCCR2B|=1<<CS21|1<<CS22;
     de6:	e1 eb       	ldi	r30, 0xB1	; 177
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	86 60       	ori	r24, 0x06	; 6
     dee:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);
     df0:	e0 e7       	ldi	r30, 0x70	; 112
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	80 83       	st	Z, r24
	TCNT2 = 0;
     dfa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TimerValue=0;
     dfe:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <TimerValue+0x1>
     e02:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <TimerValue>
     e06:	08 95       	ret

00000e08 <Timer2Disable>:
	TCNT2=0;
	return TCNT2;
}
void Timer2Disable()
{
	TCCR2B=0;
     e08:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TimeReady=1;	
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <TimeReady>
     e12:	08 95       	ret

00000e14 <Timer2Count>:
	//TCNT1L = 0;
	//TCNT1H=0;
}

uint8_t Timer2Count()
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
    TimerValue=TCNT2;//((TCNT1L)*16)/58;//;	
     e18:	c2 eb       	ldi	r28, 0xB2	; 178
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
     e1c:	88 81       	ld	r24, Y
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <TimerValue+0x1>
     e24:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <TimerValue>
	Timer2Disable();
     e28:	0e 94 04 07 	call	0xe08	; 0xe08 <Timer2Disable>
	TCNT2=0;
     e2c:	18 82       	st	Y, r1
	return TCNT2;
     e2e:	88 81       	ld	r24, Y
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <__vector_9>:
{
	TCCR2B=0;
	TimeReady=1;	
}
ISR(TIMER2_OVF_vect)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	8f 93       	push	r24
	overflowfag=overflowfag+1;
     e42:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <overflowfag>
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <overflowfag>
	//uart_num(overflowfag);
	//TIMSK2|=(1<<TOIE2);
	//TimerValue+=255;
     e4c:	8f 91       	pop	r24
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <ConfigureCallBack>:
	return 1;
}
uint8_t PushInterface(unsigned char *dataval)
{
	PushIntoCircularBuffer(&CircularBuffer,dataval);
}
     e58:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <callbackFunction+0x1>
     e5c:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <callbackFunction>
     e60:	08 95       	ret

00000e62 <PopInterface>:
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	8c 01       	movw	r16, r24
     e72:	be 01       	movw	r22, r28
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	81 e2       	ldi	r24, 0x21	; 33
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 1a 04 	call	0x834	; 0x834 <PopFromCircularBuffer>
     e80:	81 11       	cpse	r24, r1
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <PopInterface+0x2c>
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	f8 01       	movw	r30, r16
     e88:	80 83       	st	Z, r24
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <PopInterface+0x2e>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <Callhandler>:
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	41 e3       	ldi	r20, 0x31	; 49
     ea0:	57 e0       	ldi	r21, 0x07	; 7
     ea2:	63 ee       	ldi	r22, 0xE3	; 227
     ea4:	7a e0       	ldi	r23, 0x0A	; 10
     ea6:	88 ec       	ldi	r24, 0xC8	; 200
     ea8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
     eac:	08 95       	ret

00000eae <uart_init>:
     eae:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <Data_Count>
     eb2:	88 e9       	ldi	r24, 0x98	; 152
     eb4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     eb8:	8e e0       	ldi	r24, 0x0E	; 14
     eba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     ebe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     ec8:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <callbackFunction+0x1>
     ecc:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <callbackFunction>
     ed0:	6c e2       	ldi	r22, 0x2C	; 44
     ed2:	77 e0       	ldi	r23, 0x07	; 7
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <callbackSetFunction>
     eda:	08 95       	ret

00000edc <uart_delay>:
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
	...
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	82 17       	cp	r24, r18
     f02:	93 07       	cpc	r25, r19
     f04:	68 f7       	brcc	.-38     	; 0xee0 <uart_delay+0x4>
     f06:	08 95       	ret

00000f08 <uart_char>:
     f08:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f0c:	e0 ec       	ldi	r30, 0xC0	; 192
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	86 ff       	sbrs	r24, 6
     f14:	fd cf       	rjmp	.-6      	; 0xf10 <uart_char+0x8>
     f16:	88 ee       	ldi	r24, 0xE8	; 232
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	0e 94 6e 07 	call	0xedc	; 0xedc <uart_delay>
     f1e:	08 95       	ret

00000f20 <uart_num>:
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	28 2f       	mov	r18, r24
     f26:	39 e2       	ldi	r19, 0x29	; 41
     f28:	83 9f       	mul	r24, r19
     f2a:	31 2d       	mov	r19, r1
     f2c:	11 24       	eor	r1, r1
     f2e:	32 95       	swap	r19
     f30:	3f 70       	andi	r19, 0x0F	; 15
     f32:	4c e9       	ldi	r20, 0x9C	; 156
     f34:	43 03       	mulsu	r20, r19
     f36:	c0 01       	movw	r24, r0
     f38:	11 24       	eor	r1, r1
     f3a:	82 0f       	add	r24, r18
     f3c:	91 1d       	adc	r25, r1
     f3e:	6a e0       	ldi	r22, 0x0A	; 10
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__divmodhi4>
     f46:	d6 2f       	mov	r29, r22
     f48:	20 5d       	subi	r18, 0xD0	; 208
     f4a:	c2 2f       	mov	r28, r18
     f4c:	34 9f       	mul	r19, r20
     f4e:	c0 0d       	add	r28, r0
     f50:	11 24       	eor	r1, r1
     f52:	80 e3       	ldi	r24, 0x30	; 48
     f54:	83 0f       	add	r24, r19
     f56:	0e 94 84 07 	call	0xf08	; 0xf08 <uart_char>
     f5a:	80 e3       	ldi	r24, 0x30	; 48
     f5c:	8d 0f       	add	r24, r29
     f5e:	0e 94 84 07 	call	0xf08	; 0xf08 <uart_char>
     f62:	dd 0f       	add	r29, r29
     f64:	8d 2f       	mov	r24, r29
     f66:	88 0f       	add	r24, r24
     f68:	88 0f       	add	r24, r24
     f6a:	d8 0f       	add	r29, r24
     f6c:	8c 2f       	mov	r24, r28
     f6e:	8d 1b       	sub	r24, r29
     f70:	0e 94 84 07 	call	0xf08	; 0xf08 <uart_char>
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <uart_string>:
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	fc 01       	movw	r30, r24
     f88:	90 81       	ld	r25, Z
     f8a:	99 23       	and	r25, r25
     f8c:	c1 f0       	breq	.+48     	; 0xfbe <uart_string+0x44>
     f8e:	8f 01       	movw	r16, r30
     f90:	0f 5f       	subi	r16, 0xFF	; 255
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	0f 2e       	mov	r0, r31
     f96:	f6 ec       	ldi	r31, 0xC6	; 198
     f98:	ef 2e       	mov	r14, r31
     f9a:	f1 2c       	mov	r15, r1
     f9c:	f0 2d       	mov	r31, r0
     f9e:	c0 ec       	ldi	r28, 0xC0	; 192
     fa0:	d0 e0       	ldi	r29, 0x00	; 0
     fa2:	f7 01       	movw	r30, r14
     fa4:	90 83       	st	Z, r25
     fa6:	88 81       	ld	r24, Y
     fa8:	86 ff       	sbrs	r24, 6
     faa:	fd cf       	rjmp	.-6      	; 0xfa6 <uart_string+0x2c>
     fac:	88 ee       	ldi	r24, 0xE8	; 232
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	0e 94 6e 07 	call	0xedc	; 0xedc <uart_delay>
     fb4:	f8 01       	movw	r30, r16
     fb6:	91 91       	ld	r25, Z+
     fb8:	8f 01       	movw	r16, r30
     fba:	91 11       	cpse	r25, r1
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <uart_string+0x28>
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	08 95       	ret

00000fcc <__vector_18>:
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	1f 92       	push	r1
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ffc:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <r>
    1000:	60 91 a0 04 	lds	r22, 0x04A0	; 0x8004a0 <r>
    1004:	81 e2       	ldi	r24, 0x21	; 33
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	0e 94 05 04 	call	0x80a	; 0x80a <PushIntoCircularBuffer>
    100c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <r>
    1010:	84 36       	cpi	r24, 0x64	; 100
    1012:	11 f4       	brne	.+4      	; 0x1018 <__vector_18+0x4c>
    1014:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <Data_Count>
    1018:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <Data_Count>
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <r>
    1022:	e5 56       	subi	r30, 0x65	; 101
    1024:	fb 4f       	sbci	r31, 0xFB	; 251
    1026:	80 83       	st	Z, r24
    1028:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <Data_Count>
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <Data_Count>
    1032:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <Data_Count>
    1036:	85 30       	cpi	r24, 0x05	; 5
    1038:	31 f5       	brne	.+76     	; 0x1086 <__vector_18+0xba>
    103a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <data_in>
    103e:	84 36       	cpi	r24, 0x64	; 100
    1040:	01 f5       	brne	.+64     	; 0x1082 <__vector_18+0xb6>
    1042:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <data_in+0x1>
    1046:	85 36       	cpi	r24, 0x65	; 101
    1048:	e1 f4       	brne	.+56     	; 0x1082 <__vector_18+0xb6>
    104a:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <data_in+0x2>
    104e:	82 36       	cpi	r24, 0x62	; 98
    1050:	c1 f4       	brne	.+48     	; 0x1082 <__vector_18+0xb6>
    1052:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <data_in+0x3>
    1056:	85 37       	cpi	r24, 0x75	; 117
    1058:	a1 f4       	brne	.+40     	; 0x1082 <__vector_18+0xb6>
    105a:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <data_in+0x4>
    105e:	87 36       	cpi	r24, 0x67	; 103
    1060:	81 f4       	brne	.+32     	; 0x1082 <__vector_18+0xb6>
    1062:	03 c0       	rjmp	.+6      	; 0x106a <__vector_18+0x9e>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	0e 94 84 07 	call	0xf08	; 0xf08 <uart_char>
    106a:	be 01       	movw	r22, r28
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	81 e2       	ldi	r24, 0x21	; 33
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	0e 94 1a 04 	call	0x834	; 0x834 <PopFromCircularBuffer>
    1078:	88 23       	and	r24, r24
    107a:	a1 f3       	breq	.-24     	; 0x1064 <__vector_18+0x98>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <flag.2177>
    1082:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <Data_Count>
    1086:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <callbackFunction>
    108a:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <callbackFunction+0x1>
    108e:	61 15       	cp	r22, r1
    1090:	71 05       	cpc	r23, r1
    1092:	59 f0       	breq	.+22     	; 0x10aa <__vector_18+0xde>
    1094:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <flag.2177>
    1098:	81 11       	cpse	r24, r1
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <__vector_18+0xde>
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	41 e3       	ldi	r20, 0x31	; 49
    10a0:	57 e0       	ldi	r21, 0x07	; 7
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    10a8:	20 c0       	rjmp	.+64     	; 0x10ea <__vector_18+0x11e>
    10aa:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <flag.2177>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	81 f4       	brne	.+32     	; 0x10d2 <__vector_18+0x106>
    10b2:	64 e1       	ldi	r22, 0x14	; 20
    10b4:	81 e2       	ldi	r24, 0x21	; 33
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	0e 94 38 04 	call	0x870	; 0x870 <HeadTailDiff>
    10bc:	84 31       	cpi	r24, 0x14	; 20
    10be:	a8 f0       	brcs	.+42     	; 0x10ea <__vector_18+0x11e>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	41 e3       	ldi	r20, 0x31	; 49
    10c4:	57 e0       	ldi	r21, 0x07	; 7
    10c6:	6e e4       	ldi	r22, 0x4E	; 78
    10c8:	77 e0       	ldi	r23, 0x07	; 7
    10ca:	88 ec       	ldi	r24, 0xC8	; 200
    10cc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    10d0:	0c c0       	rjmp	.+24     	; 0x10ea <__vector_18+0x11e>
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	51 f4       	brne	.+20     	; 0x10ea <__vector_18+0x11e>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <flag.2177>
    10dc:	be 01       	movw	r22, r28
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	81 e2       	ldi	r24, 0x21	; 33
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	0e 94 1a 04 	call	0x834	; 0x834 <PopFromCircularBuffer>
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <CheckUartReadyToSend>:
uint8_t CheckUartReadyToSend()
{ 
	return (!(UCSR0A&(1<<UDRE0)));
    1112:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1116:	85 fb       	bst	r24, 5
    1118:	88 27       	eor	r24, r24
    111a:	80 f9       	bld	r24, 0
}
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	89 27       	eor	r24, r25
    1120:	08 95       	ret

00001122 <SendByte>:

void SendByte(unsigned char dat)
{
	UDR0=dat;
    1122:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1126:	08 95       	ret

00001128 <ReadEveryValueADC>:
static ChannelBuffer channelBuffer_s[6]={{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0}};
static uint8_t BufferLength;
static volatile uint16_t ADC_Array[10];
static uint8_t checkAlreadyThere(ChannelBuffer *Channel);
uint16_t ReadEveryValueADC(void)
{
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
	uint16_t Channel=0,status;
	static uint8_t position,conversionFlag;
	uint16_t Value;
	  if(conversionFlag==0)
    112c:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <conversionFlag.1503>
    1130:	81 11       	cpse	r24, r1
    1132:	37 c0       	rjmp	.+110    	; 0x11a2 <ReadEveryValueADC+0x7a>
	  { 
		  
		 if(channelBuffer_s[position].filled==1&&channelBuffer_s[position].State==start)
    1134:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <position.1502>
    1138:	82 2f       	mov	r24, r18
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	fc 01       	movw	r30, r24
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	e8 0f       	add	r30, r24
    1144:	f9 1f       	adc	r31, r25
    1146:	ea 5d       	subi	r30, 0xDA	; 218
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	32 81       	ldd	r19, Z+2	; 0x02
    114c:	31 30       	cpi	r19, 0x01	; 1
    114e:	29 f5       	brne	.+74     	; 0x119a <ReadEveryValueADC+0x72>
    1150:	fc 01       	movw	r30, r24
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	e8 0f       	add	r30, r24
    1158:	f9 1f       	adc	r31, r25
    115a:	ea 5d       	subi	r30, 0xDA	; 218
    115c:	fd 4f       	sbci	r31, 0xFD	; 253
    115e:	31 81       	ldd	r19, Z+1	; 0x01
    1160:	31 11       	cpse	r19, r1
    1162:	1b c0       	rjmp	.+54     	; 0x119a <ReadEveryValueADC+0x72>
		 {
			 //uart_num(channelBuffer_s[position].channel);
			 adc_read(channelBuffer_s[position].channel);
    1164:	fc 01       	movw	r30, r24
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	8e 0f       	add	r24, r30
    116c:	9f 1f       	adc	r25, r31
    116e:	fc 01       	movw	r30, r24
    1170:	ea 5d       	subi	r30, 0xDA	; 218
    1172:	fd 4f       	sbci	r31, 0xFD	; 253
    1174:	80 81       	ld	r24, Z
    1176:	0e 94 cf 03 	call	0x79e	; 0x79e <adc_read>
			 channelBuffer_s[position].State=busy;
    117a:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <position.1502>
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	fc 01       	movw	r30, r24
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	8e 0f       	add	r24, r30
    1188:	9f 1f       	adc	r25, r31
    118a:	fc 01       	movw	r30, r24
    118c:	ea 5d       	subi	r30, 0xDA	; 218
    118e:	fd 4f       	sbci	r31, 0xFD	; 253
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	81 83       	std	Z+1, r24	; 0x01
			 conversionFlag=1;
    1194:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <conversionFlag.1503>
    1198:	3a c0       	rjmp	.+116    	; 0x120e <ReadEveryValueADC+0xe6>
		 } 	
		 else
		 {
			 position++;
    119a:	2f 5f       	subi	r18, 0xFF	; 255
    119c:	20 93 be 03 	sts	0x03BE, r18	; 0x8003be <position.1502>
    11a0:	36 c0       	rjmp	.+108    	; 0x120e <ReadEveryValueADC+0xe6>
		 }
	  }
	  else if(ADC_State()==0)
    11a2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ADC_State>
    11a6:	81 11       	cpse	r24, r1
    11a8:	32 c0       	rjmp	.+100    	; 0x120e <ReadEveryValueADC+0xe6>
	  {   
		  if(channelBuffer_s[position].State==busy)
    11aa:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <position.1502>
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	ea 5d       	subi	r30, 0xDA	; 218
    11bc:	fd 4f       	sbci	r31, 0xFD	; 253
    11be:	21 81       	ldd	r18, Z+1	; 0x01
    11c0:	21 30       	cpi	r18, 0x01	; 1
    11c2:	29 f5       	brne	.+74     	; 0x120e <ReadEveryValueADC+0xe6>
		  {  
			 //uart_string("in Second");
			 ADC_Array[channelBuffer_s[position].channel]=ADCValue();
    11c4:	fc 01       	movw	r30, r24
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	8e 0f       	add	r24, r30
    11cc:	9f 1f       	adc	r25, r31
    11ce:	fc 01       	movw	r30, r24
    11d0:	ea 5d       	subi	r30, 0xDA	; 218
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	c0 81       	ld	r28, Z
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
    11d8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ADCValue>
    11dc:	cc 0f       	add	r28, r28
    11de:	dd 1f       	adc	r29, r29
    11e0:	c8 55       	subi	r28, 0x58	; 88
    11e2:	dc 4f       	sbci	r29, 0xFC	; 252
    11e4:	99 83       	std	Y+1, r25	; 0x01
    11e6:	88 83       	st	Y, r24
			 channelBuffer_s[position].State=done;
    11e8:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <position.1502>
    11ec:	82 2f       	mov	r24, r18
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	8e 0f       	add	r24, r30
    11f8:	9f 1f       	adc	r25, r31
    11fa:	fc 01       	movw	r30, r24
    11fc:	ea 5d       	subi	r30, 0xDA	; 218
    11fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	81 83       	std	Z+1, r24	; 0x01
			 position++;
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	20 93 be 03 	sts	0x03BE, r18	; 0x8003be <position.1502>
			 conversionFlag=0;
    120a:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <conversionFlag.1503>
		  }
	  }
	  if(position==6)
    120e:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <position.1502>
    1212:	86 30       	cpi	r24, 0x06	; 6
    1214:	11 f4       	brne	.+4      	; 0x121a <ReadEveryValueADC+0xf2>
	  {
		  position=0;
    1216:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <position.1502>
	  }

	
	return 0;
}
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <GetADC_Value>:

uint16_t GetADC_Value(uint16_t ADC_ChannelAndValue)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	00 d0       	rcall	.+0      	; 0x122a <GetADC_Value+0x6>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
	uint16_t returnValue=0;
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	86 95       	lsr	r24
    1236:	86 95       	lsr	r24
    1238:	86 95       	lsr	r24
    123a:	87 70       	andi	r24, 0x07	; 7
    123c:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <ChannelSelect>
	channelProp.channel=ChannelSelect;
    1240:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <ChannelSelect>
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    1244:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <channelBuffer_s>
    1248:	38 17       	cp	r19, r24
    124a:	41 f0       	breq	.+16     	; 0x125c <GetADC_Value+0x38>
    124c:	e9 e2       	ldi	r30, 0x29	; 41
    124e:	f2 e0       	ldi	r31, 0x02	; 2

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    1254:	20 81       	ld	r18, Z
    1256:	32 13       	cpse	r19, r18
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <GetADC_Value+0x5c>
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <GetADC_Value+0x3c>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
		{
          Channel->State=channelBuffer_s[index].State;
    1260:	dc 01       	movw	r26, r24
    1262:	aa 0f       	add	r26, r26
    1264:	bb 1f       	adc	r27, r27
    1266:	a8 0f       	add	r26, r24
    1268:	b9 1f       	adc	r27, r25
    126a:	aa 5d       	subi	r26, 0xDA	; 218
    126c:	bd 4f       	sbci	r27, 0xFD	; 253
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	2c 91       	ld	r18, X
		  Channel->filled=1;
		  buffpos=index;
    1272:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <bufferpos.1511>
			BufferLength++;
			//uart_num(BufferLength);
		}
		
	}
	if(channelProp.State==done)
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	99 f1       	breq	.+102    	; 0x12e0 <GetADC_Value+0xbc>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	48 c0       	rjmp	.+144    	; 0x1310 <GetADC_Value+0xec>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	33 96       	adiw	r30, 0x03	; 3
    1284:	86 30       	cpi	r24, 0x06	; 6
    1286:	91 05       	cpc	r25, r1
    1288:	29 f7       	brne	.-54     	; 0x1254 <GetADC_Value+0x30>
    128a:	45 c0       	rjmp	.+138    	; 0x1316 <GetADC_Value+0xf2>
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
		{
			if(channelBuffer_s[Buffer_empty].filled=Buffer_empty)
    128c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <channelBuffer_s+0x2>
    1290:	11 c0       	rjmp	.+34     	; 0x12b4 <GetADC_Value+0x90>
						BufferLength=0;
				}
		}
		else
		{
			if(channelBuffer_s[BufferLength].filled!=Buffer_empty)
    1292:	82 2f       	mov	r24, r18
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	8e 0f       	add	r24, r30
    129e:	9f 1f       	adc	r25, r31
    12a0:	fc 01       	movw	r30, r24
    12a2:	ea 5d       	subi	r30, 0xDA	; 218
    12a4:	fd 4f       	sbci	r31, 0xFD	; 253
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	88 23       	and	r24, r24
    12aa:	21 f0       	breq	.+8      	; 0x12b4 <GetADC_Value+0x90>
			{
				FreeBuffer=1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <FreeBuffer.1510>
    12b2:	39 c0       	rjmp	.+114    	; 0x1326 <GetADC_Value+0x102>
			}
		}
		if(FreeBuffer==Buffer_empty)
    12b4:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <FreeBuffer.1510>
    12b8:	81 11       	cpse	r24, r1
    12ba:	35 c0       	rjmp	.+106    	; 0x1326 <GetADC_Value+0x102>
		{
			channelBuffer_s[BufferLength].channel=ChannelSelect;
    12bc:	82 2f       	mov	r24, r18
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <ChannelSelect>
    12c4:	fc 01       	movw	r30, r24
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	e8 0f       	add	r30, r24
    12cc:	f9 1f       	adc	r31, r25
    12ce:	ea 5d       	subi	r30, 0xDA	; 218
    12d0:	fd 4f       	sbci	r31, 0xFD	; 253
    12d2:	30 83       	st	Z, r19
			channelBuffer_s[BufferLength].filled=1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	82 83       	std	Z+2, r24	; 0x02
			BufferLength++;
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
    12da:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <BufferLength>
    12de:	23 c0       	rjmp	.+70     	; 0x1326 <GetADC_Value+0x102>
		}
		
	}
	if(channelProp.State==done)
	{
		returnValue=ADC_Array[channelProp.channel];
    12e0:	e3 2f       	mov	r30, r19
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	e8 55       	subi	r30, 0x58	; 88
    12ea:	fc 4f       	sbci	r31, 0xFC	; 252
    12ec:	20 81       	ld	r18, Z
    12ee:	31 81       	ldd	r19, Z+1	; 0x01
		returnValue|=0x8000;
    12f0:	30 68       	ori	r19, 0x80	; 128
		channelBuffer_s[bufferpos].channel=ChannelSelect;	
    12f2:	99 27       	eor	r25, r25
    12f4:	40 91 bc 03 	lds	r20, 0x03BC	; 0x8003bc <ChannelSelect>
    12f8:	fc 01       	movw	r30, r24
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	8e 0f       	add	r24, r30
    1300:	9f 1f       	adc	r25, r31
    1302:	fc 01       	movw	r30, r24
    1304:	ea 5d       	subi	r30, 0xDA	; 218
    1306:	fd 4f       	sbci	r31, 0xFD	; 253
    1308:	40 83       	st	Z, r20
		channelBuffer_s[bufferpos].State=0;
    130a:	11 82       	std	Z+1, r1	; 0x01
		channelBuffer_s[bufferpos].filled=1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	82 83       	std	Z+2, r24	; 0x02
	else
	{
		returnValue|=0x0000;
	}
    //returnValue|=0x8000;
	return returnValue;
    1310:	82 2f       	mov	r24, r18
    1312:	93 2f       	mov	r25, r19
    1314:	0b c0       	rjmp	.+22     	; 0x132c <GetADC_Value+0x108>
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
	channelProp.channel=ChannelSelect;
    bufferpos=checkAlreadyThere(&channelProp);
    1316:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <bufferpos.1511>
	
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
    131a:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <BufferLength>
    131e:	26 30       	cpi	r18, 0x06	; 6
    1320:	09 f0       	breq	.+2      	; 0x1324 <GetADC_Value+0x100>
    1322:	b7 cf       	rjmp	.-146    	; 0x1292 <GetADC_Value+0x6e>
    1324:	b3 cf       	rjmp	.-154    	; 0x128c <GetADC_Value+0x68>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	f2 cf       	rjmp	.-28     	; 0x1310 <GetADC_Value+0xec>
	}
    //returnValue|=0x8000;
	return returnValue;
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <BaseTask1>:
 */ 
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\BaseLayer\UART.h"
#include "..\BaseLayer\pinout.h"
uint16_t BaseTask1(void)
{
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	00 d0       	rcall	.+0      	; 0x133c <BaseTask1+0x6>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	uint16_t PulseData=0;
	static uint8_t CountTaskTime;
   // uart_string("start\n");
	PulseData=InterfacePulse(PulseData);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 ab 04 	call	0x956	; 0x956 <InterfacePulse>
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
	//uart_num(((uint8_t*)(&PulseData))[1]);
	if(((uint8_t*)(&PulseData))[1]==0x80 || ((uint8_t*)(&PulseData))[1]==0x00 )
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 38       	cpi	r24, 0x80	; 128
    1350:	11 f0       	breq	.+4      	; 0x1356 <BaseTask1+0x20>
    1352:	81 11       	cpse	r24, r1
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <BaseTask1+0x30>
	{
		((uint8_t*)(&PulseData))[0]=CountTaskTime++;
    1356:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <CountTaskTime.1746>
    135a:	98 2f       	mov	r25, r24
    135c:	9f 5f       	subi	r25, 0xFF	; 255
    135e:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <CountTaskTime.1746>
		return PulseData;
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	02 c0       	rjmp	.+4      	; 0x136a <BaseTask1+0x34>
	}
    else
	{
		((uint8_t*)(&PulseData))[1]=0x01;
	}
	return PulseData;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	91 e0       	ldi	r25, 0x01	; 1
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <BaseTask1Open>:
uint16_t BaseTask1Open(void)
{
	return 0;
}
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	08 95       	ret

0000137a <BaseTask2>:

uint16_t BaseTask2(void)
{
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	00 d0       	rcall	.+0      	; 0x1380 <BaseTask2+0x6>
    1380:	1f 92       	push	r1
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
	uint16_t RetVal;
	static uint8_t ButtonCount,previousButtonVal,currenButtonvalue,SuccessCount;
	PinValue(&value,PIN_OUT3,B );
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	0e 94 99 06 	call	0xd32	; 0xd32 <PinValue>
	//uart_num(value);
	if(value==previousButtonVal)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <previousButtonVal.1756>
    1398:	89 13       	cpse	r24, r25
    139a:	08 c0       	rjmp	.+16     	; 0x13ac <BaseTask2+0x32>
	{
		ButtonCount++;
    139c:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <ButtonCount.1755>
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <ButtonCount.1755>
		previousButtonVal=value;
    13a6:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <previousButtonVal.1756>
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <BaseTask2+0x3a>
	}
	else
	{
		ButtonCount=0;
    13ac:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <ButtonCount.1755>
		previousButtonVal=value;
    13b0:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <previousButtonVal.1756>
	}
	if(ButtonCount>=10)
    13b4:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ButtonCount.1755>
    13b8:	8a 30       	cpi	r24, 0x0A	; 10
    13ba:	28 f0       	brcs	.+10     	; 0x13c6 <BaseTask2+0x4c>
	{
		currenButtonvalue=value;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <currenButtonvalue.1757>
		ButtonCount=0;
    13c2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <ButtonCount.1755>
	}
	SuccessCount++;
    13c6:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <SuccessCount.1758>
    13ca:	8f 5f       	subi	r24, 0xFF	; 255
    13cc:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <SuccessCount.1758>
	if(SuccessCount>200)
    13d0:	89 3c       	cpi	r24, 0xC9	; 201
    13d2:	28 f0       	brcs	.+10     	; 0x13de <BaseTask2+0x64>
	{
	  	
	  	((uint8_t *)&RetVal)[1]=0x02;
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	8b 83       	std	Y+3, r24	; 0x03
		SuccessCount=0;	
    13d8:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <SuccessCount.1758>
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <BaseTask2+0x68>
	}
	else
	{
		((uint8_t *)&RetVal)[1]=0x03;
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	8b 83       	std	Y+3, r24	; 0x03
	}
    ((uint8_t *)&RetVal)[0]=currenButtonvalue;
	
	//uart_string("\n");
	return RetVal;
}
    13e2:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <currenButtonvalue.1757>
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <BaseTask2Open>:

uint16_t BaseTask2Open(void)
{
	return 0;
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	08 95       	ret

000013fa <chartohex>:
	return 0;
}

static uint8_t chartohex(char arg)
{
	if(arg>='0' && arg<='9' )
    13fa:	98 2f       	mov	r25, r24
    13fc:	90 53       	subi	r25, 0x30	; 48
    13fe:	9a 30       	cpi	r25, 0x0A	; 10
    1400:	30 f4       	brcc	.+12     	; 0x140e <chartohex+0x14>
	{
		return charHex[arg-'0'];
    1402:	e8 2f       	mov	r30, r24
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	e8 5e       	subi	r30, 0xE8	; 232
    1408:	fd 4f       	sbci	r31, 0xFD	; 253
    140a:	80 81       	ld	r24, Z
    140c:	08 95       	ret
	}
	else if(arg>='A' && arg<='F')
    140e:	98 2f       	mov	r25, r24
    1410:	91 54       	subi	r25, 0x41	; 65
    1412:	96 30       	cpi	r25, 0x06	; 6
    1414:	30 f4       	brcc	.+12     	; 0x1422 <chartohex+0x28>
	{
		return charHex[arg-'A'+10];
    1416:	e8 2f       	mov	r30, r24
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	ef 5e       	subi	r30, 0xEF	; 239
    141c:	fd 4f       	sbci	r31, 0xFD	; 253
    141e:	80 81       	ld	r24, Z
    1420:	08 95       	ret
	}
	return 0;	
    1422:	80 e0       	ldi	r24, 0x00	; 0
}
    1424:	08 95       	ret

00001426 <ReadRambytesNonCnt>:
//-->EXAMPLE ROUTINE :-FD01ED01EE01EF01F004
//01ED --> one address
//everything is in hex
//04-->length
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	7c 01       	movw	r14, r24
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
    1436:	8a e0       	ldi	r24, 0x0A	; 10
    1438:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    143c:	d7 01       	movw	r26, r14
    143e:	1c 96       	adiw	r26, 0x0c	; 12
    1440:	8c 91       	ld	r24, X
    1442:	88 23       	and	r24, r24
    1444:	69 f1       	breq	.+90     	; 0x14a0 <ReadRambytesNonCnt+0x7a>
    1446:	d1 2c       	mov	r13, r1
	{
		address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[i+1+4]<<8)|((uint8_t*)Ptr)[i+4]));
    1448:	f7 01       	movw	r30, r14
    144a:	ed 0d       	add	r30, r13
    144c:	f1 1d       	adc	r31, r1
    144e:	b5 81       	ldd	r27, Z+5	; 0x05
    1450:	db 2f       	mov	r29, r27
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	c8 2f       	mov	r28, r24
    1456:	84 81       	ldd	r24, Z+4	; 0x04
    1458:	8e 01       	movw	r16, r28
    145a:	08 2b       	or	r16, r24
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    145c:	d8 01       	movw	r26, r16
    145e:	ec 91       	ld	r30, X
    1460:	e2 95       	swap	r30
    1462:	ef 70       	andi	r30, 0x0F	; 15
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	e8 5c       	subi	r30, 0xC8	; 200
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	80 81       	ld	r24, Z
    146c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1470:	d8 01       	movw	r26, r16
    1472:	ec 91       	ld	r30, X
    1474:	ef 70       	andi	r30, 0x0F	; 15
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e8 5c       	subi	r30, 0xC8	; 200
    147a:	fd 4f       	sbci	r31, 0xFD	; 253
    147c:	80 81       	ld	r24, Z
    147e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1488:	d3 94       	inc	r13
    148a:	d3 94       	inc	r13
    148c:	2d 2d       	mov	r18, r13
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	f7 01       	movw	r30, r14
    1492:	84 85       	ldd	r24, Z+12	; 0x0c
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	28 17       	cp	r18, r24
    149c:	39 07       	cpc	r19, r25
    149e:	a4 f2       	brlt	.-88     	; 0x1448 <ReadRambytesNonCnt+0x22>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
	}
	
	return 0;	
}
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	08 95       	ret

000014b4 <ReadRambyte>:
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
{
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    14c2:	fc 01       	movw	r30, r24
    14c4:	f5 80       	ldd	r15, Z+5	; 0x05
    14c6:	e1 2c       	mov	r14, r1
    14c8:	84 81       	ldd	r24, Z+4	; 0x04
    14ca:	e8 2a       	or	r14, r24
    14cc:	e7 01       	movw	r28, r14
	FillUartBufferSiglechar('\n');
    14ce:	8a e0       	ldi	r24, 0x0A	; 10
    14d0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    14d4:	f8 01       	movw	r30, r16
    14d6:	86 81       	ldd	r24, Z+6	; 0x06
    14d8:	88 23       	and	r24, r24
    14da:	d1 f0       	breq	.+52     	; 0x1510 <ReadRambyte+0x5c>
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    14dc:	e8 81       	ld	r30, Y
    14de:	e2 95       	swap	r30
    14e0:	ef 70       	andi	r30, 0x0F	; 15
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	e8 5c       	subi	r30, 0xC8	; 200
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	80 81       	ld	r24, Z
    14ea:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    14ee:	e9 91       	ld	r30, Y+
    14f0:	ef 70       	andi	r30, 0x0F	; 15
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	e8 5c       	subi	r30, 0xC8	; 200
    14f6:	fd 4f       	sbci	r31, 0xFD	; 253
    14f8:	80 81       	ld	r24, Z
    14fa:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		return charHex[arg-'A'+10];
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
    1504:	9c 2f       	mov	r25, r28
    1506:	9e 19       	sub	r25, r14
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1508:	f8 01       	movw	r30, r16
    150a:	86 81       	ldd	r24, Z+6	; 0x06
    150c:	98 17       	cp	r25, r24
    150e:	30 f3       	brcs	.-52     	; 0x14dc <ReadRambyte+0x28>
		FillUartBufferSiglechar(' ');
		address++;
	}
	
	return 0;
}
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	08 95       	ret

00001522 <WriteRambyte>:

uint16_t WriteRambyte(void *Ptr)
{
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1532:	fc 01       	movw	r30, r24
    1534:	f5 81       	ldd	r31, Z+5	; 0x05
    1536:	df 2f       	mov	r29, r31
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	c8 2f       	mov	r28, r24
    153c:	f8 01       	movw	r30, r16
    153e:	84 81       	ldd	r24, Z+4	; 0x04
    1540:	c8 2b       	or	r28, r24
	FillUartBufferSiglechar('\n');
    1542:	8a e0       	ldi	r24, 0x0A	; 10
    1544:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1548:	f8 01       	movw	r30, r16
    154a:	84 85       	ldd	r24, Z+12	; 0x0c
    154c:	88 23       	and	r24, r24
    154e:	39 f1       	breq	.+78     	; 0x159e <WriteRambyte+0x7c>
    1550:	d1 2c       	mov	r13, r1
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
    1552:	0f 2e       	mov	r0, r31
    1554:	f2 e2       	ldi	r31, 0x22	; 34
    1556:	ef 2e       	mov	r14, r31
    1558:	f5 e0       	ldi	r31, 0x05	; 5
    155a:	ff 2e       	mov	r15, r31
    155c:	f0 2d       	mov	r31, r0
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    155e:	e8 81       	ld	r30, Y
    1560:	e2 95       	swap	r30
    1562:	ef 70       	andi	r30, 0x0F	; 15
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	e8 5c       	subi	r30, 0xC8	; 200
    1568:	fd 4f       	sbci	r31, 0xFD	; 253
    156a:	80 81       	ld	r24, Z
    156c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1570:	e8 81       	ld	r30, Y
    1572:	ef 70       	andi	r30, 0x0F	; 15
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	e8 5c       	subi	r30, 0xC8	; 200
    1578:	fd 4f       	sbci	r31, 0xFD	; 253
    157a:	80 81       	ld	r24, Z
    157c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <FillUartBufferSiglechar>
		*address=((uint8_t*)Ptr)[i+6];
    1586:	f8 01       	movw	r30, r16
    1588:	ed 0d       	add	r30, r13
    158a:	f1 1d       	adc	r31, r1
    158c:	86 81       	ldd	r24, Z+6	; 0x06
    158e:	89 93       	st	Y+, r24
		address++;
		Datastore[1]=0;
    1590:	f7 01       	movw	r30, r14
    1592:	10 82       	st	Z, r1
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1594:	d3 94       	inc	r13
    1596:	f8 01       	movw	r30, r16
    1598:	84 85       	ldd	r24, Z+12	; 0x0c
    159a:	d8 16       	cp	r13, r24
    159c:	00 f3       	brcs	.-64     	; 0x155e <WriteRambyte+0x3c>
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
	}

	PushEventInterface(52,1,Datastore,0);	
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	41 e2       	ldi	r20, 0x21	; 33
    15a4:	55 e0       	ldi	r21, 0x05	; 5
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	84 e3       	ldi	r24, 0x34	; 52
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
	return 0;
}
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	08 95       	ret

000015c6 <DebugHandlerFunc>:
VariableManager VariableManager_t[5];
static	uint8_t chartohex(char arg);
typedef uint16_t (*argp)(void *);
argp argp1;
uint16_t DebugHandlerFunc(void *fptr)
{
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <DebugHandlerFunc+0x12>
    15d8:	1f 92       	push	r1
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	8c 01       	movw	r16, r24
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
    15e0:	8a e5       	ldi	r24, 0x5A	; 90
    15e2:	9a e0       	ldi	r25, 0x0A	; 10
    15e4:	9b 83       	std	Y+3, r25	; 0x03
    15e6:	8a 83       	std	Y+2, r24	; 0x02
uint16_t DebugHandlerFunc(void *fptr)
{
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
    15e8:	d1 2c       	mov	r13, r1
    15ea:	f1 2c       	mov	r15, r1
		}
		k++;
		if(k==2)
		{
		  i++;
		  k=0;	
    15ec:	e1 2c       	mov	r14, r1
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    15ee:	31 c0       	rjmp	.+98     	; 0x1652 <DebugHandlerFunc+0x8c>
	{
		
		if(i<10)
    15f0:	29 e0       	ldi	r18, 0x09	; 9
    15f2:	2f 15       	cp	r18, r15
    15f4:	38 f1       	brcs	.+78     	; 0x1644 <DebugHandlerFunc+0x7e>
	{
		if(k==0)
    15f6:	d1 10       	cpse	r13, r1
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <DebugHandlerFunc+0x50>
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <chartohex>
    1600:	ef 2d       	mov	r30, r15
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	e9 53       	subi	r30, 0x39	; 57
    1606:	fc 4f       	sbci	r31, 0xFC	; 252
    1608:	20 e1       	ldi	r18, 0x10	; 16
    160a:	82 9f       	mul	r24, r18
    160c:	c0 01       	movw	r24, r0
    160e:	11 24       	eor	r1, r1
    1610:	80 83       	st	Z, r24
		}
		if(k==1)
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
		}
		k++;
    1612:	d3 94       	inc	r13
    1614:	1e c0       	rjmp	.+60     	; 0x1652 <DebugHandlerFunc+0x8c>
	{
		if(k==0)
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
		}
		if(k==1)
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	d8 12       	cpse	r13, r24
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <DebugHandlerFunc+0x70>
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
    161c:	cf 2c       	mov	r12, r15
    161e:	d1 2c       	mov	r13, r1
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	0e 94 fd 09 	call	0x13fa	; 0x13fa <chartohex>
    1626:	f6 01       	movw	r30, r12
    1628:	e9 53       	subi	r30, 0x39	; 57
    162a:	fc 4f       	sbci	r31, 0xFC	; 252
    162c:	8f 70       	andi	r24, 0x0F	; 15
    162e:	90 81       	ld	r25, Z
    1630:	89 2b       	or	r24, r25
    1632:	80 83       	st	Z, r24
    1634:	04 c0       	rjmp	.+8      	; 0x163e <DebugHandlerFunc+0x78>
		}
		k++;
    1636:	d3 94       	inc	r13
		if(k==2)
    1638:	e2 e0       	ldi	r30, 0x02	; 2
    163a:	de 12       	cpse	r13, r30
    163c:	0a c0       	rjmp	.+20     	; 0x1652 <DebugHandlerFunc+0x8c>
		{
		  i++;
    163e:	f3 94       	inc	r15
		  k=0;	
    1640:	de 2c       	mov	r13, r14
    1642:	07 c0       	rjmp	.+14     	; 0x1652 <DebugHandlerFunc+0x8c>
		}
	}
	else
	{
	  Pos[i]=data;
    1644:	ef 2d       	mov	r30, r15
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	e9 53       	subi	r30, 0x39	; 57
    164a:	fc 4f       	sbci	r31, 0xFC	; 252
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	80 83       	st	Z, r24
	  i++;
    1650:	f3 94       	inc	r15
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	f8 01       	movw	r30, r16
    1658:	09 95       	icall
    165a:	88 23       	and	r24, r24
    165c:	49 f2       	breq	.-110    	; 0x15f0 <DebugHandlerFunc+0x2a>
	  i++;
	}
			
	}

	if(Pos[0]==0xab)
    165e:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <Pos.1506>
    1662:	8b 3a       	cpi	r24, 0xAB	; 171
    1664:	71 f5       	brne	.+92     	; 0x16c2 <DebugHandlerFunc+0xfc>
	{
	   
        TEMP=ReadRambyte;
		if(Pos[3]==0)
    1666:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <Pos.1506+0x3>
    166a:	81 11       	cpse	r24, r1
    166c:	1a c0       	rjmp	.+52     	; 0x16a2 <DebugHandlerFunc+0xdc>
		{
		  //uart_string((char*)0x01ed/*(char*)((uint16_t)(Pos[1]<<8)|Pos[2])*/);	
          Datastore[0]=0;
    166e:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Datastore>
          Datastore[1]=1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <Datastore+0x1>
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <Datastore+0x2>
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <Datastore+0x3>
          Datastore[4]=Pos[2];
    1684:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <Pos.1506+0x2>
    1688:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <Datastore+0x4>
          Datastore[5]=Pos[1];
    168c:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <Pos.1506+0x1>
    1690:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <Datastore+0x5>
          Datastore[6]=Pos[4];
    1694:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <Pos.1506+0x4>
    1698:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <Datastore+0x6>
		  Datastore[12]=Pos[4];
    169c:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <Datastore+0xc>
    16a0:	9b c0       	rjmp	.+310    	; 0x17d8 <DebugHandlerFunc+0x212>
		 //ReadRambyte(Datastore);;
		 //PushEventInterface(52,1,Datastore,0);
		}
		else if(Pos[3]==1)
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <DebugHandlerFunc+0xe2>
    16a6:	98 c0       	rjmp	.+304    	; 0x17d8 <DebugHandlerFunc+0x212>
		{
		  //
		  Datastore[1]=0;
    16a8:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <Datastore+0x1>
		  PushEventInterface(52,1,Datastore,0);
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	41 e2       	ldi	r20, 0x21	; 33
    16b2:	55 e0       	ldi	r21, 0x05	; 5
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	84 e3       	ldi	r24, 0x34	; 52
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    16c0:	8b c0       	rjmp	.+278    	; 0x17d8 <DebugHandlerFunc+0x212>
		} else if(Pos[3]==2)
		{
			
		}
	}
	else if(Pos[0]==0xac)
    16c2:	8c 3a       	cpi	r24, 0xAC	; 172
    16c4:	99 f5       	brne	.+102    	; 0x172c <DebugHandlerFunc+0x166>
	{
		 TEMP=WriteRambyte;
    16c6:	81 e9       	ldi	r24, 0x91	; 145
    16c8:	9a e0       	ldi	r25, 0x0A	; 10
    16ca:	9b 83       	std	Y+3, r25	; 0x03
    16cc:	8a 83       	std	Y+2, r24	; 0x02
          Datastore[0]=0;
    16ce:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Datastore>
          Datastore[1]=1;
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <Datastore+0x1>
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    16d8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <Datastore+0x2>
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <Datastore+0x3>
          Datastore[4]=Pos[2];
    16e2:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <Pos.1506+0x2>
    16e6:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <Datastore+0x4>
          Datastore[5]=Pos[1];
    16ea:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <Pos.1506+0x1>
    16ee:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <Datastore+0x5>
          Datastore[6]=Pos[3];
    16f2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <Pos.1506+0x3>
    16f6:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <Datastore+0x6>
		  Datastore[7]=Pos[4];
    16fa:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <Pos.1506+0x4>
    16fe:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <Datastore+0x7>
		  Datastore[8]=Pos[5];
    1702:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <Pos.1506+0x5>
    1706:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <Datastore+0x8>
		  Datastore[9]=Pos[6];
    170a:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <Pos.1506+0x6>
    170e:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <Datastore+0x9>
	      Datastore[10]=Pos[7];
    1712:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <Pos.1506+0x7>
    1716:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <Datastore+0xa>
		  Datastore[11]=Pos[8];
    171a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <Pos.1506+0x8>
    171e:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <Datastore+0xb>
		  Datastore[12]=Pos[9];
    1722:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <Pos.1506+0x9>
    1726:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <Datastore+0xc>
    172a:	56 c0       	rjmp	.+172    	; 0x17d8 <DebugHandlerFunc+0x212>
		  //PushEventInterface(52,1,Datastore,0);	
	}
	else if(Pos[0]==0xfd)
    172c:	8d 3f       	cpi	r24, 0xFD	; 253
    172e:	99 f5       	brne	.+102    	; 0x1796 <DebugHandlerFunc+0x1d0>
	{
		TEMP=ReadRambytesNonCnt;
    1730:	83 e1       	ldi	r24, 0x13	; 19
    1732:	9a e0       	ldi	r25, 0x0A	; 10
    1734:	9b 83       	std	Y+3, r25	; 0x03
    1736:	8a 83       	std	Y+2, r24	; 0x02
		Datastore[0]=0;
    1738:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Datastore>
		Datastore[1]=1;
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <Datastore+0x1>
		Datastore[2]=((uint8_t*)(&TEMP))[0];
    1742:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <Datastore+0x2>
		Datastore[3]=((uint8_t*)(&TEMP))[1];
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <Datastore+0x3>
		Datastore[4]=Pos[2];
    174c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <Pos.1506+0x2>
    1750:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <Datastore+0x4>
		Datastore[5]=Pos[1];
    1754:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <Pos.1506+0x1>
    1758:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <Datastore+0x5>
		Datastore[6]=Pos[4];
    175c:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <Pos.1506+0x4>
    1760:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <Datastore+0x6>
		Datastore[7]=Pos[3];
    1764:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <Pos.1506+0x3>
    1768:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <Datastore+0x7>
		Datastore[8]=Pos[6];
    176c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <Pos.1506+0x6>
    1770:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <Datastore+0x8>
		Datastore[9]=Pos[5];
    1774:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <Pos.1506+0x5>
    1778:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <Datastore+0x9>
	    Datastore[10]=Pos[8];
    177c:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <Pos.1506+0x8>
    1780:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <Datastore+0xa>
	    Datastore[11]=Pos[7];
    1784:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <Pos.1506+0x7>
    1788:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <Datastore+0xb>
	    Datastore[12]=Pos[9];
    178c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <Pos.1506+0x9>
    1790:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <Datastore+0xc>
    1794:	21 c0       	rjmp	.+66     	; 0x17d8 <DebugHandlerFunc+0x212>
		
	}
	else if(Pos[0]==0xbd)
    1796:	8d 3b       	cpi	r24, 0xBD	; 189
    1798:	f9 f4       	brne	.+62     	; 0x17d8 <DebugHandlerFunc+0x212>
	{
		TEMP=ReadRambyte;
        Datastore[0]=0;
    179a:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Datastore>
        Datastore[1]=1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <Datastore+0x1>
        Datastore[2]=((uint8_t*)(&TEMP))[0];
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <Datastore+0x2>
        Datastore[3]=((uint8_t*)(&TEMP))[1];
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <Datastore+0x3>
        Datastore[4]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[0];
    17b0:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <Pos.1506+0x1>
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	e9 5c       	subi	r30, 0xC9	; 201
    17c0:	fa 4f       	sbci	r31, 0xFA	; 250
    17c2:	80 81       	ld	r24, Z
    17c4:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <Datastore+0x4>
        Datastore[5]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[1];
    17c8:	81 81       	ldd	r24, Z+1	; 0x01
    17ca:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <Datastore+0x5>
        Datastore[6]=VariableManager_t[Pos[1]].VariableSize;
    17ce:	83 81       	ldd	r24, Z+3	; 0x03
    17d0:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <Datastore+0x6>
        Datastore[12]=VariableManager_t[Pos[1]].VariableSize;
    17d4:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <Datastore+0xc>
	}
	if(data=='!')
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	81 32       	cpi	r24, 0x21	; 33
    17dc:	89 f4       	brne	.+34     	; 0x1800 <DebugHandlerFunc+0x23a>
	{
	  argp1=(argp *)(((uint16_t*)(Pos+11))[0]);
    17de:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <Pos.1506+0xb>
    17e2:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <count.1680>
    17e6:	70 93 36 05 	sts	0x0536, r23	; 0x800536 <argp1+0x1>
    17ea:	60 93 35 05 	sts	0x0535, r22	; 0x800535 <argp1>
	  PushEventInterface(201,argp1,Datastore,0);
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	41 e2       	ldi	r20, 0x21	; 33
    17f4:	55 e0       	ldi	r21, 0x05	; 5
    17f6:	89 ec       	ldi	r24, 0xC9	; 201
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <DebugHandlerFunc+0x24e>
	}
	else
	{
	  PushEventInterface(52,1,Datastore,0);
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	41 e2       	ldi	r20, 0x21	; 33
    1806:	55 e0       	ldi	r21, 0x05	; 5
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	84 e3       	ldi	r24, 0x34	; 52
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
	}
	return 0;
}
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	08 95       	ret

00001830 <OutPutVariableRegister>:
	return 0;	
}

uint8_t OutPutVariableRegister(uint16_t Outadd,uint8_t Varsize,uint8_t Varid)
{
	VariableManager_t[Varid].VariableAdd=Outadd;
    1830:	e4 2f       	mov	r30, r20
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	e9 5c       	subi	r30, 0xC9	; 201
    183e:	fa 4f       	sbci	r31, 0xFA	; 250
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
	VariableManager_t[Varid].VariableId=Varid;
    1844:	42 83       	std	Z+2, r20	; 0x02
	VariableManager_t[Varid].VariableSize=Varsize;
    1846:	63 83       	std	Z+3, r22	; 0x03
    1848:	08 95       	ret

0000184a <Nvm_TableInit>:
 *  Author: Nikhil
 */ 
#include "EepromStructure.h"
void Nvm_TableInit()
{
	Nvm_Table_t[0].Id=0;
    184a:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <Nvm_Table_t>
	Nvm_Table_t[0].Nvm_Size=sizeof(Nvm_T_Ping);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <Nvm_Table_t+0x1>
	Nvm_Table_t[1].Id=1;
    1854:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <Nvm_Table_t+0x2>
	Nvm_Table_t[1].Nvm_Size=sizeof(Nvm_T_OH);
    1858:	94 e0       	ldi	r25, 0x04	; 4
    185a:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <Nvm_Table_t+0x3>
	Nvm_Table_t[2].Id=5;
    185e:	95 e0       	ldi	r25, 0x05	; 5
    1860:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <Nvm_Table_t+0x4>
	Nvm_Table_t[2].Nvm_Size=sizeof(Nvm_T_TankOverflow);
    1864:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <Nvm_Table_t+0x5>
    1868:	08 95       	ret

0000186a <WriteMax>:
 */ 
#include "MaxDisp.h"
#include "..\BaseLayer\SPI.h"
#include "..\BaseLayer\pinout.h"
void WriteMax(uint8_t address,uint8_t data)
{
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	d8 2f       	mov	r29, r24
    1870:	c6 2f       	mov	r28, r22
	PinOutput(OFF,PIN_OUT2,B);
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	spi_tranceiver(address);
    187c:	8d 2f       	mov	r24, r29
    187e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	spi_tranceiver(data);
    1882:	8c 2f       	mov	r24, r28
    1884:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	PinOutput(ON,PIN_OUT2,B);
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <InitMax>:
void InitMax()
{
	 PinOutput(OFF,PIN_OUT2,B);
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 spi_init_master();
    18a2:	0e 94 b1 06 	call	0xd62	; 0xd62 <spi_init_master>
	 spi_dataorder(0);
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spi_dataorder>
	 spi_clockspeed(Divby0);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	0e 94 bf 06 	call	0xd7e	; 0xd7e <spi_clockspeed>
	 spi_clockphase(2);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	0e 94 e5 06 	call	0xdca	; 0xdca <spi_clockphase>
	 PinOutput(OFF,PIN_OUT2,B);
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 spi_tranceiver(DECODEMODE);
    18c2:	89 e0       	ldi	r24, 0x09	; 9
    18c4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 spi_tranceiver(0xFF);
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 spi_tranceiver(SCANLIMIT);
    18e2:	8b e0       	ldi	r24, 0x0B	; 11
    18e4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 spi_tranceiver(0x01);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 spi_tranceiver(POWERON);
    1902:	8c e0       	ldi	r24, 0x0C	; 12
    1904:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 spi_tranceiver(0x01);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 spi_tranceiver(INTENSITY);
    1922:	8a e0       	ldi	r24, 0x0A	; 10
    1924:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 spi_tranceiver(0x03);
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 spi_tranceiver(0x07);
    1942:	87 e0       	ldi	r24, 0x07	; 7
    1944:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 spi_tranceiver(0x03);
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
    1962:	08 95       	ret

00001964 <ScanlimitExpand>:
}

void ScanlimitExpand(uint8_t num)
{
    1964:	cf 93       	push	r28
    1966:	c8 2f       	mov	r28, r24

	PinOutput(OFF,PIN_OUT2,B);
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
	spi_tranceiver(SCANLIMIT);
    1972:	8b e0       	ldi	r24, 0x0B	; 11
    1974:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	spi_tranceiver(num);
    1978:	8c 2f       	mov	r24, r28
    197a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <spi_tranceiver>
	PinOutput(ON,PIN_OUT2,B);	
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
}
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <DispDigits>:

void DispDigits(uint16_t num)
{
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	ec 01       	movw	r28, r24
		WriteMax(Digit5,0x0f);
    1998:	6f e0       	ldi	r22, 0x0F	; 15
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		WriteMax(Digit4,0x0f);
    19a0:	6f e0       	ldi	r22, 0x0F	; 15
    19a2:	84 e0       	ldi	r24, 0x04	; 4
    19a4:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		WriteMax(Digit3,0x0f);
    19a8:	6f e0       	ldi	r22, 0x0F	; 15
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		WriteMax(Digit2,0x0f);
    19b0:	6f e0       	ldi	r22, 0x0F	; 15
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		uint8_t count=0,digit=0;
		while (num)
    19b8:	20 97       	sbiw	r28, 0x00	; 0
    19ba:	19 f1       	breq	.+70     	; 0x1a02 <DispDigits+0x76>
{
		WriteMax(Digit5,0x0f);
		WriteMax(Digit4,0x0f);
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
    19bc:	f1 2c       	mov	r15, r1
		while (num)
		{
			digit=num%10;
			WriteMax(count+1,digit);
    19be:	f3 94       	inc	r15
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
		while (num)
		{
			digit=num%10;
    19c0:	9e 01       	movw	r18, r28
    19c2:	ad ec       	ldi	r26, 0xCD	; 205
    19c4:	bc ec       	ldi	r27, 0xCC	; 204
    19c6:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    19ca:	8c 01       	movw	r16, r24
    19cc:	16 95       	lsr	r17
    19ce:	07 95       	ror	r16
    19d0:	16 95       	lsr	r17
    19d2:	07 95       	ror	r16
    19d4:	16 95       	lsr	r17
    19d6:	07 95       	ror	r16
    19d8:	a8 01       	movw	r20, r16
    19da:	44 0f       	add	r20, r20
    19dc:	55 1f       	adc	r21, r21
    19de:	98 01       	movw	r18, r16
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	24 0f       	add	r18, r20
    19ee:	35 1f       	adc	r19, r21
    19f0:	be 01       	movw	r22, r28
    19f2:	62 1b       	sub	r22, r18
    19f4:	73 0b       	sbc	r23, r19
			WriteMax(count+1,digit);
    19f6:	8f 2d       	mov	r24, r15
    19f8:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
			num=num/10;
    19fc:	e8 01       	movw	r28, r16
		WriteMax(Digit5,0x0f);
		WriteMax(Digit4,0x0f);
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
		while (num)
    19fe:	20 97       	sbiw	r28, 0x00	; 0
    1a00:	f1 f6       	brne	.-68     	; 0x19be <DispDigits+0x32>
		{
			count=count-1;
		}
		
	//ScanlimitExpand(count);
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	08 95       	ret

00001a0e <DispChar>:

void DispChar(uint16_t num,uint8_t MaxDispPos)
{
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	d8 2f       	mov	r29, r24
    1a14:	c6 2f       	mov	r28, r22
	static uint8_t count,DigitScrollPos,Digitpos;
	static Digits d[4]={Digit8,Digit7,Digit6,Digit5};
	//static uint8_t Dispval dis[4]={13,num,5,8};
	count++;
    1a16:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <count.1680>
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <count.1680>
	if(count>100)
    1a20:	95 36       	cpi	r25, 0x65	; 101
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <DispChar+0x18>
    1a24:	5d c0       	rjmp	.+186    	; 0x1ae0 <DispChar+0xd2>
	{
		if(DigitScrollPos<4)
    1a26:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <DigitScrollPos.1681>
    1a2a:	94 30       	cpi	r25, 0x04	; 4
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <DispChar+0x22>
    1a2e:	54 c0       	rjmp	.+168    	; 0x1ad8 <DispChar+0xca>
		{
        if(DigitScrollPos==3)
    1a30:	93 30       	cpi	r25, 0x03	; 3
    1a32:	81 f4       	brne	.+32     	; 0x1a54 <DispChar+0x46>
		{
	 	WriteMax(d[0],num);
    1a34:	68 2f       	mov	r22, r24
    1a36:	88 e0       	ldi	r24, 0x08	; 8
    1a38:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
	 	WriteMax(d[1],5);		
    1a3c:	65 e0       	ldi	r22, 0x05	; 5
    1a3e:	87 e0       	ldi	r24, 0x07	; 7
    1a40:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
	 	WriteMax(d[2],8);
    1a44:	68 e0       	ldi	r22, 0x08	; 8
    1a46:	86 e0       	ldi	r24, 0x06	; 6
    1a48:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		WriteMax(d[3],0x0f);
    1a4c:	6f e0       	ldi	r22, 0x0F	; 15
    1a4e:	85 e0       	ldi	r24, 0x05	; 5
    1a50:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		}
		        if(DigitScrollPos==0)
    1a54:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <DigitScrollPos.1681>
    1a58:	81 11       	cpse	r24, r1
    1a5a:	10 c0       	rjmp	.+32     	; 0x1a7c <DispChar+0x6e>
		        {
			        WriteMax(d[1],num);
    1a5c:	6d 2f       	mov	r22, r29
    1a5e:	87 e0       	ldi	r24, 0x07	; 7
    1a60:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
			        WriteMax(d[2],5);
    1a64:	65 e0       	ldi	r22, 0x05	; 5
    1a66:	86 e0       	ldi	r24, 0x06	; 6
    1a68:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
			        WriteMax(d[3],8);
    1a6c:	68 e0       	ldi	r22, 0x08	; 8
    1a6e:	85 e0       	ldi	r24, 0x05	; 5
    1a70:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
			        WriteMax(d[0],0x0f);
    1a74:	6f e0       	ldi	r22, 0x0F	; 15
    1a76:	88 e0       	ldi	r24, 0x08	; 8
    1a78:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
		        }
				        if(DigitScrollPos==1)
    1a7c:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <DigitScrollPos.1681>
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	81 f4       	brne	.+32     	; 0x1aa4 <DispChar+0x96>
				        {
					        WriteMax(d[2],num);
    1a84:	6d 2f       	mov	r22, r29
    1a86:	86 e0       	ldi	r24, 0x06	; 6
    1a88:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
					        WriteMax(d[3],5);
    1a8c:	65 e0       	ldi	r22, 0x05	; 5
    1a8e:	85 e0       	ldi	r24, 0x05	; 5
    1a90:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
					        WriteMax(d[0],8);
    1a94:	68 e0       	ldi	r22, 0x08	; 8
    1a96:	88 e0       	ldi	r24, 0x08	; 8
    1a98:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
					        WriteMax(d[1],0x0f);
    1a9c:	6f e0       	ldi	r22, 0x0F	; 15
    1a9e:	87 e0       	ldi	r24, 0x07	; 7
    1aa0:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
				        }
						        if(DigitScrollPos==2)
    1aa4:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <DigitScrollPos.1681>
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	81 f4       	brne	.+32     	; 0x1acc <DispChar+0xbe>
						        {
							        WriteMax(d[3],num);
    1aac:	6d 2f       	mov	r22, r29
    1aae:	85 e0       	ldi	r24, 0x05	; 5
    1ab0:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
							        WriteMax(d[0],5);
    1ab4:	65 e0       	ldi	r22, 0x05	; 5
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
							        WriteMax(d[1],8);
    1abc:	68 e0       	ldi	r22, 0x08	; 8
    1abe:	87 e0       	ldi	r24, 0x07	; 7
    1ac0:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
							        WriteMax(d[2],0x0f);
    1ac4:	6f e0       	ldi	r22, 0x0F	; 15
    1ac6:	86 e0       	ldi	r24, 0x06	; 6
    1ac8:	0e 94 35 0c 	call	0x186a	; 0x186a <WriteMax>
						        }
		 DigitScrollPos++;
    1acc:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <DigitScrollPos.1681>
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <DigitScrollPos.1681>
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DispChar+0xce>
		}
		else
		{
			DigitScrollPos=0;
    1ad8:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <DigitScrollPos.1681>
		}
		count=0;
    1adc:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <count.1680>
	}


	ScanlimitExpand(MaxDispPos);
    1ae0:	8c 2f       	mov	r24, r28
    1ae2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <ScanlimitExpand>
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <SignalHandlerFunc>:
 *  Author: Nikhil
 */ 
#include "..\OS\EventQ.h"
static uint16_t SignalData[5];
uint16_t SignalHandlerFunc(void *data)
{
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	ec 01       	movw	r28, r24
	uint8_t *ptr=(uint8_t*)data;
	uint16_t reval;
	if(ptr[0]==0)
    1af2:	28 81       	ld	r18, Y
    1af4:	21 11       	cpse	r18, r1
    1af6:	21 c0       	rjmp	.+66     	; 0x1b3a <SignalHandlerFunc+0x4e>
	{
		
		if(((uint8_t*)&SignalData[ptr[1]])[1]==2)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	fc 01       	movw	r30, r24
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	eb 52       	subi	r30, 0x2B	; 43
    1b04:	fc 4f       	sbci	r31, 0xFC	; 252
    1b06:	21 81       	ldd	r18, Z+1	; 0x01
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	21 f4       	brne	.+8      	; 0x1b14 <SignalHandlerFunc+0x28>
		{
			reval= SignalData[ptr[1]];
    1b0c:	40 81       	ld	r20, Z
    1b0e:	32 2f       	mov	r19, r18
			((uint8_t*)&SignalData[ptr[1]])[1]=0;
    1b10:	11 82       	std	Z+1, r1	; 0x01
    1b12:	25 c0       	rjmp	.+74     	; 0x1b5e <SignalHandlerFunc+0x72>
		}
		else 
		{
			PushEventInterface(50,SignalHandlerFunc,0,ptr[2]);
    1b14:	2a 81       	ldd	r18, Y+2	; 0x02
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	66 e7       	ldi	r22, 0x76	; 118
    1b1c:	7d e0       	ldi	r23, 0x0D	; 13
    1b1e:	82 e3       	ldi	r24, 0x32	; 50
    1b20:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
			reval= SignalData[ptr[1]];
    1b24:	e9 81       	ldd	r30, Y+1	; 0x01
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	eb 52       	subi	r30, 0x2B	; 43
    1b2e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b30:	40 81       	ld	r20, Z
    1b32:	31 81       	ldd	r19, Z+1	; 0x01
			((uint8_t*)&SignalData[ptr[1]])[1]=1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	81 83       	std	Z+1, r24	; 0x01
    1b38:	12 c0       	rjmp	.+36     	; 0x1b5e <SignalHandlerFunc+0x72>
		}
	}
	else if(ptr[0]==1)
    1b3a:	21 30       	cpi	r18, 0x01	; 1
    1b3c:	81 f4       	brne	.+32     	; 0x1b5e <SignalHandlerFunc+0x72>
	{
		((uint8_t*)&SignalData[ptr[1]])[0]=ptr[2];
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	e9 81       	ldd	r30, Y+1	; 0x01
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	eb 52       	subi	r30, 0x2B	; 43
    1b4a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b4c:	80 83       	st	Z, r24
		((uint8_t*)&SignalData[ptr[1]])[1]=2;
    1b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	eb 52       	subi	r30, 0x2B	; 43
    1b58:	fc 4f       	sbci	r31, 0xFC	; 252
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	81 83       	std	Z+1, r24	; 0x01
		//uart_string("here");
	}
	
	return reval;
    1b5e:	84 2f       	mov	r24, r20
    1b60:	93 2f       	mov	r25, r19
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <DataTransmit>:

circularbuffOut(CircularBufferOut,100);
void DataTransmit()
{
	static unsigned char data='&';
	if(CheckUartReadyToSend()==0 && PopFromCircularBuffer(&CircularBufferOut,&data)==BuffOk)
    1b68:	0e 94 89 08 	call	0x1112	; 0x1112 <CheckUartReadyToSend>
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <DataTransmit+0x20>
    1b70:	68 e5       	ldi	r22, 0x58	; 88
    1b72:	72 e0       	ldi	r23, 0x02	; 2
    1b74:	89 e5       	ldi	r24, 0x59	; 89
    1b76:	92 e0       	ldi	r25, 0x02	; 2
    1b78:	0e 94 1a 04 	call	0x834	; 0x834 <PopFromCircularBuffer>
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <DataTransmit+0x20>
	{    

			//UDR=data;
		SendByte(data);
    1b80:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <data.1771>
    1b84:	0e 94 91 08 	call	0x1122	; 0x1122 <SendByte>
    1b88:	08 95       	ret

00001b8a <FillUartBuffer>:
	}

}

void FillUartBuffer(unsigned char *Uchar)
{
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
	
	while(*Uchar)
    1b8e:	fc 01       	movw	r30, r24
    1b90:	60 81       	ld	r22, Z
    1b92:	66 23       	and	r22, r22
    1b94:	49 f0       	breq	.+18     	; 0x1ba8 <FillUartBuffer+0x1e>
    1b96:	ec 01       	movw	r28, r24
    1b98:	21 96       	adiw	r28, 0x01	; 1
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
    1b9a:	89 e5       	ldi	r24, 0x59	; 89
    1b9c:	92 e0       	ldi	r25, 0x02	; 2
    1b9e:	0e 94 05 04 	call	0x80a	; 0x80a <PushIntoCircularBuffer>
}

void FillUartBuffer(unsigned char *Uchar)
{
	
	while(*Uchar)
    1ba2:	69 91       	ld	r22, Y+
    1ba4:	61 11       	cpse	r22, r1
    1ba6:	f9 cf       	rjmp	.-14     	; 0x1b9a <FillUartBuffer+0x10>
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
	}
	
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <FillUartBufferSiglechar>:
void FillUartBufferSiglechar(char Uchar)
{
	PushIntoCircularBuffer(&CircularBufferOut,Uchar);	
    1bae:	68 2f       	mov	r22, r24
    1bb0:	89 e5       	ldi	r24, 0x59	; 89
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	0e 94 05 04 	call	0x80a	; 0x80a <PushIntoCircularBuffer>
    1bb8:	08 95       	ret

00001bba <TransmitBufferEmpty>:
}
void TransmitBufferEmpty()
{
	if(IsBuffempty(&CircularBufferOut)==BuffOk)
    1bba:	89 e5       	ldi	r24, 0x59	; 89
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 31 04 	call	0x862	; 0x862 <IsBuffempty>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <TransmitBufferEmpty+0x1c>
	{

		PushEventInterface(3,DataTransmit,0,0);
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	64 eb       	ldi	r22, 0xB4	; 180
    1bce:	7d e0       	ldi	r23, 0x0D	; 13
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    1bd6:	08 95       	ret

00001bd8 <create>:
circularbuffevent(CircularBufferEvent,15);
//
/* Create an empty queue */
void create()
{
front = rear = NULL;
    1bd8:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <rear+0x1>
    1bdc:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <rear>
    1be0:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <front+0x1>
    1be4:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <front>
    1be8:	08 95       	ret

00001bea <countSize>:
}

uint8_t countSize()
{
	return count;
}
    1bea:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <count>
    1bee:	08 95       	ret

00001bf0 <PushIntoCircularEventBuffer>:

ebuffState_t PushIntoCircularEventBuffer(ebuff_t* CircularBuffer,struct EventQ data)
{
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <PushIntoCircularEventBuffer+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <PushIntoCircularEventBuffer+0x8>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <PushIntoCircularEventBuffer+0xa>
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	29 83       	std	Y+1, r18	; 0x01
    1c00:	3a 83       	std	Y+2, r19	; 0x02
    1c02:	4b 83       	std	Y+3, r20	; 0x03
    1c04:	5c 83       	std	Y+4, r21	; 0x04
    1c06:	6d 83       	std	Y+5, r22	; 0x05
    1c08:	7e 83       	std	Y+6, r23	; 0x06
	uint8_t next=CircularBuffer->head+1;
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	22 81       	ldd	r18, Z+2	; 0x02
    1c0e:	42 2f       	mov	r20, r18
    1c10:	4f 5f       	subi	r20, 0xFF	; 255
	ebuffState_t ReturnVal=eBuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    1c12:	34 81       	ldd	r19, Z+4	; 0x04
    1c14:	43 17       	cp	r20, r19
    1c16:	08 f0       	brcs	.+2      	; 0x1c1a <PushIntoCircularEventBuffer+0x2a>
	{
		next=0;
    1c18:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	33 81       	ldd	r19, Z+3	; 0x03
    1c1e:	34 17       	cp	r19, r20
    1c20:	b9 f0       	breq	.+46     	; 0x1c50 <PushIntoCircularEventBuffer+0x60>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	d9 01       	movw	r26, r18
    1c26:	aa 0f       	add	r26, r26
    1c28:	bb 1f       	adc	r27, r27
    1c2a:	2a 0f       	add	r18, r26
    1c2c:	3b 1f       	adc	r19, r27
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	a0 81       	ld	r26, Z
    1c34:	b1 81       	ldd	r27, Z+1	; 0x01
    1c36:	a2 0f       	add	r26, r18
    1c38:	b3 1f       	adc	r27, r19
    1c3a:	26 e0       	ldi	r18, 0x06	; 6
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	31 96       	adiw	r30, 0x01	; 1
    1c40:	01 90       	ld	r0, Z+
    1c42:	0d 92       	st	X+, r0
    1c44:	2a 95       	dec	r18
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <PushIntoCircularEventBuffer+0x50>
		CircularBuffer->head=next;
    1c48:	fc 01       	movw	r30, r24
    1c4a:	42 83       	std	Z+2, r20	; 0x02
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <PushIntoCircularEventBuffer+0x62>
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return eBuffFull;
    1c50:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
}
    1c52:	26 96       	adiw	r28, 0x06	; 6
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	08 95       	ret

00001c64 <PopFromCircularEventBuffer>:

ebuffState_t PopFromCircularEventBuffer(ebuff_t  *CircularBuffer,struct EventQ *data)
{
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
	//cli();
	uint8_t next=CircularBuffer->tail+1;
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	2f 5f       	subi	r18, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	89 17       	cp	r24, r25
    1c74:	c9 f0       	breq	.+50     	; 0x1ca8 <PopFromCircularEventBuffer+0x44>
	{
		return eBuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	29 17       	cp	r18, r25
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <PopFromCircularEventBuffer+0x1a>
	{
		next=0;
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	fc 01       	movw	r30, r24
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	8e 0f       	add	r24, r30
    1c88:	9f 1f       	adc	r25, r31
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	e8 81       	ld	r30, Y
    1c90:	f9 81       	ldd	r31, Y+1	; 0x01
    1c92:	e8 0f       	add	r30, r24
    1c94:	f9 1f       	adc	r31, r25
    1c96:	86 e0       	ldi	r24, 0x06	; 6
    1c98:	db 01       	movw	r26, r22
    1c9a:	01 90       	ld	r0, Z+
    1c9c:	0d 92       	st	X+, r0
    1c9e:	8a 95       	dec	r24
    1ca0:	e1 f7       	brne	.-8      	; 0x1c9a <PopFromCircularEventBuffer+0x36>
	CircularBuffer->tail=next;
    1ca2:	2b 83       	std	Y+3, r18	; 0x03
	//sei();
	return eBuffOk;
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <PopFromCircularEventBuffer+0x46>
{
	//cli();
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return eBuffEmpty;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	//sei();
	return eBuffOk;
}
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <PushEventInterface>:
	return eBuffOk;
}


void PushEventInterface(uint8_t eventid,uint16_t  (*EventFuncarg)(void),void *func,uint8_t dataid)
{
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <PushEventInterface+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <PushEventInterface+0x8>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <PushEventInterface+0xa>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	92 2f       	mov	r25, r18
	cli();
    1cc0:	f8 94       	cli
	struct EventQ data;
	data.EventFunction=EventFuncarg;
    1cc2:	26 2f       	mov	r18, r22
    1cc4:	69 83       	std	Y+1, r22	; 0x01
    1cc6:	7a 83       	std	Y+2, r23	; 0x02
	data.EventId=eventid;
    1cc8:	8c 83       	std	Y+4, r24	; 0x04
	data.ptr=func;
    1cca:	64 2f       	mov	r22, r20
    1ccc:	4d 83       	std	Y+5, r20	; 0x05
    1cce:	5e 83       	std	Y+6, r21	; 0x06
	data.State=dataid;
    1cd0:	9b 83       	std	Y+3, r25	; 0x03
	PushIntoCircularEventBuffer(&CircularBufferEvent,data);
    1cd2:	37 2f       	mov	r19, r23
    1cd4:	49 2f       	mov	r20, r25
    1cd6:	58 2f       	mov	r21, r24
    1cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cda:	8e e5       	ldi	r24, 0x5E	; 94
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <PushIntoCircularEventBuffer>
	sei();
    1ce2:	78 94       	sei
}
    1ce4:	26 96       	adiw	r28, 0x06	; 6
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	08 95       	ret

00001cf6 <PopEventInterface>:

ebuffState_t PopEventInterface(struct EventQ *e)
{
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <PopEventInterface+0xa>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <PopEventInterface+0xc>
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <PopEventInterface+0xe>
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	8c 01       	movw	r16, r24
    struct EventQ data;
	if(PopFromCircularEventBuffer(&CircularBufferEvent,&data)==eBuffOk)
    1d0a:	be 01       	movw	r22, r28
    1d0c:	6f 5f       	subi	r22, 0xFF	; 255
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8e e5       	ldi	r24, 0x5E	; 94
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <PopFromCircularEventBuffer>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	0a c0       	rjmp	.+20     	; 0x1d30 <PopEventInterface+0x3a>
	{
		*e=data;
    1d1c:	86 e0       	ldi	r24, 0x06	; 6
    1d1e:	fe 01       	movw	r30, r28
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	d8 01       	movw	r26, r16
    1d24:	01 90       	ld	r0, Z+
    1d26:	0d 92       	st	X+, r0
    1d28:	8a 95       	dec	r24
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <PopEventInterface+0x2e>
		return eBuffOk;
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <PopEventInterface+0x3c>
	}
	return eBuffEmpty;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	26 96       	adiw	r28, 0x06	; 6
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	08 95       	ret

00001d48 <__vector_16>:


//ISR(TIMER0_COMP_vect) {
static volatile uint8_t pin_timeout=1;
static volatile uint8_t TimeCount;
ISR(TIMER0_OVF_vect){
    1d48:	1f 92       	push	r1
    1d4a:	0f 92       	push	r0
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	0f 92       	push	r0
    1d50:	11 24       	eor	r1, r1
    1d52:	8f 93       	push	r24
    1d54:	9f 93       	push	r25
    1d56:	af 93       	push	r26
    1d58:	bf 93       	push	r27
	static uint32_t counter5ms=0;
	if(counter5ms==1)
    1d5a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <counter5ms.1941>
    1d5e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <counter5ms.1941+0x1>
    1d62:	a0 91 4b 04 	lds	r26, 0x044B	; 0x80044b <counter5ms.1941+0x2>
    1d66:	b0 91 4c 04 	lds	r27, 0x044C	; 0x80044c <counter5ms.1941+0x3>
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	a1 05       	cpc	r26, r1
    1d6e:	b1 05       	cpc	r27, r1
    1d70:	69 f4       	brne	.+26     	; 0x1d8c <__vector_16+0x44>
	{   
		TimeCount++;
    1d72:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <TimeCount>
    1d76:	8f 5f       	subi	r24, 0xFF	; 255
    1d78:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <TimeCount>
		counter5ms=0;
    1d7c:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <counter5ms.1941>
    1d80:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <counter5ms.1941+0x1>
    1d84:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <counter5ms.1941+0x2>
    1d88:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <counter5ms.1941+0x3>
		

	}
	//TCNT0=70;
	TCNT0=0;
    1d8c:	16 bc       	out	0x26, r1	; 38
	counter5ms++;
    1d8e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <counter5ms.1941>
    1d92:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <counter5ms.1941+0x1>
    1d96:	a0 91 4b 04 	lds	r26, 0x044B	; 0x80044b <counter5ms.1941+0x2>
    1d9a:	b0 91 4c 04 	lds	r27, 0x044C	; 0x80044c <counter5ms.1941+0x3>
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	b1 1d       	adc	r27, r1
    1da4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <counter5ms.1941>
    1da8:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <counter5ms.1941+0x1>
    1dac:	a0 93 4b 04 	sts	0x044B, r26	; 0x80044b <counter5ms.1941+0x2>
    1db0:	b0 93 4c 04 	sts	0x044C, r27	; 0x80044c <counter5ms.1941+0x3>
}
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <set_timer>:
void set_timer(uint16_t enable)
{
	//PORTB|=x;
	if(enable==1)
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <set_timer+0xe>
	{
		TIMSK0|=(1<<TOIE0);
    1dca:	ee e6       	ldi	r30, 0x6E	; 110
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 60       	ori	r24, 0x01	; 1
    1dd2:	80 83       	st	Z, r24
    1dd4:	08 95       	ret

00001dd6 <main>:
   // event=0;
	uint16_t tmp;
	uint16_t Limitflag=0;
	//
    
	ExtIntInit();
    1dd6:	0e 94 a0 04 	call	0x940	; 0x940 <ExtIntInit>
	//
	//
	DDRC=0x00;
    1dda:	17 b8       	out	0x07, r1	; 7
	//PinOutConfig(PIN_OUT1);
	DDRD=0b11111011;					// set pd2 as input for int
    1ddc:	8b ef       	ldi	r24, 0xFB	; 251
    1dde:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PIND2);	
    1de0:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PIND3);				// Port C lower nibble initialization as high (Pull-up mode)
    1de2:	5b 9a       	sbi	0x0b, 3	; 11
	//uart_string("I am working.");
	sei();
    1de4:	78 94       	sei
	// enable timer overflow interrupt for Timer0
	TIMSK0|=(1<<TOIE0);
    1de6:	ee e6       	ldi	r30, 0x6E	; 110
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	81 60       	ori	r24, 0x01	; 1
    1dee:	80 83       	st	Z, r24
	// set timer0 counter initial value to 0
	TCNT0=70;//255-(clock_freq/1000000);
    1df0:	86 e4       	ldi	r24, 0x46	; 70
    1df2:	86 bd       	out	0x26, r24	; 38
	// start timer0 with / prescaler 78 Hz
	TCCR0B = (1<<CS01)|(1<<CS00);
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	85 bd       	out	0x25, r24	; 37

uart_init();
    1df8:	0e 94 57 07 	call	0xeae	; 0xeae <uart_init>
	adc_init();				//initialization of UART
    1dfc:	0e 94 be 03 	call	0x77c	; 0x77c <adc_init>
	create();
    1e00:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <create>
    uart_string("working");
    1e04:	85 ef       	ldi	r24, 0xF5	; 245
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	0e 94 bd 07 	call	0xf7a	; 0xf7a <uart_string>
	// enable interrupts
	//sei();
	//pin
	set_timer(1);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <set_timer>
	//uart_string(testev2->ptr);
	//AddEvent((uint8_t *)str,0);
	//AddEvent((uint8_t *)str,1);
	//AddEvent((uint8_t *)str1,2);
	//PrintEvents();
								e.EventId=1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <e+0x3>
								e.EventFunction=tasks;
    1e1a:	84 ef       	ldi	r24, 0xF4	; 244
    1e1c:	94 e1       	ldi	r25, 0x14	; 20
    1e1e:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <e+0x1>
    1e22:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <e>
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
	   {
		   if(e.EventFunction!=0)
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    1e26:	cc eb       	ldi	r28, 0xBC	; 188
    1e28:	d5 e0       	ldi	r29, 0x05	; 5
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
				  if(e.EventId==52)
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    1e2a:	0d eb       	ldi	r16, 0xBD	; 189
    1e2c:	15 e0       	ldi	r17, 0x05	; 5
	//PrintEvents();
								e.EventId=1;
								e.EventFunction=tasks;
	while(1)
	{
		if(TimeCount==1)
    1e2e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <TimeCount>
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	b9 f4       	brne	.+46     	; 0x1e64 <main+0x8e>
		{
			static uint8_t odd=1;
			odd++;
    1e36:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <odd.1950>
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <odd.1950>
		   PushEventInterface(1,tasks,0,0);
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	64 ef       	ldi	r22, 0xF4	; 244
    1e48:	74 e1       	ldi	r23, 0x14	; 20
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
		   PushEventInterface(2,NonPeriodicTaskFuncCall,0,0);
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e5       	ldi	r22, 0x50	; 80
    1e58:	75 e1       	ldi	r23, 0x15	; 21
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
           TimeCount=0;
    1e60:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <TimeCount>
		}
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
    1e64:	89 eb       	ldi	r24, 0xB9	; 185
    1e66:	95 e0       	ldi	r25, 0x05	; 5
    1e68:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <PopEventInterface>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <main+0x118>
	   {
		   if(e.EventFunction!=0)
    1e70:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <e>
    1e74:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <e+0x1>
    1e78:	61 15       	cp	r22, r1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	c1 f1       	breq	.+112    	; 0x1eee <main+0x118>
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    1e7e:	98 81       	ld	r25, Y
    1e80:	89 2f       	mov	r24, r25
    1e82:	8d 57       	subi	r24, 0x7D	; 125
    1e84:	8b 34       	cpi	r24, 0x4B	; 75
    1e86:	80 f4       	brcc	.+32     	; 0x1ea8 <main+0xd2>
		   {
			   if(e.EventId<175)
    1e88:	9f 3a       	cpi	r25, 0xAF	; 175
    1e8a:	48 f4       	brcc	.+18     	; 0x1e9e <main+0xc8>
			   {
			   callbackgetFunction(e.EventId-125)(e.EventFunction);		
    1e8c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <callbackgetFunction>
    1e90:	fc 01       	movw	r30, r24
    1e92:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <e>
    1e96:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <e+0x1>
    1e9a:	09 95       	icall
    1e9c:	28 c0       	rjmp	.+80     	; 0x1eee <main+0x118>
			   }
			   else
			   {
				 callbackSetFunction(e.EventId-173,e.EventFunction);  
    1e9e:	89 2f       	mov	r24, r25
    1ea0:	8d 5a       	subi	r24, 0xAD	; 173
    1ea2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <callbackSetFunction>
    1ea6:	23 c0       	rjmp	.+70     	; 0x1eee <main+0x118>
			   }
		   }
		   else
		   {
			   if(e.EventId>=200)
    1ea8:	98 3c       	cpi	r25, 0xC8	; 200
    1eaa:	30 f0       	brcs	.+12     	; 0x1eb8 <main+0xe2>
			   {
				  e.EventFunction(e.ptr); 
    1eac:	d8 01       	movw	r26, r16
    1eae:	8d 91       	ld	r24, X+
    1eb0:	9c 91       	ld	r25, X
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	09 95       	icall
    1eb6:	1b c0       	rjmp	.+54     	; 0x1eee <main+0x118>
			   }
			   else if(e.EventId>=50 && e.EventId<125)
    1eb8:	89 2f       	mov	r24, r25
    1eba:	82 53       	subi	r24, 0x32	; 50
    1ebc:	8b 34       	cpi	r24, 0x4B	; 75
    1ebe:	98 f4       	brcc	.+38     	; 0x1ee6 <main+0x110>
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <callbackgetFunction>
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	8b eb       	ldi	r24, 0xBB	; 187
    1eca:	95 e0       	ldi	r25, 0x05	; 5
    1ecc:	09 95       	icall
				  if(e.EventId==52)
    1ece:	88 81       	ld	r24, Y
    1ed0:	84 33       	cpi	r24, 0x34	; 52
    1ed2:	69 f4       	brne	.+26     	; 0x1eee <main+0x118>
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <callbackgetFunction>
    1eda:	fc 01       	movw	r30, r24
    1edc:	d8 01       	movw	r26, r16
    1ede:	8d 91       	ld	r24, X+
    1ee0:	9c 91       	ld	r25, X
    1ee2:	09 95       	icall
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <main+0x118>
				  }
				  //callbackSetFunction(e.EventId-48,e.EventFunction);
			   }
			   else
			   {
				  e.EventFunction(0); 
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	fb 01       	movw	r30, r22
    1eec:	09 95       	icall
			   }
			   
		   }
		   }
	   }
		  if(countSize()>1)
    1eee:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <countSize>
		  {
			  
			//OSRR_Events();  
		 }
	if(event ==1 || event ==0)
    1ef2:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <event>
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	21 f0       	breq	.+8      	; 0x1f02 <main+0x12c>
    1efa:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <event>
    1efe:	81 11       	cpse	r24, r1
    1f00:	96 cf       	rjmp	.-212    	; 0x1e2e <main+0x58>
	{
		ApplicationHookUP(&event);
    1f02:	85 ea       	ldi	r24, 0xA5	; 165
    1f04:	94 e0       	ldi	r25, 0x04	; 4
    1f06:	0e 94 7e 15 	call	0x2afc	; 0x2afc <ApplicationHookUP>
    1f0a:	91 cf       	rjmp	.-222    	; 0x1e2e <main+0x58>

00001f0c <callbackSetFunction>:
 */ 
#include "OSRR.h"
callbackarrayfuc callbackarray[10];
void callbackSetFunction(uint8_t pos,callbackarrayfuc arg)
{
	callbackarray[pos]=arg;
    1f0c:	e8 2f       	mov	r30, r24
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	e1 54       	subi	r30, 0x41	; 65
    1f16:	fa 4f       	sbci	r31, 0xFA	; 250
    1f18:	71 83       	std	Z+1, r23	; 0x01
    1f1a:	60 83       	st	Z, r22
    1f1c:	08 95       	ret

00001f1e <callbackgetFunction>:
}
callbackarrayfuc callbackgetFunction(uint8_t pos)
{
	return callbackarray[pos];
    1f1e:	e8 2f       	mov	r30, r24
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	e1 54       	subi	r30, 0x41	; 65
    1f28:	fa 4f       	sbci	r31, 0xFA	; 250
}
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	08 95       	ret

00001f30 <num2CharArray>:
	return 0;
}
uint16_t task6Open(void)
{
	
}
    1f30:	28 2f       	mov	r18, r24
    1f32:	fb 01       	movw	r30, r22
    1f34:	39 e2       	ldi	r19, 0x29	; 41
    1f36:	83 9f       	mul	r24, r19
    1f38:	31 2d       	mov	r19, r1
    1f3a:	11 24       	eor	r1, r1
    1f3c:	32 95       	swap	r19
    1f3e:	3f 70       	andi	r19, 0x0F	; 15
    1f40:	4c e9       	ldi	r20, 0x9C	; 156
    1f42:	43 03       	mulsu	r20, r19
    1f44:	c0 01       	movw	r24, r0
    1f46:	11 24       	eor	r1, r1
    1f48:	82 0f       	add	r24, r18
    1f4a:	91 1d       	adc	r25, r1
    1f4c:	6a e0       	ldi	r22, 0x0A	; 10
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__divmodhi4>
    1f54:	80 e3       	ldi	r24, 0x30	; 48
    1f56:	83 0f       	add	r24, r19
    1f58:	80 83       	st	Z, r24
    1f5a:	80 e3       	ldi	r24, 0x30	; 48
    1f5c:	86 0f       	add	r24, r22
    1f5e:	81 83       	std	Z+1, r24	; 0x01
    1f60:	20 5d       	subi	r18, 0xD0	; 208
    1f62:	34 9f       	mul	r19, r20
    1f64:	20 0d       	add	r18, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	66 0f       	add	r22, r22
    1f6a:	86 2f       	mov	r24, r22
    1f6c:	88 0f       	add	r24, r24
    1f6e:	88 0f       	add	r24, r24
    1f70:	68 0f       	add	r22, r24
    1f72:	26 1b       	sub	r18, r22
    1f74:	22 83       	std	Z+2, r18	; 0x02
    1f76:	08 95       	ret

00001f78 <task6>:
    1f78:	9c 01       	movw	r18, r24
    1f7a:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <EspConnected>
    1f7e:	91 30       	cpi	r25, 0x01	; 1
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <task6+0xc>
    1f82:	4a c0       	rjmp	.+148    	; 0x2018 <task6+0xa0>
    1f84:	f9 01       	movw	r30, r18
    1f86:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <CommunicationStates.2392>
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	71 f0       	breq	.+28     	; 0x1faa <task6+0x32>
    1f8e:	28 f0       	brcs	.+10     	; 0x1f9a <task6+0x22>
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	c9 f0       	breq	.+50     	; 0x1fc6 <task6+0x4e>
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	41 f1       	breq	.+80     	; 0x1fe8 <task6+0x70>
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <task6+0xa0>
    1f9a:	0e 94 4e 03 	call	0x69c	; 0x69c <RequestWait>
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	3b c0       	rjmp	.+118    	; 0x2018 <task6+0xa0>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <CommunicationStates.2392>
    1fa8:	37 c0       	rjmp	.+110    	; 0x2018 <task6+0xa0>
    1faa:	0e 94 ef 02 	call	0x5de	; 0x5de <CheckInput>
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	4e e9       	ldi	r20, 0x9E	; 158
    1fb2:	53 e0       	ldi	r21, 0x03	; 3
    1fb4:	63 ee       	ldi	r22, 0xE3	; 227
    1fb6:	7a e0       	ldi	r23, 0x0A	; 10
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <CommunicationStates.2392>
    1fc4:	29 c0       	rjmp	.+82     	; 0x2018 <task6+0xa0>
    1fc6:	81 81       	ldd	r24, Z+1	; 0x01
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	31 f5       	brne	.+76     	; 0x2018 <task6+0xa0>
    1fcc:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <pointersave.2394+0x1>
    1fd0:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <pointersave.2394>
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <fp.2393+0x1>
    1fdc:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <fp.2393>
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <CommunicationStates.2392>
    1fe6:	18 c0       	rjmp	.+48     	; 0x2018 <task6+0xa0>
    1fe8:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <pointersave.2394>
    1fec:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <pointersave.2394+0x1>
    1ff0:	86 81       	ldd	r24, Z+6	; 0x06
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	99 0f       	add	r25, r25
    1ff6:	89 0f       	add	r24, r25
    1ff8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <SendData>
    1ffc:	81 11       	cpse	r24, r1
    1ffe:	0c c0       	rjmp	.+24     	; 0x2018 <task6+0xa0>
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <CommunicationStates.2392>
    2006:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <fp.2393>
    200a:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <fp.2393+0x1>
    200e:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <pointersave.2394>
    2012:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <pointersave.2394+0x1>
    2016:	09 95       	icall
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	08 95       	ret

0000201e <task1>:
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	28 97       	sbiw	r28, 0x08	; 8
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <time1.2324>
    203a:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <time1.2324+0x1>
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <time1.2324+0x1>
    2044:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <time1.2324>
    2048:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <Init_Flag.2329>
    204c:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <Init_Flag.2329+0x1>
    2050:	89 2b       	or	r24, r25
    2052:	71 f4       	brne	.+28     	; 0x2070 <task1+0x52>
    2054:	0e 94 4c 0c 	call	0x1898	; 0x1898 <InitMax>
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <Init_Flag.2329+0x1>
    2060:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <Init_Flag.2329>
    2064:	80 e5       	ldi	r24, 0x50	; 80
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <TankSize+0x1>
    206c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <TankSize>
    2070:	67 e0       	ldi	r22, 0x07	; 7
    2072:	8d e0       	ldi	r24, 0x0D	; 13
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DispChar>
    207a:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <time1.2324>
    207e:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <time1.2324+0x1>
    2082:	0a 97       	sbiw	r24, 0x0a	; 10
    2084:	09 f0       	breq	.+2      	; 0x2088 <task1+0x6a>
    2086:	8c c0       	rjmp	.+280    	; 0x21a0 <task1+0x182>
    2088:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <SensorValue>
    208c:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <TankSize>
    2090:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <TankSize+0x1>
    2094:	42 9f       	mul	r20, r18
    2096:	c0 01       	movw	r24, r0
    2098:	43 9f       	mul	r20, r19
    209a:	90 0d       	add	r25, r0
    209c:	11 24       	eor	r1, r1
    209e:	20 e1       	ldi	r18, 0x10	; 16
    20a0:	37 e2       	ldi	r19, 0x27	; 39
    20a2:	28 1b       	sub	r18, r24
    20a4:	39 0b       	sbc	r19, r25
    20a6:	36 95       	lsr	r19
    20a8:	27 95       	ror	r18
    20aa:	36 95       	lsr	r19
    20ac:	27 95       	ror	r18
    20ae:	ab e7       	ldi	r26, 0x7B	; 123
    20b0:	b4 e1       	ldi	r27, 0x14	; 20
    20b2:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    20b6:	ac 01       	movw	r20, r24
    20b8:	56 95       	lsr	r21
    20ba:	47 95       	ror	r20
    20bc:	1c 82       	std	Y+4, r1	; 0x04
    20be:	9a 01       	movw	r18, r20
    20c0:	36 95       	lsr	r19
    20c2:	32 2f       	mov	r19, r18
    20c4:	22 27       	eor	r18, r18
    20c6:	37 95       	ror	r19
    20c8:	27 95       	ror	r18
    20ca:	24 1b       	sub	r18, r20
    20cc:	35 0b       	sbc	r19, r21
    20ce:	36 95       	lsr	r19
    20d0:	27 95       	ror	r18
    20d2:	36 95       	lsr	r19
    20d4:	27 95       	ror	r18
    20d6:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    20da:	8c 01       	movw	r16, r24
    20dc:	16 95       	lsr	r17
    20de:	07 95       	ror	r16
    20e0:	be 01       	movw	r22, r28
    20e2:	6f 5f       	subi	r22, 0xFF	; 255
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	84 2f       	mov	r24, r20
    20e8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <num2CharArray>
    20ec:	43 e0       	ldi	r20, 0x03	; 3
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	6a e4       	ldi	r22, 0x4A	; 74
    20f2:	70 e0       	ldi	r23, 0x00	; 0
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 7f 05 	call	0xafe	; 0xafe <ssd1306_String_font6x8>
    20fc:	43 e0       	ldi	r20, 0x03	; 3
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	60 e6       	ldi	r22, 0x60	; 96
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	8d ef       	ldi	r24, 0xFD	; 253
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	0e 94 7f 05 	call	0xafe	; 0xafe <ssd1306_String_font6x8>
    210c:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <SensorValue>
    2110:	84 31       	cpi	r24, 0x14	; 20
    2112:	90 f4       	brcc	.+36     	; 0x2138 <task1+0x11a>
    2114:	20 91 6a 04 	lds	r18, 0x046A	; 0x80046a <Upcounter.2327>
    2118:	30 91 6b 04 	lds	r19, 0x046B	; 0x80046b <Upcounter.2327+0x1>
    211c:	28 32       	cpi	r18, 0x28	; 40
    211e:	31 05       	cpc	r19, r1
    2120:	58 f4       	brcc	.+22     	; 0x2138 <task1+0x11a>
    2122:	2f 5f       	subi	r18, 0xFF	; 255
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	30 93 6b 04 	sts	0x046B, r19	; 0x80046b <Upcounter.2327+0x1>
    212a:	20 93 6a 04 	sts	0x046A, r18	; 0x80046a <Upcounter.2327>
    212e:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <DownCounter.2328+0x1>
    2132:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <DownCounter.2328>
    2136:	27 c0       	rjmp	.+78     	; 0x2186 <task1+0x168>
    2138:	8b 37       	cpi	r24, 0x7B	; 123
    213a:	a0 f0       	brcs	.+40     	; 0x2164 <task1+0x146>
    213c:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <DownCounter.2328>
    2140:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <DownCounter.2328+0x1>
    2144:	28 32       	cpi	r18, 0x28	; 40
    2146:	31 05       	cpc	r19, r1
    2148:	68 f4       	brcc	.+26     	; 0x2164 <task1+0x146>
    214a:	8f 3f       	cpi	r24, 0xFF	; 255
    214c:	59 f0       	breq	.+22     	; 0x2164 <task1+0x146>
    214e:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <Upcounter.2327+0x1>
    2152:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <Upcounter.2327>
    2156:	2f 5f       	subi	r18, 0xFF	; 255
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	30 93 69 04 	sts	0x0469, r19	; 0x800469 <DownCounter.2328+0x1>
    215e:	20 93 68 04 	sts	0x0468, r18	; 0x800468 <DownCounter.2328>
    2162:	11 c0       	rjmp	.+34     	; 0x2186 <task1+0x168>
    2164:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <Upcounter.2327+0x1>
    2168:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <Upcounter.2327>
    216c:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <DownCounter.2328+0x1>
    2170:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <DownCounter.2328>
    2174:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <COUNT.2326+0x1>
    2178:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <COUNT.2326>
    217c:	42 e0       	ldi	r20, 0x02	; 2
    217e:	66 e0       	ldi	r22, 0x06	; 6
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
    2186:	c8 01       	movw	r24, r16
    2188:	0e 94 c6 0c 	call	0x198c	; 0x198c <DispDigits>
    218c:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <Toggle1.2331>
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	89 27       	eor	r24, r25
    2194:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <Toggle1.2331>
    2198:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <time1.2324+0x1>
    219c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <time1.2324>
    21a0:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <Upcounter.2327>
    21a4:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <Upcounter.2327+0x1>
    21a8:	89 2b       	or	r24, r25
    21aa:	31 f4       	brne	.+12     	; 0x21b8 <task1+0x19a>
    21ac:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <DownCounter.2328>
    21b0:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <DownCounter.2328+0x1>
    21b4:	89 2b       	or	r24, r25
    21b6:	f1 f0       	breq	.+60     	; 0x21f4 <task1+0x1d6>
    21b8:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <COUNT.2326>
    21bc:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <COUNT.2326+0x1>
    21c0:	85 36       	cpi	r24, 0x65	; 101
    21c2:	91 05       	cpc	r25, r1
    21c4:	70 f0       	brcs	.+28     	; 0x21e2 <task1+0x1c4>
    21c6:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <COUNT.2326+0x1>
    21ca:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <COUNT.2326>
    21ce:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <Toggle.2330>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	89 27       	eor	r24, r25
    21d6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <Toggle.2330>
    21da:	42 e0       	ldi	r20, 0x02	; 2
    21dc:	66 e0       	ldi	r22, 0x06	; 6
    21de:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
    21e2:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <COUNT.2326>
    21e6:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <COUNT.2326+0x1>
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <COUNT.2326+0x1>
    21f0:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <COUNT.2326>
    21f4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <time2.2325>
    21f8:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <time2.2325+0x1>
    21fc:	02 97       	sbiw	r24, 0x02	; 2
    21fe:	08 f4       	brcc	.+2      	; 0x2202 <task1+0x1e4>
    2200:	57 c0       	rjmp	.+174    	; 0x22b0 <task1+0x292>
    2202:	18 86       	std	Y+8, r1	; 0x08
    2204:	1f 82       	std	Y+7, r1	; 0x07
    2206:	ce 01       	movw	r24, r28
    2208:	07 96       	adiw	r24, 0x07	; 7
    220a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <RTEModuleFirstCh>
    220e:	2f 81       	ldd	r18, Y+7	; 0x07
    2210:	38 85       	ldd	r19, Y+8	; 0x08
    2212:	83 2f       	mov	r24, r19
    2214:	88 1f       	adc	r24, r24
    2216:	88 27       	eor	r24, r24
    2218:	88 1f       	adc	r24, r24
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	1e 82       	std	Y+6, r1	; 0x06
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	d9 f4       	brne	.+54     	; 0x2258 <task1+0x23a>
    2222:	33 70       	andi	r19, 0x03	; 3
    2224:	38 87       	std	Y+8, r19	; 0x08
    2226:	2f 83       	std	Y+7, r18	; 0x07
    2228:	1c 82       	std	Y+4, r1	; 0x04
    222a:	be 01       	movw	r22, r28
    222c:	6f 5f       	subi	r22, 0xFF	; 255
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <SensorValue>
    2234:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <num2CharArray>
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	6c e5       	ldi	r22, 0x5C	; 92
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	ce 01       	movw	r24, r28
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	0e 94 7f 05 	call	0xafe	; 0xafe <ssd1306_String_font6x8>
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	60 e7       	ldi	r22, 0x70	; 112
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	93 e0       	ldi	r25, 0x03	; 3
    2254:	0e 94 7f 05 	call	0xafe	; 0xafe <ssd1306_String_font6x8>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	98 e0       	ldi	r25, 0x08	; 8
    225c:	98 87       	std	Y+8, r25	; 0x08
    225e:	8f 83       	std	Y+7, r24	; 0x07
    2260:	ce 01       	movw	r24, r28
    2262:	07 96       	adiw	r24, 0x07	; 7
    2264:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <RTEModuleFirstCh>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e1       	ldi	r25, 0x10	; 16
    226c:	98 87       	std	Y+8, r25	; 0x08
    226e:	8f 83       	std	Y+7, r24	; 0x07
    2270:	ce 01       	movw	r24, r28
    2272:	07 96       	adiw	r24, 0x07	; 7
    2274:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <RTEModuleFirstCh>
    2278:	2f 81       	ldd	r18, Y+7	; 0x07
    227a:	38 85       	ldd	r19, Y+8	; 0x08
    227c:	83 2f       	mov	r24, r19
    227e:	88 1f       	adc	r24, r24
    2280:	88 27       	eor	r24, r24
    2282:	88 1f       	adc	r24, r24
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	1e 82       	std	Y+6, r1	; 0x06
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	19 f4       	brne	.+6      	; 0x2292 <task1+0x274>
    228c:	33 70       	andi	r19, 0x03	; 3
    228e:	38 87       	std	Y+8, r19	; 0x08
    2290:	2f 83       	std	Y+7, r18	; 0x07
    2292:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <time2.2325+0x1>
    2296:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <time2.2325>
    229a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <ssdcount.2332>
    229e:	8f 37       	cpi	r24, 0x7F	; 127
    22a0:	20 f4       	brcc	.+8      	; 0x22aa <task1+0x28c>
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <ssdcount.2332>
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <task1+0x292>
    22aa:	87 53       	subi	r24, 0x37	; 55
    22ac:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <ssdcount.2332>
    22b0:	0f 37       	cpi	r16, 0x7F	; 127
    22b2:	11 05       	cpc	r17, r1
    22b4:	38 f4       	brcc	.+14     	; 0x22c4 <task1+0x2a6>
    22b6:	a8 01       	movw	r20, r16
    22b8:	65 e0       	ldi	r22, 0x05	; 5
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 92 05 	call	0xb24	; 0xb24 <ssd1306_Fill_Rectangle>
    22c4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <time2.2325>
    22c8:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <time2.2325+0x1>
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <time2.2325+0x1>
    22d2:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <time2.2325>
    22d6:	84 e0       	ldi	r24, 0x04	; 4
    22d8:	93 e0       	ldi	r25, 0x03	; 3
    22da:	0e 94 bd 07 	call	0xf7a	; 0xf7a <uart_string>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	28 96       	adiw	r28, 0x08	; 8
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <task2>:
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <task2+0x8>
    2300:	1f 92       	push	r1
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <time1.2352>
    230a:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <time1.2352+0x1>
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <time1.2352+0x1>
    2314:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <time1.2352>
    2318:	84 3f       	cpi	r24, 0xF4	; 244
    231a:	91 40       	sbci	r25, 0x01	; 1
    231c:	09 f0       	breq	.+2      	; 0x2320 <task2+0x28>
    231e:	cd c0       	rjmp	.+410    	; 0x24ba <task2+0x1c2>
    2320:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <signal>
    2324:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <time1.2352+0x1>
    2328:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <time1.2352>
    232c:	19 82       	std	Y+1, r1	; 0x01
    232e:	1a 82       	std	Y+2, r1	; 0x02
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	8b 83       	std	Y+3, r24	; 0x03
    2334:	ce 01       	movw	r24, r28
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	0e 94 76 0d 	call	0x1aec	; 0x1aec <SignalHandlerFunc>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	82 30       	cpi	r24, 0x02	; 2
    2344:	09 f0       	breq	.+2      	; 0x2348 <task2+0x50>
    2346:	a3 c0       	rjmp	.+326    	; 0x248e <task2+0x196>
    2348:	49 81       	ldd	r20, Y+1	; 0x01
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <value.2427>
    2350:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <value.2427+0x1>
    2354:	e4 17       	cp	r30, r20
    2356:	f5 07       	cpc	r31, r21
    2358:	08 f0       	brcs	.+2      	; 0x235c <task2+0x64>
    235a:	42 c0       	rjmp	.+132    	; 0x23e0 <task2+0xe8>
    235c:	ca 01       	movw	r24, r20
    235e:	8e 1b       	sub	r24, r30
    2360:	9f 0b       	sbc	r25, r31
    2362:	64 e6       	ldi	r22, 0x64	; 100
    2364:	68 9f       	mul	r22, r24
    2366:	90 01       	movw	r18, r0
    2368:	69 9f       	mul	r22, r25
    236a:	30 0d       	add	r19, r0
    236c:	11 24       	eor	r1, r1
    236e:	2c 30       	cpi	r18, 0x0C	; 12
    2370:	87 e0       	ldi	r24, 0x07	; 7
    2372:	38 07       	cpc	r19, r24
    2374:	90 f4       	brcc	.+36     	; 0x239a <task2+0xa2>
    2376:	a5 e8       	ldi	r26, 0x85	; 133
    2378:	ba e5       	ldi	r27, 0x5A	; 90
    237a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    237e:	00 24       	eor	r0, r0
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	00 1c       	adc	r0, r0
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	00 1c       	adc	r0, r0
    238c:	89 2f       	mov	r24, r25
    238e:	90 2d       	mov	r25, r0
    2390:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <offset.2429+0x1>
    2394:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <offset.2429>
    2398:	11 c0       	rjmp	.+34     	; 0x23bc <task2+0xc4>
    239a:	36 95       	lsr	r19
    239c:	27 95       	ror	r18
    239e:	36 95       	lsr	r19
    23a0:	27 95       	ror	r18
    23a2:	a9 ea       	ldi	r26, 0xA9	; 169
    23a4:	b8 e4       	ldi	r27, 0x48	; 72
    23a6:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    23aa:	88 0f       	add	r24, r24
    23ac:	89 2f       	mov	r24, r25
    23ae:	88 1f       	adc	r24, r24
    23b0:	99 0b       	sbc	r25, r25
    23b2:	91 95       	neg	r25
    23b4:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <offset.2429+0x1>
    23b8:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <offset.2429>
    23bc:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <offset.2429>
    23c0:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <offset.2429+0x1>
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	29 f4       	brne	.+10     	; 0x23d2 <task2+0xda>
    23c8:	50 93 5e 04 	sts	0x045E, r21	; 0x80045e <value.2427+0x1>
    23cc:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <value.2427>
    23d0:	48 c0       	rjmp	.+144    	; 0x2462 <task2+0x16a>
    23d2:	e8 0f       	add	r30, r24
    23d4:	f9 1f       	adc	r31, r25
    23d6:	f0 93 5e 04 	sts	0x045E, r31	; 0x80045e <value.2427+0x1>
    23da:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <value.2427>
    23de:	41 c0       	rjmp	.+130    	; 0x2462 <task2+0x16a>
    23e0:	cf 01       	movw	r24, r30
    23e2:	84 1b       	sub	r24, r20
    23e4:	95 0b       	sbc	r25, r21
    23e6:	64 e6       	ldi	r22, 0x64	; 100
    23e8:	68 9f       	mul	r22, r24
    23ea:	90 01       	movw	r18, r0
    23ec:	69 9f       	mul	r22, r25
    23ee:	30 0d       	add	r19, r0
    23f0:	11 24       	eor	r1, r1
    23f2:	2c 30       	cpi	r18, 0x0C	; 12
    23f4:	87 e0       	ldi	r24, 0x07	; 7
    23f6:	38 07       	cpc	r19, r24
    23f8:	90 f4       	brcc	.+36     	; 0x241e <task2+0x126>
    23fa:	a5 e8       	ldi	r26, 0x85	; 133
    23fc:	ba e5       	ldi	r27, 0x5A	; 90
    23fe:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    2402:	00 24       	eor	r0, r0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	00 1c       	adc	r0, r0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	00 1c       	adc	r0, r0
    2410:	89 2f       	mov	r24, r25
    2412:	90 2d       	mov	r25, r0
    2414:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <offset.2429+0x1>
    2418:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <offset.2429>
    241c:	11 c0       	rjmp	.+34     	; 0x2440 <task2+0x148>
    241e:	36 95       	lsr	r19
    2420:	27 95       	ror	r18
    2422:	36 95       	lsr	r19
    2424:	27 95       	ror	r18
    2426:	a9 ea       	ldi	r26, 0xA9	; 169
    2428:	b8 e4       	ldi	r27, 0x48	; 72
    242a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <__umulhisi3>
    242e:	88 0f       	add	r24, r24
    2430:	89 2f       	mov	r24, r25
    2432:	88 1f       	adc	r24, r24
    2434:	99 0b       	sbc	r25, r25
    2436:	91 95       	neg	r25
    2438:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <offset.2429+0x1>
    243c:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <offset.2429>
    2440:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <offset.2429>
    2444:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <offset.2429+0x1>
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	29 f4       	brne	.+10     	; 0x2456 <task2+0x15e>
    244c:	50 93 5e 04 	sts	0x045E, r21	; 0x80045e <value.2427+0x1>
    2450:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <value.2427>
    2454:	06 c0       	rjmp	.+12     	; 0x2462 <task2+0x16a>
    2456:	e8 1b       	sub	r30, r24
    2458:	f9 0b       	sbc	r31, r25
    245a:	f0 93 5e 04 	sts	0x045E, r31	; 0x80045e <value.2427+0x1>
    245e:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <value.2427>
    2462:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <value.2427>
    2466:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <Sigout>
    246a:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <SensorValue>
    246e:	14 e6       	ldi	r17, 0x64	; 100
    2470:	10 93 78 04 	sts	0x0478, r17	; 0x800478 <quality>
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	70 e1       	ldi	r23, 0x10	; 16
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
    2484:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <Errorcount.2354>
    2488:	10 93 78 04 	sts	0x0478, r17	; 0x800478 <quality>
    248c:	16 c0       	rjmp	.+44     	; 0x24ba <task2+0x1c2>
    248e:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <Errorcount.2354>
    2492:	8f 5f       	subi	r24, 0xFF	; 255
    2494:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <Errorcount.2354>
    2498:	8a 30       	cpi	r24, 0x0A	; 10
    249a:	78 f0       	brcs	.+30     	; 0x24ba <task2+0x1c2>
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	70 e1       	ldi	r23, 0x10	; 16
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <Sigout>
    24b2:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <SensorValue>
    24b6:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <quality>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	08 95       	ret

000024cc <task3>:
    24cc:	0e 94 7f 00 	call	0xfe	; 0xfe <Blink>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	08 95       	ret

000024d6 <task4>:
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	00 d0       	rcall	.+0      	; 0x24dc <task4+0x6>
    24dc:	1f 92       	push	r1
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	8b 83       	std	Y+3, r24	; 0x03
    24ec:	ce 01       	movw	r24, r28
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <SignalHandlerFunc>
    24f4:	88 23       	and	r24, r24
    24f6:	29 f0       	breq	.+10     	; 0x2502 <task4+0x2c>
    24f8:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <SWITCHCOUNT.2373>
    24fc:	8f 5f       	subi	r24, 0xFF	; 255
    24fe:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <SWITCHCOUNT.2373>
    2502:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <SWITCHCOUNT.2373>
    2506:	89 3c       	cpi	r24, 0xC9	; 201
    2508:	10 f0       	brcs	.+4      	; 0x250e <task4+0x38>
    250a:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <SWITCHCOUNT.2373>
    250e:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <countTask4.2371>
    2512:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <countTask4.2371+0x1>
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <countTask4.2371+0x1>
    251c:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <countTask4.2371>
    2520:	84 36       	cpi	r24, 0x64	; 100
    2522:	91 05       	cpc	r25, r1
    2524:	b8 f0       	brcs	.+46     	; 0x2554 <task4+0x7e>
    2526:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <hours>
    252a:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <hours+0x1>
    252e:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <hours+0x2>
    2532:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <hours+0x3>
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	a1 1d       	adc	r26, r1
    253a:	b1 1d       	adc	r27, r1
    253c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <hours>
    2540:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <hours+0x1>
    2544:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <hours+0x2>
    2548:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <hours+0x3>
    254c:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <countTask4.2371+0x1>
    2550:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <countTask4.2371>
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	08 95       	ret

00002560 <task5>:
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	00 d0       	rcall	.+0      	; 0x2566 <task5+0x6>
    2566:	00 d0       	rcall	.+0      	; 0x2568 <task5+0x8>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <f>
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <f>
    2576:	89 3c       	cpi	r24, 0xC9	; 201
    2578:	99 f4       	brne	.+38     	; 0x25a0 <task5+0x40>
    257a:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <hours>
    257e:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <hours+0x1>
    2582:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <hours+0x2>
    2586:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <hours+0x3>
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	a1 1d       	adc	r26, r1
    258e:	b1 1d       	adc	r27, r1
    2590:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <hours>
    2594:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <hours+0x1>
    2598:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <hours+0x2>
    259c:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <hours+0x3>
    25a0:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <ConnectionLost.2381>
    25a4:	81 11       	cpse	r24, r1
    25a6:	9d c0       	rjmp	.+314    	; 0x26e2 <task5+0x182>
    25a8:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <ESP_flags>
    25ac:	82 fd       	sbrc	r24, 2
    25ae:	11 c0       	rjmp	.+34     	; 0x25d2 <task5+0x72>
    25b0:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <done.2380>
    25b4:	91 11       	cpse	r25, r1
    25b6:	0d c0       	rjmp	.+26     	; 0x25d2 <task5+0x72>
    25b8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ESPAsServer>
    25bc:	81 11       	cpse	r24, r1
    25be:	76 c0       	rjmp	.+236    	; 0x26ac <task5+0x14c>
    25c0:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <ESP_flags>
    25c4:	84 60       	ori	r24, 0x04	; 4
    25c6:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <ESP_flags>
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <done.2380>
    25d0:	75 c0       	rjmp	.+234    	; 0x26bc <task5+0x15c>
    25d2:	83 fd       	sbrc	r24, 3
    25d4:	12 c0       	rjmp	.+36     	; 0x25fa <task5+0x9a>
    25d6:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <done.2380>
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <task5+0x80>
    25de:	66 c0       	rjmp	.+204    	; 0x26ac <task5+0x14c>
    25e0:	0e 94 4e 03 	call	0x69c	; 0x69c <RequestWait>
    25e4:	81 11       	cpse	r24, r1
    25e6:	62 c0       	rjmp	.+196    	; 0x26ac <task5+0x14c>
    25e8:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <ESP_flags>
    25ec:	88 60       	ori	r24, 0x08	; 8
    25ee:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <ESP_flags>
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <done.2380>
    25f8:	61 c0       	rjmp	.+194    	; 0x26bc <task5+0x15c>
    25fa:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <done.2380>
    25fe:	82 30       	cpi	r24, 0x02	; 2
    2600:	09 f0       	breq	.+2      	; 0x2604 <task5+0xa4>
    2602:	54 c0       	rjmp	.+168    	; 0x26ac <task5+0x14c>
    2604:	0e 94 ef 02 	call	0x5de	; 0x5de <CheckInput>
    2608:	0e 94 76 03 	call	0x6ec	; 0x6ec <enable>
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	09 f0       	breq	.+2      	; 0x2612 <task5+0xb2>
    2610:	4d c0       	rjmp	.+154    	; 0x26ac <task5+0x14c>
    2612:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <Tc.2383>
    2616:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <Tc.2383+0x1>
    261a:	01 96       	adiw	r24, 0x01	; 1
    261c:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <Tc.2383+0x1>
    2620:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <Tc.2383>
    2624:	81 39       	cpi	r24, 0x91	; 145
    2626:	91 40       	sbci	r25, 0x01	; 1
    2628:	08 f4       	brcc	.+2      	; 0x262c <task5+0xcc>
    262a:	40 c0       	rjmp	.+128    	; 0x26ac <task5+0x14c>
    262c:	83 e2       	ldi	r24, 0x23	; 35
    262e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <SendData>
    2632:	81 11       	cpse	r24, r1
    2634:	3b c0       	rjmp	.+118    	; 0x26ac <task5+0x14c>
    2636:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <Tc.2383+0x1>
    263a:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Tc.2383>
    263e:	82 e3       	ldi	r24, 0x32	; 50
    2640:	95 e3       	ldi	r25, 0x35	; 53
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	85 e3       	ldi	r24, 0x35	; 53
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	1c 82       	std	Y+4, r1	; 0x04
    2650:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <quality>
    2654:	84 36       	cpi	r24, 0x64	; 100
    2656:	11 f5       	brne	.+68     	; 0x269c <task5+0x13c>
    2658:	be 01       	movw	r22, r28
    265a:	6f 5f       	subi	r22, 0xFF	; 255
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <SensorValue>
    2662:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <num2CharArray>
    2666:	8a e0       	ldi	r24, 0x0A	; 10
    2668:	93 e0       	ldi	r25, 0x03	; 3
    266a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    266e:	87 ea       	ldi	r24, 0xA7	; 167
    2670:	92 e0       	ldi	r25, 0x02	; 2
    2672:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    2676:	8e e1       	ldi	r24, 0x1E	; 30
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    267e:	86 e2       	ldi	r24, 0x26	; 38
    2680:	93 e0       	ldi	r25, 0x03	; 3
    2682:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    2686:	87 ea       	ldi	r24, 0xA7	; 167
    2688:	92 e0       	ldi	r25, 0x02	; 2
    268a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <done.2380>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <EspConnected>
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <task5+0x14c>
    269c:	ce 01       	movw	r24, r28
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    26a4:	87 ea       	ldi	r24, 0xA7	; 167
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    26ac:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <done.2380>
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	21 f4       	brne	.+8      	; 0x26bc <task5+0x15c>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <task6>
    26bc:	0e 94 c0 01 	call	0x380	; 0x380 <WifiDisconnectCheck>
    26c0:	81 11       	cpse	r24, r1
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <task5+0x182>
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <ConnectionLost.2381>
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	68 e2       	ldi	r22, 0x28	; 40
    26d0:	70 e3       	ldi	r23, 0x30	; 48
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
    26da:	8e e2       	ldi	r24, 0x2E	; 46
    26dc:	93 e0       	ldi	r25, 0x03	; 3
    26de:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    26e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ConnectCommand>
    26e6:	81 11       	cpse	r24, r1
    26e8:	16 c0       	rjmp	.+44     	; 0x2716 <task5+0x1b6>
    26ea:	87 e3       	ldi	r24, 0x37	; 55
    26ec:	93 e0       	ldi	r25, 0x03	; 3
    26ee:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    26f2:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <ConnectionLost.2381>
    26f6:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <ESP_flags>
    26fa:	8b 7f       	andi	r24, 0xFB	; 251
    26fc:	87 7f       	andi	r24, 0xF7	; 247
    26fe:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <ESP_flags>
    2702:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <done.2380>
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e3       	ldi	r23, 0x30	; 48
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <task1Open>:
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	08 95       	ret

00002748 <task2Open>:
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    275c:	42 e0       	ldi	r20, 0x02	; 2
    275e:	67 e0       	ldi	r22, 0x07	; 7
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	08 95       	ret

0000276c <task3Open>:
    276c:	8f e3       	ldi	r24, 0x3F	; 63
    276e:	93 e0       	ldi	r25, 0x03	; 3
    2770:	0e 94 bd 07 	call	0xf7a	; 0xf7a <uart_string>
    2774:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <countSize>
    2778:	0e 94 90 07 	call	0xf20	; 0xf20 <uart_num>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	08 95       	ret

00002782 <task4Open>:
    2782:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <tracker.2414>
    2786:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <tracker.2414+0x1>
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <tracker.2414+0x1>
    2790:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <tracker.2414>
    2794:	85 3f       	cpi	r24, 0xF5	; 245
    2796:	91 40       	sbci	r25, 0x01	; 1
    2798:	40 f0       	brcs	.+16     	; 0x27aa <task4Open+0x28>
    279a:	89 e4       	ldi	r24, 0x49	; 73
    279c:	93 e0       	ldi	r25, 0x03	; 3
    279e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Rte_Uart_WriteBuffer>
    27a2:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <tracker.2414+0x1>
    27a6:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <tracker.2414>
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	62 e0       	ldi	r22, 0x02	; 2
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    27b4:	42 e0       	ldi	r20, 0x02	; 2
    27b6:	66 e0       	ldi	r22, 0x06	; 6
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0e 94 4b 06 	call	0xc96	; 0xc96 <PinOutConfig>
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	62 e0       	ldi	r22, 0x02	; 2
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
    27c8:	42 e0       	ldi	r20, 0x02	; 2
    27ca:	66 e0       	ldi	r22, 0x06	; 6
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	0e 94 72 06 	call	0xce4	; 0xce4 <PinOutput>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	08 95       	ret

000027d8 <task5Open>:
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	00 d0       	rcall	.+0      	; 0x27de <task5Open+0x6>
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	2f e7       	ldi	r18, 0x7F	; 127
    27e4:	8a e1       	ldi	r24, 0x1A	; 26
    27e6:	96 e0       	ldi	r25, 0x06	; 6
    27e8:	21 50       	subi	r18, 0x01	; 1
    27ea:	80 40       	sbci	r24, 0x00	; 0
    27ec:	90 40       	sbci	r25, 0x00	; 0
    27ee:	e1 f7       	brne	.-8      	; 0x27e8 <task5Open+0x10>
    27f0:	00 c0       	rjmp	.+0      	; 0x27f2 <task5Open+0x1a>
    27f2:	00 00       	nop
    27f4:	0e 94 57 07 	call	0xeae	; 0xeae <uart_init>
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	61 eb       	ldi	r22, 0xB1	; 177
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	8d e7       	ldi	r24, 0x7D	; 125
    2804:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	66 e7       	ldi	r22, 0x76	; 118
    2810:	7d e0       	ldi	r23, 0x0D	; 13
    2812:	8f ea       	ldi	r24, 0xAF	; 175
    2814:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <PushEventInterface>
    2818:	8c eb       	ldi	r24, 0xBC	; 188
    281a:	9f e0       	ldi	r25, 0x0F	; 15
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	0e 94 b5 03 	call	0x76a	; 0x76a <ESPCallBack>
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	8a e7       	ldi	r24, 0x7A	; 122
    282e:	94 e0       	ldi	r25, 0x04	; 4
    2830:	0e 94 18 0c 	call	0x1830	; 0x1830 <OutPutVariableRegister>
    2834:	0e 94 4a 01 	call	0x294	; 0x294 <ESP_Init>
    2838:	80 e3       	ldi	r24, 0x30	; 48
    283a:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <f>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <HookupTasks>:
	//uart_num(event);
	//uart_string("\n");
	//if(event==0x01)
	//{

		if(UartEvents==0x01)
    284c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <UartEvents>
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	11 f0       	breq	.+4      	; 0x2858 <HookupTasks+0xc>
			//DebugMode();
		}
		else
		{
		   // ESPreadvalue(PopInterface);
		    checkRecievedData();	
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <checkRecievedData>
    2858:	08 95       	ret

0000285a <NonPeriodicTaskFuncSet>:
			}
		}
		return 0;
}
uint16_t NonPeriodicTaskFuncSet(void *ptr)
{
    285a:	fc 01       	movw	r30, r24
	uint8_t *data;
	uint8_t funcpoint[2];
	data=(uint8_t*)ptr;
	NonPeriodictaskArr[data[0]].taskfucntion=(funPtrBase*)(((uint16_t*)(data+2))[0]);
    285c:	80 81       	ld	r24, Z
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	dc 01       	movw	r26, r24
    2862:	aa 0f       	add	r26, r26
    2864:	bb 1f       	adc	r27, r27
    2866:	aa 0f       	add	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	8a 0f       	add	r24, r26
    286c:	9b 1f       	adc	r25, r27
    286e:	dc 01       	movw	r26, r24
    2870:	a4 58       	subi	r26, 0x84	; 132
    2872:	bb 4f       	sbci	r27, 0xFB	; 251
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	8d 93       	st	X+, r24
    287a:	9c 93       	st	X, r25
	NonPeriodictaskArr[data[0]].On=data[1];
    287c:	21 81       	ldd	r18, Z+1	; 0x01
    287e:	80 81       	ld	r24, Z
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	dc 01       	movw	r26, r24
    2884:	aa 0f       	add	r26, r26
    2886:	bb 1f       	adc	r27, r27
    2888:	aa 0f       	add	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	8a 0f       	add	r24, r26
    288e:	9b 1f       	adc	r25, r27
    2890:	dc 01       	movw	r26, r24
    2892:	a4 58       	subi	r26, 0x84	; 132
    2894:	bb 4f       	sbci	r27, 0xFB	; 251
    2896:	12 96       	adiw	r26, 0x02	; 2
    2898:	2c 93       	st	X, r18
	NonPeriodictaskArr[data[0]].ptr=ptr;	
    289a:	80 81       	ld	r24, Z
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	dc 01       	movw	r26, r24
    28a0:	aa 0f       	add	r26, r26
    28a2:	bb 1f       	adc	r27, r27
    28a4:	aa 0f       	add	r26, r26
    28a6:	bb 1f       	adc	r27, r27
    28a8:	8a 0f       	add	r24, r26
    28aa:	9b 1f       	adc	r25, r27
    28ac:	dc 01       	movw	r26, r24
    28ae:	a4 58       	subi	r26, 0x84	; 132
    28b0:	bb 4f       	sbci	r27, 0xFB	; 251
    28b2:	14 96       	adiw	r26, 0x04	; 4
    28b4:	fc 93       	st	X, r31
    28b6:	ee 93       	st	-X, r30
    28b8:	13 97       	sbiw	r26, 0x03	; 3
}
    28ba:	08 95       	ret

000028bc <BaseHandler>:
uint16_t BaseHandler(void *ptr)
{
	uint8_t *data;
	data=(uint8_t*)ptr;
    taskfuncbase[*data-1].On=1;
    28bc:	fc 01       	movw	r30, r24
    28be:	80 81       	ld	r24, Z
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	fc 01       	movw	r30, r24
    28c6:	ee 0f       	add	r30, r30
    28c8:	ff 1f       	adc	r31, r31
    28ca:	ee 0f       	add	r30, r30
    28cc:	ff 1f       	adc	r31, r31
    28ce:	ee 0f       	add	r30, r30
    28d0:	ff 1f       	adc	r31, r31
    28d2:	e8 1b       	sub	r30, r24
    28d4:	f9 0b       	sbc	r31, r25
    28d6:	eb 59       	subi	r30, 0x9B	; 155
    28d8:	fd 4f       	sbci	r31, 0xFD	; 253
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	85 83       	std	Z+5, r24	; 0x05
	//uart_string("bhandler\n");
}
    28de:	08 95       	ret

000028e0 <tasksBase>:
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
{
    28e0:	7f 92       	push	r7
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <tasksBase+0x1c>
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <tasksBase+0x1e>
    28fe:	1f 92       	push	r1
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
    2904:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <opentaskbase.1978>
    2908:	81 11       	cpse	r24, r1
    290a:	48 c0       	rjmp	.+144    	; 0x299c <tasksBase+0xbc>
	{
		for(int i=0;i<2;i++)
		{
			if(taskfuncbase[i].On==dON)
    290c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <taskfuncbase+0x5>
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	29 f4       	brne	.+10     	; 0x291e <tasksBase+0x3e>
			{
				
				taskfuncbase[i].Openfucntion();
    2914:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <taskfuncbase+0x2>
    2918:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <taskfuncbase+0x3>
    291c:	09 95       	icall
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<2;i++)
		{
			if(taskfuncbase[i].On==dON)
    291e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <taskfuncbase+0xc>
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	29 f4       	brne	.+10     	; 0x2930 <tasksBase+0x50>
			{
				
				taskfuncbase[i].Openfucntion();
    2926:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <taskfuncbase+0x9>
    292a:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <taskfuncbase+0xa>
    292e:	09 95       	icall
			}
		}
		opentaskbase=1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <opentaskbase.1978>
    2936:	32 c0       	rjmp	.+100    	; 0x299c <tasksBase+0xbc>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    2938:	58 01       	movw	r10, r16
		
	}
	
	for(int i=0;i<2;i++)
	{
		taskfuncbase[i].counter++;
    293a:	f8 01       	movw	r30, r16
    293c:	80 81       	ld	r24, Z
    293e:	8f 5f       	subi	r24, 0xFF	; 255
    2940:	80 83       	st	Z, r24
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    2942:	f7 01       	movw	r30, r14
    2944:	90 81       	ld	r25, Z
    2946:	91 30       	cpi	r25, 0x01	; 1
    2948:	01 f5       	brne	.+64     	; 0x298a <tasksBase+0xaa>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    294a:	f8 01       	movw	r30, r16
    294c:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<2;i++)
	{
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    294e:	90 81       	ld	r25, Z
    2950:	89 17       	cp	r24, r25
    2952:	d8 f0       	brcs	.+54     	; 0x298a <tasksBase+0xaa>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    2954:	f8 01       	movw	r30, r16
    2956:	36 97       	sbiw	r30, 0x06	; 6
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
		{
			uint16_t Temp;
			uint8_t arr[3];
			Temp=taskfuncbase[i].taskfucntion();
    2958:	01 90       	ld	r0, Z+
    295a:	f0 81       	ld	r31, Z
    295c:	e0 2d       	mov	r30, r0
    295e:	09 95       	icall
    2960:	9d 83       	std	Y+5, r25	; 0x05
    2962:	8c 83       	std	Y+4, r24	; 0x04
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	80 fd       	sbrc	r24, 0
    2968:	0e c0       	rjmp	.+28     	; 0x2986 <tasksBase+0xa6>
			{
				//uart_string("done");
				arr[0]=1;
    296a:	79 82       	std	Y+1, r7	; 0x01
				arr[1]=(((uint8_t*)&Temp)[1]>>1)&0x7f;
    296c:	86 95       	lsr	r24
    296e:	8a 83       	std	Y+2, r24	; 0x02
				arr[2]=((uint8_t*)&Temp)[0];
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
				callbackarrayfuc func;
				func=callbackgetFunction(2);
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <callbackgetFunction>
    297a:	fc 01       	movw	r30, r24
				func(arr);
    297c:	ce 01       	movw	r24, r28
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	09 95       	icall
				taskfuncbase[i].On=0;
    2982:	f7 01       	movw	r30, r14
    2984:	10 82       	st	Z, r1
			}
			taskfuncbase[i].counter=0;
    2986:	f5 01       	movw	r30, r10
    2988:	10 82       	st	Z, r1
    298a:	09 5f       	subi	r16, 0xF9	; 249
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	f7 e0       	ldi	r31, 0x07	; 7
    2990:	ef 0e       	add	r14, r31
    2992:	f1 1c       	adc	r15, r1
		}
		opentaskbase=1;
		
	}
	
	for(int i=0;i<2;i++)
    2994:	0c 15       	cp	r16, r12
    2996:	1d 05       	cpc	r17, r13
    2998:	79 f6       	brne	.-98     	; 0x2938 <tasksBase+0x58>
    299a:	11 c0       	rjmp	.+34     	; 0x29be <tasksBase+0xde>
    299c:	0b e6       	ldi	r16, 0x6B	; 107
    299e:	12 e0       	ldi	r17, 0x02	; 2
    29a0:	0f 2e       	mov	r0, r31
    29a2:	fa e6       	ldi	r31, 0x6A	; 106
    29a4:	ef 2e       	mov	r14, r31
    29a6:	f2 e0       	ldi	r31, 0x02	; 2
    29a8:	ff 2e       	mov	r15, r31
    29aa:	f0 2d       	mov	r31, r0
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    29ac:	0f 2e       	mov	r0, r31
    29ae:	f9 e7       	ldi	r31, 0x79	; 121
    29b0:	cf 2e       	mov	r12, r31
    29b2:	f2 e0       	ldi	r31, 0x02	; 2
    29b4:	df 2e       	mov	r13, r31
    29b6:	f0 2d       	mov	r31, r0
			Temp=taskfuncbase[i].taskfucntion();
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
			{
				//uart_string("done");
				arr[0]=1;
    29b8:	77 24       	eor	r7, r7
    29ba:	73 94       	inc	r7
    29bc:	bd cf       	rjmp	.-134    	; 0x2938 <tasksBase+0x58>
			//UartHandlerMain();
		}
	}
	
	return 0;
}
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	9f 90       	pop	r9
    29e2:	8f 90       	pop	r8
    29e4:	7f 90       	pop	r7
    29e6:	08 95       	ret

000029e8 <tasks>:
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
{
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
	static uint8_t opentask=0;
	if(opentask==0)
    29f4:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <opentask.1967>
    29f8:	81 11       	cpse	r24, r1
    29fa:	3e c0       	rjmp	.+124    	; 0x2a78 <tasks+0x90>
	{
		callbackSetFunction(1,BaseHandler);
    29fc:	6e e5       	ldi	r22, 0x5E	; 94
    29fe:	74 e1       	ldi	r23, 0x14	; 20
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <callbackSetFunction>
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
    2a06:	6d e2       	ldi	r22, 0x2D	; 45
    2a08:	74 e1       	ldi	r23, 0x14	; 20
    2a0a:	83 e0       	ldi	r24, 0x03	; 3
    2a0c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <callbackSetFunction>
		Nvm_TableInit();
    2a10:	0e 94 25 0c 	call	0x184a	; 0x184a <Nvm_TableInit>
    2a14:	c8 e7       	ldi	r28, 0x78	; 120
    2a16:	d2 e0       	ldi	r29, 0x02	; 2
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a18:	09 ea       	ldi	r16, 0xA9	; 169
    2a1a:	12 e0       	ldi	r17, 0x02	; 2
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
    2a1c:	88 81       	ld	r24, Y
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	31 f4       	brne	.+12     	; 0x2a2e <tasks+0x46>
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a22:	fe 01       	movw	r30, r28
    2a24:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
			{
				
				taskfunc[i].Openfucntion();
    2a26:	01 90       	ld	r0, Z+
    2a28:	f0 81       	ld	r31, Z
    2a2a:	e0 2d       	mov	r30, r0
    2a2c:	09 95       	icall
    2a2e:	27 96       	adiw	r28, 0x07	; 7
	if(opentask==0)
	{
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
    2a30:	c0 17       	cp	r28, r16
    2a32:	d1 07       	cpc	r29, r17
    2a34:	99 f7       	brne	.-26     	; 0x2a1c <tasks+0x34>
			{
				
				taskfunc[i].Openfucntion();
			}
		}
		opentask=1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <opentask.1967>
		openDone=1;
    2a3c:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <openDone>
		UartHandlerInit();
    2a40:	0e 94 bd 03 	call	0x77a	; 0x77a <UartHandlerInit>
    2a44:	19 c0       	rjmp	.+50     	; 0x2a78 <tasks+0x90>
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
    2a46:	88 81       	ld	r24, Y
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	88 83       	st	Y, r24
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    2a50:	90 81       	ld	r25, Z
    2a52:	91 30       	cpi	r25, 0x01	; 1
    2a54:	61 f4       	brne	.+24     	; 0x2a6e <tasks+0x86>
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a56:	fe 01       	movw	r30, r28
    2a58:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    2a5a:	90 81       	ld	r25, Z
    2a5c:	89 17       	cp	r24, r25
    2a5e:	38 f0       	brcs	.+14     	; 0x2a6e <tasks+0x86>
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a60:	fe 01       	movw	r30, r28
    2a62:	36 97       	sbiw	r30, 0x06	; 6
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
		{
			taskfunc[i].taskfucntion();
    2a64:	01 90       	ld	r0, Z+
    2a66:	f0 81       	ld	r31, Z
    2a68:	e0 2d       	mov	r30, r0
    2a6a:	09 95       	icall
			taskfunc[i].counter=0;
    2a6c:	18 82       	st	Y, r1
    2a6e:	27 96       	adiw	r28, 0x07	; 7
		openDone=1;
		UartHandlerInit();
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
    2a70:	ce 15       	cp	r28, r14
    2a72:	df 05       	cpc	r29, r15
    2a74:	41 f7       	brne	.-48     	; 0x2a46 <tasks+0x5e>
    2a76:	09 c0       	rjmp	.+18     	; 0x2a8a <tasks+0xa2>
    2a78:	c9 e7       	ldi	r28, 0x79	; 121
    2a7a:	d2 e0       	ldi	r29, 0x02	; 2
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	fa ea       	ldi	r31, 0xAA	; 170
    2a80:	ef 2e       	mov	r14, r31
    2a82:	f2 e0       	ldi	r31, 0x02	; 2
    2a84:	ff 2e       	mov	r15, r31
    2a86:	f0 2d       	mov	r31, r0
    2a88:	de cf       	rjmp	.-68     	; 0x2a46 <tasks+0x5e>
			taskfunc[i].counter=0;
			
			//UartHandlerMain();
		}
	}
    ReadEveryValueADC();
    2a8a:	0e 94 94 08 	call	0x1128	; 0x1128 <ReadEveryValueADC>
	
	return 0;
}
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	08 95       	ret

00002aa0 <NonPeriodicTaskFuncCall>:
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	ce e7       	ldi	r28, 0x7E	; 126
    2aaa:	d4 e0       	ldi	r29, 0x04	; 4
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    2aac:	07 e9       	ldi	r16, 0x97	; 151
    2aae:	14 e0       	ldi	r17, 0x04	; 4
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
		{
			tasktime++;
    2ab0:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <tasktime.1992>
    2ab4:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <tasktime.1992+0x1>
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <tasktime.1992+0x1>
    2abe:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <tasktime.1992>
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
    2ac2:	28 81       	ld	r18, Y
    2ac4:	21 30       	cpi	r18, 0x01	; 1
    2ac6:	79 f4       	brne	.+30     	; 0x2ae6 <NonPeriodicTaskFuncCall+0x46>
    2ac8:	85 38       	cpi	r24, 0x85	; 133
    2aca:	93 40       	sbci	r25, 0x03	; 3
    2acc:	60 f0       	brcs	.+24     	; 0x2ae6 <NonPeriodicTaskFuncCall+0x46>
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    2ace:	fe 01       	movw	r30, r28
    2ad0:	32 97       	sbiw	r30, 0x02	; 2
		for(int i=0;i<5;i++)
		{
			tasktime++;
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
			{
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
    2ad2:	01 90       	ld	r0, Z+
    2ad4:	f0 81       	ld	r31, Z
    2ad6:	e0 2d       	mov	r30, r0
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	09 95       	icall
				tasktime=0;			
    2ade:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <tasktime.1992+0x1>
    2ae2:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <tasktime.1992>
    2ae6:	25 96       	adiw	r28, 0x05	; 5
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
    2ae8:	c0 17       	cp	r28, r16
    2aea:	d1 07       	cpc	r29, r17
    2aec:	09 f7       	brne	.-62     	; 0x2ab0 <NonPeriodicTaskFuncCall+0x10>
				//UartHandlerMain();
				//uart_string("NPT call\n");
			}
		}
		return 0;
}
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <ApplicationHookUP>:
    }
	}
}
void ApplicationHookUP(uint8_t * event)
{
	if(openDone==1)
    2afc:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <openDone>
    2b00:	21 30       	cpi	r18, 0x01	; 1
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <ApplicationHookUP+0xc>
	{
		HookupTasks(event);
    2b04:	0e 94 26 14 	call	0x284c	; 0x284c <HookupTasks>
		//DataTransmit();
	}
	if(UartEvents==1)
    2b08:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <UartEvents>
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	11 f4       	brne	.+4      	; 0x2b14 <ApplicationHookUP+0x18>
	{
		taskfunc[5].On=1;
    2b10:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <taskfunc+0x28>
    2b14:	08 95       	ret

00002b16 <RTEModuleFirstCh>:
#ifndef RTE_ASW_H_
#define RTE_ASW_H_
#include <avr/io.h>
extern void RTEModuleFirstCh(uint16_t *ChannelValue)
{
    Rte_Base2AswLAYERADCReadConnector(ChannelValue)	;
    2b16:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <Rte_Base2AswLAYERADCReadConnector>
    2b1a:	08 95       	ret

00002b1c <Rte_Uart_WriteBuffer>:
{
	Rte_recievebuffer0.ustring=ustring;
}*/
void Rte_Uart_WriteBuffer(unsigned char *ustring)
{
	Rte_Base2AswLayerUartWriteBuffer(ustring);	
    2b1c:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <Rte_Base2AswLayerUartWriteBuffer>
    2b20:	08 95       	ret

00002b22 <RTE_BaseWriteCh1Data>:
#include "..\MddleLayer\ADCread.h"
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\MddleLayer\UartTransmit.h"

extern void RTE_BaseWriteCh1Data(uint16_t *ChannelValue)
{
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	ec 01       	movw	r28, r24
	//uart_num(*ChannelValue);
	//*ChannelValue=2;
	uint16_t val=*ChannelValue;
	*ChannelValue=GetADC_Value(val);
    2b28:	88 81       	ld	r24, Y
    2b2a:	99 81       	ldd	r25, Y+1	; 0x01
    2b2c:	0e 94 12 09 	call	0x1224	; 0x1224 <GetADC_Value>
    2b30:	99 83       	std	Y+1, r25	; 0x01
    2b32:	88 83       	st	Y, r24
}
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	08 95       	ret

00002b3a <Rte_BaseWriteUartData>:
	*PingEcho=InterfacePulse(val);
}

void Rte_BaseWriteUartData(unsigned char *Ustring)
{
	FillUartBuffer(Ustring);
    2b3a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <FillUartBuffer>
    2b3e:	08 95       	ret

00002b40 <Rte_Base2AswLAYERADCReadConnector>:
 *  Author: Nikhil
 */ 
#include <avr/io.h>
void Rte_Base2AswLAYERADCReadConnector(uint16_t *DATA)
{
	RTE_BaseWriteCh1Data(DATA);
    2b40:	0e 94 91 15 	call	0x2b22	; 0x2b22 <RTE_BaseWriteCh1Data>
    2b44:	08 95       	ret

00002b46 <Rte_Base2AswLayerUartWriteBuffer>:
	Rte_BaseWritePingEchoData(DATA);
}

Rte_Base2AswLayerUartWriteBuffer(unsigned char *ustring)
{
	Rte_BaseWriteUartData(ustring);
    2b46:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <Rte_BaseWriteUartData>
    2b4a:	08 95       	ret

00002b4c <__divmodhi4>:
    2b4c:	97 fb       	bst	r25, 7
    2b4e:	07 2e       	mov	r0, r23
    2b50:	16 f4       	brtc	.+4      	; 0x2b56 <__divmodhi4+0xa>
    2b52:	00 94       	com	r0
    2b54:	07 d0       	rcall	.+14     	; 0x2b64 <__divmodhi4_neg1>
    2b56:	77 fd       	sbrc	r23, 7
    2b58:	09 d0       	rcall	.+18     	; 0x2b6c <__divmodhi4_neg2>
    2b5a:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    2b5e:	07 fc       	sbrc	r0, 7
    2b60:	05 d0       	rcall	.+10     	; 0x2b6c <__divmodhi4_neg2>
    2b62:	3e f4       	brtc	.+14     	; 0x2b72 <__divmodhi4_exit>

00002b64 <__divmodhi4_neg1>:
    2b64:	90 95       	com	r25
    2b66:	81 95       	neg	r24
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	08 95       	ret

00002b6c <__divmodhi4_neg2>:
    2b6c:	70 95       	com	r23
    2b6e:	61 95       	neg	r22
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255

00002b72 <__divmodhi4_exit>:
    2b72:	08 95       	ret

00002b74 <__umulhisi3>:
    2b74:	a2 9f       	mul	r26, r18
    2b76:	b0 01       	movw	r22, r0
    2b78:	b3 9f       	mul	r27, r19
    2b7a:	c0 01       	movw	r24, r0
    2b7c:	a3 9f       	mul	r26, r19
    2b7e:	70 0d       	add	r23, r0
    2b80:	81 1d       	adc	r24, r1
    2b82:	11 24       	eor	r1, r1
    2b84:	91 1d       	adc	r25, r1
    2b86:	b2 9f       	mul	r27, r18
    2b88:	70 0d       	add	r23, r0
    2b8a:	81 1d       	adc	r24, r1
    2b8c:	11 24       	eor	r1, r1
    2b8e:	91 1d       	adc	r25, r1
    2b90:	08 95       	ret

00002b92 <__udivmodhi4>:
    2b92:	aa 1b       	sub	r26, r26
    2b94:	bb 1b       	sub	r27, r27
    2b96:	51 e1       	ldi	r21, 0x11	; 17
    2b98:	07 c0       	rjmp	.+14     	; 0x2ba8 <__udivmodhi4_ep>

00002b9a <__udivmodhi4_loop>:
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	a6 17       	cp	r26, r22
    2ba0:	b7 07       	cpc	r27, r23
    2ba2:	10 f0       	brcs	.+4      	; 0x2ba8 <__udivmodhi4_ep>
    2ba4:	a6 1b       	sub	r26, r22
    2ba6:	b7 0b       	sbc	r27, r23

00002ba8 <__udivmodhi4_ep>:
    2ba8:	88 1f       	adc	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	5a 95       	dec	r21
    2bae:	a9 f7       	brne	.-22     	; 0x2b9a <__udivmodhi4_loop>
    2bb0:	80 95       	com	r24
    2bb2:	90 95       	com	r25
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	08 95       	ret

00002bba <strcmp>:
    2bba:	fb 01       	movw	r30, r22
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	8d 91       	ld	r24, X+
    2bc0:	01 90       	ld	r0, Z+
    2bc2:	80 19       	sub	r24, r0
    2bc4:	01 10       	cpse	r0, r1
    2bc6:	d9 f3       	breq	.-10     	; 0x2bbe <strcmp+0x4>
    2bc8:	99 0b       	sbc	r25, r25
    2bca:	08 95       	ret

00002bcc <_exit>:
    2bcc:	f8 94       	cli

00002bce <__stop_program>:
    2bce:	ff cf       	rjmp	.-2      	; 0x2bce <__stop_program>
