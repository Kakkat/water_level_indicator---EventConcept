
water_level_indicator_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b0  00800100  00003c32  00003cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e9  008003b0  008003b0  00003f76  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00003f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00004734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000048b7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000009a0  00000000  00000000  000048e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b0ea  00000000  00000000  00005286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a95  00000000  00000000  00010370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004008  00000000  00000000  00013e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000016f8  00000000  00000000  00017e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000214a  00000000  00000000  00019508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005212  00000000  00000000  0001b652  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b8  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static uint8_t DebugStates;
static uint8_t DebugArrayindex;
static uint8_t populateArray();
static void  DebugBufferCheck();
void DebugMode()
{
       0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__ctors_end>
       4:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__vector_1>
       8:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>

   switch(DebugStates)
       c:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__vector_3>
      10:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      14:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      18:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
   {   
	   unsigned char data='&';
	   case 0:
	       PopInterface(&data);
      1c:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      20:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
		   if(data=='#')
      24:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_9>
      28:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
		   {
			  DebugStates++; 
      2c:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      30:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
			  uart_string("IAM0");
      34:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      38:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      3c:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
   
}

static uint8_t populateArray()
{
	unsigned char data='&';
      40:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__vector_16>
	uint8_t ret=1;
	PopInterface(&data);
      44:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      48:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_18>
	if(DebugArrayindex<10 && data!='&' )
      4c:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      50:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      54:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_21>
	{
	   DebugArray[DebugArrayindex]=data;
      58:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_22>
      5c:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
      60:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>
	   DebugArrayindex++;
      64:	0c 94 88 02 	jmp	0x510	; 0x510 <__bad_interrupt>

00000068 <ssd1306xled_font6x8>:
	...
			  DebugStates++; 
			  uart_string("IAM0");
		   }
		   break;
	   case 1:
	      if(populateArray()==0)
      70:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
}

static void  DebugBufferCheck()
{ 
   static uint8_t debugdat=10;
   switch(DebugArray[0])
      80:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
	       if(DebugArray[1]=='E')
		   {
			 //AddEvent((uint8_t *)&DebugArray[3],DebugArray[0]); 
			 //uart_num((uint8_t)(DebugArray[2]-'0'));
			 ///StoreNVM((uint8_t)(DebugArray[2]-'0'),&DebugArray[2],0);
			 uart_string("IAM");
      90:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
		  DebugStates=0;
		  DebugArrayindex=0;
		  break;
   }
   
}
      a0:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
				        }
						        if(DigitScrollPos==2)
						        {
							        WriteMax(d[3],num);
							        WriteMax(d[0],5);
							        WriteMax(d[1],8);
      b0:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
							        WriteMax(d[2],0x0f);
						        }
		 DigitScrollPos++;
      c0:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
		}
		else
		{
			DigitScrollPos=0;
		}
		count=0;
      d0:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      e0:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
      f0:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     100:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     110:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     120:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     130:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     140:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     150:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     160:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     170:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     180:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     190:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     1a0:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1b0:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     1c0:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1d0:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1e0:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     1f0:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     200:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     210:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     220:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     230:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     240:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     250:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     260:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     270:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     280:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

00000290 <PIN>:
     290:	23 00 26 00 29 00                                   #.&.).

00000296 <DDR>:
     296:	24 00 27 00 2a 00                                   $.'.*.

0000029c <Port>:
     29c:	25 00 28 00 2b 00                                   %.(.+.

000002a2 <Frames>:
     2a2:	ec 02 dc 02 cc 02 bc 02 ac 02                       ..........

000002ac <Frame5>:
     2ac:	3e 03 ca 04 28 03 12 03 ca 04 ca 04 ca 04 fc 02     >...(...........

000002bc <Frame4>:
     2bc:	96 03 ca 04 80 03 6a 03 ca 04 ca 04 ca 04 54 03     ......j.......T.

000002cc <Frame3>:
     2cc:	04 04 ca 04 ee 03 d8 03 c2 03 ca 04 ca 04 ac 03     ................

000002dc <Frame2>:
     2dc:	72 04 ca 04 5c 04 46 04 30 04 ca 04 ca 04 1a 04     r...\.F.0.......

000002ec <Frame1>:
     2ec:	b4 04 ca 04 9e 04 ca 04 ca 04 ca 04 ca 04 88 04     ................

000002fc <F5ROW8>:
     2fc:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     30c:	20 20 20 20 20 00                                        .

00000312 <F5ROW4>:
     312:	32 2e 46 75 6c 6c 20 54 61 6e 6b 20 43 6e 74 20     2.Full Tank Cnt 
     322:	20 20 20 20 20 00                                        .

00000328 <F5ROW3>:
     328:	31 2e 4f 70 72 20 48 72 20 20 20 20 20 20 20 20     1.Opr Hr        
     338:	20 20 20 20 20 00                                        .

0000033e <F5ROW1>:
     33e:	20 20 20 20 20 20 20 20 44 61 69 67 20 20 20 20             Daig    
     34e:	20 20 20 20 20 00                                        .

00000354 <F4ROW8>:
     354:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     364:	20 20 20 20 20 00                                        .

0000036a <F4ROW4>:
     36a:	32 2e 4f 4e 20 20 20 20 20 20 20 20 20 20 20 20     2.ON            
     37a:	20 20 20 20 20 00                                        .

00000380 <F4ROW3>:
     380:	31 2e 4f 46 46 20 20 20 20 20 20 20 20 20 20 20     1.OFF           
     390:	20 20 20 20 20 00                                        .

00000396 <F4ROW1>:
     396:	20 20 20 20 20 20 20 20 4d 6f 74 6f 72 20 20 20             Motor   
     3a6:	20 20 20 20 20 00                                        .

000003ac <F3ROW8>:
     3ac:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     3bc:	20 20 20 20 20 00                                        .

000003c2 <F3ROW5>:
     3c2:	33 2e 53 65 6d 69 20 20 20 20 20 20 20 20 20 20     3.Semi          
     3d2:	20 20 20 20 20 00                                        .

000003d8 <F3ROW4>:
     3d8:	32 2e 41 75 74 6f 20 20 20 20 20 20 20 20 20 20     2.Auto          
     3e8:	20 20 20 20 20 00                                        .

000003ee <F3ROW3>:
     3ee:	31 2e 4d 61 6e 75 61 6c 20 20 20 20 20 20 20 20     1.Manual        
     3fe:	20 20 20 20 20 00                                        .

00000404 <F3ROW1>:
     404:	20 20 20 20 20 20 20 20 4d 6f 64 65 20 20 20 20             Mode    
     414:	20 20 20 20 20 00                                        .

0000041a <F2ROW8>:
     41a:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     42a:	20 20 20 20 20 00                                        .

00000430 <F2ROW5>:
     430:	33 2e 44 61 69 67 20 20 20 20 20 20 20 20 20 20     3.Daig          
     440:	20 20 20 20 20 00                                        .

00000446 <F2ROW4>:
     446:	32 2e 4d 6f 74 6f 72 20 20 20 20 20 20 20 20 20     2.Motor         
     456:	20 20 20 20 20 00                                        .

0000045c <F2ROW3>:
     45c:	31 2e 4d 6f 64 65 20 20 20 20 20 20 20 20 20 20     1.Mode          
     46c:	20 20 20 20 20 00                                        .

00000472 <F2ROW1>:
     472:	20 20 20 20 20 20 20 20 4d 45 4e 55 20 20 20 20             MENU    
     482:	20 20 20 20 20 00                                        .

00000488 <F1ROW8>:
     488:	20 20 20 20 20 20 20 20 4d 45 4e 55 20 20 20 20             MENU    
     498:	20 20 20 20 20 00                                        .

0000049e <F1ROW3>:
     49e:	54 61 6e 6b 20 4c 65 76 65 6c 20 3a 20 20 20 20     Tank Level :    
     4ae:	20 20 20 20 20 00                                        .

000004b4 <F1ROW1>:
     4b4:	20 20 20 20 20 20 20 20 57 4c 43 20 20 20 20 20             WLC     
     4c4:	20 20 20 20 20 00                                        .

000004ca <FrameBlank>:
     4ca:	20 20 20 20 20 20 20 20 20 20 00 00                           ..

000004d6 <__ctors_end>:
     4d6:	11 24       	eor	r1, r1
     4d8:	1f be       	out	0x3f, r1	; 63
     4da:	cf ef       	ldi	r28, 0xFF	; 255
     4dc:	d8 e0       	ldi	r29, 0x08	; 8
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	cd bf       	out	0x3d, r28	; 61

000004e2 <__do_copy_data>:
     4e2:	13 e0       	ldi	r17, 0x03	; 3
     4e4:	a0 e0       	ldi	r26, 0x00	; 0
     4e6:	b1 e0       	ldi	r27, 0x01	; 1
     4e8:	e2 e3       	ldi	r30, 0x32	; 50
     4ea:	fc e3       	ldi	r31, 0x3C	; 60
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__do_copy_data+0x10>
     4ee:	05 90       	lpm	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	a0 3b       	cpi	r26, 0xB0	; 176
     4f4:	b1 07       	cpc	r27, r17
     4f6:	d9 f7       	brne	.-10     	; 0x4ee <__do_copy_data+0xc>

000004f8 <__do_clear_bss>:
     4f8:	26 e0       	ldi	r18, 0x06	; 6
     4fa:	a0 eb       	ldi	r26, 0xB0	; 176
     4fc:	b3 e0       	ldi	r27, 0x03	; 3
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <.do_clear_bss_start>

00000500 <.do_clear_bss_loop>:
     500:	1d 92       	st	X+, r1

00000502 <.do_clear_bss_start>:
     502:	a9 39       	cpi	r26, 0x99	; 153
     504:	b2 07       	cpc	r27, r18
     506:	e1 f7       	brne	.-8      	; 0x500 <.do_clear_bss_loop>
     508:	0e 94 13 13 	call	0x2626	; 0x2626 <main>
     50c:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <_exit>

00000510 <__bad_interrupt>:
     510:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000514 <SetBlink>:

static Ports Prt;
void SetBlink(Pin p,uint16_t Duration /*higher for the id and lower nibble for number of blinks in a second*/,Ports port)
{   
	
	if((Duration&0x00ff)>DurationTime)
     514:	9b 01       	movw	r18, r22
     516:	33 27       	eor	r19, r19
     518:	e0 91 b0 03 	lds	r30, 0x03B0
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	e2 17       	cp	r30, r18
     520:	f3 07       	cpc	r31, r19
     522:	68 f4       	brcc	.+26     	; 0x53e <SetBlink+0x2a>
	{
			BlinkPin=p;
     524:	80 93 b1 03 	sts	0x03B1, r24
			DurationTime=Duration&0x00FF;
     528:	60 93 b0 03 	sts	0x03B0, r22
			CurrentBlink=Duration&0xf000;
     52c:	66 27       	eor	r22, r22
     52e:	70 7f       	andi	r23, 0xF0	; 240
     530:	70 93 b3 03 	sts	0x03B3, r23
     534:	60 93 b2 03 	sts	0x03B2, r22
			Prt=port;
     538:	40 93 b4 03 	sts	0x03B4, r20
     53c:	08 95       	ret
	}
    else if((Duration&0x00ff)==0)
     53e:	23 2b       	or	r18, r19
     540:	59 f4       	brne	.+22     	; 0x558 <SetBlink+0x44>
	{
		if((Duration&0xf000)==CurrentBlink)
     542:	66 27       	eor	r22, r22
     544:	70 7f       	andi	r23, 0xF0	; 240
     546:	80 91 b2 03 	lds	r24, 0x03B2
     54a:	90 91 b3 03 	lds	r25, 0x03B3
     54e:	68 17       	cp	r22, r24
     550:	79 07       	cpc	r23, r25
     552:	11 f4       	brne	.+4      	; 0x558 <SetBlink+0x44>
		{
			
			DurationTime=0;
     554:	10 92 b0 03 	sts	0x03B0, r1
     558:	08 95       	ret

0000055a <Blink>:

void Blink()
{
	static uint16_t countBlink;
	static uint8_t BlinkOut;
	if(DurationTime)
     55a:	60 91 b0 03 	lds	r22, 0x03B0
     55e:	66 23       	and	r22, r22
     560:	31 f1       	breq	.+76     	; 0x5ae <Blink+0x54>
	{ 
		
	if(countBlink>=((5000/Timeslice)/DurationTime))
     562:	20 91 b5 03 	lds	r18, 0x03B5
     566:	30 91 b6 03 	lds	r19, 0x03B6
     56a:	88 ee       	ldi	r24, 0xE8	; 232
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__divmodhi4>
     574:	26 17       	cp	r18, r22
     576:	37 07       	cpc	r19, r23
     578:	98 f0       	brcs	.+38     	; 0x5a0 <Blink+0x46>
	{
		BlinkOut=BlinkOut^1;
     57a:	90 91 b7 03 	lds	r25, 0x03B7
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	89 27       	eor	r24, r25
     582:	80 93 b7 03 	sts	0x03B7, r24
		PinOutput(BlinkOut,BlinkPin,Prt);
     586:	40 91 b4 03 	lds	r20, 0x03B4
     58a:	60 91 b1 03 	lds	r22, 0x03B1
     58e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
		countBlink=0;
		countBlink++;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 b6 03 	sts	0x03B6, r25
     59a:	80 93 b5 03 	sts	0x03B5, r24
     59e:	08 95       	ret
	}
	else
	{
		countBlink++;		
     5a0:	2f 5f       	subi	r18, 0xFF	; 255
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	30 93 b6 03 	sts	0x03B6, r19
     5a8:	20 93 b5 03 	sts	0x03B5, r18
     5ac:	08 95       	ret
	}
	}
	else
	{
		PinOutput(0,BlinkPin,Prt);
     5ae:	40 91 b4 03 	lds	r20, 0x03B4
     5b2:	60 91 b1 03 	lds	r22, 0x03B1
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
     5bc:	08 95       	ret

000005be <ESPreadvalue>:
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
{
     5be:	4f 92       	push	r4
     5c0:	5f 92       	push	r5
     5c2:	6f 92       	push	r6
     5c4:	7f 92       	push	r7
     5c6:	8f 92       	push	r8
     5c8:	9f 92       	push	r9
     5ca:	af 92       	push	r10
     5cc:	bf 92       	push	r11
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	1f 92       	push	r1
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	7c 01       	movw	r14, r24
	 unsigned char data='&';
     5e6:	86 e2       	ldi	r24, 0x26	; 38
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	0f 2e       	mov	r0, r31
     5ec:	fc e0       	ldi	r31, 0x0C	; 12
     5ee:	af 2e       	mov	r10, r31
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	bf 2e       	mov	r11, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	0f 2e       	mov	r0, r31
     5f8:	fb e0       	ldi	r31, 0x0B	; 11
     5fa:	cf 2e       	mov	r12, r31
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	df 2e       	mov	r13, r31
     600:	f0 2d       	mov	r31, r0
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     602:	08 e7       	ldi	r16, 0x78	; 120
     604:	11 e0       	ldi	r17, 0x01	; 1
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
					  k=0;
     606:	51 2c       	mov	r5, r1
     608:	75 2c       	mov	r7, r5
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     60a:	99 24       	eor	r9, r9
     60c:	93 94       	inc	r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     60e:	4a c0       	rjmp	.+148    	; 0x6a4 <ESPreadvalue+0xe6>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     610:	c9 01       	movw	r24, r18
     612:	d9 01       	movw	r26, r18
     614:	12 97       	sbiw	r26, 0x02	; 2
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     616:	4c 91       	ld	r20, X
     618:	41 30       	cpi	r20, 0x01	; 1
     61a:	11 f5       	brne	.+68     	; 0x660 <ESPreadvalue+0xa2>
     61c:	66 32       	cpi	r22, 0x26	; 38
     61e:	01 f1       	breq	.+64     	; 0x660 <ESPreadvalue+0xa2>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     620:	af 01       	movw	r20, r30
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     622:	60 80       	ld	r6, Z
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     624:	d9 01       	movw	r26, r18
     626:	14 97       	sbiw	r26, 0x04	; 4
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     628:	0d 90       	ld	r0, X+
     62a:	bc 91       	ld	r27, X
     62c:	a0 2d       	mov	r26, r0
     62e:	a6 0d       	add	r26, r6
     630:	b1 1d       	adc	r27, r1
     632:	ac 91       	ld	r26, X
     634:	6a 13       	cpse	r22, r26
     636:	0f c0       	rjmp	.+30     	; 0x656 <ESPreadvalue+0x98>
			{
			  if(Esp_Commands_a[i].MatchCounter<Esp_Commands_a[i].ResposeLength )
     638:	d9 01       	movw	r26, r18
     63a:	4c 90       	ld	r4, X
     63c:	64 14       	cp	r6, r4
     63e:	10 f4       	brcc	.+4      	; 0x644 <ESPreadvalue+0x86>
			  {
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
     640:	63 94       	inc	r6
     642:	60 82       	st	Z, r6
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
     644:	da 01       	movw	r26, r20
     646:	4c 91       	ld	r20, X
     648:	dc 01       	movw	r26, r24
     64a:	8c 91       	ld	r24, X
     64c:	48 13       	cpse	r20, r24
     64e:	08 c0       	rjmp	.+16     	; 0x660 <ESPreadvalue+0xa2>
			  {

					  Datalog=1;
					  k=0;
     650:	87 2c       	mov	r8, r7
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     652:	79 2d       	mov	r23, r9
     654:	05 c0       	rjmp	.+10     	; 0x660 <ESPreadvalue+0xa2>
					  k=0;
			  }
			}
			else if(Esp_Commands_a[i].MatchCounter<(Esp_Commands_a[i].ResposeLength))
     656:	d9 01       	movw	r26, r18
     658:	8c 91       	ld	r24, X
     65a:	68 16       	cp	r6, r24
     65c:	08 f4       	brcc	.+2      	; 0x660 <ESPreadvalue+0xa2>
			{
				Esp_Commands_a[i].MatchCounter=0;
     65e:	10 82       	st	Z, r1
     660:	27 5f       	subi	r18, 0xF7	; 247
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	39 96       	adiw	r30, 0x09	; 9
	{
		unsigned char *reg;
		uint8_t i;
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     666:	20 17       	cp	r18, r16
     668:	31 07       	cpc	r19, r17
     66a:	91 f6       	brne	.-92     	; 0x610 <ESPreadvalue+0x52>
     66c:	70 93 b9 03 	sts	0x03B9, r23
     670:	80 92 ba 03 	sts	0x03BA, r8
				//k=0;
			}
			
		}
	}
	if(Datalog==1)
     674:	71 30       	cpi	r23, 0x01	; 1
     676:	b1 f4       	brne	.+44     	; 0x6a4 <ESPreadvalue+0xe6>
	{
		if(data!='&'){
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	86 32       	cpi	r24, 0x26	; 38
     67c:	09 f1       	breq	.+66     	; 0x6c0 <ESPreadvalue+0x102>
		EspDataBuffer[k]=data;
     67e:	e8 2d       	mov	r30, r8
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	e5 54       	subi	r30, 0x45	; 69
     684:	fc 4f       	sbci	r31, 0xFC	; 252
     686:	80 83       	st	Z, r24
		k++;
     688:	98 2d       	mov	r25, r8
     68a:	9f 5f       	subi	r25, 0xFF	; 255
     68c:	90 93 ba 03 	sts	0x03BA, r25
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     690:	9c 31       	cpi	r25, 0x1C	; 28
     692:	11 f0       	breq	.+4      	; 0x698 <ESPreadvalue+0xda>
     694:	8a 30       	cpi	r24, 0x0A	; 10
     696:	31 f4       	brne	.+12     	; 0x6a4 <ESPreadvalue+0xe6>
		{
			Datalog=0;
     698:	50 92 b9 03 	sts	0x03B9, r5
			k=0;
     69c:	50 92 ba 03 	sts	0x03BA, r5
			datagot=1;
     6a0:	90 92 da 03 	sts	0x03DA, r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	f7 01       	movw	r30, r14
     6aa:	09 95       	icall
     6ac:	81 11       	cpse	r24, r1
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <ESPreadvalue+0x10a>
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     6b0:	69 81       	ldd	r22, Y+1	; 0x01
     6b2:	70 91 b9 03 	lds	r23, 0x03B9
     6b6:	80 90 ba 03 	lds	r8, 0x03BA
     6ba:	95 01       	movw	r18, r10
     6bc:	f6 01       	movw	r30, r12
     6be:	a8 cf       	rjmp	.-176    	; 0x610 <ESPreadvalue+0x52>
		if(data!='&'){
		EspDataBuffer[k]=data;
		k++;
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     6c0:	fc e1       	ldi	r31, 0x1C	; 28
     6c2:	8f 12       	cpse	r8, r31
     6c4:	ef cf       	rjmp	.-34     	; 0x6a4 <ESPreadvalue+0xe6>
     6c6:	e8 cf       	rjmp	.-48     	; 0x698 <ESPreadvalue+0xda>
			//Esp_Commands_a[Wait_Command].MatchCounter=0;
		}
	}
	}
	return 0;
}
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	af 90       	pop	r10
     6e2:	9f 90       	pop	r9
     6e4:	8f 90       	pop	r8
     6e6:	7f 90       	pop	r7
     6e8:	6f 90       	pop	r6
     6ea:	5f 90       	pop	r5
     6ec:	4f 90       	pop	r4
     6ee:	08 95       	ret

000006f0 <ESP_Init>:
    
	return ReturnValue;
}

void ESP_Init()
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec e0       	ldi	r30, 0x0C	; 12
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
	
    
	return ReturnValue;
}

void ESP_Init()
     6f8:	88 e7       	ldi	r24, 0x78	; 120
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	ef 01       	movw	r28, r30
     6fe:	24 97       	sbiw	r28, 0x04	; 4
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
     700:	a8 81       	ld	r26, Y
     702:	b9 81       	ldd	r27, Y+1	; 0x01
     704:	ed 01       	movw	r28, r26
     706:	09 90       	ld	r0, Y+
     708:	00 20       	and	r0, r0
     70a:	e9 f7       	brne	.-6      	; 0x706 <ESP_Init+0x16>
     70c:	21 97       	sbiw	r28, 0x01	; 1
     70e:	ca 1b       	sub	r28, r26
     710:	db 0b       	sbc	r29, r27
     712:	c0 83       	st	Z, r28
     714:	39 96       	adiw	r30, 0x09	; 9
	return ReturnValue;
}

void ESP_Init()
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     716:	e8 17       	cp	r30, r24
     718:	f9 07       	cpc	r31, r25
     71a:	81 f7       	brne	.-32     	; 0x6fc <ESP_Init+0xc>
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
        
	}
	
	Esp_Commands_a[Disconnect_Command].state=1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 64 01 	sts	0x0164, r24
    Esp_Commands_a[Connection_Wait].state=1;
     722:	80 93 13 01 	sts	0x0113, r24
	Esp_Commands_a[Uart_command].state=1;
     726:	80 93 6d 01 	sts	0x016D, r24
	
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <CipSend>:

ESPRetVal CipSend(void)
{
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <CipSend+0x8>
     738:	00 d0       	rcall	.+0      	; 0x73a <CipSend+0xa>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
  ESPRetVal ReturnValue=ESP_CmdSndBusy;
      char Val[4];
	  Val[0]=(char)PortSel;
     73e:	80 91 de 03 	lds	r24, 0x03DE
     742:	89 83       	std	Y+1, r24	; 0x01
	  Val[1]='\0';
     744:	1a 82       	std	Y+2, r1	; 0x02
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
	  RTE_WriteBufferUart(",");
     74e:	8f eb       	ldi	r24, 0xBF	; 191
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
     756:	20 91 df 03 	lds	r18, 0x03DF
     75a:	30 91 e0 03 	lds	r19, 0x03E0
     75e:	e2 2f       	mov	r30, r18
}

static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
     760:	49 e2       	ldi	r20, 0x29	; 41
     762:	24 9f       	mul	r18, r20
     764:	41 2d       	mov	r20, r1
     766:	11 24       	eor	r1, r1
     768:	42 95       	swap	r20
     76a:	4f 70       	andi	r20, 0x0F	; 15
	T=(num - (H*100))/10;
     76c:	1c e9       	ldi	r17, 0x9C	; 156
     76e:	14 03       	mulsu	r17, r20
     770:	c0 01       	movw	r24, r0
     772:	11 24       	eor	r1, r1
     774:	82 0f       	add	r24, r18
     776:	91 1d       	adc	r25, r1
     778:	6a e0       	ldi	r22, 0x0A	; 10
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__divmodhi4>
	O=(num - (H*100) - (T*10));

	Ustring[0]=(H+48);
     780:	84 2f       	mov	r24, r20
     782:	80 5d       	subi	r24, 0xD0	; 208
     784:	89 83       	std	Y+1, r24	; 0x01
	Ustring[1]=(T+48);
     786:	86 2f       	mov	r24, r22
     788:	80 5d       	subi	r24, 0xD0	; 208
     78a:	8a 83       	std	Y+2, r24	; 0x02
static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
     78c:	e0 5d       	subi	r30, 0xD0	; 208
     78e:	41 9f       	mul	r20, r17
     790:	e0 0d       	add	r30, r0
     792:	11 24       	eor	r1, r1
     794:	66 0f       	add	r22, r22
     796:	96 2f       	mov	r25, r22
     798:	99 0f       	add	r25, r25
     79a:	99 0f       	add	r25, r25
     79c:	69 0f       	add	r22, r25

	Ustring[0]=(H+48);
	Ustring[1]=(T+48);
	Ustring[2]=(O+48);
     79e:	e6 1b       	sub	r30, r22
     7a0:	eb 83       	std	Y+3, r30	; 0x03
	  Val[1]='\0';
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
	  RTE_WriteBufferUart(",");
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
	  Val[3]='\0';
     7a2:	1c 82       	std	Y+4, r1	; 0x04
	  if(EspDataCount<10)
     7a4:	2a 30       	cpi	r18, 0x0A	; 10
     7a6:	31 05       	cpc	r19, r1
     7a8:	1c f4       	brge	.+6      	; 0x7b0 <CipSend+0x80>
	  {
		  Val[0]=Val[2];
     7aa:	e9 83       	std	Y+1, r30	; 0x01
		  Val[1]='\0';		  
     7ac:	1a 82       	std	Y+2, r1	; 0x02
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <CipSend+0x8c>
	  }
	  else if(EspDataCount<100)
     7b0:	24 36       	cpi	r18, 0x64	; 100
     7b2:	31 05       	cpc	r19, r1
     7b4:	1c f4       	brge	.+6      	; 0x7bc <CipSend+0x8c>
	  {
		  Val[0]=Val[1]; 
     7b6:	89 83       	std	Y+1, r24	; 0x01
		  Val[1]=Val[2]; 
     7b8:	ea 83       	std	Y+2, r30	; 0x02
		  Val[2]='\0'; 
     7ba:	1b 82       	std	Y+3, r1	; 0x03
	  }
	  RTE_WriteBufferUart(Val);//uart_char(Recieved[0]);
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
	  //uart_char(Recieved[1]); 
	  RTE_WriteBufferUart("\r\n");//uart_string("\r\n");
     7c4:	81 ec       	ldi	r24, 0xC1	; 193
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>

}
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	08 95       	ret

000007dc <WifiDisconnectCheck>:

ESPRetVal WifiDisconnectCheck()
{
		if(Esp_Commands_a[Disconnect_Command].MatchCounter==Esp_Commands_a[Disconnect_Command].ResposeLength)
     7dc:	90 91 65 01 	lds	r25, 0x0165
     7e0:	80 91 66 01 	lds	r24, 0x0166
     7e4:	98 13       	cpse	r25, r24
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <WifiDisconnectCheck+0x14>
		{
			//Esp_Commands_a[Connection_Wait].MatchCounter=0;
			Esp_Commands_a[Disconnect_Command].MatchCounter=0;
     7e8:	10 92 65 01 	sts	0x0165, r1
			return ESP_CmdSndOK;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	08 95       	ret
		}
	return ESP_CmdSNDFailed;
     7f0:	82 e0       	ldi	r24, 0x02	; 2
}
     7f2:	08 95       	ret

000007f4 <EspGlobalCounter>:
return FuncRet;
}
uint16_t EspGlobalCounter(uint8_t state)
{
	
	if(state==1)
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	29 f4       	brne	.+10     	; 0x802 <EspGlobalCounter+0xe>
	{
	  	counter1=0;
     7f8:	10 92 dd 03 	sts	0x03DD, r1
     7fc:	10 92 dc 03 	sts	0x03DC, r1
     800:	0b c0       	rjmp	.+22     	; 0x818 <EspGlobalCounter+0x24>
	}
	else if(state==2)
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	49 f4       	brne	.+18     	; 0x818 <EspGlobalCounter+0x24>
	{
		counter1++;
     806:	80 91 dc 03 	lds	r24, 0x03DC
     80a:	90 91 dd 03 	lds	r25, 0x03DD
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 dd 03 	sts	0x03DD, r25
     814:	80 93 dc 03 	sts	0x03DC, r24
	}

return	counter1;
}
     818:	80 91 dc 03 	lds	r24, 0x03DC
     81c:	90 91 dd 03 	lds	r25, 0x03DD
     820:	08 95       	ret

00000822 <CommandSend>:
	}
	return 0;
}

ESPRetVal CommandSend(ESP_CommandIndex Index)
{
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	18 2f       	mov	r17, r24
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
	if(ConnectionFlag==0)
     82a:	80 91 db 03 	lds	r24, 0x03DB
     82e:	81 11       	cpse	r24, r1
     830:	26 c0       	rjmp	.+76     	; 0x87e <CommandSend+0x5c>
	{
		RTE_WriteBufferUart(Esp_Commands_a[Index].ustring);//uart_string(Esp_Commands_a[Index].ustring);
     832:	c1 2f       	mov	r28, r17
     834:	d0 e0       	ldi	r29, 0x00	; 0
     836:	fe 01       	movw	r30, r28
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ec 0f       	add	r30, r28
     846:	fd 1f       	adc	r31, r29
     848:	ea 5f       	subi	r30, 0xFA	; 250
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
		if(Index==Send_Command)
     854:	17 30       	cpi	r17, 0x07	; 7
     856:	11 f4       	brne	.+4      	; 0x85c <CommandSend+0x3a>
		{
			(void)CipSend();
     858:	0e 94 98 03 	call	0x730	; 0x730 <CipSend>
		}
		Esp_Commands_a[Index].state=1;
     85c:	9e 01       	movw	r18, r28
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	22 0f       	add	r18, r18
     864:	33 1f       	adc	r19, r19
     866:	22 0f       	add	r18, r18
     868:	33 1f       	adc	r19, r19
     86a:	c2 0f       	add	r28, r18
     86c:	d3 1f       	adc	r29, r19
     86e:	ca 5f       	subi	r28, 0xFA	; 250
     870:	de 4f       	sbci	r29, 0xFE	; 254
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	8c 83       	std	Y+4, r24	; 0x04
		ConnectionFlag=1;
     876:	80 93 db 03 	sts	0x03DB, r24
		EspGlobalCounter(1);
     87a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <EspGlobalCounter>
	}
	if((Esp_Commands_a[Index].MatchCounter)==Esp_Commands_a[Index].ResposeLength)
     87e:	c1 2f       	mov	r28, r17
     880:	d0 e0       	ldi	r29, 0x00	; 0
     882:	fe 01       	movw	r30, r28
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	ea 5f       	subi	r30, 0xFA	; 250
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	95 81       	ldd	r25, Z+5	; 0x05
     89a:	86 81       	ldd	r24, Z+6	; 0x06
     89c:	98 13       	cpse	r25, r24
     89e:	13 c0       	rjmp	.+38     	; 0x8c6 <CommandSend+0xa4>
	{
		if(Index!=Wait_Command)
     8a0:	16 30       	cpi	r17, 0x06	; 6
     8a2:	69 f0       	breq	.+26     	; 0x8be <CommandSend+0x9c>
		{
			Esp_Commands_a[Index].state=0;
     8a4:	fe 01       	movw	r30, r28
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ec 0f       	add	r30, r28
     8b4:	fd 1f       	adc	r31, r29
     8b6:	ea 5f       	subi	r30, 0xFA	; 250
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	14 82       	std	Z+4, r1	; 0x04
		    Esp_Commands_a[Index].MatchCounter=0;
     8bc:	15 82       	std	Z+5, r1	; 0x05
		}
		ConnectionFlag=0;
     8be:	10 92 db 03 	sts	0x03DB, r1
		ReturnValue=ESP_CmdSndOK;
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <CommandSend+0xa6>
ESPRetVal CommandSend(ESP_CommandIndex Index)
{
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
     8c6:	11 e0       	ldi	r17, 0x01	; 1
		    Esp_Commands_a[Index].MatchCounter=0;
		}
		ConnectionFlag=0;
		ReturnValue=ESP_CmdSndOK;
	}
	counter=EspGlobalCounter(2);
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <EspGlobalCounter>
	
	if(counter>Esp_Commands_a[Index].WaitTime)
     8ce:	fe 01       	movw	r30, r28
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ec 0f       	add	r30, r28
     8de:	fd 1f       	adc	r31, r29
     8e0:	ea 5f       	subi	r30, 0xFA	; 250
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	27 81       	ldd	r18, Z+7	; 0x07
     8e6:	30 85       	ldd	r19, Z+8	; 0x08
     8e8:	28 17       	cp	r18, r24
     8ea:	39 07       	cpc	r19, r25
     8ec:	60 f4       	brcc	.+24     	; 0x906 <__stack+0x7>
	{
	  Esp_Commands_a[Index].state=0;
     8ee:	14 82       	std	Z+4, r1	; 0x04
	  Esp_Commands_a[Index].MatchCounter=0;
     8f0:	15 82       	std	Z+5, r1	; 0x05
	  counter1=0;
     8f2:	10 92 dd 03 	sts	0x03DD, r1
     8f6:	10 92 dc 03 	sts	0x03DC, r1
	  ConnectionFlag=0;
     8fa:	10 92 db 03 	sts	0x03DB, r1
	  EspGlobalCounter(1);
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <EspGlobalCounter>
	  ReturnValue=ESP_CmdSNDFailed;
     904:	12 e0       	ldi	r17, 0x02	; 2
	  
	}
	
    
	return ReturnValue;
}
     906:	81 2f       	mov	r24, r17
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	08 95       	ret

00000910 <ESPAsServer>:
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
  if(flag==0)
     910:	80 91 e1 03 	lds	r24, 0x03E1
     914:	81 11       	cpse	r24, r1
     916:	06 c0       	rjmp	.+12     	; 0x924 <ESPAsServer+0x14>
  {
	index=Server_Command;
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	80 93 e2 03 	sts	0x03E2, r24
	flag=1;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 e1 03 	sts	0x03E1, r24
  }
  
	  ReturnValue=CommandSend(index);
     924:	80 91 e2 03 	lds	r24, 0x03E2
     928:	0e 94 11 04 	call	0x822	; 0x822 <CommandSend>
	  if(ReturnValue==ESP_CmdSndOK)
     92c:	81 11       	cpse	r24, r1
     92e:	0b c0       	rjmp	.+22     	; 0x946 <ESPAsServer+0x36>
	  {
		  index=index+1;
     930:	80 91 e2 03 	lds	r24, 0x03E2
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	80 93 e2 03 	sts	0x03E2, r24
		    if(index==Wait_Command)
     93a:	86 30       	cpi	r24, 0x06	; 6
     93c:	89 f5       	brne	.+98     	; 0x9a0 <ESPAsServer+0x90>
		    {
			    FuncRet= ESP_CmdSndOK;
				flag=0;
     93e:	10 92 e1 03 	sts	0x03E1, r1
	  if(ReturnValue==ESP_CmdSndOK)
	  {
		  index=index+1;
		    if(index==Wait_Command)
		    {
			    FuncRet= ESP_CmdSndOK;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 95       	ret
				flag=0;
		    }
	  }
	 else if(ReturnValue==ESP_CmdSNDFailed)
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	69 f5       	brne	.+90     	; 0x9a4 <ESPAsServer+0x94>
	  {
		   if(RetryCounts>4)
     94a:	80 91 e3 03 	lds	r24, 0x03E3
     94e:	85 30       	cpi	r24, 0x05	; 5
     950:	00 f1       	brcs	.+64     	; 0x992 <ESPAsServer+0x82>
		   {
			   if(index==Mode_Command)
     952:	20 91 e2 03 	lds	r18, 0x03E2
     956:	22 30       	cpi	r18, 0x02	; 2
     958:	31 f4       	brne	.+12     	; 0x966 <ESPAsServer+0x56>
			   {
				   RetryCounts=0;
     95a:	10 92 e3 03 	sts	0x03E3, r1
				   FuncRet= ESP_CmdSNDFailed;
				   flag=0;
     95e:	10 92 e1 03 	sts	0x03E1, r1
		   if(RetryCounts>4)
		   {
			   if(index==Mode_Command)
			   {
				   RetryCounts=0;
				   FuncRet= ESP_CmdSNDFailed;
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	17 c0       	rjmp	.+46     	; 0x994 <ESPAsServer+0x84>
				   flag=0;
			   }
			   else
			   {
				   
				   Esp_Commands_a[index].state=0;
     966:	e2 2f       	mov	r30, r18
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	cf 01       	movw	r24, r30
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	e8 0f       	add	r30, r24
     97a:	f9 1f       	adc	r31, r25
     97c:	ea 5f       	subi	r30, 0xFA	; 250
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	14 82       	std	Z+4, r1	; 0x04
				   Esp_Commands_a[index].MatchCounter=0;
     982:	15 82       	std	Z+5, r1	; 0x05
				   index=index-1;
     984:	21 50       	subi	r18, 0x01	; 1
     986:	20 93 e2 03 	sts	0x03E2, r18
				   RetryCounts=0;
     98a:	10 92 e3 03 	sts	0x03E3, r1
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	01 c0       	rjmp	.+2      	; 0x994 <ESPAsServer+0x84>
     992:	81 e0       	ldi	r24, 0x01	; 1
				   Esp_Commands_a[index].MatchCounter=0;
				   index=index-1;
				   RetryCounts=0;
			   }
		   }
		  RetryCounts++;
     994:	90 91 e3 03 	lds	r25, 0x03E3
     998:	9f 5f       	subi	r25, 0xFF	; 255
     99a:	90 93 e3 03 	sts	0x03E3, r25
     99e:	08 95       	ret
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	08 95       	ret
     9a4:	81 e0       	ldi	r24, 0x01	; 1
	  



  return FuncRet;
}
     9a6:	08 95       	ret

000009a8 <findpos>:
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     9a8:	fc 01       	movw	r30, r24
     9aa:	e6 0f       	add	r30, r22
     9ac:	f1 1d       	adc	r31, r1
     9ae:	20 81       	ld	r18, Z
     9b0:	22 23       	and	r18, r18
     9b2:	89 f0       	breq	.+34     	; 0x9d6 <findpos+0x2e>
	{
		if(ustring[pos]==sub)
     9b4:	24 13       	cpse	r18, r20
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <findpos+0x1c>
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <findpos+0x16>
     9ba:	24 13       	cpse	r18, r20
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <findpos+0x1c>
		{
			return pos+1;
     9be:	86 2f       	mov	r24, r22
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	08 95       	ret
		}
		pos++;
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     9c6:	fc 01       	movw	r30, r24
     9c8:	e6 0f       	add	r30, r22
     9ca:	f1 1d       	adc	r31, r1
     9cc:	20 81       	ld	r18, Z
     9ce:	21 11       	cpse	r18, r1
     9d0:	f4 cf       	rjmp	.-24     	; 0x9ba <findpos+0x12>
		{
			return pos+1;
		}
		pos++;
	}
	return 0;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	08 95       	ret
     9d6:	80 e0       	ldi	r24, 0x00	; 0
}
     9d8:	08 95       	ret

000009da <PortCopy>:

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     9da:	42 17       	cp	r20, r18
     9dc:	70 f4       	brcc	.+28     	; 0x9fa <PortCopy+0x20>
     9de:	fb 01       	movw	r30, r22
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     9e0:	30 e0       	ldi	r19, 0x00	; 0
	while(start<end && pos<4 )
	{
		copy[pos]=ustring[start];
     9e2:	dc 01       	movw	r26, r24
     9e4:	a4 0f       	add	r26, r20
     9e6:	b1 1d       	adc	r27, r1
     9e8:	5c 91       	ld	r21, X
     9ea:	51 93       	st	Z+, r21
		pos++;
     9ec:	3f 5f       	subi	r19, 0xFF	; 255
		start++;
     9ee:	4f 5f       	subi	r20, 0xFF	; 255
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     9f0:	42 17       	cp	r20, r18
     9f2:	20 f4       	brcc	.+8      	; 0x9fc <PortCopy+0x22>
     9f4:	34 30       	cpi	r19, 0x04	; 4
     9f6:	a9 f7       	brne	.-22     	; 0x9e2 <PortCopy+0x8>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <PortCopy+0x22>
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     9fa:	30 e0       	ldi	r19, 0x00	; 0
	{
		copy[pos]=ustring[start];
		pos++;
		start++;
	}
	copy[pos]=ustring[start];
     9fc:	fc 01       	movw	r30, r24
     9fe:	e4 0f       	add	r30, r20
     a00:	f1 1d       	adc	r31, r1
     a02:	80 81       	ld	r24, Z
     a04:	fb 01       	movw	r30, r22
     a06:	e3 0f       	add	r30, r19
     a08:	f1 1d       	adc	r31, r1
     a0a:	80 83       	st	Z, r24
	PortLen=pos;
     a0c:	30 93 f6 03 	sts	0x03F6, r19
     a10:	08 95       	ret

00000a12 <SendData>:
	
}

ESPRetVal SendData(uint8_t count)
{
	EspDataCount=count;
     a12:	80 93 df 03 	sts	0x03DF, r24
     a16:	10 92 e0 03 	sts	0x03E0, r1
	return CommandSend(Send_Command);
     a1a:	87 e0       	ldi	r24, 0x07	; 7
     a1c:	0e 94 11 04 	call	0x822	; 0x822 <CommandSend>
}
     a20:	08 95       	ret

00000a22 <ConnectCommand>:


ESPRetVal ConnectCommand()
{
	//uart_num(Esp_Commands_a[Connection_Wait].MatchCounter);
	if(Esp_Commands_a[Connection_Wait].MatchCounter==Esp_Commands_a[Connection_Wait].ResposeLength)
     a22:	90 91 14 01 	lds	r25, 0x0114
     a26:	80 91 15 01 	lds	r24, 0x0115
     a2a:	98 13       	cpse	r25, r24
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <ConnectCommand+0x14>
	{
		//uart_string("wifi connected");
		Esp_Commands_a[Connection_Wait].MatchCounter=0;
     a2e:	10 92 14 01 	sts	0x0114, r1
		//Esp_Commands_a[Disconnect_Command].MatchCounter=0;
		return ESP_CmdSndOK;
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret
	}
	return ESP_CmdSNDFailed;
     a36:	82 e0       	ldi	r24, 0x02	; 2
}
     a38:	08 95       	ret

00000a3a <CheckInput>:
uint8_t CheckInput()
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	//uart_string(EspDataBuffer);
	if(datagot==1)
     a42:	80 91 da 03 	lds	r24, 0x03DA
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	09 f0       	breq	.+2      	; 0xa4c <CheckInput+0x12>
     a4a:	4f c0       	rjmp	.+158    	; 0xaea <CheckInput+0xb0>
	{
		if(Esp_Commands_a[Wait_Command].MatchCounter==Esp_Commands_a[Wait_Command].ResposeLength)
     a4c:	90 91 41 01 	lds	r25, 0x0141
     a50:	80 91 42 01 	lds	r24, 0x0142
     a54:	98 13       	cpse	r25, r24
     a56:	47 c0       	rjmp	.+142    	; 0xae6 <CheckInput+0xac>
		{ 
			Esp_Commands_a[Wait_Command].state=1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 40 01 	sts	0x0140, r24
			Esp_Commands_a[Wait_Command].MatchCounter=0;	
     a5e:	10 92 41 01 	sts	0x0141, r1
			PortStart=findpos(EspDataBuffer,0,',');
     a62:	4c e2       	ldi	r20, 0x2C	; 44
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	8b eb       	ldi	r24, 0xBB	; 187
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <findpos>
     a6e:	c8 2f       	mov	r28, r24
			PortEnd=findpos(EspDataBuffer,PortStart,',');
     a70:	4c e2       	ldi	r20, 0x2C	; 44
     a72:	68 2f       	mov	r22, r24
     a74:	8b eb       	ldi	r24, 0xBB	; 187
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <findpos>
     a7c:	08 2f       	mov	r16, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortStart,PortEnd);
     a7e:	28 2f       	mov	r18, r24
     a80:	4c 2f       	mov	r20, r28
     a82:	67 ee       	ldi	r22, 0xE7	; 231
     a84:	73 e0       	ldi	r23, 0x03	; 3
     a86:	8b eb       	ldi	r24, 0xBB	; 187
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 ed 04 	call	0x9da	; 0x9da <PortCopy>
			PortSel=EspPortBuffer[0];
     a8e:	c7 ee       	ldi	r28, 0xE7	; 231
     a90:	d3 e0       	ldi	r29, 0x03	; 3
     a92:	88 81       	ld	r24, Y
     a94:	80 93 de 03 	sts	0x03DE, r24
			PortStart=findpos(EspDataBuffer,PortEnd,':');
     a98:	4a e3       	ldi	r20, 0x3A	; 58
     a9a:	60 2f       	mov	r22, r16
     a9c:	8b eb       	ldi	r24, 0xBB	; 187
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <findpos>
     aa4:	18 2f       	mov	r17, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     aa6:	28 2f       	mov	r18, r24
     aa8:	40 2f       	mov	r20, r16
     aaa:	be 01       	movw	r22, r28
     aac:	8b eb       	ldi	r24, 0xBB	; 187
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 ed 04 	call	0x9da	; 0x9da <PortCopy>
			Recieved[0]=EspPortBuffer[0];
     ab4:	c8 81       	ld	r28, Y
     ab6:	c0 93 f9 03 	sts	0x03F9, r28
			Recieved[1]=EspPortBuffer[1];
     aba:	80 91 e8 03 	lds	r24, 0x03E8
     abe:	80 93 fa 03 	sts	0x03FA, r24
			uint8_t initial ;
			initial=(uint8_t )EspPortBuffer[0];
			PortEnd=PortStart;
     ac2:	10 93 f8 03 	sts	0x03F8, r17
			PortStart=PortStart+(uint8_t )EspPortBuffer[0];
     ac6:	c1 0f       	add	r28, r17
     ac8:	c0 93 f7 03 	sts	0x03F7, r28
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     acc:	2c 2f       	mov	r18, r28
     ace:	41 2f       	mov	r20, r17
     ad0:	67 ee       	ldi	r22, 0xE7	; 231
     ad2:	73 e0       	ldi	r23, 0x03	; 3
     ad4:	8b eb       	ldi	r24, 0xBB	; 187
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	0e 94 ed 04 	call	0x9da	; 0x9da <PortCopy>
			for( posi=PortEnd;posi<PortStart;posi++)
			{
				Recieved[posi]=EspDataBuffer[posi];
				
			}*/
			EspPortBuffer[PortStart-2]='\0';
     adc:	ec 2f       	mov	r30, r28
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	eb 51       	subi	r30, 0x1B	; 27
     ae2:	fc 4f       	sbci	r31, 0xFC	; 252
     ae4:	10 82       	st	Z, r1
			//RTE_WriteBufferUart(EspPortBuffer);//uart_string(EspPortBuffer);
			//RTE_WriteBufferUart(EspDataBuffer);
			
		}
		//uart_string(EspDataBuffer);
		datagot=0;
     ae6:	10 92 da 03 	sts	0x03DA, r1
	}
	if(Esp_Commands_a[Uart_command].MatchCounter==Esp_Commands_a[Uart_command].ResposeLength)
     aea:	90 91 6e 01 	lds	r25, 0x016E
     aee:	80 91 6f 01 	lds	r24, 0x016F
     af2:	98 13       	cpse	r25, r24
     af4:	03 c0       	rjmp	.+6      	; 0xafc <CheckInput+0xc2>
	{
		//uart_string("uart debug mode enabled");
		UartEvents=0x01;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 1e 05 	sts	0x051E, r24
	}
	
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	08 95       	ret

00000b06 <RequestWait>:
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
	  static ESPRetVal ReturnValue=ESP_CmdSndBusy;
	  if(FlagReq==0)
     b06:	80 91 e4 03 	lds	r24, 0x03E4
     b0a:	81 11       	cpse	r24, r1
     b0c:	08 c0       	rjmp	.+16     	; 0xb1e <RequestWait+0x18>
	  {
		    indexReq=Wait_Command;
     b0e:	86 e0       	ldi	r24, 0x06	; 6
     b10:	80 93 e5 03 	sts	0x03E5, r24
		    FlagReq=1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 e4 03 	sts	0x03E4, r24
	        BUFFEREnable=1;
     b1a:	80 93 e6 03 	sts	0x03E6, r24
			 
			
	  }

 
	  	  if(ReturnValue!=ESP_CmdSndOK )
     b1e:	80 91 1d 02 	lds	r24, 0x021D
     b22:	88 23       	and	r24, r24
     b24:	39 f0       	breq	.+14     	; 0xb34 <RequestWait+0x2e>
	  	  { 
				ReturnValue=CommandSend(Wait_Command);
     b26:	86 e0       	ldi	r24, 0x06	; 6
     b28:	0e 94 11 04 	call	0x822	; 0x822 <CommandSend>
     b2c:	80 93 1d 02 	sts	0x021D, r24
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret
				ReturnValue=CommandSend(Wait_Command);

		  }
		  else
		  {
					if(datagot==1)
     b34:	80 91 da 03 	lds	r24, 0x03DA
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	59 f4       	brne	.+22     	; 0xb52 <RequestWait+0x4c>
					{
						FlagReq=0;
     b3c:	10 92 e4 03 	sts	0x03E4, r1
						BUFFEREnable=0;
     b40:	10 92 e6 03 	sts	0x03E6, r1
						CheckInput();
     b44:	0e 94 1d 05 	call	0xa3a	; 0xa3a <CheckInput>
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
						ReturnValue=ESP_CmdSndBusy;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 1d 02 	sts	0x021D, r24
						FlagReq=0;
						BUFFEREnable=0;
						CheckInput();
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	08 95       	ret
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     b52:	81 e0       	ldi	r24, 0x01	; 1
					}		   
		  }

	  	  
return FuncRet;
}
     b54:	08 95       	ret

00000b56 <enable>:

uint8_t enable()
{
	
   return ESP_DataRead_a[0].Purpose;
}
     b56:	80 91 74 01 	lds	r24, 0x0174
     b5a:	08 95       	ret

00000b5c <checkRecievedData>:

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     b5c:	60 91 72 01 	lds	r22, 0x0172
     b60:	70 91 73 01 	lds	r23, 0x0173
     b64:	87 ee       	ldi	r24, 0xE7	; 231
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <strcmp>
     b6c:	28 2f       	mov	r18, r24
     b6e:	39 2f       	mov	r19, r25
     b70:	23 2b       	or	r18, r19
     b72:	21 f4       	brne	.+8      	; 0xb7c <checkRecievedData+0x20>
			{
				ESP_DataRead_a[i].Purpose=0;
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 74 01 	sts	0x0174, r24
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <checkRecievedData+0x24>
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
			{
				ESP_DataRead_a[i].Purpose=0;
     b7c:	10 92 74 01 	sts	0x0174, r1

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     b80:	60 91 75 01 	lds	r22, 0x0175
     b84:	70 91 76 01 	lds	r23, 0x0176
     b88:	87 ee       	ldi	r24, 0xE7	; 231
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <strcmp>
     b90:	28 2f       	mov	r18, r24
     b92:	39 2f       	mov	r19, r25
     b94:	23 2b       	or	r18, r19
     b96:	19 f0       	breq	.+6      	; 0xb9e <checkRecievedData+0x42>
			{
				ESP_DataRead_a[i].Purpose=0;
     b98:	10 92 77 01 	sts	0x0177, r1
     b9c:	08 95       	ret
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 77 01 	sts	0x0177, r24
     ba4:	08 95       	ret

00000ba6 <ESPpop>:
}

uint8_t ESPpop(char *Bytex)
{
	static uint8_t PosByte;
	EspDataBuffer[30]='!';
     ba6:	21 e2       	ldi	r18, 0x21	; 33
     ba8:	20 93 d9 03 	sts	0x03D9, r18
	*Bytex=EspDataBuffer[PosByte+7];
     bac:	20 91 03 04 	lds	r18, 0x0403
     bb0:	e2 2f       	mov	r30, r18
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	e5 54       	subi	r30, 0x45	; 69
     bb6:	fc 4f       	sbci	r31, 0xFC	; 252
     bb8:	37 81       	ldd	r19, Z+7	; 0x07
     bba:	fc 01       	movw	r30, r24
     bbc:	30 83       	st	Z, r19
	if(PosByte==23)
     bbe:	27 31       	cpi	r18, 0x17	; 23
     bc0:	21 f4       	brne	.+8      	; 0xbca <ESPpop+0x24>
	{
		PosByte=0;
     bc2:	10 92 03 04 	sts	0x0403, r1
		return 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	08 95       	ret
	}
	else
	{
		PosByte++;
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	20 93 03 04 	sts	0x0403, r18
	}
	return 0;
     bd0:	80 e0       	ldi	r24, 0x00	; 0
}
     bd2:	08 95       	ret

00000bd4 <ESPCallBack>:

void ESPCallBack(void *fillcallback)
{
	char* mediator;
	mediator=(char*)fillcallback;
	EspDataBuffer[28]=mediator[0];
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 81       	ld	r18, Z
     bd8:	20 93 d7 03 	sts	0x03D7, r18
	EspDataBuffer[29]=mediator[1];
     bdc:	81 81       	ldd	r24, Z+1	; 0x01
     bde:	80 93 d8 03 	sts	0x03D8, r24
     be2:	08 95       	ret

00000be4 <UartHandlerInit>:
	
}


void UartHandlerInit()
{
     be4:	08 95       	ret

00000be6 <adc_init>:
 */ 
#include "ADC.h"
#include "..\BaseLayer\UART.h"
void adc_init(void){

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHzjkh
     be6:	ea e7       	ldi	r30, 0x7A	; 122
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	87 60       	ori	r24, 0x07	; 7
     bee:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0)|(1 << REFS1); // Set ADC reference to 2.56 internal
     bf0:	ac e7       	ldi	r26, 0x7C	; 124
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	8c 91       	ld	r24, X
     bf6:	80 6c       	ori	r24, 0xC0	; 192
     bf8:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     bfa:	8c 91       	ld	r24, X
     bfc:	80 62       	ori	r24, 0x20	; 32
     bfe:	8c 93       	st	X, r24

	// No MUX values needed to be changed to use ADC0

	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	ADCSRA |= (1 << ADIE);	
     c00:	80 81       	ld	r24, Z
     c02:	88 60       	ori	r24, 0x08	; 8
     c04:	80 83       	st	Z, r24
     c06:	08 95       	ret

00000c08 <adc_read>:
    //ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
}

void adc_read(unsigned char ch){
    ADCSRA |= (1 << ADEN);
     c08:	ea e7       	ldi	r30, 0x7A	; 122
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	90 81       	ld	r25, Z
     c0e:	90 68       	ori	r25, 0x80	; 128
     c10:	90 83       	st	Z, r25
	ADMUX &= 0xF8; // clear bottom 3 bits
     c12:	ac e7       	ldi	r26, 0x7C	; 124
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	9c 91       	ld	r25, X
     c18:	98 7f       	andi	r25, 0xF8	; 248
     c1a:	9c 93       	st	X, r25
	ADMUX |= ch; // then set bottom 3 bits to channel n
     c1c:	9c 91       	ld	r25, X
     c1e:	89 2b       	or	r24, r25
     c20:	8c 93       	st	X, r24

	//uart_num(ch);
	ADCSRA |= (1 << ADSC);//|(1<<ADEN);  // Start A2D Conversions
     c22:	80 81       	ld	r24, Z
     c24:	80 64       	ori	r24, 0x40	; 64
     c26:	80 83       	st	Z, r24
     c28:	08 95       	ret

00000c2a <ADC_State>:
	
}

uint8_t ADC_State()
{	
	return bit_is_set(ADCSRA,ADSC);
     c2a:	80 91 7a 00 	lds	r24, 0x007A
}
     c2e:	80 74       	andi	r24, 0x40	; 64
     c30:	08 95       	ret

00000c32 <ADCValue>:
uint16_t ADCValue()
{
		uint8_t thelow=ADCL;
     c32:	80 91 78 00 	lds	r24, 0x0078
		uint16_t tenbit=ADCH<<2|thelow>>6;
     c36:	20 91 79 00 	lds	r18, 0x0079
     c3a:	82 95       	swap	r24
     c3c:	86 95       	lsr	r24
     c3e:	86 95       	lsr	r24
     c40:	83 70       	andi	r24, 0x03	; 3
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	28 2b       	or	r18, r24
		//PORTD=tenbit;
		//uart_num(thelow);
		//uart_num(ADMUX&0x07);
		return(tenbit);

}
     c4e:	82 2f       	mov	r24, r18
     c50:	93 2f       	mov	r25, r19
     c52:	08 95       	ret

00000c54 <__vector_21>:

ISR(ADC_vect)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	8f 93       	push	r24
	uint8_t thelow=ADCL;
     c60:	80 91 78 00 	lds	r24, 0x0078
	uint16_t tenbit=ADCH<<2|thelow>>6;
     c64:	80 91 79 00 	lds	r24, 0x0079
	//PORTD=tenbit;
	
	
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <PushIntoCircularBuffer>:
 *  Author: Nikhil
 */ 
#include "CircularQueue.h"
#include "UART.h"
CbuffState_t PushIntoCircularBuffer(Cbuff_t* CircularBuffer,unsigned char data)
{
     c74:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
     c76:	92 81       	ldd	r25, Z+2	; 0x02
     c78:	89 2f       	mov	r24, r25
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
     c7c:	24 81       	ldd	r18, Z+4	; 0x04
     c7e:	82 17       	cp	r24, r18
     c80:	08 f0       	brcs	.+2      	; 0xc84 <PushIntoCircularBuffer+0x10>
	{
		next=0;
     c82:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
     c84:	23 81       	ldd	r18, Z+3	; 0x03
     c86:	28 17       	cp	r18, r24
     c88:	41 f0       	breq	.+16     	; 0xc9a <PushIntoCircularBuffer+0x26>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
     c8a:	a0 81       	ld	r26, Z
     c8c:	b1 81       	ldd	r27, Z+1	; 0x01
     c8e:	a9 0f       	add	r26, r25
     c90:	b1 1d       	adc	r27, r1
     c92:	6c 93       	st	X, r22
		CircularBuffer->head=next;
     c94:	82 83       	std	Z+2, r24	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
     c9a:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
     c9c:	08 95       	ret

00000c9e <PopFromCircularBuffer>:

CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
     c9e:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
     ca0:	83 81       	ldd	r24, Z+3	; 0x03
     ca2:	98 2f       	mov	r25, r24
     ca4:	9f 5f       	subi	r25, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
     ca6:	22 81       	ldd	r18, Z+2	; 0x02
     ca8:	82 17       	cp	r24, r18
     caa:	71 f0       	breq	.+28     	; 0xcc8 <PopFromCircularBuffer+0x2a>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
     cac:	24 81       	ldd	r18, Z+4	; 0x04
     cae:	92 17       	cp	r25, r18
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <PopFromCircularBuffer+0x16>
	{
		next=0;
     cb2:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
     cb4:	a0 81       	ld	r26, Z
     cb6:	b1 81       	ldd	r27, Z+1	; 0x01
     cb8:	a8 0f       	add	r26, r24
     cba:	b1 1d       	adc	r27, r1
     cbc:	8c 91       	ld	r24, X
     cbe:	db 01       	movw	r26, r22
     cc0:	8c 93       	st	X, r24
	 CircularBuffer->tail=next;
     cc2:	93 83       	std	Z+3, r25	; 0x03
	 
  return BuffOk;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret
CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	 CircularBuffer->tail=next;
	 
  return BuffOk;
}
     cca:	08 95       	ret

00000ccc <IsBuffempty>:

CbuffState_t IsBuffempty(Cbuff_t  *CircularBuffer)
{
     ccc:	fc 01       	movw	r30, r24
		if(CircularBuffer->tail==CircularBuffer->head)
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	23 81       	ldd	r18, Z+3	; 0x03
     cd2:	92 81       	ldd	r25, Z+2	; 0x02
     cd4:	29 13       	cpse	r18, r25
     cd6:	80 e0       	ldi	r24, 0x00	; 0
		{
			return BuffEmpty;
		}
	return BuffOk;
}
     cd8:	08 95       	ret

00000cda <HeadTailDiff>:

uint8_t HeadTailDiff(Cbuff_t  *CircularBuffer,uint8_t dat)
{
     cda:	fc 01       	movw	r30, r24
	if(CircularBuffer->tail>CircularBuffer->head)
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	89 17       	cp	r24, r25
     ce2:	20 f4       	brcc	.+8      	; 0xcec <HeadTailDiff+0x12>
	{
		return ((CircularBuffer->MaxLen-CircularBuffer->tail)+CircularBuffer->head);
     ce4:	24 81       	ldd	r18, Z+4	; 0x04
     ce6:	82 0f       	add	r24, r18
     ce8:	89 1b       	sub	r24, r25
     cea:	08 95       	ret
	}
	else
	{
		return (CircularBuffer->head-CircularBuffer->tail);
     cec:	89 1b       	sub	r24, r25
	}
     cee:	08 95       	ret

00000cf0 <TriggerUltraSonic>:
	
}

static void TriggerUltraSonic(void)
{
	PinOutput(0,PIN_OUT8,D);
     cf0:	42 e0       	ldi	r20, 0x02	; 2
     cf2:	67 e0       	ldi	r22, 0x07	; 7
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <TriggerUltraSonic+0xc>
	_delay_us(2);
	PinOutput(1,PIN_OUT8,D);
     cfc:	42 e0       	ldi	r20, 0x02	; 2
     cfe:	67 e0       	ldi	r22, 0x07	; 7
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <TriggerUltraSonic+0x18>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <TriggerUltraSonic+0x1a>
     d0a:	00 00       	nop
	_delay_us(5);
	PinOutput(0,PIN_OUT8,D);
     d0c:	42 e0       	ldi	r20, 0x02	; 2
     d0e:	67 e0       	ldi	r22, 0x07	; 7
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
     d16:	08 95       	ret

00000d18 <changeIntLogic>:
}

void changeIntLogic(uint8_t logic)
{
	 
	if(logic==1)
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	31 f4       	brne	.+12     	; 0xd28 <changeIntLogic+0x10>
	{
		//EICRA  |= (1 << ISC00)| (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     d1c:	e9 e6       	ldi	r30, 0x69	; 105
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
     d26:	08 95       	ret
	}
	else
	{
		//EICRA  &=~(1<<ISC00);
		//EICRA  |= (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     d28:	e9 e6       	ldi	r30, 0x69	; 105
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	80 83       	st	Z, r24
     d32:	08 95       	ret

00000d34 <__vector_1>:
	Start=0;
	Status=1;
}

ISR (INT0_vect)
{   
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
	
	if(Start==0)
     d56:	80 91 04 04 	lds	r24, 0x0404
     d5a:	81 11       	cpse	r24, r1
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <__vector_1+0x3e>
	{
		Timer2Enable();
     d5e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Timer2Enable>
		changeIntLogic(0);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 8c 06 	call	0xd18	; 0xd18 <changeIntLogic>
		Start=1; 
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 04 04 	sts	0x0404, r24
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <__vector_1+0x54>
		      
	}/* interrupt code here */
	else
	{   	
		Timer2Count();
     d72:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Timer2Count>
		changeIntLogic(1);
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 8c 06 	call	0xd18	; 0xd18 <changeIntLogic>
		Start=0;
     d7e:	10 92 04 04 	sts	0x0404, r1
		Status=1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 05 04 	sts	0x0405, r24
		  
	}
	
}
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <ExtIntInit>:
#include "pinout.h"
#include "UART.h"
void ExtIntInit()
{
	
	changeIntLogic(1);//MCUCR |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 8c 06 	call	0xd18	; 0xd18 <changeIntLogic>
	EIMSK  |= (1 << INT0);      // Turns on INT0
     db2:	e8 9a       	sbi	0x1d, 0	; 29
	Start=0;
     db4:	10 92 04 04 	sts	0x0404, r1
	Status=1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 05 04 	sts	0x0405, r24
     dbe:	08 95       	ret

00000dc0 <InterfacePulse>:
		EICRA  |= (1 << ISC00);
	}
}

uint16_t InterfacePulse(uint16_t Pulse)
{
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
	static uint8_t timeout=0;
	uint8_t *Data=&Pulse;
    
	if(timeout>2)
     dc6:	80 91 06 04 	lds	r24, 0x0406
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	60 f0       	brcs	.+24     	; 0xde6 <InterfacePulse+0x26>
	{
		changeIntLogic(1);
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0e 94 8c 06 	call	0xd18	; 0xd18 <changeIntLogic>
		TriggerUltraSonic();
     dd4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <TriggerUltraSonic>
		Status=0;
     dd8:	10 92 05 04 	sts	0x0405, r1
		Start=0;
     ddc:	10 92 04 04 	sts	0x0404, r1
		timeout=0;
     de0:	10 92 06 04 	sts	0x0406, r1
     de4:	3b c0       	rjmp	.+118    	; 0xe5c <InterfacePulse+0x9c>
		//uart_num(timeout);
	}
	else
	{
		
			if(Status==1)
     de6:	90 91 05 04 	lds	r25, 0x0405
     dea:	91 30       	cpi	r25, 0x01	; 1
     dec:	99 f5       	brne	.+102    	; 0xe54 <InterfacePulse+0x94>
			{
				//TriggerUltraSonic();
				TimerValue=TimerValue+(overflowfag*255);
     dee:	20 91 37 05 	lds	r18, 0x0537
     df2:	80 91 35 05 	lds	r24, 0x0535
     df6:	90 91 36 05 	lds	r25, 0x0536
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	23 9f       	mul	r18, r19
     dfe:	80 0d       	add	r24, r0
     e00:	91 1d       	adc	r25, r1
     e02:	11 24       	eor	r1, r1
     e04:	90 93 36 05 	sts	0x0536, r25
     e08:	80 93 35 05 	sts	0x0535, r24
				TimerValue=(16*TimerValue)/58;// PRESCALER IS 256 so 1 count is 16us
     e0c:	20 91 35 05 	lds	r18, 0x0535
     e10:	30 91 36 05 	lds	r19, 0x0536
     e14:	22 95       	swap	r18
     e16:	32 95       	swap	r19
     e18:	30 7f       	andi	r19, 0xF0	; 240
     e1a:	32 27       	eor	r19, r18
     e1c:	20 7f       	andi	r18, 0xF0	; 240
     e1e:	32 27       	eor	r19, r18
     e20:	af e9       	ldi	r26, 0x9F	; 159
     e22:	b6 e4       	ldi	r27, 0x46	; 70
     e24:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
     e28:	92 95       	swap	r25
     e2a:	82 95       	swap	r24
     e2c:	8f 70       	andi	r24, 0x0F	; 15
     e2e:	89 27       	eor	r24, r25
     e30:	9f 70       	andi	r25, 0x0F	; 15
     e32:	89 27       	eor	r24, r25
     e34:	90 93 36 05 	sts	0x0536, r25
     e38:	80 93 35 05 	sts	0x0535, r24
				Pulse=TimerValue;
     e3c:	c0 91 35 05 	lds	r28, 0x0535
     e40:	d0 91 36 05 	lds	r29, 0x0536
				Pulse|=0X8000;
     e44:	d0 68       	ori	r29, 0x80	; 128
				timeout=0;
     e46:	10 92 06 04 	sts	0x0406, r1
				Status=0;
     e4a:	10 92 05 04 	sts	0x0405, r1
				TriggerUltraSonic();
     e4e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <TriggerUltraSonic>
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <InterfacePulse+0x9c>
			}
			else
			{
				Pulse|=0x1000;
     e54:	d0 61       	ori	r29, 0x10	; 16
				timeout++;
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 06 04 	sts	0x0406, r24
			}

	}
	return Pulse;
}
     e5c:	8c 2f       	mov	r24, r28
     e5e:	9d 2f       	mov	r25, r29
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <EOTi2c>:
	uart_num(TWBR);
}
uint8_t EOTi2c()
{

	while( !(TWCR & (1<<TWINT)) )
     e66:	ec eb       	ldi	r30, 0xBC	; 188
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	ec f7       	brge	.-6      	; 0xe6a <EOTi2c+0x4>
	{
	}

	return 1;
}
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	08 95       	ret

00000e74 <i2c_start>:


uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     e74:	ec eb       	ldi	r30, 0xBC	; 188
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     e7a:	94 ea       	ldi	r25, 0xA4	; 164
     e7c:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) )
     e7e:	90 81       	ld	r25, Z
     e80:	99 23       	and	r25, r25
     e82:	ec f7       	brge	.-6      	; 0xe7e <i2c_start+0xa>
	{
		
	}
	//uart_num(!(TWCR & (1<<TWINT)));
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     e84:	90 91 b9 00 	lds	r25, 0x00B9
     e88:	98 7f       	andi	r25, 0xF8	; 248
     e8a:	98 30       	cpi	r25, 0x08	; 8
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <i2c_start+0x42>
	//uart_string("hrrr");
	// load slave address into data register
	TWDR = address;
     e8e:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     e92:	84 e8       	ldi	r24, 0x84	; 132
     e94:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     e98:	ec eb       	ldi	r30, 0xBC	; 188
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 23       	and	r24, r24
     ea0:	ec f7       	brge	.-6      	; 0xe9c <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     ea2:	90 91 b9 00 	lds	r25, 0x00B9
     ea6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     ea8:	98 31       	cpi	r25, 0x18	; 24
     eaa:	39 f0       	breq	.+14     	; 0xeba <i2c_start+0x46>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 34       	cpi	r25, 0x40	; 64
     eb0:	29 f4       	brne	.+10     	; 0xebc <i2c_start+0x48>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	08 95       	ret
	{
		
	}
	//uart_num(!(TWCR & (1<<TWINT)));
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     eba:	80 e0       	ldi	r24, 0x00	; 0
}
     ebc:	08 95       	ret

00000ebe <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     ebe:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     ec2:	84 e8       	ldi	r24, 0x84	; 132
     ec4:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     ec8:	ec eb       	ldi	r30, 0xBC	; 188
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 23       	and	r24, r24
     ed0:	ec f7       	brge	.-6      	; 0xecc <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     ed2:	90 91 b9 00 	lds	r25, 0x00B9
     ed6:	98 7f       	andi	r25, 0xF8	; 248
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	98 32       	cpi	r25, 0x28	; 40
     edc:	09 f4       	brne	.+2      	; 0xee0 <i2c_write+0x22>
     ede:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     ee0:	08 95       	ret

00000ee2 <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ee2:	84 e9       	ldi	r24, 0x94	; 148
     ee4:	80 93 bc 00 	sts	0x00BC, r24
     ee8:	08 95       	ret

00000eea <ssd1306_char_font6x8>:
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	08 2f       	mov	r16, r24
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
     ef4:	88 e7       	ldi	r24, 0x78	; 120
     ef6:	0e 94 3a 07 	call	0xe74	; 0xe74 <i2c_start>
     efa:	81 11       	cpse	r24, r1
     efc:	20 c0       	rjmp	.+64     	; 0xf3e <ssd1306_char_font6x8+0x54>
	i2c_write(0x40);
     efe:	80 e4       	ldi	r24, 0x40	; 64
     f00:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
     f04:	00 52       	subi	r16, 0x20	; 32
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     f06:	80 2f       	mov	r24, r16
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	8c 01       	movw	r16, r24
     f0c:	00 0f       	add	r16, r16
     f0e:	11 1f       	adc	r17, r17
     f10:	80 0f       	add	r24, r16
     f12:	91 1f       	adc	r25, r17
     f14:	8c 01       	movw	r16, r24
     f16:	00 0f       	add	r16, r16
     f18:	11 1f       	adc	r17, r17
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     f1e:	fe 01       	movw	r30, r28
     f20:	e0 0f       	add	r30, r16
     f22:	f1 1f       	adc	r31, r17
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     f24:	e8 59       	subi	r30, 0x98	; 152
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	84 91       	lpm	r24, Z
     f2a:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
     f2e:	81 11       	cpse	r24, r1
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <ssd1306_char_font6x8+0x54>
     f32:	21 96       	adiw	r28, 0x01	; 1

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
     f34:	c6 30       	cpi	r28, 0x06	; 6
     f36:	d1 05       	cpc	r29, r1
     f38:	91 f7       	brne	.-28     	; 0xf1e <ssd1306_char_font6x8+0x34>
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
     f3a:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_stop>
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <ssd1306_setpos>:
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
void ssd1306_setpos(uint8_t x, uint8_t y)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	c8 2f       	mov	r28, r24
     f4e:	d6 2f       	mov	r29, r22
	if (i2c_start(0x78 | 0x00)) return 1;
     f50:	88 e7       	ldi	r24, 0x78	; 120
     f52:	0e 94 3a 07 	call	0xe74	; 0xe74 <i2c_start>
     f56:	81 11       	cpse	r24, r1
     f58:	12 c0       	rjmp	.+36     	; 0xf7e <ssd1306_setpos+0x36>
	i2c_write(0x00);
     f5a:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
	i2c_write(0xb0 + y);
     f5e:	8d 2f       	mov	r24, r29
     f60:	80 55       	subi	r24, 0x50	; 80
     f62:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
	i2c_write((x & 0x0f));
     f66:	8c 2f       	mov	r24, r28
     f68:	8f 70       	andi	r24, 0x0F	; 15
     f6a:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
	i2c_write(((x & 0xf0) >> 4) | 0x10); // | 0x10
     f6e:	8c 2f       	mov	r24, r28
     f70:	82 95       	swap	r24
     f72:	8f 70       	andi	r24, 0x0F	; 15
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
	/* TODO: Verify correctness */	 // | 0x01
	i2c_stop();
     f7a:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_stop>
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <ssd1306_String_font6x8>:
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	86 2f       	mov	r24, r22
	ssd1306_setpos(x,y);
     f8c:	64 2f       	mov	r22, r20
     f8e:	0e 94 a4 07 	call	0xf48	; 0xf48 <ssd1306_setpos>
	while ( *SSDstring)
     f92:	88 81       	ld	r24, Y
     f94:	88 23       	and	r24, r24
     f96:	31 f0       	breq	.+12     	; 0xfa4 <ssd1306_String_font6x8+0x20>
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
     f98:	21 96       	adiw	r28, 0x01	; 1
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
	{
     ssd1306_char_font6x8(*SSDstring++);
     f9a:	0e 94 75 07 	call	0xeea	; 0xeea <ssd1306_char_font6x8>
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
     f9e:	89 91       	ld	r24, Y+
     fa0:	81 11       	cpse	r24, r1
     fa2:	fb cf       	rjmp	.-10     	; 0xf9a <ssd1306_String_font6x8+0x16>
	{
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <ssd1306_Fill_Rectangle>:
		i2c_write(0x01);
	}
	i2c_stop();
}
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	d4 2f       	mov	r29, r20
		ssd1306_setpos(x,y);
     fb0:	0e 94 a4 07 	call	0xf48	; 0xf48 <ssd1306_setpos>
		if (i2c_start(0x78 | 0x00)) return 1;
     fb4:	88 e7       	ldi	r24, 0x78	; 120
     fb6:	0e 94 3a 07 	call	0xe74	; 0xe74 <i2c_start>
     fba:	81 11       	cpse	r24, r1
     fbc:	19 c0       	rjmp	.+50     	; 0xff0 <ssd1306_Fill_Rectangle+0x46>
		i2c_write(0x40);
     fbe:	80 e4       	ldi	r24, 0x40	; 64
     fc0:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
		for(uint8_t i=0;i<data;i++)
     fc4:	d1 11       	cpse	r29, r1
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <ssd1306_Fill_Rectangle+0x22>
     fc8:	cd 2f       	mov	r28, r29
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <ssd1306_Fill_Rectangle+0x36>
     fcc:	c0 e0       	ldi	r28, 0x00	; 0
		{
			i2c_write(0xff);
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
		ssd1306_setpos(x,y);
		if (i2c_start(0x78 | 0x00)) return 1;
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
     fd4:	cf 5f       	subi	r28, 0xFF	; 255
     fd6:	cd 13       	cpse	r28, r29
     fd8:	fa cf       	rjmp	.-12     	; 0xfce <ssd1306_Fill_Rectangle+0x24>
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     fda:	df 37       	cpi	r29, 0x7F	; 127
     fdc:	a8 f3       	brcs	.-22     	; 0xfc8 <ssd1306_Fill_Rectangle+0x1e>
     fde:	06 c0       	rjmp	.+12     	; 0xfec <ssd1306_Fill_Rectangle+0x42>
		{
		  i2c_write(0x01);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_write>
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     fe6:	cf 5f       	subi	r28, 0xFF	; 255
     fe8:	cf 37       	cpi	r28, 0x7F	; 127
     fea:	d0 f3       	brcs	.-12     	; 0xfe0 <ssd1306_Fill_Rectangle+0x36>
		{
		  i2c_write(0x01);
		}
		i2c_stop();
     fec:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_stop>
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <SSDGetByte>:

uint8_t SSDGetByte(char SSDch,uint8_t SSDarrIndex)
{
	uint8_t c = SSDch - 32;
     ff6:	80 52       	subi	r24, 0x20	; 32
	return (pgm_read_byte(&ssd1306xled_font6x8[c * 6 + SSDarrIndex]));
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	8e 0f       	add	r24, r30
    1002:	9f 1f       	adc	r25, r31
    1004:	fc 01       	movw	r30, r24
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	e6 0f       	add	r30, r22
    100c:	f1 1d       	adc	r31, r1
    100e:	e8 59       	subi	r30, 0x98	; 152
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	84 91       	lpm	r24, Z
}
    1014:	08 95       	ret

00001016 <SwitchNvmOff>:
	NVMState=0;
}

static void SwitchNvmOff()
{
	EECR &= ~(1<<EERIE);
    1016:	fb 98       	cbi	0x1f, 3	; 31
	NVMState=2;
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	80 93 1e 02 	sts	0x021E, r24
    101e:	08 95       	ret

00001020 <__vector_22>:
uint8_t *message;
//EEPROM writing ISR
volatile uint8_t WriteSize;
static void SwitchNvmOff();
ISR(EE_READY_vect)
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
	/*check if not end of string and address
	didn't reach end of EEPROM*/
	static uint8_t deom;
	if(WriteorRead==0)
    1042:	80 91 3d 05 	lds	r24, 0x053D
    1046:	81 11       	cpse	r24, r1
    1048:	34 c0       	rjmp	.+104    	; 0x10b2 <__vector_22+0x92>
	{
		//uart_num(eepromaddress);
		//uart_string("\n");
	if (WriteSize!=0)
    104a:	80 91 40 05 	lds	r24, 0x0540
    104e:	88 23       	and	r24, r24
    1050:	69 f1       	breq	.+90     	; 0x10ac <__vector_22+0x8c>
	{
		//loads address and increments for next load
		NVMState=1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
    1058:	80 91 3b 05 	lds	r24, 0x053B
    105c:	90 91 3c 05 	lds	r25, 0x053C
    1060:	92 bd       	out	0x22, r25	; 34
    1062:	81 bd       	out	0x21, r24	; 33
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	90 93 3c 05 	sts	0x053C, r25
    106a:	80 93 3b 05 	sts	0x053B, r24
		//loads current byte and increments index for next load
		WriteSize--;
    106e:	80 91 40 05 	lds	r24, 0x0540
    1072:	81 50       	subi	r24, 0x01	; 1
    1074:	80 93 40 05 	sts	0x0540, r24
		uart_string("write\n");
    1078:	8e ef       	ldi	r24, 0xFE	; 254
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
		EEDR=message[WriteSize];
    1080:	20 91 40 05 	lds	r18, 0x0540
    1084:	80 91 39 05 	lds	r24, 0x0539
    1088:	90 91 3a 05 	lds	r25, 0x053A
    108c:	fc 01       	movw	r30, r24
    108e:	e2 0f       	add	r30, r18
    1090:	f1 1d       	adc	r31, r1
    1092:	20 81       	ld	r18, Z
    1094:	20 bd       	out	0x20, r18	; 32
		uart_num(message[WriteSize]);
    1096:	20 91 40 05 	lds	r18, 0x0540
    109a:	fc 01       	movw	r30, r24
    109c:	e2 0f       	add	r30, r18
    109e:	f1 1d       	adc	r31, r1
    10a0:	80 81       	ld	r24, Z
    10a2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
		//master write enable
		EECR|=(1<<EEMPE);
    10a6:	fa 9a       	sbi	0x1f, 2	; 31
		//strobe eeprom write
		EECR|=(1<<EEPE);
    10a8:	f9 9a       	sbi	0x1f, 1	; 31
    10aa:	48 c0       	rjmp	.+144    	; 0x113c <__vector_22+0x11c>
	}
	else
	{
		//disable eeprom ready interrupt
		//uart_string("switch off");
		SwitchNvmOff();
    10ac:	0e 94 0b 08 	call	0x1016	; 0x1016 <SwitchNvmOff>
    10b0:	45 c0       	rjmp	.+138    	; 0x113c <__vector_22+0x11c>
    }
	}
	else
	{
	
	if(eepromaddress<=(eepromaddressCopy))
    10b2:	20 91 3b 05 	lds	r18, 0x053B
    10b6:	30 91 3c 05 	lds	r19, 0x053C
    10ba:	80 91 3e 05 	lds	r24, 0x053E
    10be:	90 91 3f 05 	lds	r25, 0x053F
    10c2:	82 17       	cp	r24, r18
    10c4:	93 07       	cpc	r25, r19
    10c6:	70 f1       	brcs	.+92     	; 0x1124 <__vector_22+0x104>
	{
		NVMState=1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 1e 02 	sts	0x021E, r24
		uart_string("read\n");
    10ce:	85 e0       	ldi	r24, 0x05	; 5
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
		EEAR=eepromaddress++;
    10d6:	80 91 3b 05 	lds	r24, 0x053B
    10da:	90 91 3c 05 	lds	r25, 0x053C
    10de:	92 bd       	out	0x22, r25	; 34
    10e0:	81 bd       	out	0x21, r24	; 33
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	90 93 3c 05 	sts	0x053C, r25
    10e8:	80 93 3b 05 	sts	0x053B, r24
		EECR|=(1<<EERE);
    10ec:	f8 9a       	sbi	0x1f, 0	; 31
		message[IndexNvmCount]=EEDR;
    10ee:	90 91 38 05 	lds	r25, 0x0538
    10f2:	80 b5       	in	r24, 0x20	; 32
    10f4:	e0 91 39 05 	lds	r30, 0x0539
    10f8:	f0 91 3a 05 	lds	r31, 0x053A
    10fc:	e9 0f       	add	r30, r25
    10fe:	f1 1d       	adc	r31, r1
    1100:	80 83       	st	Z, r24
		uart_num(message[IndexNvmCount]);
    1102:	80 91 38 05 	lds	r24, 0x0538
    1106:	e0 91 39 05 	lds	r30, 0x0539
    110a:	f0 91 3a 05 	lds	r31, 0x053A
    110e:	e8 0f       	add	r30, r24
    1110:	f1 1d       	adc	r31, r1
    1112:	80 81       	ld	r24, Z
    1114:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
		IndexNvmCount--;
    1118:	80 91 38 05 	lds	r24, 0x0538
    111c:	81 50       	subi	r24, 0x01	; 1
    111e:	80 93 38 05 	sts	0x0538, r24
    1122:	0c c0       	rjmp	.+24     	; 0x113c <__vector_22+0x11c>
	}
		else
		{
			//disable eeprom ready interrupt
			uart_string("switch read");
    1124:	8b e0       	ldi	r24, 0x0B	; 11
    1126:	93 e0       	ldi	r25, 0x03	; 3
    1128:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
			SwitchNvmOff();
    112c:	0e 94 0b 08 	call	0x1016	; 0x1016 <SwitchNvmOff>
			IndexNvmCount=0;
    1130:	10 92 38 05 	sts	0x0538, r1
			eepromaddressCopy=0;
    1134:	10 92 3f 05 	sts	0x053F, r1
    1138:	10 92 3e 05 	sts	0x053E, r1
			
		}
	}
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <NvmPopulateWriteSize>:

void NvmPopulateWriteSize(uint8_t size,uint8_t startadd,uint8_t WriteorRead1,uint8_t *ptr)
{
	WriteSize=size;
    115e:	80 93 40 05 	sts	0x0540, r24
	eepromaddress=0;//startadd;
    1162:	10 92 3c 05 	sts	0x053C, r1
    1166:	10 92 3b 05 	sts	0x053B, r1
	WriteorRead=WriteorRead1;
    116a:	40 93 3d 05 	sts	0x053D, r20
	message=ptr;
    116e:	30 93 3a 05 	sts	0x053A, r19
    1172:	20 93 39 05 	sts	0x0539, r18
	eepromaddressCopy=(eepromaddress+WriteSize)-1;
    1176:	20 91 40 05 	lds	r18, 0x0540
    117a:	80 91 3b 05 	lds	r24, 0x053B
    117e:	90 91 3c 05 	lds	r25, 0x053C
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	82 0f       	add	r24, r18
    1186:	91 1d       	adc	r25, r1
    1188:	90 93 3f 05 	sts	0x053F, r25
    118c:	80 93 3e 05 	sts	0x053E, r24
	IndexNvmCount=WriteSize-1;
    1190:	80 91 40 05 	lds	r24, 0x0540
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	80 93 38 05 	sts	0x0538, r24
    119a:	08 95       	ret

0000119c <SwitchNvmOn>:
	//uart_num(WriteSize);
}

void SwitchNvmOn()
{
	EECR |= (1<<EERIE);
    119c:	fb 9a       	sbi	0x1f, 3	; 31
	NVMState=0;
    119e:	10 92 1e 02 	sts	0x021E, r1
    11a2:	08 95       	ret

000011a4 <GetNVMState>:
	//uart_num(NVMState);
}

uint8_t GetNVMState()
{	
	return NVMState;
    11a4:	80 91 1e 02 	lds	r24, 0x021E
    11a8:	08 95       	ret

000011aa <PinOutConfig>:
//static Port PORTB_OUT;

void PinOutConfig(uint8_t State,Pin Pin_s,Ports Port_s)
{
   volatile uint8_t *Reg;
   Reg=portModeRegister(Port_s);
    11aa:	e4 2f       	mov	r30, r20
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ea 56       	subi	r30, 0x6A	; 106
    11b4:	fd 4f       	sbci	r31, 0xFD	; 253
    11b6:	25 91       	lpm	r18, Z+
    11b8:	34 91       	lpm	r19, Z
    11ba:	e2 2f       	mov	r30, r18
    11bc:	f3 2f       	mov	r31, r19
  if(State==1)
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	69 f4       	brne	.+26     	; 0x11dc <PinOutConfig+0x32>
  {
	  
	  *Reg|=1<<Pin_s;
    11c2:	20 81       	ld	r18, Z
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	ac 01       	movw	r20, r24
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <PinOutConfig+0x26>
    11cc:	44 0f       	add	r20, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	6a 95       	dec	r22
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <PinOutConfig+0x22>
    11d4:	ba 01       	movw	r22, r20
    11d6:	62 2b       	or	r22, r18
    11d8:	60 83       	st	Z, r22
    11da:	08 95       	ret
  }
  else 
  {
	  *Reg&=~(1<<Pin_s);
    11dc:	20 81       	ld	r18, Z
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	ac 01       	movw	r20, r24
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <PinOutConfig+0x40>
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	6a 95       	dec	r22
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <PinOutConfig+0x3c>
    11ee:	ba 01       	movw	r22, r20
    11f0:	60 95       	com	r22
    11f2:	62 23       	and	r22, r18
    11f4:	60 83       	st	Z, r22
    11f6:	08 95       	ret

000011f8 <PinOutput>:
  } 
}
void PinOutput(uint8_t Out,Pin Pin_s,Ports Port_s )
{
    volatile uint8_t *out;
	out=portOutRegister(Port_s);
    11f8:	e4 2f       	mov	r30, r20
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	e4 56       	subi	r30, 0x64	; 100
    1202:	fd 4f       	sbci	r31, 0xFD	; 253
    1204:	25 91       	lpm	r18, Z+
    1206:	34 91       	lpm	r19, Z
    1208:	e2 2f       	mov	r30, r18
    120a:	f3 2f       	mov	r31, r19
	    if(Out==ON)
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	69 f4       	brne	.+26     	; 0x122a <PinOutput+0x32>
		{
			*out=*out|(1<<Pin_s);
    1210:	20 81       	ld	r18, Z
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	ac 01       	movw	r20, r24
    1218:	02 c0       	rjmp	.+4      	; 0x121e <PinOutput+0x26>
    121a:	44 0f       	add	r20, r20
    121c:	55 1f       	adc	r21, r21
    121e:	6a 95       	dec	r22
    1220:	e2 f7       	brpl	.-8      	; 0x121a <PinOutput+0x22>
    1222:	ba 01       	movw	r22, r20
    1224:	62 2b       	or	r22, r18
    1226:	60 83       	st	Z, r22
    1228:	08 95       	ret
		}
		else
		{
			*out&=~(1<<Pin_s);
    122a:	20 81       	ld	r18, Z
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	ac 01       	movw	r20, r24
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <PinOutput+0x40>
    1234:	44 0f       	add	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	6a 95       	dec	r22
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <PinOutput+0x3c>
    123c:	ba 01       	movw	r22, r20
    123e:	60 95       	com	r22
    1240:	62 23       	and	r22, r18
    1242:	60 83       	st	Z, r22
    1244:	08 95       	ret

00001246 <PinValue>:


void PinValue(uint8_t *Value,Pin Pin_s,Ports Port_s)
{
	    volatile uint8_t *out;
	    out=portInputRegister(Port_s);
    1246:	e4 2f       	mov	r30, r20
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	e0 57       	subi	r30, 0x70	; 112
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	25 91       	lpm	r18, Z+
    1254:	34 91       	lpm	r19, Z
    1256:	e2 2f       	mov	r30, r18
    1258:	f3 2f       	mov	r31, r19
		
		//*Value=bit_is_clear(*out,Pin_s);
		*Value=bit_is_set(*out,Pin_s);
    125a:	40 81       	ld	r20, Z
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <PinValue+0x22>
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	6a 95       	dec	r22
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <PinValue+0x1e>
    126c:	bf 01       	movw	r22, r30
    126e:	64 23       	and	r22, r20
    1270:	fc 01       	movw	r30, r24
    1272:	60 83       	st	Z, r22
    1274:	08 95       	ret

00001276 <ssd1306_AsyncStart>:
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
	switch (ssdStartState)
    1276:	90 91 0d 04 	lds	r25, 0x040D
    127a:	91 30       	cpi	r25, 0x01	; 1
    127c:	81 f0       	breq	.+32     	; 0x129e <ssd1306_AsyncStart+0x28>
    127e:	28 f0       	brcs	.+10     	; 0x128a <ssd1306_AsyncStart+0x14>
    1280:	92 30       	cpi	r25, 0x02	; 2
    1282:	d1 f0       	breq	.+52     	; 0x12b8 <ssd1306_AsyncStart+0x42>
    1284:	93 30       	cpi	r25, 0x03	; 3
    1286:	89 f5       	brne	.+98     	; 0x12ea <ssd1306_AsyncStart+0x74>
    1288:	21 c0       	rjmp	.+66     	; 0x12cc <ssd1306_AsyncStart+0x56>
	{
		case 0:
		// reset TWI control register
		TWCR = 0;
    128a:	ec eb       	ldi	r30, 0xBC	; 188
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	10 82       	st	Z, r1
		// transmit START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1290:	84 ea       	ldi	r24, 0xA4	; 164
    1292:	80 83       	st	Z, r24
		ssdStartState=1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 0d 04 	sts	0x040D, r24
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    129a:	82 e0       	ldi	r24, 0x02	; 2
		// reset TWI control register
		TWCR = 0;
		// transmit START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
		ssdStartState=1;
		break;
    129c:	08 95       	ret
		case 1:
		if(EOTi2c()==1)
    129e:	0e 94 33 07 	call	0xe66	; 0xe66 <EOTi2c>
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	21 f5       	brne	.+72     	; 0x12ee <ssd1306_AsyncStart+0x78>
		{
			
			if((TWSR & 0xF8) == TW_START)
    12a6:	80 91 b9 00 	lds	r24, 0x00B9
    12aa:	88 7f       	andi	r24, 0xF8	; 248
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	09 f5       	brne	.+66     	; 0x12f2 <ssd1306_AsyncStart+0x7c>
			{
				ssdStartState=2;
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	80 93 0d 04 	sts	0x040D, r24
    12b6:	08 95       	ret
			}
		}
		break;
		case 2:
		// load slave address into data register
		TWDR = address;
    12b8:	80 93 bb 00 	sts	0x00BB, r24
		// start transmission of address
		TWCR = (1<<TWINT) | (1<<TWEN);
    12bc:	84 e8       	ldi	r24, 0x84	; 132
    12be:	80 93 bc 00 	sts	0x00BC, r24
		ssdStartState=3;
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	80 93 0d 04 	sts	0x040D, r24
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    12c8:	82 e0       	ldi	r24, 0x02	; 2
		// load slave address into data register
		TWDR = address;
		// start transmission of address
		TWCR = (1<<TWINT) | (1<<TWEN);
		ssdStartState=3;
		break;
    12ca:	08 95       	ret
		case 3:
		if(EOTi2c())
    12cc:	0e 94 33 07 	call	0xe66	; 0xe66 <EOTi2c>
    12d0:	88 23       	and	r24, r24
    12d2:	89 f0       	breq	.+34     	; 0x12f6 <ssd1306_AsyncStart+0x80>
		{
			uint8_t twst = TW_STATUS & 0xF8;
    12d4:	80 91 b9 00 	lds	r24, 0x00B9
    12d8:	88 7f       	andi	r24, 0xF8	; 248
			if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
    12da:	88 31       	cpi	r24, 0x18	; 24
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <ssd1306_AsyncStart+0x6c>
    12de:	80 34       	cpi	r24, 0x40	; 64
    12e0:	61 f4       	brne	.+24     	; 0x12fa <ssd1306_AsyncStart+0x84>
			{
				RetVal=0;//failed
			}
			else
			{
				ssdStartState=0;
    12e2:	10 92 0d 04 	sts	0x040D, r1
				RetVal=1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	08 95       	ret
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	08 95       	ret
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	08 95       	ret
				ssdStartState=2;
				
			}
			else
			{
				RetVal=0; //failed
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	08 95       	ret
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	08 95       	ret
		if(EOTi2c())
		{
			uint8_t twst = TW_STATUS & 0xF8;
			if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
			{
				RetVal=0;//failed
    12fa:	80 e0       	ldi	r24, 0x00	; 0
		/* Your code here */
		break;
	}
	
	return RetVal;
}
    12fc:	08 95       	ret

000012fe <ssd1306_AsyncWrite>:
static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
	
	switch (SSDwriteState)
    12fe:	90 91 0e 04 	lds	r25, 0x040E
    1302:	99 23       	and	r25, r25
    1304:	19 f0       	breq	.+6      	; 0x130c <ssd1306_AsyncWrite+0xe>
    1306:	91 30       	cpi	r25, 0x01	; 1
    1308:	e1 f4       	brne	.+56     	; 0x1342 <ssd1306_AsyncWrite+0x44>
    130a:	0a c0       	rjmp	.+20     	; 0x1320 <ssd1306_AsyncWrite+0x22>
	{
			case 0:
			// load slave address into data register
			TWDR = SSDbyte;
    130c:	80 93 bb 00 	sts	0x00BB, r24
			// start transmission of address
			TWCR = (1<<TWINT) | (1<<TWEN);
    1310:	84 e8       	ldi	r24, 0x84	; 132
    1312:	80 93 bc 00 	sts	0x00BC, r24
			SSDwriteState=1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 0e 04 	sts	0x040E, r24
}

static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
    131c:	82 e0       	ldi	r24, 0x02	; 2
			// load slave address into data register
			TWDR = SSDbyte;
			// start transmission of address
			TWCR = (1<<TWINT) | (1<<TWEN);
			SSDwriteState=1;
			break;
    131e:	08 95       	ret
			case 1:
			//uart_num(SSDbyte);
			if(EOTi2c())
    1320:	0e 94 33 07 	call	0xe66	; 0xe66 <EOTi2c>
    1324:	88 23       	and	r24, r24
    1326:	79 f0       	breq	.+30     	; 0x1346 <ssd1306_AsyncWrite+0x48>
			{
				
				//uart_string("value:");
				//uart_num((TWSR & 0xF8));
				//uart_string("\n");
				if((TWSR & 0xF8) == TW_MT_DATA_ACK )
    1328:	80 91 b9 00 	lds	r24, 0x00B9
    132c:	88 7f       	andi	r24, 0xF8	; 248
    132e:	88 32       	cpi	r24, 0x28	; 40
    1330:	21 f4       	brne	.+8      	; 0x133a <ssd1306_AsyncWrite+0x3c>
				{
					SSDwriteState=0;
    1332:	10 92 0e 04 	sts	0x040E, r1
					RetVal=1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	08 95       	ret
				}
				else
				{
					SSDwriteState=0;
    133a:	10 92 0e 04 	sts	0x040E, r1
					RetVal=0; //failed
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret
}

static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	08 95       	ret
    1346:	82 e0       	ldi	r24, 0x02	; 2
		default:
		/* Your code here */
		break;
	}
	return RetVal;
}
    1348:	08 95       	ret

0000134a <SSDsetXY>:

uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
	switch (SSDsetXYstates)
    134a:	90 91 0b 04 	lds	r25, 0x040B
    134e:	91 30       	cpi	r25, 0x01	; 1
    1350:	79 f0       	breq	.+30     	; 0x1370 <SSDsetXY+0x26>
    1352:	20 f0       	brcs	.+8      	; 0x135c <SSDsetXY+0x12>
    1354:	92 30       	cpi	r25, 0x02	; 2
    1356:	09 f0       	breq	.+2      	; 0x135a <SSDsetXY+0x10>
    1358:	45 c0       	rjmp	.+138    	; 0x13e4 <SSDsetXY+0x9a>
    135a:	3e c0       	rjmp	.+124    	; 0x13d8 <SSDsetXY+0x8e>
	{
		case 0:
		//uart_string("4\n");
		if(ssd1306_AsyncStart(0x78)==1)
    135c:	88 e7       	ldi	r24, 0x78	; 120
    135e:	0e 94 3b 09 	call	0x1276	; 0x1276 <ssd1306_AsyncStart>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	09 f0       	breq	.+2      	; 0x1368 <SSDsetXY+0x1e>
    1366:	40 c0       	rjmp	.+128    	; 0x13e8 <SSDsetXY+0x9e>
		{
			SSDsetXYstates=1;
    1368:	80 93 0b 04 	sts	0x040B, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	08 95       	ret
			SSDsetXYstates=1;
		}
		/* Your code here */
		break;
		case 1:
           switch (SSDsetXYWritestates)
    1370:	90 91 0c 04 	lds	r25, 0x040C
    1374:	91 30       	cpi	r25, 0x01	; 1
    1376:	79 f0       	breq	.+30     	; 0x1396 <SSDsetXY+0x4c>
    1378:	28 f0       	brcs	.+10     	; 0x1384 <SSDsetXY+0x3a>
    137a:	92 30       	cpi	r25, 0x02	; 2
    137c:	b1 f0       	breq	.+44     	; 0x13aa <SSDsetXY+0x60>
    137e:	93 30       	cpi	r25, 0x03	; 3
    1380:	a9 f5       	brne	.+106    	; 0x13ec <SSDsetXY+0xa2>
    1382:	1d c0       	rjmp	.+58     	; 0x13be <SSDsetXY+0x74>
           {
	           case 0:
			   if(ssd1306_AsyncWrite(0x00)==1)
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ssd1306_AsyncWrite>
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	89 f5       	brne	.+98     	; 0x13f0 <SSDsetXY+0xa6>
			   {
				   SSDsetXYWritestates=1;
    138e:	80 93 0c 04 	sts	0x040C, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	08 95       	ret
				   SSDsetXYWritestates=1;
			   }
	           /* Your code here */
	           break;
	           case 1:
	           if(ssd1306_AsyncWrite(0xb0 + y)==1)
    1396:	86 2f       	mov	r24, r22
    1398:	80 55       	subi	r24, 0x50	; 80
    139a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ssd1306_AsyncWrite>
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	49 f5       	brne	.+82     	; 0x13f4 <SSDsetXY+0xaa>
	           {
				   
		           SSDsetXYWritestates=2;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	80 93 0c 04 	sts	0x040C, r24
    13a8:	08 95       	ret
	           }
	           /* Your code here */
	           break;
	           case 2:
	           if(ssd1306_AsyncWrite((x & 0x0f))==1)
    13aa:	8f 70       	andi	r24, 0x0F	; 15
    13ac:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ssd1306_AsyncWrite>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	11 f5       	brne	.+68     	; 0x13f8 <SSDsetXY+0xae>
	           {
		           SSDsetXYWritestates=3;
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	80 93 0c 04 	sts	0x040C, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	08 95       	ret
		           SSDsetXYWritestates=3;
	           }
	           /* Your code here */
	           break;
	           case 3:
	           if(ssd1306_AsyncWrite(((x & 0xf0) >> 4) | 0x10)==1)
    13be:	82 95       	swap	r24
    13c0:	8f 70       	andi	r24, 0x0F	; 15
    13c2:	80 61       	ori	r24, 0x10	; 16
    13c4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ssd1306_AsyncWrite>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	c1 f4       	brne	.+48     	; 0x13fc <SSDsetXY+0xb2>
	           {
		           SSDsetXYWritestates=0;
    13cc:	10 92 0c 04 	sts	0x040C, r1
				   SSDsetXYstates=2;
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	80 93 0b 04 	sts	0x040B, r24
    13d6:	08 95       	ret
	           break;
           }
		/* Your code here */
		break;
		case 2:
		i2c_stop();
    13d8:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_stop>
		SSDsetXYstates=0;
    13dc:	10 92 0b 04 	sts	0x040B, r1
		Reval=1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
		/* Your code here */
		break;
    13e2:	08 95       	ret


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	08 95       	ret
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	08 95       	ret
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	08 95       	ret
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	08 95       	ret
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	08 95       	ret
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	08 95       	ret
    13fc:	82 e0       	ldi	r24, 0x02	; 2
		/* Your code here */
		break;
	}
	
	return Reval;
}
    13fe:	08 95       	ret

00001400 <SSDWritechar_font6x8>:
uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
	   uint8_t fc;
   	switch (SSDWritecharstates)
    1400:	90 91 0f 04 	lds	r25, 0x040F
    1404:	91 30       	cpi	r25, 0x01	; 1
    1406:	79 f0       	breq	.+30     	; 0x1426 <SSDWritechar_font6x8+0x26>
    1408:	28 f0       	brcs	.+10     	; 0x1414 <SSDWritechar_font6x8+0x14>
    140a:	92 30       	cpi	r25, 0x02	; 2
    140c:	d9 f0       	breq	.+54     	; 0x1444 <SSDWritechar_font6x8+0x44>
    140e:	93 30       	cpi	r25, 0x03	; 3
    1410:	a9 f5       	brne	.+106    	; 0x147c <SSDWritechar_font6x8+0x7c>
    1412:	2e c0       	rjmp	.+92     	; 0x1470 <SSDWritechar_font6x8+0x70>
   	{
	   	case 0:
	   	if(ssd1306_AsyncStart(0x78|0x00)==1)
    1414:	88 e7       	ldi	r24, 0x78	; 120
    1416:	0e 94 3b 09 	call	0x1276	; 0x1276 <ssd1306_AsyncStart>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	89 f5       	brne	.+98     	; 0x1480 <SSDWritechar_font6x8+0x80>
	   	{
		   	SSDWritecharstates=1;
    141e:	80 93 0f 04 	sts	0x040F, r24
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	08 95       	ret
		   	SSDWritecharstates=1;
	   	}
	   	/* Your code here */
	   	break;
	   	case 1:
		fc=ssd1306_AsyncWrite(0x40);
    1426:	80 e4       	ldi	r24, 0x40	; 64
    1428:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ssd1306_AsyncWrite>
		if(fc==1)
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	21 f4       	brne	.+8      	; 0x1438 <SSDWritechar_font6x8+0x38>
		{
			SSDWritecharstates=2;
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	80 93 0f 04 	sts	0x040F, r24
    1436:	08 95       	ret
		}
		else if(fc==0)
    1438:	81 11       	cpse	r24, r1
    143a:	24 c0       	rjmp	.+72     	; 0x1484 <SSDWritechar_font6x8+0x84>
		{
			SSDWritecharstates=0;
    143c:	10 92 0f 04 	sts	0x040F, r1
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	08 95       	ret
		{
			SSDWritecharstates=0;
		}
		break;
		case 2:
		if(ssd1306_AsyncWrite(SSDGetByte(ch,Tablepointer))==1)
    1444:	60 91 10 04 	lds	r22, 0x0410
    1448:	0e 94 fb 07 	call	0xff6	; 0xff6 <SSDGetByte>
    144c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ssd1306_AsyncWrite>
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	d1 f4       	brne	.+52     	; 0x1488 <SSDWritechar_font6x8+0x88>
		{
			Tablepointer++;
    1454:	80 91 10 04 	lds	r24, 0x0410
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	80 93 10 04 	sts	0x0410, r24
			if(Tablepointer==6)
    145e:	86 30       	cpi	r24, 0x06	; 6
    1460:	a9 f4       	brne	.+42     	; 0x148c <SSDWritechar_font6x8+0x8c>
			{
				SSDWritecharstates=3;
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	80 93 0f 04 	sts	0x040F, r24
				Tablepointer=0;
    1468:	10 92 10 04 	sts	0x0410, r1
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	08 95       	ret
				Tablepointer=0;
			}
		}
		break;
		case 3:
	   	i2c_stop();
    1470:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_stop>
	   	SSDWritecharstates=0;
    1474:	10 92 0f 04 	sts	0x040F, r1
	   	Reval=1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
	   	/* Your code here */
	   	break;
    147a:	08 95       	ret
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	08 95       	ret
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	08 95       	ret
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	08 95       	ret
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	08 95       	ret
    148c:	82 e0       	ldi	r24, 0x02	; 2
	   	break;
   	}
   	
   	return Reval;

}
    148e:	08 95       	ret

00001490 <SSDi2cHandlerFunc>:
	static SSDdata SSDdataObj;
	static uint8_t SSDhandlerstates;
	char buffer[12];
	static uint8_t SSDR=0,SSDC=0;

	switch (SSDhandlerstates)
    1490:	80 91 07 04 	lds	r24, 0x0407
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	71 f0       	breq	.+28     	; 0x14b4 <SSDi2cHandlerFunc+0x24>
    1498:	18 f0       	brcs	.+6      	; 0x14a0 <SSDi2cHandlerFunc+0x10>
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	49 f5       	brne	.+82     	; 0x14f0 <SSDi2cHandlerFunc+0x60>
    149e:	20 c0       	rjmp	.+64     	; 0x14e0 <SSDi2cHandlerFunc+0x50>
	{
		case 0:
		if(ErasePoints[0]==0)
		{
			if(PopSSDinterface(&SSDdataObj)==BuffOk)
    14a0:	88 e0       	ldi	r24, 0x08	; 8
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <PopSSDinterface>
    14a8:	81 11       	cpse	r24, r1
    14aa:	22 c0       	rjmp	.+68     	; 0x14f0 <SSDi2cHandlerFunc+0x60>
			{
			   SSDhandlerstates=1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	80 93 07 04 	sts	0x0407, r24
    14b2:	08 95       	ret

		}
		/* Your code here */
		break;
        case 1:
		if((SSDdataObj.SSDx>0 )||(SSDdataObj.SSDy>0) )
    14b4:	80 91 09 04 	lds	r24, 0x0409
    14b8:	81 11       	cpse	r24, r1
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <SSDi2cHandlerFunc+0x34>
    14bc:	90 91 0a 04 	lds	r25, 0x040A
    14c0:	99 23       	and	r25, r25
    14c2:	51 f0       	breq	.+20     	; 0x14d8 <SSDi2cHandlerFunc+0x48>
		{
		 if(SSDsetXY(SSDdataObj.SSDx,SSDdataObj.SSDy)==1)
    14c4:	60 91 0a 04 	lds	r22, 0x040A
    14c8:	0e 94 a5 09 	call	0x134a	; 0x134a <SSDsetXY>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	81 f4       	brne	.+32     	; 0x14f0 <SSDi2cHandlerFunc+0x60>
		   {
			  SSDhandlerstates=2; 
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	80 93 07 04 	sts	0x0407, r24
    14d6:	08 95       	ret
		   }
		}
		else
		{
		   SSDhandlerstates=2; 	
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	80 93 07 04 	sts	0x0407, r24
    14de:	08 95       	ret
		}
		
		break;
		case 2:
		//ssd1306_String_font6x8_test("nikhil",0,0);
		if(SSDWritechar_font6x8(SSDdataObj.SSDchar)==1)
    14e0:	80 91 08 04 	lds	r24, 0x0408
    14e4:	0e 94 00 0a 	call	0x1400	; 0x1400 <SSDWritechar_font6x8>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	11 f4       	brne	.+4      	; 0x14f0 <SSDi2cHandlerFunc+0x60>
		{
			SSDhandlerstates=0;
    14ec:	10 92 07 04 	sts	0x0407, r1
		default:
		/* Your code here */
		break;
	}
	
}
    14f0:	08 95       	ret

000014f2 <testfuc>:

}


uint8_t testfuc(void * data)
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	69 97       	sbiw	r28, 0x19	; 25
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
   char buffer[25];
   uint16_t address=0;
   
   if(ssdpos<8)
    1506:	20 91 11 04 	lds	r18, 0x0411
    150a:	28 30       	cpi	r18, 0x08	; 8
    150c:	48 f5       	brcc	.+82     	; 0x1560 <testfuc+0x6e>
   {

	//strcpy_P(buffer,(PGM_P)pgm_read_word(Frame1+ssdpos));  
	 //&Frame1[ssdpos];//pgm_read_word(&Frames[1]);
	 address=(pgm_read_word(&Frames[FramePos])+(ssdpos*2));
    150e:	e0 91 12 04 	lds	r30, 0x0412
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	ee 0f       	add	r30, r30
    1516:	ff 1f       	adc	r31, r31
    1518:	ee 55       	subi	r30, 0x5E	; 94
    151a:	fd 4f       	sbci	r31, 0xFD	; 253
    151c:	85 91       	lpm	r24, Z+
    151e:	94 91       	lpm	r25, Z
    1520:	e2 2f       	mov	r30, r18
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	e8 0f       	add	r30, r24
    152a:	f9 1f       	adc	r31, r25
	 strcpy_P(buffer,(PGM_P)pgm_read_word(address));
    152c:	85 91       	lpm	r24, Z+
    152e:	94 91       	lpm	r25, Z
    1530:	68 2f       	mov	r22, r24
    1532:	79 2f       	mov	r23, r25
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <strcpy_P>
	 PopulateSSDbuffer(buffer,ssdposy,ssdposx);
    153c:	40 91 13 04 	lds	r20, 0x0413
    1540:	60 91 1f 02 	lds	r22, 0x021F
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
	 ssdposx++;
    154c:	80 91 13 04 	lds	r24, 0x0413
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	80 93 13 04 	sts	0x0413, r24
	 ssdpos++;
    1556:	80 91 11 04 	lds	r24, 0x0411
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	80 93 11 04 	sts	0x0411, r24
   }

  if(ssdpos==8||ssdpos==16)
    1560:	80 91 11 04 	lds	r24, 0x0411
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	11 f0       	breq	.+4      	; 0x156c <testfuc+0x7a>
    1568:	80 31       	cpi	r24, 0x10	; 16
    156a:	39 f4       	brne	.+14     	; 0x157a <testfuc+0x88>
  {
	  ssdposy=ssdposy+60;
    156c:	80 91 1f 02 	lds	r24, 0x021F
    1570:	84 5c       	subi	r24, 0xC4	; 196
    1572:	80 93 1f 02 	sts	0x021F, r24
	  ssdposx=0;
    1576:	10 92 13 04 	sts	0x0413, r1
	 // ssdpos=0;
  }
  Unknown++;
    157a:	80 91 14 04 	lds	r24, 0x0414
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	80 93 14 04 	sts	0x0414, r24
	return 0;
}
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <SSDSetFramePos>:

uint8_t SSDSetFramePos(uint8_t Pos)
{
	FramePos=Pos;
    1598:	80 93 12 04 	sts	0x0412, r24
	ssdpos=0;
    159c:	10 92 11 04 	sts	0x0411, r1
    ssdposy=1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 1f 02 	sts	0x021F, r24
    ssdposx=0;
    15a6:	10 92 13 04 	sts	0x0413, r1
	return 0;
}
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	08 95       	ret

000015ae <Timer2Enable>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "UART.h"
void Timer2Enable()
{
	overflowfag=0;
    15ae:	10 92 37 05 	sts	0x0537, r1
	TimeReady=0;
    15b2:	10 92 34 05 	sts	0x0534, r1
	TCCR2B|=1<<CS21|1<<CS22;
    15b6:	e1 eb       	ldi	r30, 0xB1	; 177
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	86 60       	ori	r24, 0x06	; 6
    15be:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);
    15c0:	e0 e7       	ldi	r30, 0x70	; 112
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	81 60       	ori	r24, 0x01	; 1
    15c8:	80 83       	st	Z, r24
	TCNT2 = 0;
    15ca:	10 92 b2 00 	sts	0x00B2, r1
	TimerValue=0;
    15ce:	10 92 36 05 	sts	0x0536, r1
    15d2:	10 92 35 05 	sts	0x0535, r1
    15d6:	08 95       	ret

000015d8 <Timer2Disable>:
	TCNT2=0;
	return TCNT2;
}
void Timer2Disable()
{
	TCCR2B=0;
    15d8:	10 92 b1 00 	sts	0x00B1, r1
	TimeReady=1;	
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	80 93 34 05 	sts	0x0534, r24
    15e2:	08 95       	ret

000015e4 <Timer2Count>:
	//TCNT1L = 0;
	//TCNT1H=0;
}

uint8_t Timer2Count()
{
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    TimerValue=TCNT2;//((TCNT1L)*16)/58;//;	
    15e8:	c2 eb       	ldi	r28, 0xB2	; 178
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
    15ec:	88 81       	ld	r24, Y
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	90 93 36 05 	sts	0x0536, r25
    15f4:	80 93 35 05 	sts	0x0535, r24
	Timer2Disable();
    15f8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Timer2Disable>
	TCNT2=0;
    15fc:	18 82       	st	Y, r1
	return TCNT2;
    15fe:	88 81       	ld	r24, Y
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <__vector_9>:
{
	TCCR2B=0;
	TimeReady=1;	
}
ISR(TIMER2_OVF_vect)
{
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	8f 93       	push	r24
	overflowfag=overflowfag+1;
    1612:	80 91 37 05 	lds	r24, 0x0537
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	80 93 37 05 	sts	0x0537, r24
	//uart_num(overflowfag);
	//TIMSK2|=(1<<TOIE2);
	//TimerValue+=255;
    161c:	8f 91       	pop	r24
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <ConfigureCallBack>:
	UDR0=dat;
}

void ConfigureCallBack(uint16_t  (*callbackarg)(void))
{
	callbackFunction= callbackarg;
    1628:	90 93 27 05 	sts	0x0527, r25
    162c:	80 93 26 05 	sts	0x0526, r24
    1630:	08 95       	ret

00001632 <Callhandler>:
}

//updated code
 uint16_t Callhandler(void *fptr)
{
	PushEventInterface(200,DebugHandlerFunc,PopInterface,0);
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	42 e2       	ldi	r20, 0x22	; 34
    1636:	5b e0       	ldi	r21, 0x0B	; 11
    1638:	61 e2       	ldi	r22, 0x21	; 33
    163a:	7f e0       	ldi	r23, 0x0F	; 15
    163c:	88 ec       	ldi	r24, 0xC8	; 200
    163e:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    1642:	08 95       	ret

00001644 <PopInterface>:
	}
	
}

uint8_t PopInterface(unsigned char *dataval)
{
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	1f 92       	push	r1
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8c 01       	movw	r16, r24
	unsigned char data;
	
	if(PopFromCircularBuffer(&CircularBuffer,&data)==BuffOk)
    1654:	be 01       	movw	r22, r28
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	80 e2       	ldi	r24, 0x20	; 32
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <PopFromCircularBuffer>
    1662:	81 11       	cpse	r24, r1
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <PopInterface+0x2c>
	{
		*dataval=data;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	f8 01       	movw	r30, r16
    166a:	80 83       	st	Z, r24
		return 0;
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <PopInterface+0x2e>
	}
	return 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
}
    1672:	0f 90       	pop	r0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <uart_init>:
	y                      \
};                          \


void uart_init()
{   Data_Count=0;
    167e:	10 92 28 05 	sts	0x0528, r1
	UBRR0L=0x0C;//0x0C;//--> FOR BAUD esp;0x9b-->for 9800
	Data_Count=0;	
	//UCSRB|=(1<7);
	//uart_delay(100);*/
		//UCSR0A=0x02;//for esp baud 0x02
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);//UCSR0B=0x98;
    1682:	88 e9       	ldi	r24, 0x98	; 152
    1684:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);//UCSR0C=0x86;
    1688:	8e e0       	ldi	r24, 0x0E	; 14
    168a:	80 93 c2 00 	sts	0x00C2, r24
		UBRR0H=0x00;
    168e:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L=0x08;//--> FOR BAUD esp;0x9b-->for 9800//0x69
    1692:	88 e0       	ldi	r24, 0x08	; 8
    1694:	80 93 c4 00 	sts	0x00C4, r24
		//UDR0='B';
		//Data_Count=0;
		callbackFunction=0;
    1698:	10 92 27 05 	sts	0x0527, r1
    169c:	10 92 26 05 	sts	0x0526, r1
		callbackSetFunction(0,ConfigureCallBack);
    16a0:	64 e1       	ldi	r22, 0x14	; 20
    16a2:	7b e0       	ldi	r23, 0x0B	; 11
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0e 94 df 13 	call	0x27be	; 0x27be <callbackSetFunction>
    16aa:	08 95       	ret

000016ac <uart_delay>:
}

void uart_delay(unsigned int delaytime)
{
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
	...
    16cc:	2f 5f       	subi	r18, 0xFF	; 255
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	82 17       	cp	r24, r18
    16d2:	93 07       	cpc	r25, r19
    16d4:	68 f7       	brcc	.-38     	; 0x16b0 <uart_delay+0x4>
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
	}
	
}
    16d6:	08 95       	ret

000016d8 <uart_string>:
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
{
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29

	while ( *ustring)
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 81       	ld	r18, Z
    16e8:	22 23       	and	r18, r18
    16ea:	c1 f0       	breq	.+48     	; 0x171c <uart_string+0x44>
		//UDR=*ustring++;
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
    16ec:	8c 01       	movw	r16, r24
    16ee:	0f 5f       	subi	r16, 0xFF	; 255
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
{

	while ( *ustring)
	{
		UDR0=*ustring++;
    16f2:	0f 2e       	mov	r0, r31
    16f4:	f6 ec       	ldi	r31, 0xC6	; 198
    16f6:	ef 2e       	mov	r14, r31
    16f8:	f1 2c       	mov	r15, r1
    16fa:	f0 2d       	mov	r31, r0
		while((UCSR0A&0x40)==0x00);
    16fc:	c0 ec       	ldi	r28, 0xC0	; 192
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
	{
		UDR0=*ustring++;
    1700:	f7 01       	movw	r30, r14
    1702:	20 83       	st	Z, r18
		while((UCSR0A&0x40)==0x00);
    1704:	88 81       	ld	r24, Y
    1706:	86 ff       	sbrs	r24, 6
    1708:	fd cf       	rjmp	.-6      	; 0x1704 <uart_string+0x2c>
		uart_delay(1000);
    170a:	88 ee       	ldi	r24, 0xE8	; 232
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uart_delay>
	}	
}
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
    1712:	f8 01       	movw	r30, r16
    1714:	21 91       	ld	r18, Z+
    1716:	8f 01       	movw	r16, r30
    1718:	21 11       	cpse	r18, r1
    171a:	f2 cf       	rjmp	.-28     	; 0x1700 <uart_string+0x28>
	{
		UDR0=*ustring++;
		while((UCSR0A&0x40)==0x00);
		uart_delay(1000);
	}
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	08 95       	ret

0000172a <uart_char>:
		callbackSetFunction(0,ConfigureCallBack);
}

void uart_char(unsigned char uchar)
{
	UDR0=uchar;
    172a:	80 93 c6 00 	sts	0x00C6, r24
	while((UCSR0A&0x40)==0x00);
    172e:	e0 ec       	ldi	r30, 0xC0	; 192
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	86 ff       	sbrs	r24, 6
    1736:	fd cf       	rjmp	.-6      	; 0x1732 <uart_char+0x8>
	uart_delay(1000);
    1738:	88 ee       	ldi	r24, 0xE8	; 232
    173a:	93 e0       	ldi	r25, 0x03	; 3
    173c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <uart_delay>
    1740:	08 95       	ret

00001742 <uart_num>:
		uart_delay(1000);
	}
}

void uart_num(unsigned char num)
{
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	c8 2f       	mov	r28, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
    174c:	19 e2       	ldi	r17, 0x29	; 41
    174e:	81 9f       	mul	r24, r17
    1750:	11 2d       	mov	r17, r1
    1752:	11 24       	eor	r1, r1
    1754:	12 95       	swap	r17
    1756:	1f 70       	andi	r17, 0x0F	; 15
	T=(num - (H*100))/10;
    1758:	0c e9       	ldi	r16, 0x9C	; 156
    175a:	01 03       	mulsu	r16, r17
    175c:	90 01       	movw	r18, r0
    175e:	11 24       	eor	r1, r1
    1760:	c9 01       	movw	r24, r18
    1762:	8c 0f       	add	r24, r28
    1764:	91 1d       	adc	r25, r1
    1766:	6a e0       	ldi	r22, 0x0A	; 10
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__divmodhi4>
    176e:	d6 2f       	mov	r29, r22
	O=(num - (H*100) - (T*10));

	uart_char(H+48);
    1770:	81 2f       	mov	r24, r17
    1772:	80 5d       	subi	r24, 0xD0	; 208
    1774:	0e 94 95 0b 	call	0x172a	; 0x172a <uart_char>
	uart_char(T+48);
    1778:	8d 2f       	mov	r24, r29
    177a:	80 5d       	subi	r24, 0xD0	; 208
    177c:	0e 94 95 0b 	call	0x172a	; 0x172a <uart_char>
void uart_num(unsigned char num)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
    1780:	c0 5d       	subi	r28, 0xD0	; 208
    1782:	8c 2f       	mov	r24, r28
    1784:	10 9f       	mul	r17, r16
    1786:	80 0d       	add	r24, r0
    1788:	11 24       	eor	r1, r1
    178a:	dd 0f       	add	r29, r29
    178c:	9d 2f       	mov	r25, r29
    178e:	99 0f       	add	r25, r25
    1790:	99 0f       	add	r25, r25
    1792:	d9 0f       	add	r29, r25

	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);
    1794:	8d 1b       	sub	r24, r29
    1796:	0e 94 95 0b 	call	0x172a	; 0x172a <uart_char>
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <__vector_18>:
	}
	
}
circularbuff(CircularBuffer,100);
ISR(USART_RX_vect)
{
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	2f 93       	push	r18
    17b0:	3f 93       	push	r19
    17b2:	4f 93       	push	r20
    17b4:	5f 93       	push	r21
    17b6:	6f 93       	push	r22
    17b8:	7f 93       	push	r23
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    
    static uint8_t flag=0;
	static UartBuffer BufferData;
	r=UDR0;
    17d0:	80 91 c6 00 	lds	r24, 0x00C6
    17d4:	80 93 24 05 	sts	0x0524, r24
	uint8_t i;
	char data;
	//cli();
	PushIntoCircularBuffer(&CircularBuffer,r);
    17d8:	60 91 24 05 	lds	r22, 0x0524
    17dc:	80 e2       	ldi	r24, 0x20	; 32
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	0e 94 3a 06 	call	0xc74	; 0xc74 <PushIntoCircularBuffer>
	//sei();
	if(r=='d')
    17e4:	80 91 24 05 	lds	r24, 0x0524
    17e8:	84 36       	cpi	r24, 0x64	; 100
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <__vector_18+0x4c>
	{
		Data_Count=0;
    17ec:	10 92 28 05 	sts	0x0528, r1
		
	}
	data_in[Data_Count]=r;
    17f0:	e0 91 28 05 	lds	r30, 0x0528
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 91 24 05 	lds	r24, 0x0524
    17fa:	e1 5e       	subi	r30, 0xE1	; 225
    17fc:	fa 4f       	sbci	r31, 0xFA	; 250
    17fe:	80 83       	st	Z, r24
	Data_Count++;
    1800:	80 91 28 05 	lds	r24, 0x0528
    1804:	8f 5f       	subi	r24, 0xFF	; 255
    1806:	80 93 28 05 	sts	0x0528, r24
	if(Data_Count==5)
    180a:	80 91 28 05 	lds	r24, 0x0528
    180e:	85 30       	cpi	r24, 0x05	; 5
    1810:	31 f5       	brne	.+76     	; 0x185e <__vector_18+0xba>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
    1812:	80 91 1f 05 	lds	r24, 0x051F
    1816:	84 36       	cpi	r24, 0x64	; 100
    1818:	01 f5       	brne	.+64     	; 0x185a <__vector_18+0xb6>
    181a:	80 91 20 05 	lds	r24, 0x0520
    181e:	85 36       	cpi	r24, 0x65	; 101
    1820:	e1 f4       	brne	.+56     	; 0x185a <__vector_18+0xb6>
    1822:	80 91 21 05 	lds	r24, 0x0521
    1826:	82 36       	cpi	r24, 0x62	; 98
    1828:	c1 f4       	brne	.+48     	; 0x185a <__vector_18+0xb6>
    182a:	80 91 22 05 	lds	r24, 0x0522
    182e:	85 37       	cpi	r24, 0x75	; 117
    1830:	a1 f4       	brne	.+40     	; 0x185a <__vector_18+0xb6>
    1832:	80 91 23 05 	lds	r24, 0x0523
    1836:	87 36       	cpi	r24, 0x67	; 103
    1838:	81 f4       	brne	.+32     	; 0x185a <__vector_18+0xb6>
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <__vector_18+0x9e>
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
			{
				uart_char(data);
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	0e 94 95 0b 	call	0x172a	; 0x172a <uart_char>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
    1842:	be 01       	movw	r22, r28
    1844:	6f 5f       	subi	r22, 0xFF	; 255
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	80 e2       	ldi	r24, 0x20	; 32
    184a:	92 e0       	ldi	r25, 0x02	; 2
    184c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <PopFromCircularBuffer>
    1850:	88 23       	and	r24, r24
    1852:	a1 f3       	breq	.-24     	; 0x183c <__vector_18+0x98>
			{
				uart_char(data);
			}
			flag=1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 15 04 	sts	0x0415, r24
		}
		Data_Count=0;
    185a:	10 92 28 05 	sts	0x0528, r1
	}
	if(callbackFunction!=0&&flag==0)
    185e:	60 91 26 05 	lds	r22, 0x0526
    1862:	70 91 27 05 	lds	r23, 0x0527
    1866:	61 15       	cp	r22, r1
    1868:	71 05       	cpc	r23, r1
    186a:	59 f0       	breq	.+22     	; 0x1882 <__vector_18+0xde>
    186c:	80 91 15 04 	lds	r24, 0x0415
    1870:	81 11       	cpse	r24, r1
    1872:	07 c0       	rjmp	.+14     	; 0x1882 <__vector_18+0xde>
	{
		PushEventInterface(200,callbackFunction,PopInterface,0);
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	42 e2       	ldi	r20, 0x22	; 34
    1878:	5b e0       	ldi	r21, 0x0B	; 11
    187a:	88 ec       	ldi	r24, 0xC8	; 200
    187c:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    1880:	20 c0       	rjmp	.+64     	; 0x18c2 <__vector_18+0x11e>
	}
	else if(flag==2)
    1882:	80 91 15 04 	lds	r24, 0x0415
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	81 f4       	brne	.+32     	; 0x18aa <__vector_18+0x106>
	{
		if(HeadTailDiff(&CircularBuffer,20)>=20)
    188a:	64 e1       	ldi	r22, 0x14	; 20
    188c:	80 e2       	ldi	r24, 0x20	; 32
    188e:	92 e0       	ldi	r25, 0x02	; 2
    1890:	0e 94 6d 06 	call	0xcda	; 0xcda <HeadTailDiff>
    1894:	84 31       	cpi	r24, 0x14	; 20
    1896:	a8 f0       	brcs	.+42     	; 0x18c2 <__vector_18+0x11e>
		{
			PushEventInterface(200,Callhandler,PopInterface,0);
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	42 e2       	ldi	r20, 0x22	; 34
    189c:	5b e0       	ldi	r21, 0x0B	; 11
    189e:	69 e1       	ldi	r22, 0x19	; 25
    18a0:	7b e0       	ldi	r23, 0x0B	; 11
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <__vector_18+0x11e>
		}
	}
	else if(flag==1)
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	51 f4       	brne	.+20     	; 0x18c2 <__vector_18+0x11e>
	{
		flag=2;
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	80 93 15 04 	sts	0x0415, r24
		PopFromCircularBuffer(&CircularBuffer,&data);
    18b4:	be 01       	movw	r22, r28
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	0e 94 4f 06 	call	0xc9e	; 0xc9e <PopFromCircularBuffer>
	}
	
}
    18c2:	0f 90       	pop	r0
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	ff 91       	pop	r31
    18ca:	ef 91       	pop	r30
    18cc:	bf 91       	pop	r27
    18ce:	af 91       	pop	r26
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	7f 91       	pop	r23
    18d6:	6f 91       	pop	r22
    18d8:	5f 91       	pop	r21
    18da:	4f 91       	pop	r20
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <CheckUartReadyToSend>:
{
	PushIntoCircularBuffer(&CircularBuffer,dataval);
}
uint8_t CheckUartReadyToSend()
{ 
	return (!(UCSR0A&(1<<UDRE0)));
    18ea:	80 91 c0 00 	lds	r24, 0x00C0
    18ee:	85 fb       	bst	r24, 5
    18f0:	88 27       	eor	r24, r24
    18f2:	80 f9       	bld	r24, 0
}
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	89 27       	eor	r24, r25
    18f8:	08 95       	ret

000018fa <SendByte>:

void SendByte(unsigned char dat)
{
	UDR0=dat;
    18fa:	80 93 c6 00 	sts	0x00C6, r24
    18fe:	08 95       	ret

00001900 <ReadEveryValueADC>:
static ChannelBuffer channelBuffer_s[6]={{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0}};
static uint8_t BufferLength;
static volatile uint16_t ADC_Array[10];
static uint8_t checkAlreadyThere(ChannelBuffer *Channel);
uint16_t ReadEveryValueADC(void)
{
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
	uint16_t Channel=0,status;
	static uint8_t position,conversionFlag;
	uint16_t Value;
	  if(conversionFlag==0)
    1904:	80 91 2b 04 	lds	r24, 0x042B
    1908:	81 11       	cpse	r24, r1
    190a:	37 c0       	rjmp	.+110    	; 0x197a <ReadEveryValueADC+0x7a>
	  { 
		  
		 if(channelBuffer_s[position].filled==1&&channelBuffer_s[position].State==start)
    190c:	20 91 2c 04 	lds	r18, 0x042C
    1910:	82 2f       	mov	r24, r18
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	e8 0f       	add	r30, r24
    191c:	f9 1f       	adc	r31, r25
    191e:	eb 5d       	subi	r30, 0xDB	; 219
    1920:	fd 4f       	sbci	r31, 0xFD	; 253
    1922:	32 81       	ldd	r19, Z+2	; 0x02
    1924:	31 30       	cpi	r19, 0x01	; 1
    1926:	29 f5       	brne	.+74     	; 0x1972 <ReadEveryValueADC+0x72>
    1928:	fc 01       	movw	r30, r24
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	e8 0f       	add	r30, r24
    1930:	f9 1f       	adc	r31, r25
    1932:	eb 5d       	subi	r30, 0xDB	; 219
    1934:	fd 4f       	sbci	r31, 0xFD	; 253
    1936:	31 81       	ldd	r19, Z+1	; 0x01
    1938:	31 11       	cpse	r19, r1
    193a:	1b c0       	rjmp	.+54     	; 0x1972 <ReadEveryValueADC+0x72>
		 {
			 //uart_num(channelBuffer_s[position].channel);
			 adc_read(channelBuffer_s[position].channel);
    193c:	fc 01       	movw	r30, r24
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	8e 0f       	add	r24, r30
    1944:	9f 1f       	adc	r25, r31
    1946:	fc 01       	movw	r30, r24
    1948:	eb 5d       	subi	r30, 0xDB	; 219
    194a:	fd 4f       	sbci	r31, 0xFD	; 253
    194c:	80 81       	ld	r24, Z
    194e:	0e 94 04 06 	call	0xc08	; 0xc08 <adc_read>
			 channelBuffer_s[position].State=busy;
    1952:	80 91 2c 04 	lds	r24, 0x042C
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	8e 0f       	add	r24, r30
    1960:	9f 1f       	adc	r25, r31
    1962:	fc 01       	movw	r30, r24
    1964:	eb 5d       	subi	r30, 0xDB	; 219
    1966:	fd 4f       	sbci	r31, 0xFD	; 253
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	81 83       	std	Z+1, r24	; 0x01
			 conversionFlag=1;
    196c:	80 93 2b 04 	sts	0x042B, r24
    1970:	3a c0       	rjmp	.+116    	; 0x19e6 <ReadEveryValueADC+0xe6>
		 } 	
		 else
		 {
			 position++;
    1972:	2f 5f       	subi	r18, 0xFF	; 255
    1974:	20 93 2c 04 	sts	0x042C, r18
    1978:	36 c0       	rjmp	.+108    	; 0x19e6 <ReadEveryValueADC+0xe6>
		 }
	  }
	  else if(ADC_State()==0)
    197a:	0e 94 15 06 	call	0xc2a	; 0xc2a <ADC_State>
    197e:	81 11       	cpse	r24, r1
    1980:	32 c0       	rjmp	.+100    	; 0x19e6 <ReadEveryValueADC+0xe6>
	  {   
		  if(channelBuffer_s[position].State==busy)
    1982:	80 91 2c 04 	lds	r24, 0x042C
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	fc 01       	movw	r30, r24
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	e8 0f       	add	r30, r24
    1990:	f9 1f       	adc	r31, r25
    1992:	eb 5d       	subi	r30, 0xDB	; 219
    1994:	fd 4f       	sbci	r31, 0xFD	; 253
    1996:	21 81       	ldd	r18, Z+1	; 0x01
    1998:	21 30       	cpi	r18, 0x01	; 1
    199a:	29 f5       	brne	.+74     	; 0x19e6 <ReadEveryValueADC+0xe6>
		  {  
			 //uart_string("in Second");
			 ADC_Array[channelBuffer_s[position].channel]=ADCValue();
    199c:	fc 01       	movw	r30, r24
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	8e 0f       	add	r24, r30
    19a4:	9f 1f       	adc	r25, r31
    19a6:	fc 01       	movw	r30, r24
    19a8:	eb 5d       	subi	r30, 0xDB	; 219
    19aa:	fd 4f       	sbci	r31, 0xFD	; 253
    19ac:	c0 81       	ld	r28, Z
    19ae:	d0 e0       	ldi	r29, 0x00	; 0
    19b0:	0e 94 19 06 	call	0xc32	; 0xc32 <ADCValue>
    19b4:	cc 0f       	add	r28, r28
    19b6:	dd 1f       	adc	r29, r29
    19b8:	ca 5e       	subi	r28, 0xEA	; 234
    19ba:	db 4f       	sbci	r29, 0xFB	; 251
    19bc:	99 83       	std	Y+1, r25	; 0x01
    19be:	88 83       	st	Y, r24
			 channelBuffer_s[position].State=done;
    19c0:	20 91 2c 04 	lds	r18, 0x042C
    19c4:	82 2f       	mov	r24, r18
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	fc 01       	movw	r30, r24
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	8e 0f       	add	r24, r30
    19d0:	9f 1f       	adc	r25, r31
    19d2:	fc 01       	movw	r30, r24
    19d4:	eb 5d       	subi	r30, 0xDB	; 219
    19d6:	fd 4f       	sbci	r31, 0xFD	; 253
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	81 83       	std	Z+1, r24	; 0x01
			 position++;
    19dc:	2f 5f       	subi	r18, 0xFF	; 255
    19de:	20 93 2c 04 	sts	0x042C, r18
			 conversionFlag=0;
    19e2:	10 92 2b 04 	sts	0x042B, r1
		  }
	  }
	  if(position==6)
    19e6:	80 91 2c 04 	lds	r24, 0x042C
    19ea:	86 30       	cpi	r24, 0x06	; 6
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <ReadEveryValueADC+0xf2>
	  {
		  position=0;
    19ee:	10 92 2c 04 	sts	0x042C, r1
	  }

	
	return 0;
}
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <GetADC_Value>:

uint16_t GetADC_Value(uint16_t ADC_ChannelAndValue)
{
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <GetADC_Value+0x6>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
	uint16_t returnValue=0;
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	86 95       	lsr	r24
    1a0e:	86 95       	lsr	r24
    1a10:	86 95       	lsr	r24
    1a12:	87 70       	andi	r24, 0x07	; 7
    1a14:	80 93 2a 04 	sts	0x042A, r24
	channelProp.channel=ChannelSelect;
    1a18:	30 91 2a 04 	lds	r19, 0x042A
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    1a1c:	80 91 25 02 	lds	r24, 0x0225
    1a20:	38 17       	cp	r19, r24
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <GetADC_Value+0x38>
    1a24:	e8 e2       	ldi	r30, 0x28	; 40
    1a26:	f2 e0       	ldi	r31, 0x02	; 2

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    1a2c:	20 81       	ld	r18, Z
    1a2e:	32 13       	cpse	r19, r18
    1a30:	13 c0       	rjmp	.+38     	; 0x1a58 <GetADC_Value+0x5c>
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GetADC_Value+0x3c>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
		{
          Channel->State=channelBuffer_s[index].State;
    1a38:	dc 01       	movw	r26, r24
    1a3a:	aa 0f       	add	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	a8 0f       	add	r26, r24
    1a40:	b9 1f       	adc	r27, r25
    1a42:	ab 5d       	subi	r26, 0xDB	; 219
    1a44:	bd 4f       	sbci	r27, 0xFD	; 253
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	2c 91       	ld	r18, X
		  Channel->filled=1;
		  buffpos=index;
    1a4a:	80 93 2d 04 	sts	0x042D, r24
			BufferLength++;
			//uart_num(BufferLength);
		}
		
	}
	if(channelProp.State==done)
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	99 f1       	breq	.+102    	; 0x1ab8 <GetADC_Value+0xbc>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	48 c0       	rjmp	.+144    	; 0x1ae8 <GetADC_Value+0xec>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	33 96       	adiw	r30, 0x03	; 3
    1a5c:	86 30       	cpi	r24, 0x06	; 6
    1a5e:	91 05       	cpc	r25, r1
    1a60:	29 f7       	brne	.-54     	; 0x1a2c <GetADC_Value+0x30>
    1a62:	45 c0       	rjmp	.+138    	; 0x1aee <GetADC_Value+0xf2>
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
		{
			if(channelBuffer_s[Buffer_empty].filled=Buffer_empty)
    1a64:	10 92 27 02 	sts	0x0227, r1
    1a68:	11 c0       	rjmp	.+34     	; 0x1a8c <GetADC_Value+0x90>
						BufferLength=0;
				}
		}
		else
		{
			if(channelBuffer_s[BufferLength].filled!=Buffer_empty)
    1a6a:	82 2f       	mov	r24, r18
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	fc 01       	movw	r30, r24
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	8e 0f       	add	r24, r30
    1a76:	9f 1f       	adc	r25, r31
    1a78:	fc 01       	movw	r30, r24
    1a7a:	eb 5d       	subi	r30, 0xDB	; 219
    1a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	88 23       	and	r24, r24
    1a82:	21 f0       	breq	.+8      	; 0x1a8c <GetADC_Value+0x90>
			{
				FreeBuffer=1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	80 93 2f 04 	sts	0x042F, r24
    1a8a:	39 c0       	rjmp	.+114    	; 0x1afe <GetADC_Value+0x102>
			}
		}
		if(FreeBuffer==Buffer_empty)
    1a8c:	80 91 2f 04 	lds	r24, 0x042F
    1a90:	81 11       	cpse	r24, r1
    1a92:	35 c0       	rjmp	.+106    	; 0x1afe <GetADC_Value+0x102>
		{
			channelBuffer_s[BufferLength].channel=ChannelSelect;
    1a94:	82 2f       	mov	r24, r18
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	30 91 2a 04 	lds	r19, 0x042A
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e8 0f       	add	r30, r24
    1aa4:	f9 1f       	adc	r31, r25
    1aa6:	eb 5d       	subi	r30, 0xDB	; 219
    1aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aaa:	30 83       	st	Z, r19
			channelBuffer_s[BufferLength].filled=1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	82 83       	std	Z+2, r24	; 0x02
			BufferLength++;
    1ab0:	2f 5f       	subi	r18, 0xFF	; 255
    1ab2:	20 93 2e 04 	sts	0x042E, r18
    1ab6:	23 c0       	rjmp	.+70     	; 0x1afe <GetADC_Value+0x102>
		}
		
	}
	if(channelProp.State==done)
	{
		returnValue=ADC_Array[channelProp.channel];
    1ab8:	e3 2f       	mov	r30, r19
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ea 5e       	subi	r30, 0xEA	; 234
    1ac2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ac4:	20 81       	ld	r18, Z
    1ac6:	31 81       	ldd	r19, Z+1	; 0x01
		returnValue|=0x8000;
    1ac8:	30 68       	ori	r19, 0x80	; 128
		channelBuffer_s[bufferpos].channel=ChannelSelect;	
    1aca:	99 27       	eor	r25, r25
    1acc:	40 91 2a 04 	lds	r20, 0x042A
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	8e 0f       	add	r24, r30
    1ad8:	9f 1f       	adc	r25, r31
    1ada:	fc 01       	movw	r30, r24
    1adc:	eb 5d       	subi	r30, 0xDB	; 219
    1ade:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae0:	40 83       	st	Z, r20
		channelBuffer_s[bufferpos].State=0;
    1ae2:	11 82       	std	Z+1, r1	; 0x01
		channelBuffer_s[bufferpos].filled=1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	82 83       	std	Z+2, r24	; 0x02
	else
	{
		returnValue|=0x0000;
	}
    //returnValue|=0x8000;
	return returnValue;
    1ae8:	82 2f       	mov	r24, r18
    1aea:	93 2f       	mov	r25, r19
    1aec:	0b c0       	rjmp	.+22     	; 0x1b04 <GetADC_Value+0x108>
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
	channelProp.channel=ChannelSelect;
    bufferpos=checkAlreadyThere(&channelProp);
    1aee:	10 92 2d 04 	sts	0x042D, r1
	
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
    1af2:	20 91 2e 04 	lds	r18, 0x042E
    1af6:	26 30       	cpi	r18, 0x06	; 6
    1af8:	09 f0       	breq	.+2      	; 0x1afc <GetADC_Value+0x100>
    1afa:	b7 cf       	rjmp	.-146    	; 0x1a6a <GetADC_Value+0x6e>
    1afc:	b3 cf       	rjmp	.-154    	; 0x1a64 <GetADC_Value+0x68>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	f2 cf       	rjmp	.-28     	; 0x1ae8 <GetADC_Value+0xec>
	}
    //returnValue|=0x8000;
	return returnValue;
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <BaseTask1>:
#include "..\BaseLayer\UART.h"
#include "..\BaseLayer\pinout.h"
#include "..\BaseLayer\SSDi2cHandler.h"

uint16_t BaseTask1(void)
{
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <BaseTask1+0x6>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
	uint16_t PulseData=0;
	static uint8_t CountTaskTime,BTF;
	PulseData=InterfacePulse(PulseData);
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <InterfacePulse>
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
	if(((uint8_t*)(&PulseData))[1]==0x80 || ((uint8_t*)(&PulseData))[1]==0x00 )
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 38       	cpi	r24, 0x80	; 128
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <BaseTask1+0x24>
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <BaseTask1+0x2a>
	{
		//CountTaskTime=CountTaskTime+2;
		if(((uint8_t*)(&PulseData))[1]==0x00)
		{
			((uint8_t*)(&PulseData))[0]=255;
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			CountTaskTime=CountTaskTime+2;
		}*/
		//((uint8_t*)(&PulseData))[0]=CountTaskTime;
		return PulseData;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <BaseTask1+0x2e>
    else
	{
		((uint8_t*)(&PulseData))[1]=0x01;
	}
	
	return PulseData;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
	
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <BaseTask1Open>:
uint16_t BaseTask1Open(void)
{
	return 0;
}
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	08 95       	ret

00001b4c <BaseTask2>:

uint16_t BaseTask2(void)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <BaseTask2+0x6>
    1b52:	1f 92       	push	r1
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
	uint16_t RetVal;
	static uint8_t ButtonCount,previousButtonVal,currenButtonvalue,SuccessCount;
	PinValue(&value,PIN_OUT2,B );
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	0e 94 23 09 	call	0x1246	; 0x1246 <PinValue>
	//uart_num(value);
	if(value==previousButtonVal)
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	90 91 30 04 	lds	r25, 0x0430
    1b6a:	89 13       	cpse	r24, r25
    1b6c:	13 c0       	rjmp	.+38     	; 0x1b94 <BaseTask2+0x48>
	{
		ButtonCount++;
    1b6e:	90 91 31 04 	lds	r25, 0x0431
    1b72:	9f 5f       	subi	r25, 0xFF	; 255
    1b74:	90 93 31 04 	sts	0x0431, r25
		previousButtonVal=value;
    1b78:	80 93 30 04 	sts	0x0430, r24
		currenButtonvalue=value;
    1b7c:	80 93 32 04 	sts	0x0432, r24
		((uint8_t *)&RetVal)[1]=0x03;
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	9b 83       	std	Y+3, r25	; 0x03
		if(value==0)
    1b84:	81 11       	cpse	r24, r1
    1b86:	34 c0       	rjmp	.+104    	; 0x1bf0 <BaseTask2+0xa4>
		{
			PinOutput(1,PIN_OUT7,D);
    1b88:	42 e0       	ldi	r20, 0x02	; 2
    1b8a:	66 e0       	ldi	r22, 0x06	; 6
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
    1b92:	2e c0       	rjmp	.+92     	; 0x1bf0 <BaseTask2+0xa4>
		}
	}
	else
	{
		if(value!=0)
    1b94:	88 23       	and	r24, r24
    1b96:	29 f1       	breq	.+74     	; 0x1be2 <BaseTask2+0x96>
		{
		PinOutput(0,PIN_OUT7,D);
    1b98:	42 e0       	ldi	r20, 0x02	; 2
    1b9a:	66 e0       	ldi	r22, 0x06	; 6
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
		if(ButtonCount>100)	
    1ba2:	80 91 31 04 	lds	r24, 0x0431
    1ba6:	85 36       	cpi	r24, 0x65	; 101
    1ba8:	38 f0       	brcs	.+14     	; 0x1bb8 <BaseTask2+0x6c>
		{
			((uint8_t *)&RetVal)[1]=0x02;
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	8b 83       	std	Y+3, r24	; 0x03
			((uint8_t *)&RetVal)[0]=currenButtonvalue+3;
    1bae:	80 91 32 04 	lds	r24, 0x0432
    1bb2:	8d 5f       	subi	r24, 0xFD	; 253
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	17 c0       	rjmp	.+46     	; 0x1be6 <BaseTask2+0x9a>
		}
		
		else if(ButtonCount>50 )
    1bb8:	83 33       	cpi	r24, 0x33	; 51
    1bba:	38 f0       	brcs	.+14     	; 0x1bca <BaseTask2+0x7e>
		{
			((uint8_t *)&RetVal)[1]=0x02;
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
			((uint8_t *)&RetVal)[0]=currenButtonvalue+2;
    1bc0:	80 91 32 04 	lds	r24, 0x0432
    1bc4:	8e 5f       	subi	r24, 0xFE	; 254
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	0e c0       	rjmp	.+28     	; 0x1be6 <BaseTask2+0x9a>
		}
		else if(ButtonCount>5)
    1bca:	86 30       	cpi	r24, 0x06	; 6
    1bcc:	38 f0       	brcs	.+14     	; 0x1bdc <BaseTask2+0x90>
		{
			((uint8_t *)&RetVal)[1]=0x02;
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
			((uint8_t *)&RetVal)[0]=currenButtonvalue+1;
    1bd2:	80 91 32 04 	lds	r24, 0x0432
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
    1bda:	05 c0       	rjmp	.+10     	; 0x1be6 <BaseTask2+0x9a>
		}
		else
		{
			((uint8_t *)&RetVal)[1]=0x03;
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <BaseTask2+0x9a>
		}
		}
		else{
			((uint8_t *)&RetVal)[1]=0x03;
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	8b 83       	std	Y+3, r24	; 0x03
		}
		ButtonCount=0;
    1be6:	10 92 31 04 	sts	0x0431, r1
		previousButtonVal=value;
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	80 93 30 04 	sts	0x0430, r24
	{
		((uint8_t *)&RetVal)[1]=0x03;
	}*/
    //0((uint8_t *)&RetVal)[0]=currenButtonvalue;
	return RetVal;
}
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	08 95       	ret

00001c00 <BaseTask2Open>:

uint16_t BaseTask2Open(void)
{
	return 0;
}
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	08 95       	ret

00001c06 <SSDtask>:

uint16_t SSDtask(void)
{
	SSDi2cHandlerFunc(0);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 48 0a 	call	0x1490	; 0x1490 <SSDi2cHandlerFunc>
	return 0xfffff;
}
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	08 95       	ret

00001c14 <Testtask>:
uint16_t Testtask(void)
{
	static uint8_t count;
	count++;
    1c14:	80 91 33 04 	lds	r24, 0x0433
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
	if(count>3)
    1c1a:	84 30       	cpi	r24, 0x04	; 4
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <Testtask+0x10>
	return 0xfffff;
}
uint16_t Testtask(void)
{
	static uint8_t count;
	count++;
    1c1e:	80 93 33 04 	sts	0x0433, r24
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <Testtask+0x1c>
	if(count>3)
	{
		count=0;
    1c24:	10 92 33 04 	sts	0x0433, r1
		testfuc(0);
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <testfuc>
	}
	
	return 0xfffff;
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	9f ef       	ldi	r25, 0xFF	; 255
    1c34:	08 95       	ret

00001c36 <chartohex>:
	return 0;
}

static uint8_t chartohex(char arg)
{
	if(arg>='0' && arg<='9' )
    1c36:	98 2f       	mov	r25, r24
    1c38:	90 53       	subi	r25, 0x30	; 48
    1c3a:	9a 30       	cpi	r25, 0x0A	; 10
    1c3c:	30 f4       	brcc	.+12     	; 0x1c4a <chartohex+0x14>
	{
		return charHex[arg-'0'];
    1c3e:	e8 2f       	mov	r30, r24
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	e9 5e       	subi	r30, 0xE9	; 233
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	80 81       	ld	r24, Z
    1c48:	08 95       	ret
	}
	else if(arg>='A' && arg<='F')
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	91 54       	subi	r25, 0x41	; 65
    1c4e:	96 30       	cpi	r25, 0x06	; 6
    1c50:	30 f4       	brcc	.+12     	; 0x1c5e <chartohex+0x28>
	{
		return charHex[arg-'A'+10];
    1c52:	e8 2f       	mov	r30, r24
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	e0 5f       	subi	r30, 0xF0	; 240
    1c58:	fd 4f       	sbci	r31, 0xFD	; 253
    1c5a:	80 81       	ld	r24, Z
    1c5c:	08 95       	ret
	}
	return 0;	
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
}
    1c60:	08 95       	ret

00001c62 <ReadRambytesNonCnt>:
//-->EXAMPLE ROUTINE :-FD01ED01EE01EF01F004
//01ED --> one address
//everything is in hex
//04-->length
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	7c 01       	movw	r14, r24
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
    1c72:	8a e0       	ldi	r24, 0x0A	; 10
    1c74:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1c78:	d7 01       	movw	r26, r14
    1c7a:	1c 96       	adiw	r26, 0x0c	; 12
    1c7c:	8c 91       	ld	r24, X
    1c7e:	88 23       	and	r24, r24
    1c80:	69 f1       	breq	.+90     	; 0x1cdc <ReadRambytesNonCnt+0x7a>
    1c82:	d1 2c       	mov	r13, r1
	{
		address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[i+1+4]<<8)|((uint8_t*)Ptr)[i+4]));
    1c84:	f7 01       	movw	r30, r14
    1c86:	ed 0d       	add	r30, r13
    1c88:	f1 1d       	adc	r31, r1
    1c8a:	b5 81       	ldd	r27, Z+5	; 0x05
    1c8c:	db 2f       	mov	r29, r27
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	c8 2f       	mov	r28, r24
    1c92:	84 81       	ldd	r24, Z+4	; 0x04
    1c94:	8e 01       	movw	r16, r28
    1c96:	08 2b       	or	r16, r24
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1c98:	d8 01       	movw	r26, r16
    1c9a:	ec 91       	ld	r30, X
    1c9c:	e2 95       	swap	r30
    1c9e:	ef 70       	andi	r30, 0x0F	; 15
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	e9 5c       	subi	r30, 0xC9	; 201
    1ca4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca6:	80 81       	ld	r24, Z
    1ca8:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1cac:	d8 01       	movw	r26, r16
    1cae:	ec 91       	ld	r30, X
    1cb0:	ef 70       	andi	r30, 0x0F	; 15
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	e9 5c       	subi	r30, 0xC9	; 201
    1cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb8:	80 81       	ld	r24, Z
    1cba:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1cc4:	d3 94       	inc	r13
    1cc6:	d3 94       	inc	r13
    1cc8:	2d 2d       	mov	r18, r13
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	f7 01       	movw	r30, r14
    1cce:	84 85       	ldd	r24, Z+12	; 0x0c
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	28 17       	cp	r18, r24
    1cd8:	39 07       	cpc	r19, r25
    1cda:	a4 f2       	brlt	.-88     	; 0x1c84 <ReadRambytesNonCnt+0x22>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
	}
	
	return 0;	
}
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	08 95       	ret

00001cf0 <WriteRambyte>:
	
	return 0;
}

uint16_t WriteRambyte(void *Ptr)
{
    1cf0:	df 92       	push	r13
    1cf2:	ef 92       	push	r14
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1d00:	fc 01       	movw	r30, r24
    1d02:	f5 81       	ldd	r31, Z+5	; 0x05
    1d04:	df 2f       	mov	r29, r31
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	c8 2f       	mov	r28, r24
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	84 81       	ldd	r24, Z+4	; 0x04
    1d0e:	c8 2b       	or	r28, r24
	FillUartBufferSiglechar('\n');
    1d10:	8a e0       	ldi	r24, 0x0A	; 10
    1d12:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1d16:	f8 01       	movw	r30, r16
    1d18:	84 85       	ldd	r24, Z+12	; 0x0c
    1d1a:	88 23       	and	r24, r24
    1d1c:	39 f1       	breq	.+78     	; 0x1d6c <WriteRambyte+0x7c>
    1d1e:	d1 2c       	mov	r13, r1
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
    1d20:	0f 2e       	mov	r0, r31
    1d22:	f6 ea       	ldi	r31, 0xA6	; 166
    1d24:	ef 2e       	mov	r14, r31
    1d26:	f5 e0       	ldi	r31, 0x05	; 5
    1d28:	ff 2e       	mov	r15, r31
    1d2a:	f0 2d       	mov	r31, r0
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1d2c:	e8 81       	ld	r30, Y
    1d2e:	e2 95       	swap	r30
    1d30:	ef 70       	andi	r30, 0x0F	; 15
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	e9 5c       	subi	r30, 0xC9	; 201
    1d36:	fd 4f       	sbci	r31, 0xFD	; 253
    1d38:	80 81       	ld	r24, Z
    1d3a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1d3e:	e8 81       	ld	r30, Y
    1d40:	ef 70       	andi	r30, 0x0F	; 15
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	e9 5c       	subi	r30, 0xC9	; 201
    1d46:	fd 4f       	sbci	r31, 0xFD	; 253
    1d48:	80 81       	ld	r24, Z
    1d4a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		*address=((uint8_t*)Ptr)[i+6];
    1d54:	f8 01       	movw	r30, r16
    1d56:	ed 0d       	add	r30, r13
    1d58:	f1 1d       	adc	r31, r1
    1d5a:	86 81       	ldd	r24, Z+6	; 0x06
    1d5c:	89 93       	st	Y+, r24
		address++;
		Datastore[1]=0;
    1d5e:	f7 01       	movw	r30, r14
    1d60:	10 82       	st	Z, r1
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1d62:	d3 94       	inc	r13
    1d64:	f8 01       	movw	r30, r16
    1d66:	84 85       	ldd	r24, Z+12	; 0x0c
    1d68:	d8 16       	cp	r13, r24
    1d6a:	00 f3       	brcs	.-64     	; 0x1d2c <WriteRambyte+0x3c>
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
	}

	PushEventInterface(52,1,Datastore,0);	
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	45 ea       	ldi	r20, 0xA5	; 165
    1d72:	55 e0       	ldi	r21, 0x05	; 5
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	84 e3       	ldi	r24, 0x34	; 52
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
	return 0;
}
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	08 95       	ret

00001d94 <ReadRambyte>:
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
{
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1da2:	fc 01       	movw	r30, r24
    1da4:	f5 80       	ldd	r15, Z+5	; 0x05
    1da6:	e1 2c       	mov	r14, r1
    1da8:	84 81       	ldd	r24, Z+4	; 0x04
    1daa:	e8 2a       	or	r14, r24
    1dac:	e7 01       	movw	r28, r14
	FillUartBufferSiglechar('\n');
    1dae:	8a e0       	ldi	r24, 0x0A	; 10
    1db0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
	PopulateSSDbuffer("Value:",3,5);
    1db4:	45 e0       	ldi	r20, 0x05	; 5
    1db6:	63 e0       	ldi	r22, 0x03	; 3
    1db8:	87 e1       	ldi	r24, 0x17	; 23
    1dba:	93 e0       	ldi	r25, 0x03	; 3
    1dbc:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	86 81       	ldd	r24, Z+6	; 0x06
    1dc4:	88 23       	and	r24, r24
    1dc6:	a1 f1       	breq	.+104    	; 0x1e30 <ReadRambyte+0x9c>
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1dc8:	e8 81       	ld	r30, Y
    1dca:	e2 95       	swap	r30
    1dcc:	ef 70       	andi	r30, 0x0F	; 15
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	e9 5c       	subi	r30, 0xC9	; 201
    1dd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd4:	80 81       	ld	r24, Z
    1dd6:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1dda:	e8 81       	ld	r30, Y
    1ddc:	ef 70       	andi	r30, 0x0F	; 15
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	e9 5c       	subi	r30, 0xC9	; 201
    1de2:	fd 4f       	sbci	r31, 0xFD	; 253
    1de4:	80 81       	ld	r24, Z
    1de6:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		PopulateSSDbufferChar(HexChar[((address[0]&0XF0)>>4)],0,0);
    1dea:	e8 81       	ld	r30, Y
    1dec:	e2 95       	swap	r30
    1dee:	ef 70       	andi	r30, 0x0F	; 15
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	e9 5c       	subi	r30, 0xC9	; 201
    1df4:	fd 4f       	sbci	r31, 0xFD	; 253
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	0e 94 cd 11 	call	0x239a	; 0x239a <PopulateSSDbufferChar>
		PopulateSSDbufferChar(HexChar[(address[0]&0X0F)],0,0);
    1e00:	e9 91       	ld	r30, Y+
    1e02:	ef 70       	andi	r30, 0x0F	; 15
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	e9 5c       	subi	r30, 0xC9	; 201
    1e08:	fd 4f       	sbci	r31, 0xFD	; 253
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	0e 94 cd 11 	call	0x239a	; 0x239a <PopulateSSDbufferChar>
		PopulateSSDbufferChar(' ',0,0);
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	80 e2       	ldi	r24, 0x20	; 32
    1e1a:	0e 94 cd 11 	call	0x239a	; 0x239a <PopulateSSDbufferChar>
		FillUartBufferSiglechar(' ');
    1e1e:	80 e2       	ldi	r24, 0x20	; 32
    1e20:	0e 94 ff 11 	call	0x23fe	; 0x23fe <FillUartBufferSiglechar>
		return charHex[arg-'A'+10];
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
    1e24:	9c 2f       	mov	r25, r28
    1e26:	9e 19       	sub	r25, r14
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	PopulateSSDbuffer("Value:",3,5);
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1e28:	f8 01       	movw	r30, r16
    1e2a:	86 81       	ldd	r24, Z+6	; 0x06
    1e2c:	98 17       	cp	r25, r24
    1e2e:	60 f2       	brcs	.-104    	; 0x1dc8 <ReadRambyte+0x34>
		FillUartBufferSiglechar(' ');
		address++;
	}
	
	return 0;
}
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	08 95       	ret

00001e42 <DebugHandlerFunc>:
VariableManager VariableManager_t[5];
static	uint8_t chartohex(char arg);
typedef uint16_t (*argp)(void *);
argp argp1;
uint16_t DebugHandlerFunc(void *fptr)
{
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <DebugHandlerFunc+0x12>
    1e54:	1f 92       	push	r1
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	8c 01       	movw	r16, r24
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
    1e5c:	8a ec       	ldi	r24, 0xCA	; 202
    1e5e:	9e e0       	ldi	r25, 0x0E	; 14
    1e60:	9b 83       	std	Y+3, r25	; 0x03
    1e62:	8a 83       	std	Y+2, r24	; 0x02
uint16_t DebugHandlerFunc(void *fptr)
{
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
    1e64:	d1 2c       	mov	r13, r1
    1e66:	f1 2c       	mov	r15, r1
		}
		k++;
		if(k==2)
		{
		  i++;
		  k=0;	
    1e68:	e1 2c       	mov	r14, r1
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1e6a:	31 c0       	rjmp	.+98     	; 0x1ece <DebugHandlerFunc+0x8c>
	{
		
		if(i<10)
    1e6c:	29 e0       	ldi	r18, 0x09	; 9
    1e6e:	2f 15       	cp	r18, r15
    1e70:	38 f1       	brcs	.+78     	; 0x1ec0 <DebugHandlerFunc+0x7e>
	{
		if(k==0)
    1e72:	d1 10       	cpse	r13, r1
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <DebugHandlerFunc+0x50>
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <chartohex>
    1e7c:	ef 2d       	mov	r30, r15
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	ec 5c       	subi	r30, 0xCC	; 204
    1e82:	fb 4f       	sbci	r31, 0xFB	; 251
    1e84:	20 e1       	ldi	r18, 0x10	; 16
    1e86:	82 9f       	mul	r24, r18
    1e88:	c0 01       	movw	r24, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	80 83       	st	Z, r24
		}
		if(k==1)
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
		}
		k++;
    1e8e:	d3 94       	inc	r13
    1e90:	1e c0       	rjmp	.+60     	; 0x1ece <DebugHandlerFunc+0x8c>
	{
		if(k==0)
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
		}
		if(k==1)
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	d8 12       	cpse	r13, r24
    1e96:	0d c0       	rjmp	.+26     	; 0x1eb2 <DebugHandlerFunc+0x70>
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
    1e98:	cf 2c       	mov	r12, r15
    1e9a:	d1 2c       	mov	r13, r1
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <chartohex>
    1ea2:	f6 01       	movw	r30, r12
    1ea4:	ec 5c       	subi	r30, 0xCC	; 204
    1ea6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea8:	8f 70       	andi	r24, 0x0F	; 15
    1eaa:	90 81       	ld	r25, Z
    1eac:	89 2b       	or	r24, r25
    1eae:	80 83       	st	Z, r24
    1eb0:	04 c0       	rjmp	.+8      	; 0x1eba <DebugHandlerFunc+0x78>
		}
		k++;
    1eb2:	d3 94       	inc	r13
		if(k==2)
    1eb4:	e2 e0       	ldi	r30, 0x02	; 2
    1eb6:	de 12       	cpse	r13, r30
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <DebugHandlerFunc+0x8c>
		{
		  i++;
    1eba:	f3 94       	inc	r15
		  k=0;	
    1ebc:	de 2c       	mov	r13, r14
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <DebugHandlerFunc+0x8c>
		}
	}
	else
	{
	  Pos[i]=data;
    1ec0:	ef 2d       	mov	r30, r15
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	ec 5c       	subi	r30, 0xCC	; 204
    1ec6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	80 83       	st	Z, r24
	  i++;
    1ecc:	f3 94       	inc	r15
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1ece:	ce 01       	movw	r24, r28
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	09 95       	icall
    1ed6:	88 23       	and	r24, r24
    1ed8:	49 f2       	breq	.-110    	; 0x1e6c <DebugHandlerFunc+0x2a>
	  i++;
	}
			
	}

	if(Pos[0]==0xab)
    1eda:	80 91 34 04 	lds	r24, 0x0434
    1ede:	8b 3a       	cpi	r24, 0xAB	; 171
    1ee0:	71 f5       	brne	.+92     	; 0x1f3e <DebugHandlerFunc+0xfc>
	{
	   
        TEMP=ReadRambyte;
		if(Pos[3]==0)
    1ee2:	80 91 37 04 	lds	r24, 0x0437
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	1a c0       	rjmp	.+52     	; 0x1f1e <DebugHandlerFunc+0xdc>
		{
		  //uart_string((char*)0x01ed/*(char*)((uint16_t)(Pos[1]<<8)|Pos[2])*/);	
          Datastore[0]=0;
    1eea:	10 92 a5 05 	sts	0x05A5, r1
          Datastore[1]=1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	80 93 a6 05 	sts	0x05A6, r24
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	80 93 a7 05 	sts	0x05A7, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	80 93 a8 05 	sts	0x05A8, r24
          Datastore[4]=Pos[2];
    1f00:	80 91 36 04 	lds	r24, 0x0436
    1f04:	80 93 a9 05 	sts	0x05A9, r24
          Datastore[5]=Pos[1];
    1f08:	80 91 35 04 	lds	r24, 0x0435
    1f0c:	80 93 aa 05 	sts	0x05AA, r24
          Datastore[6]=Pos[4];
    1f10:	80 91 38 04 	lds	r24, 0x0438
    1f14:	80 93 ab 05 	sts	0x05AB, r24
		  Datastore[12]=Pos[4];
    1f18:	80 93 b1 05 	sts	0x05B1, r24
    1f1c:	9b c0       	rjmp	.+310    	; 0x2054 <DebugHandlerFunc+0x212>
		 //ReadRambyte(Datastore);;
		 //PushEventInterface(52,1,Datastore,0);
		}
		else if(Pos[3]==1)
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <DebugHandlerFunc+0xe2>
    1f22:	98 c0       	rjmp	.+304    	; 0x2054 <DebugHandlerFunc+0x212>
		{
		  //
		  Datastore[1]=0;
    1f24:	10 92 a6 05 	sts	0x05A6, r1
		  PushEventInterface(52,1,Datastore,0);
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	45 ea       	ldi	r20, 0xA5	; 165
    1f2e:	55 e0       	ldi	r21, 0x05	; 5
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	84 e3       	ldi	r24, 0x34	; 52
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    1f3c:	8b c0       	rjmp	.+278    	; 0x2054 <DebugHandlerFunc+0x212>
		} else if(Pos[3]==2)
		{
			
		}
	}
	else if(Pos[0]==0xac)
    1f3e:	8c 3a       	cpi	r24, 0xAC	; 172
    1f40:	99 f5       	brne	.+102    	; 0x1fa8 <DebugHandlerFunc+0x166>
	{
		 TEMP=WriteRambyte;
    1f42:	88 e7       	ldi	r24, 0x78	; 120
    1f44:	9e e0       	ldi	r25, 0x0E	; 14
    1f46:	9b 83       	std	Y+3, r25	; 0x03
    1f48:	8a 83       	std	Y+2, r24	; 0x02
          Datastore[0]=0;
    1f4a:	10 92 a5 05 	sts	0x05A5, r1
          Datastore[1]=1;
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	90 93 a6 05 	sts	0x05A6, r25
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    1f54:	80 93 a7 05 	sts	0x05A7, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	80 93 a8 05 	sts	0x05A8, r24
          Datastore[4]=Pos[2];
    1f5e:	80 91 36 04 	lds	r24, 0x0436
    1f62:	80 93 a9 05 	sts	0x05A9, r24
          Datastore[5]=Pos[1];
    1f66:	80 91 35 04 	lds	r24, 0x0435
    1f6a:	80 93 aa 05 	sts	0x05AA, r24
          Datastore[6]=Pos[3];
    1f6e:	80 91 37 04 	lds	r24, 0x0437
    1f72:	80 93 ab 05 	sts	0x05AB, r24
		  Datastore[7]=Pos[4];
    1f76:	80 91 38 04 	lds	r24, 0x0438
    1f7a:	80 93 ac 05 	sts	0x05AC, r24
		  Datastore[8]=Pos[5];
    1f7e:	80 91 39 04 	lds	r24, 0x0439
    1f82:	80 93 ad 05 	sts	0x05AD, r24
		  Datastore[9]=Pos[6];
    1f86:	80 91 3a 04 	lds	r24, 0x043A
    1f8a:	80 93 ae 05 	sts	0x05AE, r24
	      Datastore[10]=Pos[7];
    1f8e:	80 91 3b 04 	lds	r24, 0x043B
    1f92:	80 93 af 05 	sts	0x05AF, r24
		  Datastore[11]=Pos[8];
    1f96:	80 91 3c 04 	lds	r24, 0x043C
    1f9a:	80 93 b0 05 	sts	0x05B0, r24
		  Datastore[12]=Pos[9];
    1f9e:	80 91 3d 04 	lds	r24, 0x043D
    1fa2:	80 93 b1 05 	sts	0x05B1, r24
    1fa6:	56 c0       	rjmp	.+172    	; 0x2054 <DebugHandlerFunc+0x212>
		  //PushEventInterface(52,1,Datastore,0);	
	}
	else if(Pos[0]==0xfd)
    1fa8:	8d 3f       	cpi	r24, 0xFD	; 253
    1faa:	99 f5       	brne	.+102    	; 0x2012 <DebugHandlerFunc+0x1d0>
	{
		TEMP=ReadRambytesNonCnt;
    1fac:	81 e3       	ldi	r24, 0x31	; 49
    1fae:	9e e0       	ldi	r25, 0x0E	; 14
    1fb0:	9b 83       	std	Y+3, r25	; 0x03
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
		Datastore[0]=0;
    1fb4:	10 92 a5 05 	sts	0x05A5, r1
		Datastore[1]=1;
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	90 93 a6 05 	sts	0x05A6, r25
		Datastore[2]=((uint8_t*)(&TEMP))[0];
    1fbe:	80 93 a7 05 	sts	0x05A7, r24
		Datastore[3]=((uint8_t*)(&TEMP))[1];
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	80 93 a8 05 	sts	0x05A8, r24
		Datastore[4]=Pos[2];
    1fc8:	80 91 36 04 	lds	r24, 0x0436
    1fcc:	80 93 a9 05 	sts	0x05A9, r24
		Datastore[5]=Pos[1];
    1fd0:	80 91 35 04 	lds	r24, 0x0435
    1fd4:	80 93 aa 05 	sts	0x05AA, r24
		Datastore[6]=Pos[4];
    1fd8:	80 91 38 04 	lds	r24, 0x0438
    1fdc:	80 93 ab 05 	sts	0x05AB, r24
		Datastore[7]=Pos[3];
    1fe0:	80 91 37 04 	lds	r24, 0x0437
    1fe4:	80 93 ac 05 	sts	0x05AC, r24
		Datastore[8]=Pos[6];
    1fe8:	80 91 3a 04 	lds	r24, 0x043A
    1fec:	80 93 ad 05 	sts	0x05AD, r24
		Datastore[9]=Pos[5];
    1ff0:	80 91 39 04 	lds	r24, 0x0439
    1ff4:	80 93 ae 05 	sts	0x05AE, r24
	    Datastore[10]=Pos[8];
    1ff8:	80 91 3c 04 	lds	r24, 0x043C
    1ffc:	80 93 af 05 	sts	0x05AF, r24
	    Datastore[11]=Pos[7];
    2000:	80 91 3b 04 	lds	r24, 0x043B
    2004:	80 93 b0 05 	sts	0x05B0, r24
	    Datastore[12]=Pos[9];
    2008:	80 91 3d 04 	lds	r24, 0x043D
    200c:	80 93 b1 05 	sts	0x05B1, r24
    2010:	21 c0       	rjmp	.+66     	; 0x2054 <DebugHandlerFunc+0x212>
		
	}
	else if(Pos[0]==0xbd)
    2012:	8d 3b       	cpi	r24, 0xBD	; 189
    2014:	f9 f4       	brne	.+62     	; 0x2054 <DebugHandlerFunc+0x212>
	{
		TEMP=ReadRambyte;
        Datastore[0]=0;
    2016:	10 92 a5 05 	sts	0x05A5, r1
        Datastore[1]=1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 a6 05 	sts	0x05A6, r24
        Datastore[2]=((uint8_t*)(&TEMP))[0];
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	80 93 a7 05 	sts	0x05A7, r24
        Datastore[3]=((uint8_t*)(&TEMP))[1];
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	80 93 a8 05 	sts	0x05A8, r24
        Datastore[4]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[0];
    202c:	e0 91 35 04 	lds	r30, 0x0435
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	e5 54       	subi	r30, 0x45	; 69
    203c:	fa 4f       	sbci	r31, 0xFA	; 250
    203e:	80 81       	ld	r24, Z
    2040:	80 93 a9 05 	sts	0x05A9, r24
        Datastore[5]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[1];
    2044:	81 81       	ldd	r24, Z+1	; 0x01
    2046:	80 93 aa 05 	sts	0x05AA, r24
        Datastore[6]=VariableManager_t[Pos[1]].VariableSize;
    204a:	83 81       	ldd	r24, Z+3	; 0x03
    204c:	80 93 ab 05 	sts	0x05AB, r24
        Datastore[12]=VariableManager_t[Pos[1]].VariableSize;
    2050:	80 93 b1 05 	sts	0x05B1, r24
	}
	if(data=='!')
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	81 32       	cpi	r24, 0x21	; 33
    2058:	89 f4       	brne	.+34     	; 0x207c <DebugHandlerFunc+0x23a>
	{
	  argp1=(argp *)(((uint16_t*)(Pos+11))[0]);
    205a:	60 91 3f 04 	lds	r22, 0x043F
    205e:	70 91 40 04 	lds	r23, 0x0440
    2062:	70 93 ba 05 	sts	0x05BA, r23
    2066:	60 93 b9 05 	sts	0x05B9, r22
	  PushEventInterface(201,argp1,Datastore,0);
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	45 ea       	ldi	r20, 0xA5	; 165
    2070:	55 e0       	ldi	r21, 0x05	; 5
    2072:	89 ec       	ldi	r24, 0xC9	; 201
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    207a:	0a c0       	rjmp	.+20     	; 0x2090 <DebugHandlerFunc+0x24e>
	}
	else
	{
	  PushEventInterface(52,1,Datastore,0);
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	45 ea       	ldi	r20, 0xA5	; 165
    2082:	55 e0       	ldi	r21, 0x05	; 5
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	84 e3       	ldi	r24, 0x34	; 52
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
	}
	return 0;
}
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	08 95       	ret

000020ac <OutPutVariableRegister>:
	return 0;	
}

uint8_t OutPutVariableRegister(uint16_t Outadd,uint8_t Varsize,uint8_t Varid)
{
	VariableManager_t[Varid].VariableAdd=Outadd;
    20ac:	e4 2f       	mov	r30, r20
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	ee 0f       	add	r30, r30
    20b2:	ff 1f       	adc	r31, r31
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	e5 54       	subi	r30, 0x45	; 69
    20ba:	fa 4f       	sbci	r31, 0xFA	; 250
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
	VariableManager_t[Varid].VariableId=Varid;
    20c0:	42 83       	std	Z+2, r20	; 0x02
	VariableManager_t[Varid].VariableSize=Varsize;
    20c2:	63 83       	std	Z+3, r22	; 0x03
    20c4:	08 95       	ret

000020c6 <Nvm_TableInit>:
 *  Author: Nikhil
 */ 
#include "EepromStructure.h"
void Nvm_TableInit()
{
	Nvm_Table_t[0].Id=0;
    20c6:	10 92 2d 05 	sts	0x052D, r1
	Nvm_Table_t[0].Nvm_Size=sizeof(Nvm_T_Ping);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	80 93 2e 05 	sts	0x052E, r24
	Nvm_Table_t[1].Id=1;
    20d0:	80 93 2f 05 	sts	0x052F, r24
	Nvm_Table_t[1].Nvm_Size=sizeof(Nvm_T_OH);
    20d4:	94 e0       	ldi	r25, 0x04	; 4
    20d6:	90 93 30 05 	sts	0x0530, r25
	Nvm_Table_t[2].Id=5;
    20da:	95 e0       	ldi	r25, 0x05	; 5
    20dc:	90 93 31 05 	sts	0x0531, r25
	Nvm_Table_t[2].Nvm_Size=sizeof(Nvm_T_TankOverflow);
    20e0:	80 93 32 05 	sts	0x0532, r24
    20e4:	08 95       	ret

000020e6 <NVMTask>:
   uart_string("here");
 }
}
static uint32_t NVMdat=200; 
uint16_t NVMTask(void *NvmData)
{
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	ec 01       	movw	r28, r24
	//uart_string("in nvm");
	uint8_t state;
	uint8_t *NVMDataPtr;
	NVMDataPtr=(uint8_t *)NvmData;
	state=GetNVMState();
    20ec:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <GetNVMState>
	//uart_num(state);
	NVMdat++;
    20f0:	40 91 5b 02 	lds	r20, 0x025B
    20f4:	50 91 5c 02 	lds	r21, 0x025C
    20f8:	60 91 5d 02 	lds	r22, 0x025D
    20fc:	70 91 5e 02 	lds	r23, 0x025E
    2100:	4f 5f       	subi	r20, 0xFF	; 255
    2102:	5f 4f       	sbci	r21, 0xFF	; 255
    2104:	6f 4f       	sbci	r22, 0xFF	; 255
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	40 93 5b 02 	sts	0x025B, r20
    210c:	50 93 5c 02 	sts	0x025C, r21
    2110:	60 93 5d 02 	sts	0x025D, r22
    2114:	70 93 5e 02 	sts	0x025E, r23
	if(state==2 && NVMProcess==0)
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	89 f5       	brne	.+98     	; 0x217e <NVMTask+0x98>
    211c:	80 91 40 04 	lds	r24, 0x0440
    2120:	81 11       	cpse	r24, r1
    2122:	18 c0       	rjmp	.+48     	; 0x2154 <NVMTask+0x6e>
	{
	     //CurrentEvent()->EEid
		//uart_string("IN nvm task");
		 uint8_t* extemp;
		 extemp=((uint16_t*)(NVMDataPtr+4))[0];
		NvmPopulateWriteSize(Nvm_Table_t[NVMDataPtr[6]].Nvm_Size,Nvm_Table_t[NVMDataPtr[6]].Id,NVMDataPtr[7],extemp);
    2124:	ee 81       	ldd	r30, Y+6	; 0x06
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	2c 81       	ldd	r18, Y+4	; 0x04
    212a:	3d 81       	ldd	r19, Y+5	; 0x05
    212c:	4f 81       	ldd	r20, Y+7	; 0x07
    212e:	ee 0f       	add	r30, r30
    2130:	ff 1f       	adc	r31, r31
    2132:	e3 5d       	subi	r30, 0xD3	; 211
    2134:	fa 4f       	sbci	r31, 0xFA	; 250
    2136:	60 81       	ld	r22, Z
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	81 81       	ldd	r24, Z+1	; 0x01
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 af 08 	call	0x115e	; 0x115e <NvmPopulateWriteSize>
   	/*	uart_num(extemp[0]);
   		uart_num(extemp[1]);
   		uart_num(extemp[2]);
   		uart_num(extemp[3]);*/
		SwitchNvmOn();
    2144:	0e 94 ce 08 	call	0x119c	; 0x119c <SwitchNvmOn>
		NVMProcess=1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 40 04 	sts	0x0440, r24
	    return 1;
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	16 c0       	rjmp	.+44     	; 0x2180 <NVMTask+0x9a>
	}
	else if(state==2 && NVMProcess==1)
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	99 f4       	brne	.+38     	; 0x217e <NVMTask+0x98>
	{
	    NVMDataArray[1]=0;
    2158:	10 92 42 04 	sts	0x0442, r1
		uart_string("IN nvm task END");
    215c:	8e e1       	ldi	r24, 0x1E	; 30
    215e:	93 e0       	ldi	r25, 0x03	; 3
    2160:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
		PushEventInterface(52,1,NVMDataArray,0);
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	41 e4       	ldi	r20, 0x41	; 65
    2168:	54 e0       	ldi	r21, 0x04	; 4
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	84 e3       	ldi	r24, 0x34	; 52
    2170:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
        NVMProcess=0;
    2174:	10 92 40 04 	sts	0x0440, r1
	    return 0;
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <NVMTask+0x9a>
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <NVMTask+0x9e>
    2180:	82 2f       	mov	r24, r18
    2182:	93 2f       	mov	r25, r19
	}
}
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <StoreNVM>:
static uint8_t NVMProcess;
uint16_t TEMP;
void StoreNVM(Nvm_Id ID, void * ptr,uint8_t ReadorWrite)
{
static uint32_t nnn=0x01020304;
if(NVMProcess==0)
    218a:	90 91 40 04 	lds	r25, 0x0440
    218e:	91 11       	cpse	r25, r1
    2190:	43 c0       	rjmp	.+134    	; 0x2218 <StoreNVM+0x8e>
 {
   TEMP=NVMTask;
    2192:	23 e7       	ldi	r18, 0x73	; 115
    2194:	30 e1       	ldi	r19, 0x10	; 16
    2196:	30 93 d0 05 	sts	0x05D0, r19
    219a:	20 93 cf 05 	sts	0x05CF, r18
   NVMDataArray[0]=2;
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	90 93 41 04 	sts	0x0441, r25
   NVMDataArray[1]=1;
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	90 93 42 04 	sts	0x0442, r25
   NVMDataArray[2]=((uint8_t*)(&TEMP))[0];
    21aa:	ef ec       	ldi	r30, 0xCF	; 207
    21ac:	f5 e0       	ldi	r31, 0x05	; 5
    21ae:	20 93 43 04 	sts	0x0443, r18
   NVMDataArray[3]=((uint8_t*)(&TEMP))[1];
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	90 93 44 04 	sts	0x0444, r25
   TEMP=ptr;
    21b8:	60 93 cf 05 	sts	0x05CF, r22
    21bc:	70 93 d0 05 	sts	0x05D0, r23
   //uart_num(((uint8_t *)TEMP)[0]);
   //uart_num(((uint8_t *)TEMP)[1]);
   NVMDataArray[4]=((uint8_t*)(&TEMP))[0];
    21c0:	60 93 45 04 	sts	0x0445, r22
   NVMDataArray[5]=((uint8_t*)(&TEMP))[1];
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	90 93 46 04 	sts	0x0446, r25
   NVMDataArray[6]=ID;
    21ca:	80 93 47 04 	sts	0x0447, r24
   NVMDataArray[7]=ReadorWrite;
    21ce:	40 93 48 04 	sts	0x0448, r20
   nnn++;
    21d2:	80 91 57 02 	lds	r24, 0x0257
    21d6:	90 91 58 02 	lds	r25, 0x0258
    21da:	a0 91 59 02 	lds	r26, 0x0259
    21de:	b0 91 5a 02 	lds	r27, 0x025A
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	a1 1d       	adc	r26, r1
    21e6:	b1 1d       	adc	r27, r1
    21e8:	80 93 57 02 	sts	0x0257, r24
    21ec:	90 93 58 02 	sts	0x0258, r25
    21f0:	a0 93 59 02 	sts	0x0259, r26
    21f4:	b0 93 5a 02 	sts	0x025A, r27
   uint8_t* extemp;
   extemp=((uint16_t*)(NVMDataArray+4))[0];//((uint16_t)(NVMDataArray[5]<<8)|NVMDataArray[4]);//0x0257;//(((uint16_t*) NVMDataArray[4])[0]);
   uart_string("data\n");
    21f8:	8e e2       	ldi	r24, 0x2E	; 46
    21fa:	93 e0       	ldi	r25, 0x03	; 3
    21fc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
	/*	uart_num(extemp[0]);
		uart_num(extemp[1]);
		uart_num(extemp[2]);
		uart_num(extemp[3]);*/
   PushEventInterface(52,1,NVMDataArray,0);	
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	41 e4       	ldi	r20, 0x41	; 65
    2204:	54 e0       	ldi	r21, 0x04	; 4
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	84 e3       	ldi	r24, 0x34	; 52
    220c:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
   uart_string("here");
    2210:	84 e3       	ldi	r24, 0x34	; 52
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
    2218:	08 95       	ret

0000221a <NvmReadSync>:
	}
}


uint8_t NvmReadSync(Nvm_Id ID, void * ptr)
{
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	9b 01       	movw	r18, r22
	static uint8_t WriteState;
	uint8_t restate=1;
    NvmPopulateWriteSize(Nvm_Table_t[ID].Nvm_Size,Nvm_Table_t[ID].Id,1,ptr);
    2220:	c8 2f       	mov	r28, r24
    2222:	d0 e0       	ldi	r29, 0x00	; 0
    2224:	cc 0f       	add	r28, r28
    2226:	dd 1f       	adc	r29, r29
    2228:	c3 5d       	subi	r28, 0xD3	; 211
    222a:	da 4f       	sbci	r29, 0xFA	; 250
    222c:	68 81       	ld	r22, Y
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 af 08 	call	0x115e	; 0x115e <NvmPopulateWriteSize>
	uart_num((Nvm_Table_t[ID].Id+Nvm_Table_t[ID].Nvm_Size));	
    223c:	28 81       	ld	r18, Y
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	82 0f       	add	r24, r18
    2244:	91 1d       	adc	r25, r1
    2246:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
	uart_string("done\n");
    224a:	89 e3       	ldi	r24, 0x39	; 57
    224c:	93 e0       	ldi	r25, 0x03	; 3
    224e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
	SwitchNvmOn();	
    2252:	0e 94 ce 08 	call	0x119c	; 0x119c <SwitchNvmOn>
	while(GetNVMState()==0)		
	WriteState=1;
    2256:	c1 e0       	ldi	r28, 0x01	; 1
	uint8_t restate=1;
    NvmPopulateWriteSize(Nvm_Table_t[ID].Nvm_Size,Nvm_Table_t[ID].Id,1,ptr);
	uart_num((Nvm_Table_t[ID].Id+Nvm_Table_t[ID].Nvm_Size));	
	uart_string("done\n");
	SwitchNvmOn();	
	while(GetNVMState()==0)		
    2258:	02 c0       	rjmp	.+4      	; 0x225e <NvmReadSync+0x44>
	WriteState=1;
    225a:	c0 93 49 04 	sts	0x0449, r28
	uint8_t restate=1;
    NvmPopulateWriteSize(Nvm_Table_t[ID].Nvm_Size,Nvm_Table_t[ID].Id,1,ptr);
	uart_num((Nvm_Table_t[ID].Id+Nvm_Table_t[ID].Nvm_Size));	
	uart_string("done\n");
	SwitchNvmOn();	
	while(GetNVMState()==0)		
    225e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <GetNVMState>
    2262:	89 2b       	or	r24, r25
    2264:	d1 f3       	breq	.-12     	; 0x225a <NvmReadSync+0x40>
	WriteState=1;
	restate=0;
	return restate;
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	08 95       	ret

0000226e <SignalHandlerFunc>:
 *  Author: Nikhil
 */ 
#include "..\OS\EventQ.h"
static uint16_t SignalData[5];
uint16_t SignalHandlerFunc(void *data)
{
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	ec 01       	movw	r28, r24
	uint8_t *ptr=(uint8_t*)data;
	uint16_t reval;
	if(ptr[0]==0)
    2274:	28 81       	ld	r18, Y
    2276:	21 11       	cpse	r18, r1
    2278:	21 c0       	rjmp	.+66     	; 0x22bc <SignalHandlerFunc+0x4e>
	{
		
		if(((uint8_t*)&SignalData[ptr[1]])[1]==2)
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	fc 01       	movw	r30, r24
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	e6 5b       	subi	r30, 0xB6	; 182
    2286:	fb 4f       	sbci	r31, 0xFB	; 251
    2288:	21 81       	ldd	r18, Z+1	; 0x01
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	21 f4       	brne	.+8      	; 0x2296 <SignalHandlerFunc+0x28>
		{
			reval= SignalData[ptr[1]];
    228e:	40 81       	ld	r20, Z
    2290:	32 2f       	mov	r19, r18
			((uint8_t*)&SignalData[ptr[1]])[1]=0;
    2292:	11 82       	std	Z+1, r1	; 0x01
    2294:	25 c0       	rjmp	.+74     	; 0x22e0 <SignalHandlerFunc+0x72>
		}
		else 
		{
			PushEventInterface(50,SignalHandlerFunc,0,ptr[2]);
    2296:	2a 81       	ldd	r18, Y+2	; 0x02
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	67 e3       	ldi	r22, 0x37	; 55
    229e:	71 e1       	ldi	r23, 0x11	; 17
    22a0:	82 e3       	ldi	r24, 0x32	; 50
    22a2:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
			reval= SignalData[ptr[1]];
    22a6:	e9 81       	ldd	r30, Y+1	; 0x01
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	e6 5b       	subi	r30, 0xB6	; 182
    22b0:	fb 4f       	sbci	r31, 0xFB	; 251
    22b2:	40 81       	ld	r20, Z
    22b4:	31 81       	ldd	r19, Z+1	; 0x01
			((uint8_t*)&SignalData[ptr[1]])[1]=1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	81 83       	std	Z+1, r24	; 0x01
    22ba:	12 c0       	rjmp	.+36     	; 0x22e0 <SignalHandlerFunc+0x72>
		}
	}
	else if(ptr[0]==1)
    22bc:	21 30       	cpi	r18, 0x01	; 1
    22be:	81 f4       	brne	.+32     	; 0x22e0 <SignalHandlerFunc+0x72>
	{
		((uint8_t*)&SignalData[ptr[1]])[0]=ptr[2];
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	e6 5b       	subi	r30, 0xB6	; 182
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	80 83       	st	Z, r24
		((uint8_t*)&SignalData[ptr[1]])[1]=2;
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	e6 5b       	subi	r30, 0xB6	; 182
    22da:	fb 4f       	sbci	r31, 0xFB	; 251
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	81 83       	std	Z+1, r24	; 0x01
		//uart_string("here");
	}
	
	return reval;
    22e0:	84 2f       	mov	r24, r20
    22e2:	93 2f       	mov	r25, r19
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <PushIntoSSDCircularBuffer>:
	y                      \
};

circularbuffSSD(CircularBufferSSD,21);                    
CbuffState_t PushIntoSSDCircularBuffer(SSDbuff_t* CircularBuffer,SSDdata data)
{
    22ea:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	28 2f       	mov	r18, r24
    22f0:	2f 5f       	subi	r18, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    22f2:	94 81       	ldd	r25, Z+4	; 0x04
    22f4:	29 17       	cp	r18, r25
    22f6:	08 f0       	brcs	.+2      	; 0x22fa <PushIntoSSDCircularBuffer+0x10>
	{
		next=0;
    22f8:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    22fa:	93 81       	ldd	r25, Z+3	; 0x03
    22fc:	92 17       	cp	r25, r18
    22fe:	81 f0       	breq	.+32     	; 0x2320 <PushIntoSSDCircularBuffer+0x36>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	dc 01       	movw	r26, r24
    2304:	aa 0f       	add	r26, r26
    2306:	bb 1f       	adc	r27, r27
    2308:	8a 0f       	add	r24, r26
    230a:	9b 1f       	adc	r25, r27
    230c:	a0 81       	ld	r26, Z
    230e:	b1 81       	ldd	r27, Z+1	; 0x01
    2310:	a8 0f       	add	r26, r24
    2312:	b9 1f       	adc	r27, r25
    2314:	4d 93       	st	X+, r20
    2316:	5d 93       	st	X+, r21
    2318:	6c 93       	st	X, r22
		CircularBuffer->head=next;
    231a:	22 83       	std	Z+2, r18	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
    2320:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
    2322:	08 95       	ret

00002324 <PopFromSSDCircularBuffer>:

CbuffState_t PopFromSSDCircularBuffer(SSDbuff_t  *CircularBuffer,SSDdata *data)
{
    2324:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
    2326:	83 81       	ldd	r24, Z+3	; 0x03
    2328:	58 2f       	mov	r21, r24
    232a:	5f 5f       	subi	r21, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    232c:	92 81       	ldd	r25, Z+2	; 0x02
    232e:	89 17       	cp	r24, r25
    2330:	c1 f0       	breq	.+48     	; 0x2362 <PopFromSSDCircularBuffer+0x3e>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    2332:	94 81       	ldd	r25, Z+4	; 0x04
    2334:	59 17       	cp	r21, r25
    2336:	08 f0       	brcs	.+2      	; 0x233a <PopFromSSDCircularBuffer+0x16>
	{
		next=0;
    2338:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	dc 01       	movw	r26, r24
    233e:	aa 0f       	add	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	8a 0f       	add	r24, r26
    2344:	9b 1f       	adc	r25, r27
    2346:	a0 81       	ld	r26, Z
    2348:	b1 81       	ldd	r27, Z+1	; 0x01
    234a:	a8 0f       	add	r26, r24
    234c:	b9 1f       	adc	r27, r25
    234e:	2d 91       	ld	r18, X+
    2350:	3d 91       	ld	r19, X+
    2352:	4c 91       	ld	r20, X
    2354:	db 01       	movw	r26, r22
    2356:	2d 93       	st	X+, r18
    2358:	3d 93       	st	X+, r19
    235a:	4c 93       	st	X, r20
	CircularBuffer->tail=next;
    235c:	53 83       	std	Z+3, r21	; 0x03
	
	return BuffOk;
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	08 95       	ret
CbuffState_t PopFromSSDCircularBuffer(SSDbuff_t  *CircularBuffer,SSDdata *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
    2362:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	
	return BuffOk;
}
    2364:	08 95       	ret

00002366 <PopulateSSDbuffer>:
	}
	return BuffOk;
}

uint8_t PopulateSSDbuffer(unsigned char* SSDstring,uint8_t x,uint8_t y)
{
    2366:	1f 93       	push	r17
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
	SSDdata SSDdataMediator;
	uint8_t SSDlen;
	SSDlen=strlen(SSDstring)-1;
	SSDdataMediator.SSDx=x;
    236c:	56 2f       	mov	r21, r22
	SSDdataMediator.SSDy=y;
    236e:	64 2f       	mov	r22, r20

	while(*SSDstring)	
    2370:	fc 01       	movw	r30, r24
    2372:	40 81       	ld	r20, Z
    2374:	44 23       	and	r20, r20
    2376:	61 f0       	breq	.+24     	; 0x2390 <PopulateSSDbuffer+0x2a>
		return BuffEmpty;
	}
	return BuffOk;
}

uint8_t PopulateSSDbuffer(unsigned char* SSDstring,uint8_t x,uint8_t y)
    2378:	ec 01       	movw	r28, r24
    237a:	21 96       	adiw	r28, 0x01	; 1
	while(*SSDstring)	
	{
		//uart_char(*SSDstring);
		SSDdataMediator.SSDchar=*SSDstring++;
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
		SSDdataMediator.SSDx=0;
    237c:	10 e0       	ldi	r17, 0x00	; 0

	while(*SSDstring)	
	{
		//uart_char(*SSDstring);
		SSDdataMediator.SSDchar=*SSDstring++;
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
    237e:	8f e5       	ldi	r24, 0x5F	; 95
    2380:	92 e0       	ldi	r25, 0x02	; 2
    2382:	0e 94 75 11 	call	0x22ea	; 0x22ea <PushIntoSSDCircularBuffer>
		SSDdataMediator.SSDx=0;
    2386:	51 2f       	mov	r21, r17
		SSDdataMediator.SSDy=0;
    2388:	61 2f       	mov	r22, r17
	uint8_t SSDlen;
	SSDlen=strlen(SSDstring)-1;
	SSDdataMediator.SSDx=x;
	SSDdataMediator.SSDy=y;

	while(*SSDstring)	
    238a:	49 91       	ld	r20, Y+
    238c:	41 11       	cpse	r20, r1
    238e:	f7 cf       	rjmp	.-18     	; 0x237e <PopulateSSDbuffer+0x18>
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
		SSDdataMediator.SSDx=0;
		SSDdataMediator.SSDy=0;
	}
	return 1;
}
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	08 95       	ret

0000239a <PopulateSSDbufferChar>:
uint8_t PopulateSSDbufferChar(unsigned char SSDChar,uint8_t x,uint8_t y)
{
    239a:	56 2f       	mov	r21, r22
    239c:	64 2f       	mov	r22, r20
	SSDdata SSDdataMediator;
	SSDdataMediator.SSDx=x;
	SSDdataMediator.SSDy=y;
	SSDdataMediator.SSDchar=SSDChar;	
	PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
    239e:	48 2f       	mov	r20, r24
    23a0:	8f e5       	ldi	r24, 0x5F	; 95
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	0e 94 75 11 	call	0x22ea	; 0x22ea <PushIntoSSDCircularBuffer>
	return 1;
}
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	08 95       	ret

000023ac <PopSSDinterface>:
CbuffState_t PopSSDinterface(SSDdata *SSDdataPara)
{
	return (PopFromSSDCircularBuffer(&CircularBufferSSD,SSDdataPara));
    23ac:	bc 01       	movw	r22, r24
    23ae:	8f e5       	ldi	r24, 0x5F	; 95
    23b0:	92 e0       	ldi	r25, 0x02	; 2
    23b2:	0e 94 92 11 	call	0x2324	; 0x2324 <PopFromSSDCircularBuffer>
}
    23b6:	08 95       	ret

000023b8 <DataTransmit>:

circularbuffOut(CircularBufferOut,100);
void DataTransmit()
{
	static unsigned char data='&';
	if(CheckUartReadyToSend()==0 && PopFromCircularBuffer(&CircularBufferOut,&data)==BuffOk)
    23b8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <CheckUartReadyToSend>
    23bc:	81 11       	cpse	r24, r1
    23be:	0c c0       	rjmp	.+24     	; 0x23d8 <DataTransmit+0x20>
    23c0:	69 e6       	ldi	r22, 0x69	; 105
    23c2:	72 e0       	ldi	r23, 0x02	; 2
    23c4:	84 e6       	ldi	r24, 0x64	; 100
    23c6:	92 e0       	ldi	r25, 0x02	; 2
    23c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <PopFromCircularBuffer>
    23cc:	81 11       	cpse	r24, r1
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <DataTransmit+0x20>
	{    

			//UDR=data;
		SendByte(data);
    23d0:	80 91 69 02 	lds	r24, 0x0269
    23d4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SendByte>
    23d8:	08 95       	ret

000023da <FillUartBuffer>:
	}

}

void FillUartBuffer(unsigned char *Uchar)
{
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
	
	while(*Uchar)
    23de:	fc 01       	movw	r30, r24
    23e0:	60 81       	ld	r22, Z
    23e2:	66 23       	and	r22, r22
    23e4:	49 f0       	breq	.+18     	; 0x23f8 <FillUartBuffer+0x1e>

	}

}

void FillUartBuffer(unsigned char *Uchar)
    23e6:	ec 01       	movw	r28, r24
    23e8:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*Uchar)
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
    23ea:	84 e6       	ldi	r24, 0x64	; 100
    23ec:	92 e0       	ldi	r25, 0x02	; 2
    23ee:	0e 94 3a 06 	call	0xc74	; 0xc74 <PushIntoCircularBuffer>
}

void FillUartBuffer(unsigned char *Uchar)
{
	
	while(*Uchar)
    23f2:	69 91       	ld	r22, Y+
    23f4:	61 11       	cpse	r22, r1
    23f6:	f9 cf       	rjmp	.-14     	; 0x23ea <FillUartBuffer+0x10>
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
	}
	
}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <FillUartBufferSiglechar>:
void FillUartBufferSiglechar(char Uchar)
{
	PushIntoCircularBuffer(&CircularBufferOut,Uchar);	
    23fe:	68 2f       	mov	r22, r24
    2400:	84 e6       	ldi	r24, 0x64	; 100
    2402:	92 e0       	ldi	r25, 0x02	; 2
    2404:	0e 94 3a 06 	call	0xc74	; 0xc74 <PushIntoCircularBuffer>
    2408:	08 95       	ret

0000240a <TransmitBufferEmpty>:
}
void TransmitBufferEmpty()
{
	if(IsBuffempty(&CircularBufferOut)==BuffOk)
    240a:	84 e6       	ldi	r24, 0x64	; 100
    240c:	92 e0       	ldi	r25, 0x02	; 2
    240e:	0e 94 66 06 	call	0xccc	; 0xccc <IsBuffempty>
    2412:	81 11       	cpse	r24, r1
    2414:	08 c0       	rjmp	.+16     	; 0x2426 <TransmitBufferEmpty+0x1c>
	{

		PushEventInterface(3,DataTransmit,0,0);
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	6c ed       	ldi	r22, 0xDC	; 220
    241e:	71 e1       	ldi	r23, 0x11	; 17
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    2426:	08 95       	ret

00002428 <create>:
circularbuffevent(CircularBufferEvent,15);
//
/* Create an empty queue */
void create()
{
front = rear = NULL;
    2428:	10 92 b9 04 	sts	0x04B9, r1
    242c:	10 92 b8 04 	sts	0x04B8, r1
    2430:	10 92 bb 04 	sts	0x04BB, r1
    2434:	10 92 ba 04 	sts	0x04BA, r1
    2438:	08 95       	ret

0000243a <countSize>:
}

uint8_t countSize()
{
	return count;
}
    243a:	80 91 bc 04 	lds	r24, 0x04BC
    243e:	08 95       	ret

00002440 <PushIntoCircularEventBuffer>:

ebuffState_t PushIntoCircularEventBuffer(ebuff_t* CircularBuffer,struct EventQ data)
{
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	00 d0       	rcall	.+0      	; 0x2446 <PushIntoCircularEventBuffer+0x6>
    2446:	00 d0       	rcall	.+0      	; 0x2448 <PushIntoCircularEventBuffer+0x8>
    2448:	00 d0       	rcall	.+0      	; 0x244a <PushIntoCircularEventBuffer+0xa>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	29 83       	std	Y+1, r18	; 0x01
    2450:	3a 83       	std	Y+2, r19	; 0x02
    2452:	4b 83       	std	Y+3, r20	; 0x03
    2454:	5c 83       	std	Y+4, r21	; 0x04
    2456:	6d 83       	std	Y+5, r22	; 0x05
    2458:	7e 83       	std	Y+6, r23	; 0x06
	uint8_t next=CircularBuffer->head+1;
    245a:	fc 01       	movw	r30, r24
    245c:	22 81       	ldd	r18, Z+2	; 0x02
    245e:	42 2f       	mov	r20, r18
    2460:	4f 5f       	subi	r20, 0xFF	; 255
	ebuffState_t ReturnVal=eBuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    2462:	34 81       	ldd	r19, Z+4	; 0x04
    2464:	43 17       	cp	r20, r19
    2466:	08 f0       	brcs	.+2      	; 0x246a <PushIntoCircularEventBuffer+0x2a>
	{
		next=0;
    2468:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    246a:	fc 01       	movw	r30, r24
    246c:	33 81       	ldd	r19, Z+3	; 0x03
    246e:	34 17       	cp	r19, r20
    2470:	b9 f0       	breq	.+46     	; 0x24a0 <PushIntoCircularEventBuffer+0x60>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	d9 01       	movw	r26, r18
    2476:	aa 0f       	add	r26, r26
    2478:	bb 1f       	adc	r27, r27
    247a:	2a 0f       	add	r18, r26
    247c:	3b 1f       	adc	r19, r27
    247e:	22 0f       	add	r18, r18
    2480:	33 1f       	adc	r19, r19
    2482:	a0 81       	ld	r26, Z
    2484:	b1 81       	ldd	r27, Z+1	; 0x01
    2486:	a2 0f       	add	r26, r18
    2488:	b3 1f       	adc	r27, r19
    248a:	26 e0       	ldi	r18, 0x06	; 6
    248c:	fe 01       	movw	r30, r28
    248e:	31 96       	adiw	r30, 0x01	; 1
    2490:	01 90       	ld	r0, Z+
    2492:	0d 92       	st	X+, r0
    2494:	2a 95       	dec	r18
    2496:	e1 f7       	brne	.-8      	; 0x2490 <PushIntoCircularEventBuffer+0x50>
		CircularBuffer->head=next;
    2498:	fc 01       	movw	r30, r24
    249a:	42 83       	std	Z+2, r20	; 0x02
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <PushIntoCircularEventBuffer+0x62>
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return eBuffFull;
    24a0:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
}
    24a2:	26 96       	adiw	r28, 0x06	; 6
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	08 95       	ret

000024b4 <PopFromCircularEventBuffer>:

ebuffState_t PopFromCircularEventBuffer(ebuff_t  *CircularBuffer,struct EventQ *data)
{
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
	//cli();
	uint8_t next=CircularBuffer->tail+1;
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	28 2f       	mov	r18, r24
    24be:	2f 5f       	subi	r18, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	89 17       	cp	r24, r25
    24c4:	c9 f0       	breq	.+50     	; 0x24f8 <PopFromCircularEventBuffer+0x44>
	{
		return eBuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	29 17       	cp	r18, r25
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <PopFromCircularEventBuffer+0x1a>
	{
		next=0;
    24cc:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	fc 01       	movw	r30, r24
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	8e 0f       	add	r24, r30
    24d8:	9f 1f       	adc	r25, r31
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	e8 81       	ld	r30, Y
    24e0:	f9 81       	ldd	r31, Y+1	; 0x01
    24e2:	e8 0f       	add	r30, r24
    24e4:	f9 1f       	adc	r31, r25
    24e6:	86 e0       	ldi	r24, 0x06	; 6
    24e8:	db 01       	movw	r26, r22
    24ea:	01 90       	ld	r0, Z+
    24ec:	0d 92       	st	X+, r0
    24ee:	8a 95       	dec	r24
    24f0:	e1 f7       	brne	.-8      	; 0x24ea <PopFromCircularEventBuffer+0x36>
	CircularBuffer->tail=next;
    24f2:	2b 83       	std	Y+3, r18	; 0x03
	//sei();
	return eBuffOk;
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <PopFromCircularEventBuffer+0x46>
{
	//cli();
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return eBuffEmpty;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	//sei();
	return eBuffOk;
}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	08 95       	ret

00002500 <PushEventInterface>:
	return eBuffOk;
}


void PushEventInterface(uint8_t eventid,uint16_t  (*EventFuncarg)(void),void *func,uint8_t dataid)
{
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	00 d0       	rcall	.+0      	; 0x2506 <PushEventInterface+0x6>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <PushEventInterface+0x8>
    2508:	00 d0       	rcall	.+0      	; 0x250a <PushEventInterface+0xa>
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	92 2f       	mov	r25, r18
	cli();
    2510:	f8 94       	cli
	struct EventQ data;
	data.EventFunction=EventFuncarg;
    2512:	26 2f       	mov	r18, r22
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
	data.EventId=eventid;
    2518:	8c 83       	std	Y+4, r24	; 0x04
	data.ptr=func;
    251a:	64 2f       	mov	r22, r20
    251c:	4d 83       	std	Y+5, r20	; 0x05
    251e:	5e 83       	std	Y+6, r21	; 0x06
	data.State=dataid;
    2520:	9b 83       	std	Y+3, r25	; 0x03
	PushIntoCircularEventBuffer(&CircularBufferEvent,data);
    2522:	37 2f       	mov	r19, r23
    2524:	49 2f       	mov	r20, r25
    2526:	58 2f       	mov	r21, r24
    2528:	7e 81       	ldd	r23, Y+6	; 0x06
    252a:	8a e6       	ldi	r24, 0x6A	; 106
    252c:	92 e0       	ldi	r25, 0x02	; 2
    252e:	0e 94 20 12 	call	0x2440	; 0x2440 <PushIntoCircularEventBuffer>
	sei();
    2532:	78 94       	sei
}
    2534:	26 96       	adiw	r28, 0x06	; 6
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <PopEventInterface>:

ebuffState_t PopEventInterface(struct EventQ *e)
{
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	00 d0       	rcall	.+0      	; 0x2550 <PopEventInterface+0xa>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <PopEventInterface+0xc>
    2552:	00 d0       	rcall	.+0      	; 0x2554 <PopEventInterface+0xe>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	8c 01       	movw	r16, r24
    struct EventQ data;
	if(PopFromCircularEventBuffer(&CircularBufferEvent,&data)==eBuffOk)
    255a:	be 01       	movw	r22, r28
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8a e6       	ldi	r24, 0x6A	; 106
    2562:	92 e0       	ldi	r25, 0x02	; 2
    2564:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <PopFromCircularEventBuffer>
    2568:	81 11       	cpse	r24, r1
    256a:	0a c0       	rjmp	.+20     	; 0x2580 <PopEventInterface+0x3a>
	{
		*e=data;
    256c:	86 e0       	ldi	r24, 0x06	; 6
    256e:	fe 01       	movw	r30, r28
    2570:	31 96       	adiw	r30, 0x01	; 1
    2572:	d8 01       	movw	r26, r16
    2574:	01 90       	ld	r0, Z+
    2576:	0d 92       	st	X+, r0
    2578:	8a 95       	dec	r24
    257a:	e1 f7       	brne	.-8      	; 0x2574 <PopEventInterface+0x2e>
		return eBuffOk;
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <PopEventInterface+0x3c>
	}
	return eBuffEmpty;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	26 96       	adiw	r28, 0x06	; 6
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	08 95       	ret

00002598 <__vector_16>:


//ISR(TIMER0_COMP_vect) {
static volatile uint8_t pin_timeout=1;
static volatile uint8_t TimeCount;
ISR(TIMER0_OVF_vect){
    2598:	1f 92       	push	r1
    259a:	0f 92       	push	r0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	0f 92       	push	r0
    25a0:	11 24       	eor	r1, r1
    25a2:	8f 93       	push	r24
    25a4:	9f 93       	push	r25
    25a6:	af 93       	push	r26
    25a8:	bf 93       	push	r27
	static uint32_t counter5ms=0;
	if(counter5ms==1)
    25aa:	80 91 be 04 	lds	r24, 0x04BE
    25ae:	90 91 bf 04 	lds	r25, 0x04BF
    25b2:	a0 91 c0 04 	lds	r26, 0x04C0
    25b6:	b0 91 c1 04 	lds	r27, 0x04C1
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	a1 05       	cpc	r26, r1
    25be:	b1 05       	cpc	r27, r1
    25c0:	69 f4       	brne	.+26     	; 0x25dc <__vector_16+0x44>
	{   
		TimeCount++;
    25c2:	80 91 bd 04 	lds	r24, 0x04BD
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	80 93 bd 04 	sts	0x04BD, r24
		counter5ms=0;
    25cc:	10 92 be 04 	sts	0x04BE, r1
    25d0:	10 92 bf 04 	sts	0x04BF, r1
    25d4:	10 92 c0 04 	sts	0x04C0, r1
    25d8:	10 92 c1 04 	sts	0x04C1, r1
		

	}
	//TCNT0=70;
	TCNT0=0;
    25dc:	16 bc       	out	0x26, r1	; 38
	counter5ms++;
    25de:	80 91 be 04 	lds	r24, 0x04BE
    25e2:	90 91 bf 04 	lds	r25, 0x04BF
    25e6:	a0 91 c0 04 	lds	r26, 0x04C0
    25ea:	b0 91 c1 04 	lds	r27, 0x04C1
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	a1 1d       	adc	r26, r1
    25f2:	b1 1d       	adc	r27, r1
    25f4:	80 93 be 04 	sts	0x04BE, r24
    25f8:	90 93 bf 04 	sts	0x04BF, r25
    25fc:	a0 93 c0 04 	sts	0x04C0, r26
    2600:	b0 93 c1 04 	sts	0x04C1, r27

}
    2604:	bf 91       	pop	r27
    2606:	af 91       	pop	r26
    2608:	9f 91       	pop	r25
    260a:	8f 91       	pop	r24
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	0f 90       	pop	r0
    2612:	1f 90       	pop	r1
    2614:	18 95       	reti

00002616 <set_timer>:
void set_timer(uint16_t enable)
{
	//PORTB|=x;
	if(enable==1)
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	29 f4       	brne	.+10     	; 0x2624 <set_timer+0xe>
	{
		TIMSK0|=(1<<TOIE0);
    261a:	ee e6       	ldi	r30, 0x6E	; 110
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	81 60       	ori	r24, 0x01	; 1
    2622:	80 83       	st	Z, r24
    2624:	08 95       	ret

00002626 <main>:
   // event=0;
	uint16_t tmp;
	uint16_t Limitflag=0;
	//
    
	ExtIntInit();
    2626:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ExtIntInit>
	//
	//
	DDRC=0x00;
    262a:	17 b8       	out	0x07, r1	; 7
	//PinOutConfig(PIN_OUT1);
	DDRD=0b11111011;					// set pd2 as input for int
    262c:	8b ef       	ldi	r24, 0xFB	; 251
    262e:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PIND2);	
    2630:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PIND3);				// Port C lower nibble initialization as high (Pull-up mode)
    2632:	5b 9a       	sbi	0x0b, 3	; 11
	//uart_string("I am working.");
	sei();
    2634:	78 94       	sei
	// enable timer overflow interrupt for Timer0
	TIMSK0|=(1<<TOIE0);
    2636:	ee e6       	ldi	r30, 0x6E	; 110
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	81 60       	ori	r24, 0x01	; 1
    263e:	80 83       	st	Z, r24
	// set timer0 counter initial value to 0
	TCNT0=70;//255-(clock_freq/1000000);
    2640:	86 e4       	ldi	r24, 0x46	; 70
    2642:	86 bd       	out	0x26, r24	; 38
	// start timer0 with / prescaler 78 Hz
	TCCR0B = (1<<CS01)|(1<<CS00);
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	85 bd       	out	0x25, r24	; 37

uart_init();
    2648:	0e 94 3f 0b 	call	0x167e	; 0x167e <uart_init>
	adc_init();				//initialization of UART
    264c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adc_init>
	create();
    2650:	0e 94 14 12 	call	0x2428	; 0x2428 <create>
    uart_string("working");
    2654:	8f e3       	ldi	r24, 0x3F	; 63
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
	// enable interrupts
	//sei();
	//pin
	set_timer(1);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 0b 13 	call	0x2616	; 0x2616 <set_timer>
	PCICR |=(1<<PCIE0);
    2664:	e8 e6       	ldi	r30, 0x68	; 104
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	81 60       	ori	r24, 0x01	; 1
    266c:	80 83       	st	Z, r24
	PCMSK0 |=(1<<PCINT0);
    266e:	eb e6       	ldi	r30, 0x6B	; 107
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	81 60       	ori	r24, 0x01	; 1
    2676:	80 83       	st	Z, r24
	//uart_string(testev2->ptr);
	//AddEvent((uint8_t *)str,0);
	//AddEvent((uint8_t *)str,1);
	//AddEvent((uint8_t *)str1,2);
	//PrintEvents();
								e.EventId=1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 81 06 	sts	0x0681, r24
								e.EventFunction=tasks;
    267e:	89 e1       	ldi	r24, 0x19	; 25
    2680:	9d e1       	ldi	r25, 0x1D	; 29
    2682:	90 93 7f 06 	sts	0x067F, r25
    2686:	80 93 7e 06 	sts	0x067E, r24
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
	   {
		   if(e.EventFunction!=0)
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    268a:	c1 e8       	ldi	r28, 0x81	; 129
    268c:	d6 e0       	ldi	r29, 0x06	; 6
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
				  if(e.EventId==52)
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    268e:	02 e8       	ldi	r16, 0x82	; 130
    2690:	16 e0       	ldi	r17, 0x06	; 6
	//PrintEvents();
								e.EventId=1;
								e.EventFunction=tasks;
	while(1)
	{
		if(TimeCount==1)
    2692:	80 91 bd 04 	lds	r24, 0x04BD
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	b9 f4       	brne	.+46     	; 0x26c8 <main+0xa2>
		{
			static uint8_t odd=1;
			odd++;
    269a:	80 91 6f 02 	lds	r24, 0x026F
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	80 93 6f 02 	sts	0x026F, r24
		   PushEventInterface(1,tasks,0,0);
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	69 e1       	ldi	r22, 0x19	; 25
    26ac:	7d e1       	ldi	r23, 0x1D	; 29
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
		   PushEventInterface(2,NonPeriodicTaskFuncCall,0,0);
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	65 e7       	ldi	r22, 0x75	; 117
    26bc:	7d e1       	ldi	r23, 0x1D	; 29
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
           TimeCount=0;
    26c4:	10 92 bd 04 	sts	0x04BD, r1
		}
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
    26c8:	8e e7       	ldi	r24, 0x7E	; 126
    26ca:	96 e0       	ldi	r25, 0x06	; 6
    26cc:	0e 94 a3 12 	call	0x2546	; 0x2546 <PopEventInterface>
    26d0:	81 11       	cpse	r24, r1
    26d2:	3f c0       	rjmp	.+126    	; 0x2752 <main+0x12c>
	   {
		   if(e.EventFunction!=0)
    26d4:	60 91 7e 06 	lds	r22, 0x067E
    26d8:	70 91 7f 06 	lds	r23, 0x067F
    26dc:	61 15       	cp	r22, r1
    26de:	71 05       	cpc	r23, r1
    26e0:	c1 f1       	breq	.+112    	; 0x2752 <main+0x12c>
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    26e2:	98 81       	ld	r25, Y
    26e4:	89 2f       	mov	r24, r25
    26e6:	8d 57       	subi	r24, 0x7D	; 125
    26e8:	8b 34       	cpi	r24, 0x4B	; 75
    26ea:	80 f4       	brcc	.+32     	; 0x270c <main+0xe6>
		   {
			   if(e.EventId<175)
    26ec:	9f 3a       	cpi	r25, 0xAF	; 175
    26ee:	48 f4       	brcc	.+18     	; 0x2702 <main+0xdc>
			   {
			   callbackgetFunction(e.EventId-125)(e.EventFunction);		
    26f0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <callbackgetFunction>
    26f4:	fc 01       	movw	r30, r24
    26f6:	80 91 7e 06 	lds	r24, 0x067E
    26fa:	90 91 7f 06 	lds	r25, 0x067F
    26fe:	09 95       	icall
    2700:	28 c0       	rjmp	.+80     	; 0x2752 <main+0x12c>
			   }
			   else
			   {
				 callbackSetFunction(e.EventId-173,e.EventFunction);  
    2702:	89 2f       	mov	r24, r25
    2704:	8d 5a       	subi	r24, 0xAD	; 173
    2706:	0e 94 df 13 	call	0x27be	; 0x27be <callbackSetFunction>
    270a:	23 c0       	rjmp	.+70     	; 0x2752 <main+0x12c>
			   }
		   }
		   else
		   {
			   if(e.EventId>=200)
    270c:	98 3c       	cpi	r25, 0xC8	; 200
    270e:	30 f0       	brcs	.+12     	; 0x271c <main+0xf6>
			   {
				  e.EventFunction(e.ptr); 
    2710:	d8 01       	movw	r26, r16
    2712:	8d 91       	ld	r24, X+
    2714:	9c 91       	ld	r25, X
    2716:	fb 01       	movw	r30, r22
    2718:	09 95       	icall
    271a:	1b c0       	rjmp	.+54     	; 0x2752 <main+0x12c>
			   }
			   else if(e.EventId>=50 && e.EventId<125)
    271c:	89 2f       	mov	r24, r25
    271e:	82 53       	subi	r24, 0x32	; 50
    2720:	8b 34       	cpi	r24, 0x4B	; 75
    2722:	98 f4       	brcc	.+38     	; 0x274a <main+0x124>
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <callbackgetFunction>
    272a:	fc 01       	movw	r30, r24
    272c:	80 e8       	ldi	r24, 0x80	; 128
    272e:	96 e0       	ldi	r25, 0x06	; 6
    2730:	09 95       	icall
				  if(e.EventId==52)
    2732:	88 81       	ld	r24, Y
    2734:	84 33       	cpi	r24, 0x34	; 52
    2736:	69 f4       	brne	.+26     	; 0x2752 <main+0x12c>
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <callbackgetFunction>
    273e:	fc 01       	movw	r30, r24
    2740:	d8 01       	movw	r26, r16
    2742:	8d 91       	ld	r24, X+
    2744:	9c 91       	ld	r25, X
    2746:	09 95       	icall
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <main+0x12c>
				  }
				  //callbackSetFunction(e.EventId-48,e.EventFunction);
			   }
			   else
			   {
				  e.EventFunction(0); 
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	fb 01       	movw	r30, r22
    2750:	09 95       	icall
			   }
			   
		   }
		   }
	   }
		  if(countSize()>1)
    2752:	0e 94 1d 12 	call	0x243a	; 0x243a <countSize>
		  {
			  
			//OSRR_Events();  
		 }
	if(event ==1 || event ==0)
    2756:	80 91 29 05 	lds	r24, 0x0529
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	21 f0       	breq	.+8      	; 0x2766 <main+0x140>
    275e:	80 91 29 05 	lds	r24, 0x0529
    2762:	81 11       	cpse	r24, r1
    2764:	96 cf       	rjmp	.-212    	; 0x2692 <main+0x6c>
	{
		ApplicationHookUP(&event);
    2766:	89 e2       	ldi	r24, 0x29	; 41
    2768:	95 e0       	ldi	r25, 0x05	; 5
    276a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <ApplicationHookUP>
    276e:	91 cf       	rjmp	.-222    	; 0x2692 <main+0x6c>

00002770 <__vector_3>:
		//uart_string(testev1->ptr);
	}
}

ISR(PCINT0_vect)
{
    2770:	1f 92       	push	r1
    2772:	0f 92       	push	r0
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	0f 92       	push	r0
    2778:	11 24       	eor	r1, r1
    277a:	2f 93       	push	r18
    277c:	3f 93       	push	r19
    277e:	4f 93       	push	r20
    2780:	5f 93       	push	r21
    2782:	6f 93       	push	r22
    2784:	7f 93       	push	r23
    2786:	8f 93       	push	r24
    2788:	9f 93       	push	r25
    278a:	af 93       	push	r26
    278c:	bf 93       	push	r27
    278e:	ef 93       	push	r30
    2790:	ff 93       	push	r31
				PinOutput(1,PIN_OUT7,D);
    2792:	42 e0       	ldi	r20, 0x02	; 2
    2794:	66 e0       	ldi	r22, 0x06	; 6
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
				//_delay_ms(2000);
    279c:	ff 91       	pop	r31
    279e:	ef 91       	pop	r30
    27a0:	bf 91       	pop	r27
    27a2:	af 91       	pop	r26
    27a4:	9f 91       	pop	r25
    27a6:	8f 91       	pop	r24
    27a8:	7f 91       	pop	r23
    27aa:	6f 91       	pop	r22
    27ac:	5f 91       	pop	r21
    27ae:	4f 91       	pop	r20
    27b0:	3f 91       	pop	r19
    27b2:	2f 91       	pop	r18
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	0f 90       	pop	r0
    27ba:	1f 90       	pop	r1
    27bc:	18 95       	reti

000027be <callbackSetFunction>:
 */ 
#include "OSRR.h"
callbackarrayfuc callbackarray[10];
void callbackSetFunction(uint8_t pos,callbackarrayfuc arg)
{
	callbackarray[pos]=arg;
    27be:	e8 2f       	mov	r30, r24
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	ee 0f       	add	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	ec 57       	subi	r30, 0x7C	; 124
    27c8:	f9 4f       	sbci	r31, 0xF9	; 249
    27ca:	71 83       	std	Z+1, r23	; 0x01
    27cc:	60 83       	st	Z, r22
    27ce:	08 95       	ret

000027d0 <callbackgetFunction>:
}
callbackarrayfuc callbackgetFunction(uint8_t pos)
{
	return callbackarray[pos];
    27d0:	e8 2f       	mov	r30, r24
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	ec 57       	subi	r30, 0x7C	; 124
    27da:	f9 4f       	sbci	r31, 0xF9	; 249
}
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	08 95       	ret

000027e2 <num2CharArray>:
    //}

}

static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	c8 2f       	mov	r28, r24
    27e8:	fb 01       	movw	r30, r22
    unsigned char H=0,T=0,O=0;
    H=num/100;
    27ea:	49 e2       	ldi	r20, 0x29	; 41
    27ec:	84 9f       	mul	r24, r20
    27ee:	41 2d       	mov	r20, r1
    27f0:	11 24       	eor	r1, r1
    27f2:	42 95       	swap	r20
    27f4:	4f 70       	andi	r20, 0x0F	; 15
    T=(num - (H*100))/10;
    27f6:	1c e9       	ldi	r17, 0x9C	; 156
    27f8:	14 03       	mulsu	r17, r20
    27fa:	90 01       	movw	r18, r0
    27fc:	11 24       	eor	r1, r1
    27fe:	c9 01       	movw	r24, r18
    2800:	8c 0f       	add	r24, r28
    2802:	91 1d       	adc	r25, r1
    2804:	6a e0       	ldi	r22, 0x0A	; 10
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__divmodhi4>
    O=(num - (H*100) - (T*10));

    Ustring[0]=(H+48);
    280c:	84 2f       	mov	r24, r20
    280e:	80 5d       	subi	r24, 0xD0	; 208
    2810:	80 83       	st	Z, r24
    Ustring[1]=(T+48);
    2812:	86 2f       	mov	r24, r22
    2814:	80 5d       	subi	r24, 0xD0	; 208
    2816:	81 83       	std	Z+1, r24	; 0x01
static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    unsigned char H=0,T=0,O=0;
    H=num/100;
    T=(num - (H*100))/10;
    O=(num - (H*100) - (T*10));
    2818:	c0 5d       	subi	r28, 0xD0	; 208
    281a:	41 9f       	mul	r20, r17
    281c:	c0 0d       	add	r28, r0
    281e:	11 24       	eor	r1, r1
    2820:	66 0f       	add	r22, r22
    2822:	86 2f       	mov	r24, r22
    2824:	88 0f       	add	r24, r24
    2826:	88 0f       	add	r24, r24
    2828:	68 0f       	add	r22, r24

    Ustring[0]=(H+48);
    Ustring[1]=(T+48);
    Ustring[2]=(O+48);
    282a:	c6 1b       	sub	r28, r22
    282c:	c2 83       	std	Z+2, r28	; 0x02
}
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	08 95       	ret

00002834 <BlinkSelection>:
		break;
	}
	return 0;
}
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	00 d0       	rcall	.+0      	; 0x283a <BlinkSelection+0x6>
    283a:	00 d0       	rcall	.+0      	; 0x283c <BlinkSelection+0x8>
    283c:	00 d0       	rcall	.+0      	; 0x283e <BlinkSelection+0xa>
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	da 01       	movw	r26, r20
	static uint8_t Blinka;
	uint8_t i=0;
	char FillSpace[6];
	while(datstring[i]!='\0')
    2844:	9c 91       	ld	r25, X
    2846:	99 23       	and	r25, r25
    2848:	89 f0       	breq	.+34     	; 0x286c <BlinkSelection+0x38>
	return 0;
}
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
	static uint8_t Blinka;
	uint8_t i=0;
    284a:	90 e0       	ldi	r25, 0x00	; 0
	char FillSpace[6];
	while(datstring[i]!='\0')
	{
		FillSpace[i]=' ';
    284c:	30 e2       	ldi	r19, 0x20	; 32
    284e:	e1 e0       	ldi	r30, 0x01	; 1
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	ec 0f       	add	r30, r28
    2854:	fd 1f       	adc	r31, r29
    2856:	e9 0f       	add	r30, r25
    2858:	f1 1d       	adc	r31, r1
    285a:	30 83       	st	Z, r19
		i++;
    285c:	9f 5f       	subi	r25, 0xFF	; 255
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
	static uint8_t Blinka;
	uint8_t i=0;
	char FillSpace[6];
	while(datstring[i]!='\0')
    285e:	fd 01       	movw	r30, r26
    2860:	e9 0f       	add	r30, r25
    2862:	f1 1d       	adc	r31, r1
    2864:	20 81       	ld	r18, Z
    2866:	21 11       	cpse	r18, r1
    2868:	f2 cf       	rjmp	.-28     	; 0x284e <BlinkSelection+0x1a>
    286a:	01 c0       	rjmp	.+2      	; 0x286e <BlinkSelection+0x3a>
	return 0;
}
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
	static uint8_t Blinka;
	uint8_t i=0;
    286c:	90 e0       	ldi	r25, 0x00	; 0
	while(datstring[i]!='\0')
	{
		FillSpace[i]=' ';
		i++;
	}
	FillSpace[i]='\0';
    286e:	fe 01       	movw	r30, r28
    2870:	e9 0f       	add	r30, r25
    2872:	f1 1d       	adc	r31, r1
    2874:	11 82       	std	Z+1, r1	; 0x01
	if(Blinka==0)
    2876:	90 91 ff 04 	lds	r25, 0x04FF
    287a:	91 11       	cpse	r25, r1
    287c:	0c c0       	rjmp	.+24     	; 0x2896 <BlinkSelection+0x62>
	{
		PopulateSSDbuffer(FillSpace,posx,posy);
    287e:	46 2f       	mov	r20, r22
    2880:	68 2f       	mov	r22, r24
    2882:	ce 01       	movw	r24, r28
    2884:	01 96       	adiw	r24, 0x01	; 1
    2886:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
		Blinka++;
    288a:	80 91 ff 04 	lds	r24, 0x04FF
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	80 93 ff 04 	sts	0x04FF, r24
    2894:	0d c0       	rjmp	.+26     	; 0x28b0 <BlinkSelection+0x7c>
	}
	else
	{
		Blinka++;
    2896:	9f 5f       	subi	r25, 0xFF	; 255
    2898:	90 93 ff 04 	sts	0x04FF, r25
		if(Blinka==50)
    289c:	92 33       	cpi	r25, 0x32	; 50
    289e:	41 f4       	brne	.+16     	; 0x28b0 <BlinkSelection+0x7c>
		{
			PopulateSSDbuffer(datstring,posx,posy);
    28a0:	46 2f       	mov	r20, r22
    28a2:	68 2f       	mov	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
			Blinka=200;
    28aa:	88 ec       	ldi	r24, 0xC8	; 200
    28ac:	80 93 ff 04 	sts	0x04FF, r24
		}
	}

}
    28b0:	26 96       	adiw	r28, 0x06	; 6
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	08 95       	ret

000028c2 <task6>:
{
    static uint8_t CommunicationStates;
    static funPtrDebug fp;
    static uint16_t pointersave;
    uint8_t *length;
    if(EspConnected==1)
    28c2:	20 91 ee 04 	lds	r18, 0x04EE
    28c6:	21 30       	cpi	r18, 0x01	; 1
    28c8:	09 f0       	breq	.+2      	; 0x28cc <task6+0xa>
    28ca:	4a c0       	rjmp	.+148    	; 0x2960 <task6+0x9e>
    {
        switch (CommunicationStates)
    28cc:	20 91 ef 04 	lds	r18, 0x04EF
    28d0:	21 30       	cpi	r18, 0x01	; 1
    28d2:	79 f0       	breq	.+30     	; 0x28f2 <task6+0x30>
    28d4:	30 f0       	brcs	.+12     	; 0x28e2 <task6+0x20>
    28d6:	22 30       	cpi	r18, 0x02	; 2
    28d8:	d1 f0       	breq	.+52     	; 0x290e <task6+0x4c>
    28da:	23 30       	cpi	r18, 0x03	; 3
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <task6+0x1e>
    28de:	40 c0       	rjmp	.+128    	; 0x2960 <task6+0x9e>
    28e0:	28 c0       	rjmp	.+80     	; 0x2932 <task6+0x70>
        {
        case 0:
            if(RequestWait()==ESP_CmdSndOK)
    28e2:	0e 94 83 05 	call	0xb06	; 0xb06 <RequestWait>
    28e6:	81 11       	cpse	r24, r1
    28e8:	3b c0       	rjmp	.+118    	; 0x2960 <task6+0x9e>
            {
                CommunicationStates=1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 ef 04 	sts	0x04EF, r24
    28f0:	37 c0       	rjmp	.+110    	; 0x2960 <task6+0x9e>
            }
            break;
        case 1:
            CheckInput();
    28f2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <CheckInput>
            PushEventInterface(200,DebugHandlerFunc,ESPpop,0);
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	43 ed       	ldi	r20, 0xD3	; 211
    28fa:	55 e0       	ldi	r21, 0x05	; 5
    28fc:	61 e2       	ldi	r22, 0x21	; 33
    28fe:	7f e0       	ldi	r23, 0x0F	; 15
    2900:	88 ec       	ldi	r24, 0xC8	; 200
    2902:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
            //DebugHandlerFunc(ESPpop);
            CommunicationStates=2;
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	80 93 ef 04 	sts	0x04EF, r24
            break;
    290c:	29 c0       	rjmp	.+82     	; 0x2960 <task6+0x9e>
        case 2:
            if(((uint8_t*)callback)[1]==1)
    290e:	fc 01       	movw	r30, r24
    2910:	21 81       	ldd	r18, Z+1	; 0x01
    2912:	21 30       	cpi	r18, 0x01	; 1
    2914:	29 f5       	brne	.+74     	; 0x2960 <task6+0x9e>
            {
                pointersave=callback;
    2916:	90 93 f1 04 	sts	0x04F1, r25
    291a:	80 93 f0 04 	sts	0x04F0, r24
                fp=(funPtrDebug*)(((uint16_t*)(callback+2))[0]);
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	90 93 f3 04 	sts	0x04F3, r25
    2926:	80 93 f2 04 	sts	0x04F2, r24
                CommunicationStates=3;
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	80 93 ef 04 	sts	0x04EF, r24
    2930:	17 c0       	rjmp	.+46     	; 0x2960 <task6+0x9e>
            }
            break;
        case 3:
            length=pointersave;
            if(ESP_CmdSndOK==SendData(((length[6]*3))))
    2932:	e0 91 f0 04 	lds	r30, 0x04F0
    2936:	f0 91 f1 04 	lds	r31, 0x04F1
    293a:	86 81       	ldd	r24, Z+6	; 0x06
    293c:	98 2f       	mov	r25, r24
    293e:	99 0f       	add	r25, r25
    2940:	89 0f       	add	r24, r25
    2942:	0e 94 09 05 	call	0xa12	; 0xa12 <SendData>
    2946:	81 11       	cpse	r24, r1
    2948:	0b c0       	rjmp	.+22     	; 0x2960 <task6+0x9e>
            {
                CommunicationStates=0;
    294a:	10 92 ef 04 	sts	0x04EF, r1
                char val2[4]="255\0";
                fp(pointersave);
    294e:	e0 91 f2 04 	lds	r30, 0x04F2
    2952:	f0 91 f3 04 	lds	r31, 0x04F3
    2956:	80 91 f0 04 	lds	r24, 0x04F0
    295a:	90 91 f1 04 	lds	r25, 0x04F1
    295e:	09 95       	icall
            }
        }
    }
    return 0;
}
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	08 95       	ret

00002966 <task1>:
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring);
//Esp_Index=Mode_Command;
//Site[36]=name;
//background-color:#757575;height;100%;position:absolute;line-height:inherit;width:62%" ><center><span style="color:white">62</span></center></div></body></html>";
uint16_t task1(void)
{
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	28 97       	sbiw	r28, 0x08	; 8
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    static uint16_t Init_Flag=0;
    static uint8_t Toggle=0,Toggle1=1,ssdcount;
    uint16_t value,one,two,three;
    char SSDNUM[4];
    uint16_t Out;
    time1=time1+1;
    297e:	20 91 c4 04 	lds	r18, 0x04C4
    2982:	30 91 c5 04 	lds	r19, 0x04C5
    2986:	2f 5f       	subi	r18, 0xFF	; 255
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	30 93 c5 04 	sts	0x04C5, r19
    298e:	20 93 c4 04 	sts	0x04C4, r18
    if(Init_Flag==0)
    2992:	60 91 c6 04 	lds	r22, 0x04C6
    2996:	70 91 c7 04 	lds	r23, 0x04C7
    299a:	67 2b       	or	r22, r23
    299c:	61 f4       	brne	.+24     	; 0x29b6 <task1+0x50>
    {
        //InitMax();
        Init_Flag=1;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	90 93 c7 04 	sts	0x04C7, r25
    29a6:	80 93 c6 04 	sts	0x04C6, r24
        TankSize=10000/124;
    29aa:	80 e5       	ldi	r24, 0x50	; 80
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	90 93 c9 04 	sts	0x04C9, r25
    29b2:	80 93 c8 04 	sts	0x04C8, r24
    }
    //DispChar(0x0d,7);
    if(time1==10)
    29b6:	2a 30       	cpi	r18, 0x0A	; 10
    29b8:	31 05       	cpc	r19, r1
    29ba:	09 f0       	breq	.+2      	; 0x29be <task1+0x58>
    29bc:	87 c0       	rjmp	.+270    	; 0x2acc <task1+0x166>
    {   //ssd1036_chumma();

        uint16_t percnt;
        Out=(10000-(SensorValue*TankSize))/100;
    29be:	40 91 ca 04 	lds	r20, 0x04CA
    29c2:	20 91 c8 04 	lds	r18, 0x04C8
    29c6:	30 91 c9 04 	lds	r19, 0x04C9
    29ca:	42 9f       	mul	r20, r18
    29cc:	c0 01       	movw	r24, r0
    29ce:	43 9f       	mul	r20, r19
    29d0:	90 0d       	add	r25, r0
    29d2:	11 24       	eor	r1, r1
    29d4:	20 e1       	ldi	r18, 0x10	; 16
    29d6:	37 e2       	ldi	r19, 0x27	; 39
    29d8:	28 1b       	sub	r18, r24
    29da:	39 0b       	sbc	r19, r25
    29dc:	36 95       	lsr	r19
    29de:	27 95       	ror	r18
    29e0:	36 95       	lsr	r19
    29e2:	27 95       	ror	r18
    29e4:	ab e7       	ldi	r26, 0x7B	; 123
    29e6:	b4 e1       	ldi	r27, 0x14	; 20
    29e8:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
    29ec:	ac 01       	movw	r20, r24
    29ee:	56 95       	lsr	r21
    29f0:	47 95       	ror	r20
        percnt=Out;
        SSDNUM[3]='\0';
    29f2:	1c 82       	std	Y+4, r1	; 0x04
        Out=Out*127;
    29f4:	9a 01       	movw	r18, r20
    29f6:	36 95       	lsr	r19
    29f8:	32 2f       	mov	r19, r18
    29fa:	22 27       	eor	r18, r18
    29fc:	37 95       	ror	r19
    29fe:	27 95       	ror	r18
    2a00:	24 1b       	sub	r18, r20
    2a02:	35 0b       	sbc	r19, r21
        Out=Out/100;														//ssdcount=one;
    2a04:	36 95       	lsr	r19
    2a06:	27 95       	ror	r18
    2a08:	36 95       	lsr	r19
    2a0a:	27 95       	ror	r18
    2a0c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
    2a10:	8c 01       	movw	r16, r24
    2a12:	16 95       	lsr	r17
    2a14:	07 95       	ror	r16
        num2CharArray(percnt,SSDNUM);
    2a16:	be 01       	movw	r22, r28
    2a18:	6f 5f       	subi	r22, 0xFF	; 255
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	84 2f       	mov	r24, r20
    2a1e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <num2CharArray>
        ssd1306_String_font6x8(SSDNUM,74,3);
    2a22:	43 e0       	ldi	r20, 0x03	; 3
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	6a e4       	ldi	r22, 0x4A	; 74
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	01 96       	adiw	r24, 0x01	; 1
    2a2e:	0e 94 c2 07 	call	0xf84	; 0xf84 <ssd1306_String_font6x8>
        ssd1306_String_font6x8("'/.",96,3);
    2a32:	43 e0       	ldi	r20, 0x03	; 3
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	60 e6       	ldi	r22, 0x60	; 96
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	87 e4       	ldi	r24, 0x47	; 71
    2a3c:	93 e0       	ldi	r25, 0x03	; 3
    2a3e:	0e 94 c2 07 	call	0xf84	; 0xf84 <ssd1306_String_font6x8>
        if(SensorValue<20 && Upcounter<40)
    2a42:	20 91 ca 04 	lds	r18, 0x04CA
    2a46:	24 31       	cpi	r18, 0x14	; 20
    2a48:	88 f4       	brcc	.+34     	; 0x2a6c <task1+0x106>
    2a4a:	80 91 cb 04 	lds	r24, 0x04CB
    2a4e:	90 91 cc 04 	lds	r25, 0x04CC
    2a52:	88 32       	cpi	r24, 0x28	; 40
    2a54:	91 05       	cpc	r25, r1
    2a56:	50 f4       	brcc	.+20     	; 0x2a6c <task1+0x106>
        {
            Upcounter++;
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	90 93 cc 04 	sts	0x04CC, r25
    2a5e:	80 93 cb 04 	sts	0x04CB, r24
            DownCounter=0;
    2a62:	10 92 ce 04 	sts	0x04CE, r1
    2a66:	10 92 cd 04 	sts	0x04CD, r1
    2a6a:	26 c0       	rjmp	.+76     	; 0x2ab8 <task1+0x152>
        }
        else if(SensorValue>122 && DownCounter<40 && SensorValue<255)
    2a6c:	2b 37       	cpi	r18, 0x7B	; 123
    2a6e:	98 f0       	brcs	.+38     	; 0x2a96 <task1+0x130>
    2a70:	80 91 cd 04 	lds	r24, 0x04CD
    2a74:	90 91 ce 04 	lds	r25, 0x04CE
    2a78:	88 32       	cpi	r24, 0x28	; 40
    2a7a:	91 05       	cpc	r25, r1
    2a7c:	60 f4       	brcc	.+24     	; 0x2a96 <task1+0x130>
    2a7e:	2f 3f       	cpi	r18, 0xFF	; 255
    2a80:	51 f0       	breq	.+20     	; 0x2a96 <task1+0x130>
        {
            Upcounter=0;
    2a82:	10 92 cc 04 	sts	0x04CC, r1
    2a86:	10 92 cb 04 	sts	0x04CB, r1
            DownCounter++;
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	90 93 ce 04 	sts	0x04CE, r25
    2a90:	80 93 cd 04 	sts	0x04CD, r24
    2a94:	11 c0       	rjmp	.+34     	; 0x2ab8 <task1+0x152>
        }
        else
        {
            Upcounter=0;
    2a96:	10 92 cc 04 	sts	0x04CC, r1
    2a9a:	10 92 cb 04 	sts	0x04CB, r1
            DownCounter=0;
    2a9e:	10 92 ce 04 	sts	0x04CE, r1
    2aa2:	10 92 cd 04 	sts	0x04CD, r1
            COUNT=0;
    2aa6:	10 92 d0 04 	sts	0x04D0, r1
    2aaa:	10 92 cf 04 	sts	0x04CF, r1
            PinOutput(0,PIN_OUT7,D);
    2aae:	42 e0       	ldi	r20, 0x02	; 2
    2ab0:	66 e0       	ldi	r22, 0x06	; 6
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>

        //PinOutput(Toggle,PIN_OUT1,B);
        //
        //COUNT=COUNT+1;

        Toggle1=Toggle1^1;
    2ab8:	90 91 70 02 	lds	r25, 0x0270
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	89 27       	eor	r24, r25
    2ac0:	80 93 70 02 	sts	0x0270, r24

        //
        time1=0;
    2ac4:	10 92 c5 04 	sts	0x04C5, r1
    2ac8:	10 92 c4 04 	sts	0x04C4, r1



    }

    if(Upcounter!=0||DownCounter!=0 )
    2acc:	20 91 cb 04 	lds	r18, 0x04CB
    2ad0:	30 91 cc 04 	lds	r19, 0x04CC
    2ad4:	23 2b       	or	r18, r19
    2ad6:	31 f4       	brne	.+12     	; 0x2ae4 <task1+0x17e>
    2ad8:	80 91 cd 04 	lds	r24, 0x04CD
    2adc:	90 91 ce 04 	lds	r25, 0x04CE
    2ae0:	89 2b       	or	r24, r25
    2ae2:	f1 f0       	breq	.+60     	; 0x2b20 <task1+0x1ba>
    {

        if (COUNT>100)
    2ae4:	80 91 cf 04 	lds	r24, 0x04CF
    2ae8:	90 91 d0 04 	lds	r25, 0x04D0
    2aec:	85 36       	cpi	r24, 0x65	; 101
    2aee:	91 05       	cpc	r25, r1
    2af0:	70 f0       	brcs	.+28     	; 0x2b0e <task1+0x1a8>
        {
            COUNT=0;
    2af2:	10 92 d0 04 	sts	0x04D0, r1
    2af6:	10 92 cf 04 	sts	0x04CF, r1
            Toggle=Toggle^1;
    2afa:	90 91 d1 04 	lds	r25, 0x04D1
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	89 27       	eor	r24, r25
    2b02:	80 93 d1 04 	sts	0x04D1, r24
            PinOutput(Toggle,PIN_OUT7,D);
    2b06:	42 e0       	ldi	r20, 0x02	; 2
    2b08:	66 e0       	ldi	r22, 0x06	; 6
    2b0a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
        }
        COUNT++;
    2b0e:	80 91 cf 04 	lds	r24, 0x04CF
    2b12:	90 91 d0 04 	lds	r25, 0x04D0
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	90 93 d0 04 	sts	0x04D0, r25
    2b1c:	80 93 cf 04 	sts	0x04CF, r24
    }

    if(time2>1)
    2b20:	20 91 d2 04 	lds	r18, 0x04D2
    2b24:	30 91 d3 04 	lds	r19, 0x04D3
    2b28:	22 30       	cpi	r18, 0x02	; 2
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <task1+0x1ca>
    2b2e:	57 c0       	rjmp	.+174    	; 0x2bde <task1+0x278>
    {
        uint16_t a=0x0000,c;
    2b30:	18 86       	std	Y+8, r1	; 0x08
    2b32:	1f 82       	std	Y+7, r1	; 0x07
        uint8_t *array=&c,*Val=&a;
        RTEReadFirstCh(&a);
    2b34:	ce 01       	movw	r24, r28
    2b36:	07 96       	adiw	r24, 0x07	; 7
    2b38:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <RTEModuleFirstCh>
        //uart_num(array[1]);
        //if(a&0x8000==0x8000)
        //{
        //uart_string("in 1");
        c=(a>>15)&0x0001;
    2b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b3e:	98 85       	ldd	r25, Y+8	; 0x08
    2b40:	29 2f       	mov	r18, r25
    2b42:	22 1f       	adc	r18, r18
    2b44:	22 27       	eor	r18, r18
    2b46:	22 1f       	adc	r18, r18
    2b48:	2d 83       	std	Y+5, r18	; 0x05
    2b4a:	1e 82       	std	Y+6, r1	; 0x06
        if(array[0]==0x01)
    2b4c:	21 30       	cpi	r18, 0x01	; 1
    2b4e:	d9 f4       	brne	.+54     	; 0x2b86 <task1+0x220>
        {
            //a=(a&0x03ff);
            //a=a*(4882);
            //a=a/1000;
            a=a&0x03ff;
    2b50:	93 70       	andi	r25, 0x03	; 3
    2b52:	98 87       	std	Y+8, r25	; 0x08
    2b54:	8f 83       	std	Y+7, r24	; 0x07
            one=(110*a);
            one=one/1024;
            one=(one);

            SSDNUM[3]='\0';															//ssdcount=one;
    2b56:	1c 82       	std	Y+4, r1	; 0x04
            num2CharArray(SensorValue,SSDNUM);
    2b58:	be 01       	movw	r22, r28
    2b5a:	6f 5f       	subi	r22, 0xFF	; 255
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	80 91 ca 04 	lds	r24, 0x04CA
    2b62:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <num2CharArray>
            ssd1306_String_font6x8(SSDNUM,92,0);
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	6c e5       	ldi	r22, 0x5C	; 92
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	ce 01       	movw	r24, r28
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	0e 94 c2 07 	call	0xf84	; 0xf84 <ssd1306_String_font6x8>
            ssd1306_String_font6x8("cm",112,0);
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	60 e7       	ldi	r22, 0x70	; 112
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	8b e4       	ldi	r24, 0x4B	; 75
    2b80:	93 e0       	ldi	r25, 0x03	; 3
    2b82:	0e 94 c2 07 	call	0xf84	; 0xf84 <ssd1306_String_font6x8>
            }
            //uart_num(one);
            //uart_string("#1#");
            // uart_num(Val[0]);
        }
        a=0x0800;
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	98 e0       	ldi	r25, 0x08	; 8
    2b8a:	98 87       	std	Y+8, r25	; 0x08
    2b8c:	8f 83       	std	Y+7, r24	; 0x07
        RTEReadFirstCh(&a);
    2b8e:	ce 01       	movw	r24, r28
    2b90:	07 96       	adiw	r24, 0x07	; 7
    2b92:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <RTEModuleFirstCh>
            two=(5*a)*10/1024;
            //uart_string("#2#");
            //uart_num(two);
            //uart_string("#2#");					   // uart_num(Val[0]);
        }
        a=0x1000;
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e1       	ldi	r25, 0x10	; 16
    2b9a:	98 87       	std	Y+8, r25	; 0x08
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
        RTEReadFirstCh(&a);
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	07 96       	adiw	r24, 0x07	; 7
    2ba2:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <RTEModuleFirstCh>
        //uart_num(array[1]);
        //if(a&0x8000==0x8000)
        //{
        //uart_string("in 1");
        c=(a>>15)&0x0001;
    2ba6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba8:	98 85       	ldd	r25, Y+8	; 0x08
    2baa:	29 2f       	mov	r18, r25
    2bac:	22 1f       	adc	r18, r18
    2bae:	22 27       	eor	r18, r18
    2bb0:	22 1f       	adc	r18, r18
    2bb2:	2d 83       	std	Y+5, r18	; 0x05
    2bb4:	1e 82       	std	Y+6, r1	; 0x06
        if(array[0]==0x01)
    2bb6:	21 30       	cpi	r18, 0x01	; 1
    2bb8:	19 f4       	brne	.+6      	; 0x2bc0 <task1+0x25a>
        {
            a=a&0x03ff;
    2bba:	93 70       	andi	r25, 0x03	; 3
    2bbc:	98 87       	std	Y+8, r25	; 0x08
    2bbe:	8f 83       	std	Y+7, r24	; 0x07
            three=(5*a)*10/1024;
            //uart_string("#3#");
            //uart_16Uint(a);
            //uart_string("#3#");						//uart_num(Val[0]);
        }
        time2=0;
    2bc0:	10 92 d3 04 	sts	0x04D3, r1
    2bc4:	10 92 d2 04 	sts	0x04D2, r1
        if(ssdcount<127)
    2bc8:	80 91 d4 04 	lds	r24, 0x04D4
    2bcc:	8f 37       	cpi	r24, 0x7F	; 127
    2bce:	20 f4       	brcc	.+8      	; 0x2bd8 <task1+0x272>
        {
            ssdcount++;
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	80 93 d4 04 	sts	0x04D4, r24
    2bd6:	03 c0       	rjmp	.+6      	; 0x2bde <task1+0x278>
        }
        else
        {
            ssdcount=ssdcount-55;
    2bd8:	87 53       	subi	r24, 0x37	; 55
    2bda:	80 93 d4 04 	sts	0x04D4, r24
        }

    }


    if(Out<127)
    2bde:	0f 37       	cpi	r16, 0x7F	; 127
    2be0:	11 05       	cpc	r17, r1
    2be2:	38 f4       	brcc	.+14     	; 0x2bf2 <task1+0x28c>
    {
        ssd1306_Fill_Rectangle(0,5,Out);
    2be4:	a8 01       	movw	r20, r16
    2be6:	65 e0       	ldi	r22, 0x05	; 5
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 d5 07 	call	0xfaa	; 0xfaa <ssd1306_Fill_Rectangle>
    }

    time2++;
    2bf2:	80 91 d2 04 	lds	r24, 0x04D2
    2bf6:	90 91 d3 04 	lds	r25, 0x04D3
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	90 93 d3 04 	sts	0x04D3, r25
    2c00:	80 93 d2 04 	sts	0x04D2, r24
    //a=4;
    return 0;
}
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	28 96       	adiw	r28, 0x08	; 8
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	08 95       	ret

00002c1e <task2>:
uint16_t task2(void)
{
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	27 97       	sbiw	r28, 0x07	; 7
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    static uint16_t time1=0,k;
    static uint8_t Errorcount;
    time1=time1+1;
    2c34:	80 91 d5 04 	lds	r24, 0x04D5
    2c38:	90 91 d6 04 	lds	r25, 0x04D6
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	90 93 d6 04 	sts	0x04D6, r25
    2c42:	80 93 d5 04 	sts	0x04D5, r24
    uint16_t Pulse=0;
    uint8_t *check=&Pulse;
    if(time1==100)
    2c46:	84 36       	cpi	r24, 0x64	; 100
    2c48:	91 05       	cpc	r25, r1
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <task2+0x30>
    2c4c:	32 c1       	rjmp	.+612    	; 0x2eb2 <task2+0x294>
    {

        signal=0;
    2c4e:	10 92 c3 04 	sts	0x04C3, r1
        time1=0;
    2c52:	10 92 d6 04 	sts	0x04D6, r1
    2c56:	10 92 d5 04 	sts	0x04D5, r1
        uint8_t arr[3];
        arr[0]=0;
    2c5a:	1d 82       	std	Y+5, r1	; 0x05
        arr[1]=0;
    2c5c:	1e 82       	std	Y+6, r1	; 0x06
        arr[2]=1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	8f 83       	std	Y+7, r24	; 0x07
        ((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2c62:	ce 01       	movw	r24, r28
    2c64:	05 96       	adiw	r24, 0x05	; 5
    2c66:	0e 94 37 11 	call	0x226e	; 0x226e <SignalHandlerFunc>
    2c6a:	9e 83       	std	Y+6, r25	; 0x06
    2c6c:	8d 83       	std	Y+5, r24	; 0x05
        if(arr[1]==0x02)
    2c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <task2+0x58>
    2c74:	00 c1       	rjmp	.+512    	; 0x2e76 <task2+0x258>
        {
			if(1)
			{
            FilterUltrasonic(arr[0]);
    2c76:	ed 81       	ldd	r30, Y+5	; 0x05

static void FilterUltrasonic(uint8_t Distance)
{
    static uint16_t value, previousvalue=0,offset,onebyk,settlecount;
    uint16_t multiplier;
    onebyk=181;
    2c78:	85 eb       	ldi	r24, 0xB5	; 181
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	90 93 d9 04 	sts	0x04D9, r25
    2c80:	80 93 d8 04 	sts	0x04D8, r24
    //value=(Distance+previousvalue);
    if(Distance>value)
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	40 91 da 04 	lds	r20, 0x04DA
    2c8a:	50 91 db 04 	lds	r21, 0x04DB
    2c8e:	4e 17       	cp	r20, r30
    2c90:	5f 07       	cpc	r21, r31
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <task2+0x78>
    2c94:	42 c0       	rjmp	.+132    	; 0x2d1a <task2+0xfc>
    {
        multiplier=(Distance-value)*100;
    2c96:	cf 01       	movw	r24, r30
    2c98:	84 1b       	sub	r24, r20
    2c9a:	95 0b       	sbc	r25, r21
    2c9c:	64 e6       	ldi	r22, 0x64	; 100
    2c9e:	68 9f       	mul	r22, r24
    2ca0:	90 01       	movw	r18, r0
    2ca2:	69 9f       	mul	r22, r25
    2ca4:	30 0d       	add	r19, r0
    2ca6:	11 24       	eor	r1, r1
        if(multiplier<1804)
    2ca8:	2c 30       	cpi	r18, 0x0C	; 12
    2caa:	87 e0       	ldi	r24, 0x07	; 7
    2cac:	38 07       	cpc	r19, r24
    2cae:	90 f4       	brcc	.+36     	; 0x2cd4 <task2+0xb6>
        {
            offset=((Distance-value)*100)/onebyk;
    2cb0:	a5 e8       	ldi	r26, 0x85	; 133
    2cb2:	ba e5       	ldi	r27, 0x5A	; 90
    2cb4:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
    2cb8:	00 24       	eor	r0, r0
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	00 1c       	adc	r0, r0
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	00 1c       	adc	r0, r0
    2cc6:	89 2f       	mov	r24, r25
    2cc8:	90 2d       	mov	r25, r0
    2cca:	90 93 dd 04 	sts	0x04DD, r25
    2cce:	80 93 dc 04 	sts	0x04DC, r24
    2cd2:	11 c0       	rjmp	.+34     	; 0x2cf6 <task2+0xd8>
        }
        else
        {
            offset=((Distance-value)*100)/1804;
    2cd4:	36 95       	lsr	r19
    2cd6:	27 95       	ror	r18
    2cd8:	36 95       	lsr	r19
    2cda:	27 95       	ror	r18
    2cdc:	a9 ea       	ldi	r26, 0xA9	; 169
    2cde:	b8 e4       	ldi	r27, 0x48	; 72
    2ce0:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
    2ce4:	88 0f       	add	r24, r24
    2ce6:	89 2f       	mov	r24, r25
    2ce8:	88 1f       	adc	r24, r24
    2cea:	99 0b       	sbc	r25, r25
    2cec:	91 95       	neg	r25
    2cee:	90 93 dd 04 	sts	0x04DD, r25
    2cf2:	80 93 dc 04 	sts	0x04DC, r24
        }
        if(offset==0)
    2cf6:	80 91 dc 04 	lds	r24, 0x04DC
    2cfa:	90 91 dd 04 	lds	r25, 0x04DD
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	29 f4       	brne	.+10     	; 0x2d0c <task2+0xee>
        {
            value=Distance;
    2d02:	f0 93 db 04 	sts	0x04DB, r31
    2d06:	e0 93 da 04 	sts	0x04DA, r30
    2d0a:	48 c0       	rjmp	.+144    	; 0x2d9c <task2+0x17e>
        }
        else
        {
            value=value+offset;
    2d0c:	84 0f       	add	r24, r20
    2d0e:	95 1f       	adc	r25, r21
    2d10:	90 93 db 04 	sts	0x04DB, r25
    2d14:	80 93 da 04 	sts	0x04DA, r24
    2d18:	41 c0       	rjmp	.+130    	; 0x2d9c <task2+0x17e>


    }
    else
    {
        multiplier=(value-Distance)*100;
    2d1a:	ca 01       	movw	r24, r20
    2d1c:	8e 1b       	sub	r24, r30
    2d1e:	9f 0b       	sbc	r25, r31
    2d20:	64 e6       	ldi	r22, 0x64	; 100
    2d22:	68 9f       	mul	r22, r24
    2d24:	90 01       	movw	r18, r0
    2d26:	69 9f       	mul	r22, r25
    2d28:	30 0d       	add	r19, r0
    2d2a:	11 24       	eor	r1, r1
        if(multiplier<1804)
    2d2c:	2c 30       	cpi	r18, 0x0C	; 12
    2d2e:	87 e0       	ldi	r24, 0x07	; 7
    2d30:	38 07       	cpc	r19, r24
    2d32:	90 f4       	brcc	.+36     	; 0x2d58 <task2+0x13a>
        {
            offset=((value-Distance)*100)/onebyk;
    2d34:	a5 e8       	ldi	r26, 0x85	; 133
    2d36:	ba e5       	ldi	r27, 0x5A	; 90
    2d38:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
    2d3c:	00 24       	eor	r0, r0
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	00 1c       	adc	r0, r0
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	00 1c       	adc	r0, r0
    2d4a:	89 2f       	mov	r24, r25
    2d4c:	90 2d       	mov	r25, r0
    2d4e:	90 93 dd 04 	sts	0x04DD, r25
    2d52:	80 93 dc 04 	sts	0x04DC, r24
    2d56:	11 c0       	rjmp	.+34     	; 0x2d7a <task2+0x15c>
        }
        else
        {
            offset=((value-Distance)*100)/1804;
    2d58:	36 95       	lsr	r19
    2d5a:	27 95       	ror	r18
    2d5c:	36 95       	lsr	r19
    2d5e:	27 95       	ror	r18
    2d60:	a9 ea       	ldi	r26, 0xA9	; 169
    2d62:	b8 e4       	ldi	r27, 0x48	; 72
    2d64:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__umulhisi3>
    2d68:	88 0f       	add	r24, r24
    2d6a:	89 2f       	mov	r24, r25
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 0b       	sbc	r25, r25
    2d70:	91 95       	neg	r25
    2d72:	90 93 dd 04 	sts	0x04DD, r25
    2d76:	80 93 dc 04 	sts	0x04DC, r24
        }


        if(offset==0)
    2d7a:	80 91 dc 04 	lds	r24, 0x04DC
    2d7e:	90 91 dd 04 	lds	r25, 0x04DD
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	29 f4       	brne	.+10     	; 0x2d90 <task2+0x172>
        {
            value=Distance;
    2d86:	f0 93 db 04 	sts	0x04DB, r31
    2d8a:	e0 93 da 04 	sts	0x04DA, r30
    2d8e:	06 c0       	rjmp	.+12     	; 0x2d9c <task2+0x17e>
        }
        else
        {
            value=value-offset;
    2d90:	48 1b       	sub	r20, r24
    2d92:	59 0b       	sbc	r21, r25
    2d94:	50 93 db 04 	sts	0x04DB, r21
    2d98:	40 93 da 04 	sts	0x04DA, r20
        }
    }
    previousvalue=value;
    2d9c:	80 91 da 04 	lds	r24, 0x04DA
    2da0:	90 91 db 04 	lds	r25, 0x04DB
    2da4:	90 93 df 04 	sts	0x04DF, r25
    2da8:	80 93 de 04 	sts	0x04DE, r24
    Sigout=(uint8_t)previousvalue;
    2dac:	68 2f       	mov	r22, r24
    2dae:	80 93 98 06 	sts	0x0698, r24
    SensorValue=(uint8_t)previousvalue;
    2db2:	80 93 ca 04 	sts	0x04CA, r24
	if(settlecount>100)
    2db6:	20 91 e0 04 	lds	r18, 0x04E0
    2dba:	30 91 e1 04 	lds	r19, 0x04E1
    2dbe:	25 36       	cpi	r18, 0x65	; 101
    2dc0:	31 05       	cpc	r19, r1
    2dc2:	a0 f1       	brcs	.+104    	; 0x2e2c <task2+0x20e>
    //uart_string("\n");
}
static uint8_t CaliberateDistanceValues(uint8_t Pingvalue)
{
    static uint8_t PreviousValue=3,PingCount;
    if(PreviousValue>=3 && Pingvalue!=255 && Pingvalue!=0)
    2dc4:	20 91 71 02 	lds	r18, 0x0271
    2dc8:	23 30       	cpi	r18, 0x03	; 3
    2dca:	08 f4       	brcc	.+2      	; 0x2dce <task2+0x1b0>
    2dcc:	6b c0       	rjmp	.+214    	; 0x2ea4 <task2+0x286>
    2dce:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <task2+0x1b6>
    2dd2:	68 c0       	rjmp	.+208    	; 0x2ea4 <task2+0x286>
    2dd4:	88 23       	and	r24, r24
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <task2+0x1bc>
    2dd8:	65 c0       	rjmp	.+202    	; 0x2ea4 <task2+0x286>

    time2++;
    //a=4;
    return 0;
}
uint16_t task2(void)
    2dda:	99 27       	eor	r25, r25
static uint8_t CaliberateDistanceValues(uint8_t Pingvalue)
{
    static uint8_t PreviousValue=3,PingCount;
    if(PreviousValue>=3 && Pingvalue!=255 && Pingvalue!=0)
    {
        if(Pingvalue>=(PreviousValue+3) && Pingvalue<=(PreviousValue-3))
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	a9 01       	movw	r20, r18
    2de0:	4d 5f       	subi	r20, 0xFD	; 253
    2de2:	5f 4f       	sbci	r21, 0xFF	; 255
    2de4:	84 17       	cp	r24, r20
    2de6:	95 07       	cpc	r25, r21
    2de8:	5c f0       	brlt	.+22     	; 0x2e00 <task2+0x1e2>
    2dea:	23 50       	subi	r18, 0x03	; 3
    2dec:	31 09       	sbc	r19, r1
    2dee:	28 17       	cp	r18, r24
    2df0:	39 07       	cpc	r19, r25
    2df2:	34 f0       	brlt	.+12     	; 0x2e00 <task2+0x1e2>
        {
            PingCount=PingCount-1;
    2df4:	80 91 e2 04 	lds	r24, 0x04E2
    2df8:	81 50       	subi	r24, 0x01	; 1
    2dfa:	80 93 e2 04 	sts	0x04E2, r24
    2dfe:	52 c0       	rjmp	.+164    	; 0x2ea4 <task2+0x286>
        }
        else
        {
            PingCount++;
    2e00:	80 91 e2 04 	lds	r24, 0x04E2
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	80 93 e2 04 	sts	0x04E2, r24
			PreviousValue=Pingvalue;
    2e0a:	60 93 71 02 	sts	0x0271, r22
            if(PingCount>=20)
    2e0e:	84 31       	cpi	r24, 0x14	; 20
    2e10:	08 f4       	brcc	.+2      	; 0x2e14 <task2+0x1f6>
    2e12:	48 c0       	rjmp	.+144    	; 0x2ea4 <task2+0x286>
            {
                PingCount=0;
    2e14:	10 92 e2 04 	sts	0x04E2, r1
				PreviousValue=3;
    2e18:	83 e0       	ldi	r24, 0x03	; 3
    2e1a:	80 93 71 02 	sts	0x0271, r24
    SensorValue=(uint8_t)previousvalue;
	if(settlecount>100)
	{
      if(CaliberateDistanceValues(SensorValue)==0)
	  {
		  PopulateSSDbuffer("C ",96,0);;
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	60 e6       	ldi	r22, 0x60	; 96
    2e22:	8e e4       	ldi	r24, 0x4E	; 78
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    2e2a:	06 c0       	rjmp	.+12     	; 0x2e38 <task2+0x21a>
		 PopulateSSDbuffer("C!",96,0); 
	  }
	}
	else
	{
		settlecount++;
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	30 93 e1 04 	sts	0x04E1, r19
    2e34:	20 93 e0 04 	sts	0x04E0, r18
	}
    //uart_num(Sigout);
    quality=100;
    2e38:	14 e6       	ldi	r17, 0x64	; 100
    2e3a:	10 93 c2 04 	sts	0x04C2, r17
        if(arr[1]==0x02)
        {
			if(1)
			{
            FilterUltrasonic(arr[0]);
			char val[4]="255";
    2e3e:	82 e3       	ldi	r24, 0x32	; 50
    2e40:	95 e3       	ldi	r25, 0x35	; 53
    2e42:	a5 e3       	ldi	r26, 0x35	; 53
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	ab 83       	std	Y+3, r26	; 0x03
    2e4c:	bc 83       	std	Y+4, r27	; 0x04
			val[3]='\0';
			num2CharArray(arr[0],val);
    2e4e:	be 01       	movw	r22, r28
    2e50:	6f 5f       	subi	r22, 0xFF	; 255
    2e52:	7f 4f       	sbci	r23, 0xFF	; 255
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <num2CharArray>
			val[3]='\0';
    2e5a:	1c 82       	std	Y+4, r1	; 0x04
			//TODO//PopulateSSDbuffer(val,0,1);
			//PopulateSSDbuffer("=L",arr[0],3);
            SetBlink(PIN_OUT1,0x1000,B);
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	70 e1       	ldi	r23, 0x10	; 16
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 8a 02 	call	0x514	; 0x514 <SetBlink>
            Errorcount=0;
    2e6c:	10 92 d7 04 	sts	0x04D7, r1
            quality=100;
    2e70:	10 93 c2 04 	sts	0x04C2, r17
    2e74:	1e c0       	rjmp	.+60     	; 0x2eb2 <task2+0x294>
			}
        }
        else
        {
            Errorcount++;
    2e76:	80 91 d7 04 	lds	r24, 0x04D7
    2e7a:	8f 5f       	subi	r24, 0xFF	; 255
    2e7c:	80 93 d7 04 	sts	0x04D7, r24
            if(Errorcount>=10)
    2e80:	8a 30       	cpi	r24, 0x0A	; 10
    2e82:	b8 f0       	brcs	.+46     	; 0x2eb2 <task2+0x294>
            {

                SetBlink(PIN_OUT1,0x1002,B);
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	62 e0       	ldi	r22, 0x02	; 2
    2e8a:	70 e1       	ldi	r23, 0x10	; 16
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 8a 02 	call	0x514	; 0x514 <SetBlink>
                Sigout=0xff;
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	80 93 98 06 	sts	0x0698, r24
                SensorValue=0xff;
    2e9a:	80 93 ca 04 	sts	0x04CA, r24
                quality=0;
    2e9e:	10 92 c2 04 	sts	0x04C2, r1
    2ea2:	07 c0       	rjmp	.+14     	; 0x2eb2 <task2+0x294>
	  {
		  PopulateSSDbuffer("C ",96,0);;
	  }
	  else
	  {
		 PopulateSSDbuffer("C!",96,0); 
    2ea4:	40 e0       	ldi	r20, 0x00	; 0
    2ea6:	60 e6       	ldi	r22, 0x60	; 96
    2ea8:	81 e5       	ldi	r24, 0x51	; 81
    2eaa:	93 e0       	ldi	r25, 0x03	; 3
    2eac:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    2eb0:	c3 cf       	rjmp	.-122    	; 0x2e38 <task2+0x21a>


    }

    return 0;
}
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	27 96       	adiw	r28, 0x07	; 7
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	08 95       	ret

00002eca <task3>:
uint16_t task3(void)
{
    Blink();
    2eca:	0e 94 ad 02 	call	0x55a	; 0x55a <Blink>
	//

		

    return 0;
}
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	08 95       	ret

00002ed4 <task4>:
uint16_t task4(void)
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <task4+0x6>
    2eda:	1f 92       	push	r1
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
    static uint16_t countTask4;
    static uint8_t PreviousState,SWITCHCOUNT;
    uint8_t arr[3];
    arr[0]=0;
    2ee0:	19 82       	std	Y+1, r1	; 0x01
    arr[1]=1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
    arr[2]=2;
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
    ((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	0e 94 37 11 	call	0x226e	; 0x226e <SignalHandlerFunc>
    2ef2:	9a 83       	std	Y+2, r25	; 0x02
    2ef4:	89 83       	std	Y+1, r24	; 0x01
	      // RTE_WriteBufferUart("\n");
			char val[4]="255";

    if(arr[1]==2)
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	82 30       	cpi	r24, 0x02	; 2
    2efa:	e9 f4       	brne	.+58     	; 0x2f36 <task4+0x62>
    {
        //RTE_WriteBufferUart("data1");
		uart_num(arr[0]);
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
        uart_string("ON\n");
    2f02:	85 e8       	ldi	r24, 0x85	; 133
    2f04:	93 e0       	ldi	r25, 0x03	; 3
    2f06:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
        switch (arr[0])
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	82 30       	cpi	r24, 0x02	; 2
    2f0e:	39 f0       	breq	.+14     	; 0x2f1e <task4+0x4a>
    2f10:	83 30       	cpi	r24, 0x03	; 3
    2f12:	49 f0       	breq	.+18     	; 0x2f26 <task4+0x52>
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	51 f4       	brne	.+20     	; 0x2f2c <task4+0x58>
        {
	        case 1:
			 SwitchPressed=1;
    2f18:	80 93 e3 04 	sts	0x04E3, r24
	        /* Your code here */
	        break;
    2f1c:	07 c0       	rjmp	.+14     	; 0x2f2c <task4+0x58>
			case 2:
			 SwitchPressed=2;
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	80 93 e3 04 	sts	0x04E3, r24
			 break;
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <task4+0x58>
			case 3:
			 SwitchPressed=3;
    2f26:	83 e0       	ldi	r24, 0x03	; 3
    2f28:	80 93 e3 04 	sts	0x04E3, r24
	        default:
	        /* Your code here */
	        break;
        }
		
        SWITCHCOUNT++;
    2f2c:	80 91 e4 04 	lds	r24, 0x04E4
    2f30:	8f 5f       	subi	r24, 0xFF	; 255
    2f32:	80 93 e4 04 	sts	0x04E4, r24
    }
    if(SWITCHCOUNT>2)
    2f36:	80 91 e4 04 	lds	r24, 0x04E4
    2f3a:	83 30       	cpi	r24, 0x03	; 3
    2f3c:	10 f0       	brcs	.+4      	; 0x2f42 <task4+0x6e>
    {
      // uart_string("data1:\n");
       // uart_num(arr[0]);

        SWITCHCOUNT=0;
    2f3e:	10 92 e4 04 	sts	0x04E4, r1
     {
       PinOutput(0,PIN_OUT5,D);
        SetBlink(PIN_OUT1,0x2000,B);
     }*/

    countTask4++;
    2f42:	80 91 e5 04 	lds	r24, 0x04E5
    2f46:	90 91 e6 04 	lds	r25, 0x04E6
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    if(countTask4>=100)
    2f4c:	84 36       	cpi	r24, 0x64	; 100
    2f4e:	91 05       	cpc	r25, r1
    2f50:	28 f4       	brcc	.+10     	; 0x2f5c <task4+0x88>
     {
       PinOutput(0,PIN_OUT5,D);
        SetBlink(PIN_OUT1,0x2000,B);
     }*/

    countTask4++;
    2f52:	90 93 e6 04 	sts	0x04E6, r25
    2f56:	80 93 e5 04 	sts	0x04E5, r24
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <task4+0x90>
    if(countTask4>=100)
    {
       // hours.OperatingHours++;
        //StoreNVM(Nvm_OH,(uint8_t*)&hours,0);;
        countTask4=0;
    2f5c:	10 92 e6 04 	sts	0x04E6, r1
    2f60:	10 92 e5 04 	sts	0x04E5, r1
        //uart_num(countSize());
        //uart_num(deq().EventId);
    }
    //SetDataESP(&count);
}
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <task5>:
uint16_t task5(void)
{   
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <task5+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <task5+0x8>
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
	f.LargestValue++;
    2f7c:	80 91 e7 04 	lds	r24, 0x04E7
    2f80:	8f 5f       	subi	r24, 0xFF	; 255
    2f82:	80 93 e7 04 	sts	0x04E7, r24
    }

    ESPRetVal RetVal;
    static uint8_t done=0,ConnectionLost,send=0;
    static uint16_t Tc;
    if(ConnectionLost==0)
    2f86:	80 91 e8 04 	lds	r24, 0x04E8
    2f8a:	81 11       	cpse	r24, r1
    2f8c:	a2 c0       	rjmp	.+324    	; 0x30d2 <task5+0x162>
    {
        if(ESP_flags.Server_flag==0 && done==0)
    2f8e:	80 91 e9 04 	lds	r24, 0x04E9
    2f92:	82 fd       	sbrc	r24, 2
    2f94:	11 c0       	rjmp	.+34     	; 0x2fb8 <task5+0x48>
    2f96:	90 91 ea 04 	lds	r25, 0x04EA
    2f9a:	91 11       	cpse	r25, r1
    2f9c:	0d c0       	rjmp	.+26     	; 0x2fb8 <task5+0x48>
        {

            RetVal=ESPAsServer();
    2f9e:	0e 94 88 04 	call	0x910	; 0x910 <ESPAsServer>

            if(RetVal==ESP_CmdSndOK)
    2fa2:	81 11       	cpse	r24, r1
    2fa4:	7b c0       	rjmp	.+246    	; 0x309c <task5+0x12c>
            {
                ESP_flags.Server_flag=1;
    2fa6:	80 91 e9 04 	lds	r24, 0x04E9
    2faa:	84 60       	ori	r24, 0x04	; 4
    2fac:	80 93 e9 04 	sts	0x04E9, r24
                done=1;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	80 93 ea 04 	sts	0x04EA, r24
    2fb6:	7a c0       	rjmp	.+244    	; 0x30ac <task5+0x13c>
            }

        }
        else if(ESP_flags.Request_Flag==0 && done ==1)
    2fb8:	83 fd       	sbrc	r24, 3
    2fba:	12 c0       	rjmp	.+36     	; 0x2fe0 <task5+0x70>
    2fbc:	80 91 ea 04 	lds	r24, 0x04EA
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	09 f0       	breq	.+2      	; 0x2fc6 <task5+0x56>
    2fc4:	6b c0       	rjmp	.+214    	; 0x309c <task5+0x12c>
        {
            //uart_string("DONE");
            if(RetVal==RequestWait())
    2fc6:	0e 94 83 05 	call	0xb06	; 0xb06 <RequestWait>
    2fca:	81 11       	cpse	r24, r1
    2fcc:	67 c0       	rjmp	.+206    	; 0x309c <task5+0x12c>
            {
                ESP_flags.Request_Flag=1;
    2fce:	80 91 e9 04 	lds	r24, 0x04E9
    2fd2:	88 60       	ori	r24, 0x08	; 8
    2fd4:	80 93 e9 04 	sts	0x04E9, r24
                done =2;
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	80 93 ea 04 	sts	0x04EA, r24
    2fde:	66 c0       	rjmp	.+204    	; 0x30ac <task5+0x13c>
            }
        }

        else if(ESP_flags.Request_Flag==1&& done ==2)
    2fe0:	80 91 ea 04 	lds	r24, 0x04EA
    2fe4:	82 30       	cpi	r24, 0x02	; 2
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <task5+0x7a>
    2fe8:	59 c0       	rjmp	.+178    	; 0x309c <task5+0x12c>
        {

            CheckInput();
    2fea:	0e 94 1d 05 	call	0xa3a	; 0xa3a <CheckInput>
            if(enable()==1)
    2fee:	0e 94 ab 05 	call	0xb56	; 0xb56 <enable>
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	09 f0       	breq	.+2      	; 0x2ff8 <task5+0x88>
    2ff6:	52 c0       	rjmp	.+164    	; 0x309c <task5+0x12c>
            {
                Tc++;
    2ff8:	80 91 eb 04 	lds	r24, 0x04EB
    2ffc:	90 91 ec 04 	lds	r25, 0x04EC
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	90 93 ec 04 	sts	0x04EC, r25
    3006:	80 93 eb 04 	sts	0x04EB, r24
                if(send==0)
                {

                }

                if(Tc>400)
    300a:	81 39       	cpi	r24, 0x91	; 145
    300c:	91 40       	sbci	r25, 0x01	; 1
    300e:	08 f4       	brcc	.+2      	; 0x3012 <task5+0xa2>
    3010:	45 c0       	rjmp	.+138    	; 0x309c <task5+0x12c>
                {
                    RetVal=SendData(36);
    3012:	84 e2       	ldi	r24, 0x24	; 36
    3014:	0e 94 09 05 	call	0xa12	; 0xa12 <SendData>
                    if(/* &&*/ ESP_CmdSndOK==RetVal)
    3018:	81 11       	cpse	r24, r1
    301a:	40 c0       	rjmp	.+128    	; 0x309c <task5+0x12c>
                    {
                        send=0;
    301c:	10 92 ed 04 	sts	0x04ED, r1
                        Tc=0;
    3020:	10 92 ec 04 	sts	0x04EC, r1
    3024:	10 92 eb 04 	sts	0x04EB, r1
                        char val[4]="255";
    3028:	82 e3       	ldi	r24, 0x32	; 50
    302a:	95 e3       	ldi	r25, 0x35	; 53
    302c:	a5 e3       	ldi	r26, 0x35	; 53
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	ab 83       	std	Y+3, r26	; 0x03
    3036:	bc 83       	std	Y+4, r27	; 0x04
                        val[3]='\0';
                        if(quality==100)
    3038:	80 91 c2 04 	lds	r24, 0x04C2
    303c:	84 36       	cpi	r24, 0x64	; 100
    303e:	31 f5       	brne	.+76     	; 0x308c <task5+0x11c>
                        {

                            val[3]='\0';
                            num2CharArray(SensorValue,val);
    3040:	be 01       	movw	r22, r28
    3042:	6f 5f       	subi	r22, 0xFF	; 255
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	80 91 ca 04 	lds	r24, 0x04CA
    304a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <num2CharArray>
                            RTE_WriteBufferUart("Water Level Monitor");
    304e:	84 e5       	ldi	r24, 0x54	; 84
    3050:	93 e0       	ldi	r25, 0x03	; 3
    3052:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    3056:	82 ec       	ldi	r24, 0xC2	; 194
    3058:	92 e0       	ldi	r25, 0x02	; 2
    305a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("1.Level");
    305e:	88 e6       	ldi	r24, 0x68	; 104
    3060:	93 e0       	ldi	r25, 0x03	; 3
    3062:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
							RTE_WriteBufferUart("\n");
    3066:	82 ec       	ldi	r24, 0xC2	; 194
    3068:	92 e0       	ldi	r25, 0x02	; 2
    306a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("2.Debug");
    306e:	80 e7       	ldi	r24, 0x70	; 112
    3070:	93 e0       	ldi	r25, 0x03	; 3
    3072:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    3076:	82 ec       	ldi	r24, 0xC2	; 194
    3078:	92 e0       	ldi	r25, 0x02	; 2
    307a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
                            done=3;
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	80 93 ea 04 	sts	0x04EA, r24
                            EspConnected=1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	80 93 ee 04 	sts	0x04EE, r24
    308a:	08 c0       	rjmp	.+16     	; 0x309c <task5+0x12c>
                            //printBuffer();
                        }
                        else
                        {
                            RTE_WriteBufferUart(val);
    308c:	ce 01       	movw	r24, r28
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    3094:	82 ec       	ldi	r24, 0xC2	; 194
    3096:	92 e0       	ldi	r25, 0x02	; 2
    3098:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>

                }
            }

        }
        if(done==3)
    309c:	80 91 ea 04 	lds	r24, 0x04EA
    30a0:	83 30       	cpi	r24, 0x03	; 3
    30a2:	21 f4       	brne	.+8      	; 0x30ac <task5+0x13c>
        {
            task6(0);
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 61 14 	call	0x28c2	; 0x28c2 <task6>
        }
        if(ESP_CmdSndOK==WifiDisconnectCheck())
    30ac:	0e 94 ee 03 	call	0x7dc	; 0x7dc <WifiDisconnectCheck>
    30b0:	81 11       	cpse	r24, r1
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <task5+0x162>
        {
            ConnectionLost=1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	80 93 e8 04 	sts	0x04E8, r24
            SetBlink(PIN_OUT1,0x3028,B);
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	68 e2       	ldi	r22, 0x28	; 40
    30c0:	70 e3       	ldi	r23, 0x30	; 48
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 8a 02 	call	0x514	; 0x514 <SetBlink>
            RTE_WriteBufferUart("HEREOff\n");
    30ca:	88 e7       	ldi	r24, 0x78	; 120
    30cc:	93 e0       	ldi	r25, 0x03	; 3
    30ce:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
        }
    }
    if(ESP_CmdSndOK==ConnectCommand())
    30d2:	0e 94 11 05 	call	0xa22	; 0xa22 <ConnectCommand>
    30d6:	81 11       	cpse	r24, r1
    30d8:	16 c0       	rjmp	.+44     	; 0x3106 <task5+0x196>
    {
        RTE_WriteBufferUart("HEREON\n");
    30da:	81 e8       	ldi	r24, 0x81	; 129
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
        ConnectionLost=0;
    30e2:	10 92 e8 04 	sts	0x04E8, r1
        ESP_flags.Server_flag=0;
    30e6:	80 91 e9 04 	lds	r24, 0x04E9
        ESP_flags.Request_Flag=0;
    30ea:	8b 7f       	andi	r24, 0xFB	; 251
    30ec:	87 7f       	andi	r24, 0xF7	; 247
    30ee:	80 93 e9 04 	sts	0x04E9, r24
        done=0;
    30f2:	10 92 ea 04 	sts	0x04EA, r1
        SetBlink(PIN_OUT1,0x3000,B);
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	70 e3       	ldi	r23, 0x30	; 48
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0e 94 8a 02 	call	0x514	; 0x514 <SetBlink>
    }
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	08 95       	ret

00003114 <task1Open>:
    return 0;
}
uint16_t task1Open(void)
{

    PinOutConfig(0,PIN_OUT2,C);
    3114:	41 e0       	ldi	r20, 0x01	; 1
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
    PinOutConfig(0,PIN_OUT3,C);
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
    PinOutConfig(1,PIN_OUT1,B);
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
    //uart_string("In open 1");

    return 0;
}
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	08 95       	ret

00003138 <task2Open>:
uint16_t task2Open(void)
{

    //uart_string("In open 2");
    PinOutConfig(0,PIN_OUT2,B);
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	61 e0       	ldi	r22, 0x01	; 1
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
	PinOutput(1,PIN_OUT2,B);
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	61 e0       	ldi	r22, 0x01	; 1
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
    PinOutConfig(1,PIN_OUT1,B);
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	60 e0       	ldi	r22, 0x00	; 0
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
    PinOutConfig(1,PIN_OUT8,D);
    3156:	42 e0       	ldi	r20, 0x02	; 2
    3158:	67 e0       	ldi	r22, 0x07	; 7
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>

    return 0;
}
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	08 95       	ret

00003166 <task3Open>:
uint16_t task3Open(void)
{
    uart_string("In open 3");
    3166:	89 e8       	ldi	r24, 0x89	; 137
    3168:	93 e0       	ldi	r25, 0x03	; 3
    316a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
    uart_num(countSize());
    316e:	0e 94 1d 12 	call	0x243a	; 0x243a <countSize>
    3172:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
    return 0;
}
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	08 95       	ret

0000317c <task4Open>:
uint16_t task4Open(void)
{
    static uint16_t tracker;
    tracker++;
    317c:	80 91 f4 04 	lds	r24, 0x04F4
    3180:	90 91 f5 04 	lds	r25, 0x04F5
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	90 93 f5 04 	sts	0x04F5, r25
    318a:	80 93 f4 04 	sts	0x04F4, r24
    if(tracker>500)
    318e:	85 3f       	cpi	r24, 0xF5	; 245
    3190:	91 40       	sbci	r25, 0x01	; 1
    3192:	40 f0       	brcs	.+16     	; 0x31a4 <task4Open+0x28>
    {
        RTE_WriteBufferUart("open4");
    3194:	83 e9       	ldi	r24, 0x93	; 147
    3196:	93 e0       	ldi	r25, 0x03	; 3
    3198:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Rte_Uart_WriteBuffer>
        //uart_string("open4c");
        tracker=0;
    319c:	10 92 f5 04 	sts	0x04F5, r1
    31a0:	10 92 f4 04 	sts	0x04F4, r1
    }

    PinOutConfig(0,PIN_OUT3,B);
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	62 e0       	ldi	r22, 0x02	; 2
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
    PinOutConfig(1,PIN_OUT7,D);
    31ae:	42 e0       	ldi	r20, 0x02	; 2
    31b0:	66 e0       	ldi	r22, 0x06	; 6
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <PinOutConfig>
    PinOutput(1,PIN_OUT3,B);
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	62 e0       	ldi	r22, 0x02	; 2
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
    PinOutput(0,PIN_OUT7,D);
    31c2:	42 e0       	ldi	r20, 0x02	; 2
    31c4:	66 e0       	ldi	r22, 0x06	; 6
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <PinOutput>
    return 0;
}
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	08 95       	ret

000031d2 <task5Open>:

uint16_t task5Open(void)
{
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	00 d0       	rcall	.+0      	; 0x31dc <task5Open+0xa>
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31e0:	2f e7       	ldi	r18, 0x7F	; 127
    31e2:	8a e1       	ldi	r24, 0x1A	; 26
    31e4:	96 e0       	ldi	r25, 0x06	; 6
    31e6:	21 50       	subi	r18, 0x01	; 1
    31e8:	80 40       	sbci	r24, 0x00	; 0
    31ea:	90 40       	sbci	r25, 0x00	; 0
    31ec:	e1 f7       	brne	.-8      	; 0x31e6 <task5Open+0x14>
    31ee:	00 c0       	rjmp	.+0      	; 0x31f0 <task5Open+0x1e>
    31f0:	00 00       	nop
    _delay_ms(2000);
    uart_init();
    31f2:	0e 94 3f 0b 	call	0x167e	; 0x167e <uart_init>
    PushEventInterface(125,ESPreadvalue,0,0);
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	6f ed       	ldi	r22, 0xDF	; 223
    31fe:	72 e0       	ldi	r23, 0x02	; 2
    3200:	8d e7       	ldi	r24, 0x7D	; 125
    3202:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    PushEventInterface(175,SignalHandlerFunc,0,0);
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	50 e0       	ldi	r21, 0x00	; 0
    320c:	67 e3       	ldi	r22, 0x37	; 55
    320e:	71 e1       	ldi	r23, 0x11	; 17
    3210:	8f ea       	ldi	r24, 0xAF	; 175
    3212:	0e 94 80 12 	call	0x2500	; 0x2500 <PushEventInterface>
    uint16_t Address;
    Address=task6;
    3216:	81 e6       	ldi	r24, 0x61	; 97
    3218:	94 e1       	ldi	r25, 0x14	; 20
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
    ESPCallBack(&Address);
    321e:	ce 01       	movw	r24, r28
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ESPCallBack>
    OutPutVariableRegister(&SensorValue,1,0);
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	61 e0       	ldi	r22, 0x01	; 1
    322a:	8a ec       	ldi	r24, 0xCA	; 202
    322c:	94 e0       	ldi	r25, 0x04	; 4
    322e:	0e 94 56 10 	call	0x20ac	; 0x20ac <OutPutVariableRegister>
    	}
*/
    //ssd1306_Rectangle(0,5);
   // ssd1306_String_font6x8("Menu",0,7);
    //ssd1306_String_font6x8("Back",(127-6*4),7);
    uart_string("In open 5");
    3232:	89 e9       	ldi	r24, 0x99	; 153
    3234:	93 e0       	ldi	r25, 0x03	; 3
    3236:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <uart_string>
    while(NvmReadSync(Nvm_OH,&hours)!=0)
    323a:	66 ef       	ldi	r22, 0xF6	; 246
    323c:	74 e0       	ldi	r23, 0x04	; 4
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	0e 94 0d 11 	call	0x221a	; 0x221a <NvmReadSync>
    3244:	81 11       	cpse	r24, r1
    3246:	f9 cf       	rjmp	.-14     	; 0x323a <task5Open+0x68>

    }


    uint8_t * point=(uint8_t *)&hours.OperatingHours;
    uart_num(point[0]);
    3248:	06 ef       	ldi	r16, 0xF6	; 246
    324a:	14 e0       	ldi	r17, 0x04	; 4
    324c:	f8 01       	movw	r30, r16
    324e:	80 81       	ld	r24, Z
    3250:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
    uart_num(point[1]);
    3254:	f8 01       	movw	r30, r16
    3256:	81 81       	ldd	r24, Z+1	; 0x01
    3258:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
    uart_num(point[2]);
    325c:	f8 01       	movw	r30, r16
    325e:	82 81       	ldd	r24, Z+2	; 0x02
    3260:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
    uart_num(point[3]);
    3264:	f8 01       	movw	r30, r16
    3266:	83 81       	ldd	r24, Z+3	; 0x03
    3268:	0e 94 a1 0b 	call	0x1742	; 0x1742 <uart_num>
	hours.OperatingHours=0x01020304;
    326c:	84 e0       	ldi	r24, 0x04	; 4
    326e:	93 e0       	ldi	r25, 0x03	; 3
    3270:	a2 e0       	ldi	r26, 0x02	; 2
    3272:	b1 e0       	ldi	r27, 0x01	; 1
    3274:	80 93 f6 04 	sts	0x04F6, r24
    3278:	90 93 f7 04 	sts	0x04F7, r25
    327c:	a0 93 f8 04 	sts	0x04F8, r26
    3280:	b0 93 f9 04 	sts	0x04F9, r27
	StoreNVM(Nvm_OH,(uint8_t*)&hours,0);
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	b8 01       	movw	r22, r16
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	0e 94 c5 10 	call	0x218a	; 0x218a <StoreNVM>
	//PopulateSSDbuffer("555",0,1);
	//PopulateSSDbuffer("Tank level:",0,3);
	
    static Nvm_T_TankOverflow Tankov;
    ESP_Init();
    328e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ESP_Init>
    static uint8_t testnvm=9;
    //Tankov.Tank=2;
    a.LargestValue=52;
    3292:	84 e3       	ldi	r24, 0x34	; 52
    3294:	80 93 fa 04 	sts	0x04FA, r24
    f.LargestValue=48;
    3298:	80 e3       	ldi	r24, 0x30	; 48
    329a:	80 93 e7 04 	sts	0x04E7, r24
    c.LargestValue=54;
    329e:	86 e3       	ldi	r24, 0x36	; 54
    32a0:	80 93 fb 04 	sts	0x04FB, r24
    uart_num(GetCurrentEvent()->ptr[0]);*/
    //uart_string("here\n");
    //PrintEvents();
    //uart_string("\n");
    return 0;
}
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	08 95       	ret

000032b6 <HookupTasks>:
    //uart_num(event);
    //uart_string("\n");
    //if(event==0x01)
    //{

    if(UartEvents==0x01)
    32b6:	80 91 1e 05 	lds	r24, 0x051E
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	11 f0       	breq	.+4      	; 0x32c2 <HookupTasks+0xc>
        //DebugMode();
    }
    else
    {
        // ESPreadvalue(PopInterface);
        checkRecievedData();
    32be:	0e 94 ae 05 	call	0xb5c	; 0xb5c <checkRecievedData>
    32c2:	08 95       	ret

000032c4 <TaskFrames>:
		//break;
	//}
//}*/
		
uint16_t TaskFrames()
{
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <TaskFrames+0x6>
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <TaskFrames+0x8>
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
	static uint8_t FrameNo,SubframeNo,SubSubframe;
	char val[4]="255";
    32d0:	82 e3       	ldi	r24, 0x32	; 50
    32d2:	95 e3       	ldi	r25, 0x35	; 53
    32d4:	a5 e3       	ldi	r26, 0x35	; 53
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	9a 83       	std	Y+2, r25	; 0x02
    32dc:	ab 83       	std	Y+3, r26	; 0x03
    32de:	bc 83       	std	Y+4, r27	; 0x04
	switch (FrameNo)
    32e0:	80 91 fc 04 	lds	r24, 0x04FC
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	89 f0       	breq	.+34     	; 0x330a <TaskFrames+0x46>
    32e8:	30 f0       	brcs	.+12     	; 0x32f6 <TaskFrames+0x32>
    32ea:	82 30       	cpi	r24, 0x02	; 2
    32ec:	49 f1       	breq	.+82     	; 0x3340 <TaskFrames+0x7c>
    32ee:	83 30       	cpi	r24, 0x03	; 3
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <TaskFrames+0x30>
    32f2:	cb c2       	rjmp	.+1430   	; 0x388a <TaskFrames+0x5c6>
    32f4:	2f c0       	rjmp	.+94     	; 0x3354 <TaskFrames+0x90>
	{
		case 0:
		SSDSetFramePos(0);
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SSDSetFramePos>
		FrameNo++;
    32fe:	80 91 fc 04 	lds	r24, 0x04FC
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	80 93 fc 04 	sts	0x04FC, r24
		break;
    3308:	c0 c2       	rjmp	.+1408   	; 0x388a <TaskFrames+0x5c6>
		case 1:
		num2CharArray(SensorValue,val);
    330a:	be 01       	movw	r22, r28
    330c:	6f 5f       	subi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	80 91 ca 04 	lds	r24, 0x04CA
    3314:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <num2CharArray>
		val[3]='\0';
    3318:	1c 82       	std	Y+4, r1	; 0x04
		PopulateSSDbuffer(val,66,2);
    331a:	42 e0       	ldi	r20, 0x02	; 2
    331c:	62 e4       	ldi	r22, 0x42	; 66
    331e:	ce 01       	movw	r24, r28
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
		if(SwitchPressed==1)
    3326:	80 91 e3 04 	lds	r24, 0x04E3
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	09 f0       	breq	.+2      	; 0x3330 <TaskFrames+0x6c>
    332e:	ad c2       	rjmp	.+1370   	; 0x388a <TaskFrames+0x5c6>
		{
			FrameNo++;
    3330:	80 91 fc 04 	lds	r24, 0x04FC
    3334:	8f 5f       	subi	r24, 0xFF	; 255
    3336:	80 93 fc 04 	sts	0x04FC, r24
			SwitchPressed=0;
    333a:	10 92 e3 04 	sts	0x04E3, r1
    333e:	a5 c2       	rjmp	.+1354   	; 0x388a <TaskFrames+0x5c6>
		}
		break;
		case 2:
		SSDSetFramePos(1);
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SSDSetFramePos>
		FrameNo++;
    3348:	80 91 fc 04 	lds	r24, 0x04FC
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	80 93 fc 04 	sts	0x04FC, r24
		break;
    3352:	9b c2       	rjmp	.+1334   	; 0x388a <TaskFrames+0x5c6>
		case 3:
		switch (SubframeNo)
    3354:	80 91 fd 04 	lds	r24, 0x04FD
    3358:	83 30       	cpi	r24, 0x03	; 3
    335a:	09 f4       	brne	.+2      	; 0x335e <TaskFrames+0x9a>
    335c:	00 c1       	rjmp	.+512    	; 0x355e <TaskFrames+0x29a>
    335e:	28 f4       	brcc	.+10     	; 0x336a <TaskFrames+0xa6>
    3360:	81 30       	cpi	r24, 0x01	; 1
    3362:	11 f1       	breq	.+68     	; 0x33a8 <TaskFrames+0xe4>
    3364:	08 f0       	brcs	.+2      	; 0x3368 <TaskFrames+0xa4>
    3366:	45 c0       	rjmp	.+138    	; 0x33f2 <TaskFrames+0x12e>
    3368:	0c c0       	rjmp	.+24     	; 0x3382 <TaskFrames+0xbe>
    336a:	85 30       	cpi	r24, 0x05	; 5
    336c:	09 f4       	brne	.+2      	; 0x3370 <TaskFrames+0xac>
    336e:	a5 c1       	rjmp	.+842    	; 0x36ba <TaskFrames+0x3f6>
    3370:	08 f4       	brcc	.+2      	; 0x3374 <TaskFrames+0xb0>
    3372:	1c c1       	rjmp	.+568    	; 0x35ac <TaskFrames+0x2e8>
    3374:	86 30       	cpi	r24, 0x06	; 6
    3376:	09 f4       	brne	.+2      	; 0x337a <TaskFrames+0xb6>
    3378:	c7 c1       	rjmp	.+910    	; 0x3708 <TaskFrames+0x444>
    337a:	87 30       	cpi	r24, 0x07	; 7
    337c:	09 f0       	breq	.+2      	; 0x3380 <TaskFrames+0xbc>
    337e:	85 c2       	rjmp	.+1290   	; 0x388a <TaskFrames+0x5c6>
    3380:	63 c2       	rjmp	.+1222   	; 0x3848 <TaskFrames+0x584>
		{
			case 0:
			if(SwitchPressed==1)
    3382:	80 91 e3 04 	lds	r24, 0x04E3
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	09 f0       	breq	.+2      	; 0x338c <TaskFrames+0xc8>
    338a:	7f c2       	rjmp	.+1278   	; 0x388a <TaskFrames+0x5c6>
			{
				PopulateSSDbuffer("#",0,2);
    338c:	42 e0       	ldi	r20, 0x02	; 2
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	8c ef       	ldi	r24, 0xFC	; 252
    3392:	92 e0       	ldi	r25, 0x02	; 2
    3394:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
				SubframeNo++;
    3398:	80 91 fd 04 	lds	r24, 0x04FD
    339c:	8f 5f       	subi	r24, 0xFF	; 255
    339e:	80 93 fd 04 	sts	0x04FD, r24
				SwitchPressed=0;
    33a2:	10 92 e3 04 	sts	0x04E3, r1
    33a6:	71 c2       	rjmp	.+1250   	; 0x388a <TaskFrames+0x5c6>
			}
			break;
			case 1:
			BlinkSelection(0,2,"1");
    33a8:	40 ef       	ldi	r20, 0xF0	; 240
    33aa:	52 e0       	ldi	r21, 0x02	; 2
    33ac:	62 e0       	ldi	r22, 0x02	; 2
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
			if(SwitchPressed==2||SwitchPressed==3)
    33b4:	80 91 e3 04 	lds	r24, 0x04E3
    33b8:	98 2f       	mov	r25, r24
    33ba:	92 50       	subi	r25, 0x02	; 2
    33bc:	92 30       	cpi	r25, 0x02	; 2
    33be:	50 f4       	brcc	.+20     	; 0x33d4 <TaskFrames+0x110>
			{
				//FrameNo=2;
				SubframeNo=2;
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	80 93 fd 04 	sts	0x04FD, r24
				SSDSetFramePos(2);
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SSDSetFramePos>
				SwitchPressed=0;
    33ce:	10 92 e3 04 	sts	0x04E3, r1
    33d2:	5b c2       	rjmp	.+1206   	; 0x388a <TaskFrames+0x5c6>
			}
			else if(SwitchPressed==1)
    33d4:	81 30       	cpi	r24, 0x01	; 1
    33d6:	09 f0       	breq	.+2      	; 0x33da <TaskFrames+0x116>
    33d8:	58 c2       	rjmp	.+1200   	; 0x388a <TaskFrames+0x5c6>
			{
				SubframeNo=3;
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	80 93 fd 04 	sts	0x04FD, r24
				SwitchPressed=0;
    33e0:	10 92 e3 04 	sts	0x04E3, r1
				PopulateSSDbuffer("1",0,2);
    33e4:	42 e0       	ldi	r20, 0x02	; 2
    33e6:	60 e0       	ldi	r22, 0x00	; 0
    33e8:	80 ef       	ldi	r24, 0xF0	; 240
    33ea:	92 e0       	ldi	r25, 0x02	; 2
    33ec:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    33f0:	4c c2       	rjmp	.+1176   	; 0x388a <TaskFrames+0x5c6>
			}
			break;
			case 2:
			switch (SubSubframe)
    33f2:	80 91 fe 04 	lds	r24, 0x04FE
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	09 f4       	brne	.+2      	; 0x33fc <TaskFrames+0x138>
    33fa:	3f c0       	rjmp	.+126    	; 0x347a <TaskFrames+0x1b6>
    33fc:	30 f4       	brcc	.+12     	; 0x340a <TaskFrames+0x146>
    33fe:	88 23       	and	r24, r24
    3400:	59 f0       	breq	.+22     	; 0x3418 <TaskFrames+0x154>
    3402:	81 30       	cpi	r24, 0x01	; 1
    3404:	09 f0       	breq	.+2      	; 0x3408 <TaskFrames+0x144>
    3406:	41 c2       	rjmp	.+1154   	; 0x388a <TaskFrames+0x5c6>
    3408:	11 c0       	rjmp	.+34     	; 0x342c <TaskFrames+0x168>
    340a:	83 30       	cpi	r24, 0x03	; 3
    340c:	09 f4       	brne	.+2      	; 0x3410 <TaskFrames+0x14c>
    340e:	5c c0       	rjmp	.+184    	; 0x34c8 <TaskFrames+0x204>
    3410:	84 30       	cpi	r24, 0x04	; 4
    3412:	09 f0       	breq	.+2      	; 0x3416 <TaskFrames+0x152>
    3414:	3a c2       	rjmp	.+1140   	; 0x388a <TaskFrames+0x5c6>
    3416:	7f c0       	rjmp	.+254    	; 0x3516 <TaskFrames+0x252>
			{
				case 0:
				if(SwitchPressed==1)
    3418:	80 91 e3 04 	lds	r24, 0x04E3
    341c:	81 30       	cpi	r24, 0x01	; 1
    341e:	09 f0       	breq	.+2      	; 0x3422 <TaskFrames+0x15e>
    3420:	34 c2       	rjmp	.+1128   	; 0x388a <TaskFrames+0x5c6>
				{
					SwitchPressed=0;
    3422:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    3426:	80 93 fe 04 	sts	0x04FE, r24
    342a:	2f c2       	rjmp	.+1118   	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 1:
				
				if(SwitchPressed==2||SwitchPressed==3)
    342c:	80 91 e3 04 	lds	r24, 0x04E3
    3430:	98 2f       	mov	r25, r24
    3432:	92 50       	subi	r25, 0x02	; 2
    3434:	92 30       	cpi	r25, 0x02	; 2
    3436:	60 f4       	brcc	.+24     	; 0x3450 <TaskFrames+0x18c>
				{
					PopulateSSDbuffer("o",60,2);
    3438:	42 e0       	ldi	r20, 0x02	; 2
    343a:	6c e3       	ldi	r22, 0x3C	; 60
    343c:	83 ea       	ldi	r24, 0xA3	; 163
    343e:	93 e0       	ldi	r25, 0x03	; 3
    3440:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
					SwitchPressed=0;
    3444:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=4;
    3448:	84 e0       	ldi	r24, 0x04	; 4
    344a:	80 93 fe 04 	sts	0x04FE, r24
    344e:	1d c2       	rjmp	.+1082   	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	61 f4       	brne	.+24     	; 0x346c <TaskFrames+0x1a8>
				{
					SwitchPressed=0;
    3454:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	80 93 fe 04 	sts	0x04FE, r24
					PopulateSSDbuffer("1",0,2);
    345e:	42 e0       	ldi	r20, 0x02	; 2
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	80 ef       	ldi	r24, 0xF0	; 240
    3464:	92 e0       	ldi	r25, 0x02	; 2
    3466:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    346a:	0f c2       	rjmp	.+1054   	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(0,2,"1");
    346c:	40 ef       	ldi	r20, 0xF0	; 240
    346e:	52 e0       	ldi	r21, 0x02	; 2
    3470:	62 e0       	ldi	r22, 0x02	; 2
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    3478:	08 c2       	rjmp	.+1040   	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 2:if(SwitchPressed==2||SwitchPressed==3)
    347a:	80 91 e3 04 	lds	r24, 0x04E3
    347e:	98 2f       	mov	r25, r24
    3480:	92 50       	subi	r25, 0x02	; 2
    3482:	92 30       	cpi	r25, 0x02	; 2
    3484:	60 f4       	brcc	.+24     	; 0x349e <TaskFrames+0x1da>
				{
					PopulateSSDbuffer("o",60,3);
    3486:	43 e0       	ldi	r20, 0x03	; 3
    3488:	6c e3       	ldi	r22, 0x3C	; 60
    348a:	83 ea       	ldi	r24, 0xA3	; 163
    348c:	93 e0       	ldi	r25, 0x03	; 3
    348e:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
					SwitchPressed=0;
    3492:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=4;
    3496:	84 e0       	ldi	r24, 0x04	; 4
    3498:	80 93 fe 04 	sts	0x04FE, r24
    349c:	f6 c1       	rjmp	.+1004   	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    349e:	81 30       	cpi	r24, 0x01	; 1
    34a0:	61 f4       	brne	.+24     	; 0x34ba <TaskFrames+0x1f6>
				{
					SwitchPressed=0;
    34a2:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	80 93 fe 04 	sts	0x04FE, r24
					PopulateSSDbuffer("2",0,3);
    34ac:	43 e0       	ldi	r20, 0x03	; 3
    34ae:	60 e0       	ldi	r22, 0x00	; 0
    34b0:	8a ee       	ldi	r24, 0xEA	; 234
    34b2:	92 e0       	ldi	r25, 0x02	; 2
    34b4:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    34b8:	e8 c1       	rjmp	.+976    	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(0,3,"2");
    34ba:	4a ee       	ldi	r20, 0xEA	; 234
    34bc:	52 e0       	ldi	r21, 0x02	; 2
    34be:	63 e0       	ldi	r22, 0x03	; 3
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    34c6:	e1 c1       	rjmp	.+962    	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 3:
				if(SwitchPressed==2||SwitchPressed==3)
    34c8:	80 91 e3 04 	lds	r24, 0x04E3
    34cc:	98 2f       	mov	r25, r24
    34ce:	92 50       	subi	r25, 0x02	; 2
    34d0:	92 30       	cpi	r25, 0x02	; 2
    34d2:	60 f4       	brcc	.+24     	; 0x34ec <TaskFrames+0x228>
				{
					PopulateSSDbuffer("o",60,4);
    34d4:	44 e0       	ldi	r20, 0x04	; 4
    34d6:	6c e3       	ldi	r22, 0x3C	; 60
    34d8:	83 ea       	ldi	r24, 0xA3	; 163
    34da:	93 e0       	ldi	r25, 0x03	; 3
    34dc:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
					SwitchPressed=0;
    34e0:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=4;
    34e4:	84 e0       	ldi	r24, 0x04	; 4
    34e6:	80 93 fe 04 	sts	0x04FE, r24
    34ea:	cf c1       	rjmp	.+926    	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    34ec:	81 30       	cpi	r24, 0x01	; 1
    34ee:	61 f4       	brne	.+24     	; 0x3508 <TaskFrames+0x244>
				{
					SwitchPressed=0;
    34f0:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	80 93 fe 04 	sts	0x04FE, r24
					PopulateSSDbuffer("3",0,4);
    34fa:	44 e0       	ldi	r20, 0x04	; 4
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	81 e9       	ldi	r24, 0x91	; 145
    3500:	93 e0       	ldi	r25, 0x03	; 3
    3502:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    3506:	c1 c1       	rjmp	.+898    	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(0,4,"3");
    3508:	41 e9       	ldi	r20, 0x91	; 145
    350a:	53 e0       	ldi	r21, 0x03	; 3
    350c:	64 e0       	ldi	r22, 0x04	; 4
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    3514:	ba c1       	rjmp	.+884    	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 4:
				if(SwitchPressed==2||SwitchPressed==3)
    3516:	80 91 e3 04 	lds	r24, 0x04E3
    351a:	98 2f       	mov	r25, r24
    351c:	92 50       	subi	r25, 0x02	; 2
    351e:	92 30       	cpi	r25, 0x02	; 2
    3520:	50 f4       	brcc	.+20     	; 0x3536 <TaskFrames+0x272>
				{
					FrameNo=2;
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	80 93 fc 04 	sts	0x04FC, r24
					SubframeNo=0;
    3528:	10 92 fd 04 	sts	0x04FD, r1
					SwitchPressed=0;
    352c:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=0;
    3530:	10 92 fe 04 	sts	0x04FE, r1
    3534:	aa c1       	rjmp	.+852    	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    3536:	81 30       	cpi	r24, 0x01	; 1
    3538:	59 f4       	brne	.+22     	; 0x3550 <TaskFrames+0x28c>
				{
					SwitchPressed=0;
    353a:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=0;
    353e:	10 92 fe 04 	sts	0x04FE, r1
					PopulateSSDbuffer("BACK",48,7);
    3542:	47 e0       	ldi	r20, 0x07	; 7
    3544:	60 e3       	ldi	r22, 0x30	; 48
    3546:	85 ea       	ldi	r24, 0xA5	; 165
    3548:	93 e0       	ldi	r25, 0x03	; 3
    354a:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    354e:	9d c1       	rjmp	.+826    	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(48,7,"BACK ");
    3550:	4a ea       	ldi	r20, 0xAA	; 170
    3552:	53 e0       	ldi	r21, 0x03	; 3
    3554:	67 e0       	ldi	r22, 0x07	; 7
    3556:	80 e3       	ldi	r24, 0x30	; 48
    3558:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    355c:	96 c1       	rjmp	.+812    	; 0x388a <TaskFrames+0x5c6>
				/*Your code here */
				break;
			}
			break;
			case 3:
			BlinkSelection(0,3,"2");
    355e:	4a ee       	ldi	r20, 0xEA	; 234
    3560:	52 e0       	ldi	r21, 0x02	; 2
    3562:	63 e0       	ldi	r22, 0x03	; 3
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
			if(SwitchPressed==2||SwitchPressed==3)
    356a:	80 91 e3 04 	lds	r24, 0x04E3
    356e:	98 2f       	mov	r25, r24
    3570:	92 50       	subi	r25, 0x02	; 2
    3572:	92 30       	cpi	r25, 0x02	; 2
    3574:	60 f4       	brcc	.+24     	; 0x358e <TaskFrames+0x2ca>
			{
				//FrameNo=2;
				SubframeNo=4;
    3576:	84 e0       	ldi	r24, 0x04	; 4
    3578:	80 93 fd 04 	sts	0x04FD, r24
				SubSubframe=0;
    357c:	10 92 fe 04 	sts	0x04FE, r1
				SSDSetFramePos(3);
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SSDSetFramePos>
				SwitchPressed=0;
    3588:	10 92 e3 04 	sts	0x04E3, r1
    358c:	7e c1       	rjmp	.+764    	; 0x388a <TaskFrames+0x5c6>
			}
			else if(SwitchPressed==1)
    358e:	81 30       	cpi	r24, 0x01	; 1
    3590:	09 f0       	breq	.+2      	; 0x3594 <TaskFrames+0x2d0>
    3592:	7b c1       	rjmp	.+758    	; 0x388a <TaskFrames+0x5c6>
			{
				SwitchPressed=0;
    3594:	10 92 e3 04 	sts	0x04E3, r1
				SubframeNo=5;
    3598:	85 e0       	ldi	r24, 0x05	; 5
    359a:	80 93 fd 04 	sts	0x04FD, r24
				PopulateSSDbuffer("2",0,3);
    359e:	43 e0       	ldi	r20, 0x03	; 3
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	8a ee       	ldi	r24, 0xEA	; 234
    35a4:	92 e0       	ldi	r25, 0x02	; 2
    35a6:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    35aa:	6f c1       	rjmp	.+734    	; 0x388a <TaskFrames+0x5c6>
			}
			break;
			case 4:
			switch (SubSubframe)
    35ac:	80 91 fe 04 	lds	r24, 0x04FE
    35b0:	81 30       	cpi	r24, 0x01	; 1
    35b2:	89 f0       	breq	.+34     	; 0x35d6 <TaskFrames+0x312>
    35b4:	30 f0       	brcs	.+12     	; 0x35c2 <TaskFrames+0x2fe>
    35b6:	82 30       	cpi	r24, 0x02	; 2
    35b8:	a9 f1       	breq	.+106    	; 0x3624 <TaskFrames+0x360>
    35ba:	83 30       	cpi	r24, 0x03	; 3
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <TaskFrames+0x2fc>
    35be:	65 c1       	rjmp	.+714    	; 0x388a <TaskFrames+0x5c6>
    35c0:	58 c0       	rjmp	.+176    	; 0x3672 <TaskFrames+0x3ae>
			{
				case 0:
				if(SwitchPressed==1)
    35c2:	80 91 e3 04 	lds	r24, 0x04E3
    35c6:	81 30       	cpi	r24, 0x01	; 1
    35c8:	09 f0       	breq	.+2      	; 0x35cc <TaskFrames+0x308>
    35ca:	5f c1       	rjmp	.+702    	; 0x388a <TaskFrames+0x5c6>
				{
					SwitchPressed=0;
    35cc:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    35d0:	80 93 fe 04 	sts	0x04FE, r24
    35d4:	5a c1       	rjmp	.+692    	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 1:
				
				if(SwitchPressed==2||SwitchPressed==3)
    35d6:	80 91 e3 04 	lds	r24, 0x04E3
    35da:	98 2f       	mov	r25, r24
    35dc:	92 50       	subi	r25, 0x02	; 2
    35de:	92 30       	cpi	r25, 0x02	; 2
    35e0:	60 f4       	brcc	.+24     	; 0x35fa <TaskFrames+0x336>
				{
					PopulateSSDbuffer("o",60,2);
    35e2:	42 e0       	ldi	r20, 0x02	; 2
    35e4:	6c e3       	ldi	r22, 0x3C	; 60
    35e6:	83 ea       	ldi	r24, 0xA3	; 163
    35e8:	93 e0       	ldi	r25, 0x03	; 3
    35ea:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
					
					SwitchPressed=0;
    35ee:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=3;
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	80 93 fe 04 	sts	0x04FE, r24
    35f8:	48 c1       	rjmp	.+656    	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	61 f4       	brne	.+24     	; 0x3616 <TaskFrames+0x352>
				{
					SwitchPressed=0;
    35fe:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    3602:	82 e0       	ldi	r24, 0x02	; 2
    3604:	80 93 fe 04 	sts	0x04FE, r24
					PopulateSSDbuffer("1",0,2);
    3608:	42 e0       	ldi	r20, 0x02	; 2
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	80 ef       	ldi	r24, 0xF0	; 240
    360e:	92 e0       	ldi	r25, 0x02	; 2
    3610:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    3614:	3a c1       	rjmp	.+628    	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(0,2,"1");
    3616:	40 ef       	ldi	r20, 0xF0	; 240
    3618:	52 e0       	ldi	r21, 0x02	; 2
    361a:	62 e0       	ldi	r22, 0x02	; 2
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    3622:	33 c1       	rjmp	.+614    	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 2:if(SwitchPressed==2||SwitchPressed==3)
    3624:	80 91 e3 04 	lds	r24, 0x04E3
    3628:	98 2f       	mov	r25, r24
    362a:	92 50       	subi	r25, 0x02	; 2
    362c:	92 30       	cpi	r25, 0x02	; 2
    362e:	60 f4       	brcc	.+24     	; 0x3648 <TaskFrames+0x384>
				{
					PopulateSSDbuffer("o",60,3);
    3630:	43 e0       	ldi	r20, 0x03	; 3
    3632:	6c e3       	ldi	r22, 0x3C	; 60
    3634:	83 ea       	ldi	r24, 0xA3	; 163
    3636:	93 e0       	ldi	r25, 0x03	; 3
    3638:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
					SwitchPressed=0;
    363c:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=3;
    3640:	83 e0       	ldi	r24, 0x03	; 3
    3642:	80 93 fe 04 	sts	0x04FE, r24
    3646:	21 c1       	rjmp	.+578    	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    3648:	81 30       	cpi	r24, 0x01	; 1
    364a:	61 f4       	brne	.+24     	; 0x3664 <TaskFrames+0x3a0>
				{
					SwitchPressed=0;
    364c:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe++;
    3650:	83 e0       	ldi	r24, 0x03	; 3
    3652:	80 93 fe 04 	sts	0x04FE, r24
					PopulateSSDbuffer("2",0,3);
    3656:	43 e0       	ldi	r20, 0x03	; 3
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	8a ee       	ldi	r24, 0xEA	; 234
    365c:	92 e0       	ldi	r25, 0x02	; 2
    365e:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    3662:	13 c1       	rjmp	.+550    	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(0,3,"2");
    3664:	4a ee       	ldi	r20, 0xEA	; 234
    3666:	52 e0       	ldi	r21, 0x02	; 2
    3668:	63 e0       	ldi	r22, 0x03	; 3
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    3670:	0c c1       	rjmp	.+536    	; 0x388a <TaskFrames+0x5c6>
				}
				break;
				case 3:
				if(SwitchPressed==2||SwitchPressed==3)
    3672:	80 91 e3 04 	lds	r24, 0x04E3
    3676:	98 2f       	mov	r25, r24
    3678:	92 50       	subi	r25, 0x02	; 2
    367a:	92 30       	cpi	r25, 0x02	; 2
    367c:	50 f4       	brcc	.+20     	; 0x3692 <TaskFrames+0x3ce>
				{
					FrameNo=2;
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	80 93 fc 04 	sts	0x04FC, r24
					SubframeNo=0;
    3684:	10 92 fd 04 	sts	0x04FD, r1
					SwitchPressed=0;
    3688:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=0;
    368c:	10 92 fe 04 	sts	0x04FE, r1
    3690:	fc c0       	rjmp	.+504    	; 0x388a <TaskFrames+0x5c6>
				}
				else if(SwitchPressed==1)
    3692:	81 30       	cpi	r24, 0x01	; 1
    3694:	59 f4       	brne	.+22     	; 0x36ac <TaskFrames+0x3e8>
				{
					SwitchPressed=0;
    3696:	10 92 e3 04 	sts	0x04E3, r1
					SubSubframe=0;
    369a:	10 92 fe 04 	sts	0x04FE, r1
					PopulateSSDbuffer("BACK",48,7);
    369e:	47 e0       	ldi	r20, 0x07	; 7
    36a0:	60 e3       	ldi	r22, 0x30	; 48
    36a2:	85 ea       	ldi	r24, 0xA5	; 165
    36a4:	93 e0       	ldi	r25, 0x03	; 3
    36a6:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    36aa:	ef c0       	rjmp	.+478    	; 0x388a <TaskFrames+0x5c6>
				}
				else
				{
					BlinkSelection(48,7,"BACK ");
    36ac:	4a ea       	ldi	r20, 0xAA	; 170
    36ae:	53 e0       	ldi	r21, 0x03	; 3
    36b0:	67 e0       	ldi	r22, 0x07	; 7
    36b2:	80 e3       	ldi	r24, 0x30	; 48
    36b4:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    36b8:	e8 c0       	rjmp	.+464    	; 0x388a <TaskFrames+0x5c6>
				/*Your code here */
				break;
			}
			break;			
			case 5:
			BlinkSelection(0,4,"3");
    36ba:	41 e9       	ldi	r20, 0x91	; 145
    36bc:	53 e0       	ldi	r21, 0x03	; 3
    36be:	64 e0       	ldi	r22, 0x04	; 4
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
			if(SwitchPressed==2||SwitchPressed==3)
    36c6:	80 91 e3 04 	lds	r24, 0x04E3
    36ca:	98 2f       	mov	r25, r24
    36cc:	92 50       	subi	r25, 0x02	; 2
    36ce:	92 30       	cpi	r25, 0x02	; 2
    36d0:	60 f4       	brcc	.+24     	; 0x36ea <TaskFrames+0x426>
			{
				//FrameNo=2;
				SubframeNo=6;
    36d2:	86 e0       	ldi	r24, 0x06	; 6
    36d4:	80 93 fd 04 	sts	0x04FD, r24
				SubSubframe=0;
    36d8:	10 92 fe 04 	sts	0x04FE, r1
				SSDSetFramePos(4);
    36dc:	84 e0       	ldi	r24, 0x04	; 4
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SSDSetFramePos>
				SwitchPressed=0;
    36e4:	10 92 e3 04 	sts	0x04E3, r1
    36e8:	d0 c0       	rjmp	.+416    	; 0x388a <TaskFrames+0x5c6>
			}
			else if(SwitchPressed==1)
    36ea:	81 30       	cpi	r24, 0x01	; 1
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <TaskFrames+0x42c>
    36ee:	cd c0       	rjmp	.+410    	; 0x388a <TaskFrames+0x5c6>
			{
				SwitchPressed=0;
    36f0:	10 92 e3 04 	sts	0x04E3, r1
				SubframeNo=7;
    36f4:	87 e0       	ldi	r24, 0x07	; 7
    36f6:	80 93 fd 04 	sts	0x04FD, r24
				PopulateSSDbuffer("3",0,4);
    36fa:	44 e0       	ldi	r20, 0x04	; 4
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	81 e9       	ldi	r24, 0x91	; 145
    3700:	93 e0       	ldi	r25, 0x03	; 3
    3702:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    3706:	c1 c0       	rjmp	.+386    	; 0x388a <TaskFrames+0x5c6>
			}
			break;
			case 6:
						switch (SubSubframe)
    3708:	80 91 fe 04 	lds	r24, 0x04FE
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	91 f0       	breq	.+36     	; 0x3734 <TaskFrames+0x470>
    3710:	38 f0       	brcs	.+14     	; 0x3720 <TaskFrames+0x45c>
    3712:	82 30       	cpi	r24, 0x02	; 2
    3714:	09 f4       	brne	.+2      	; 0x3718 <TaskFrames+0x454>
    3716:	47 c0       	rjmp	.+142    	; 0x37a6 <TaskFrames+0x4e2>
    3718:	83 30       	cpi	r24, 0x03	; 3
    371a:	09 f0       	breq	.+2      	; 0x371e <TaskFrames+0x45a>
    371c:	b6 c0       	rjmp	.+364    	; 0x388a <TaskFrames+0x5c6>
    371e:	70 c0       	rjmp	.+224    	; 0x3800 <TaskFrames+0x53c>
						{
							case 0:
							if(SwitchPressed==1)
    3720:	80 91 e3 04 	lds	r24, 0x04E3
    3724:	81 30       	cpi	r24, 0x01	; 1
    3726:	09 f0       	breq	.+2      	; 0x372a <TaskFrames+0x466>
    3728:	b0 c0       	rjmp	.+352    	; 0x388a <TaskFrames+0x5c6>
							{
								SwitchPressed=0;
    372a:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe++;
    372e:	80 93 fe 04 	sts	0x04FE, r24
    3732:	ab c0       	rjmp	.+342    	; 0x388a <TaskFrames+0x5c6>
							}
							break;
							case 1:
							
							if(SwitchPressed==2||SwitchPressed==3)
    3734:	80 91 e3 04 	lds	r24, 0x04E3
    3738:	98 2f       	mov	r25, r24
    373a:	92 50       	subi	r25, 0x02	; 2
    373c:	92 30       	cpi	r25, 0x02	; 2
    373e:	f0 f4       	brcc	.+60     	; 0x377c <TaskFrames+0x4b8>
							{
								PopulateSSDbuffer("o",60,2);
    3740:	42 e0       	ldi	r20, 0x02	; 2
    3742:	6c e3       	ldi	r22, 0x3C	; 60
    3744:	83 ea       	ldi	r24, 0xA3	; 163
    3746:	93 e0       	ldi	r25, 0x03	; 3
    3748:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
								hours.OperatingHours=0x01020304;
    374c:	84 e0       	ldi	r24, 0x04	; 4
    374e:	93 e0       	ldi	r25, 0x03	; 3
    3750:	a2 e0       	ldi	r26, 0x02	; 2
    3752:	b1 e0       	ldi	r27, 0x01	; 1
    3754:	80 93 f6 04 	sts	0x04F6, r24
    3758:	90 93 f7 04 	sts	0x04F7, r25
    375c:	a0 93 f8 04 	sts	0x04F8, r26
    3760:	b0 93 f9 04 	sts	0x04F9, r27
								StoreNVM(Nvm_OH,(uint8_t*)&hours,0);
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	66 ef       	ldi	r22, 0xF6	; 246
    3768:	74 e0       	ldi	r23, 0x04	; 4
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	0e 94 c5 10 	call	0x218a	; 0x218a <StoreNVM>
								SwitchPressed=0;
    3770:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe=3;
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	80 93 fe 04 	sts	0x04FE, r24
    377a:	87 c0       	rjmp	.+270    	; 0x388a <TaskFrames+0x5c6>
							}
							else if(SwitchPressed==1)
    377c:	81 30       	cpi	r24, 0x01	; 1
    377e:	61 f4       	brne	.+24     	; 0x3798 <TaskFrames+0x4d4>
							{
								SwitchPressed=0;
    3780:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe++;
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	80 93 fe 04 	sts	0x04FE, r24
								PopulateSSDbuffer("1",0,2);
    378a:	42 e0       	ldi	r20, 0x02	; 2
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	80 ef       	ldi	r24, 0xF0	; 240
    3790:	92 e0       	ldi	r25, 0x02	; 2
    3792:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    3796:	79 c0       	rjmp	.+242    	; 0x388a <TaskFrames+0x5c6>
							}
							else
							{
								BlinkSelection(0,2,"1");
    3798:	40 ef       	ldi	r20, 0xF0	; 240
    379a:	52 e0       	ldi	r21, 0x02	; 2
    379c:	62 e0       	ldi	r22, 0x02	; 2
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    37a4:	72 c0       	rjmp	.+228    	; 0x388a <TaskFrames+0x5c6>
							}
							break;
							case 2:if(SwitchPressed==2||SwitchPressed==3)
    37a6:	80 91 e3 04 	lds	r24, 0x04E3
    37aa:	98 2f       	mov	r25, r24
    37ac:	92 50       	subi	r25, 0x02	; 2
    37ae:	92 30       	cpi	r25, 0x02	; 2
    37b0:	90 f4       	brcc	.+36     	; 0x37d6 <TaskFrames+0x512>
							{
								PopulateSSDbuffer("o",60,3);
    37b2:	43 e0       	ldi	r20, 0x03	; 3
    37b4:	6c e3       	ldi	r22, 0x3C	; 60
    37b6:	83 ea       	ldi	r24, 0xA3	; 163
    37b8:	93 e0       	ldi	r25, 0x03	; 3
    37ba:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
								StoreNVM(Nvm_OH,(uint8_t*)&hours,1);
    37be:	41 e0       	ldi	r20, 0x01	; 1
    37c0:	66 ef       	ldi	r22, 0xF6	; 246
    37c2:	74 e0       	ldi	r23, 0x04	; 4
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	0e 94 c5 10 	call	0x218a	; 0x218a <StoreNVM>
								SwitchPressed=0;
    37ca:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe=3;
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	80 93 fe 04 	sts	0x04FE, r24
    37d4:	5a c0       	rjmp	.+180    	; 0x388a <TaskFrames+0x5c6>
							}
							else if(SwitchPressed==1)
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	61 f4       	brne	.+24     	; 0x37f2 <TaskFrames+0x52e>
							{
								SwitchPressed=0;
    37da:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe++;
    37de:	83 e0       	ldi	r24, 0x03	; 3
    37e0:	80 93 fe 04 	sts	0x04FE, r24
								PopulateSSDbuffer("2",0,3);
    37e4:	43 e0       	ldi	r20, 0x03	; 3
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	8a ee       	ldi	r24, 0xEA	; 234
    37ea:	92 e0       	ldi	r25, 0x02	; 2
    37ec:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    37f0:	4c c0       	rjmp	.+152    	; 0x388a <TaskFrames+0x5c6>
							}
							else
							{
								BlinkSelection(0,3,"2");
    37f2:	4a ee       	ldi	r20, 0xEA	; 234
    37f4:	52 e0       	ldi	r21, 0x02	; 2
    37f6:	63 e0       	ldi	r22, 0x03	; 3
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    37fe:	45 c0       	rjmp	.+138    	; 0x388a <TaskFrames+0x5c6>
							}
							break;
							case 3:
							if(SwitchPressed==2||SwitchPressed==3)
    3800:	80 91 e3 04 	lds	r24, 0x04E3
    3804:	98 2f       	mov	r25, r24
    3806:	92 50       	subi	r25, 0x02	; 2
    3808:	92 30       	cpi	r25, 0x02	; 2
    380a:	50 f4       	brcc	.+20     	; 0x3820 <TaskFrames+0x55c>
							{
								FrameNo=2;
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	80 93 fc 04 	sts	0x04FC, r24
								SubframeNo=0;
    3812:	10 92 fd 04 	sts	0x04FD, r1
								SwitchPressed=0;
    3816:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe=0;
    381a:	10 92 fe 04 	sts	0x04FE, r1
    381e:	35 c0       	rjmp	.+106    	; 0x388a <TaskFrames+0x5c6>
							}
							else if(SwitchPressed==1)
    3820:	81 30       	cpi	r24, 0x01	; 1
    3822:	59 f4       	brne	.+22     	; 0x383a <TaskFrames+0x576>
							{
								SwitchPressed=0;
    3824:	10 92 e3 04 	sts	0x04E3, r1
								SubSubframe=0;
    3828:	10 92 fe 04 	sts	0x04FE, r1
								PopulateSSDbuffer("BACK",48,7);
    382c:	47 e0       	ldi	r20, 0x07	; 7
    382e:	60 e3       	ldi	r22, 0x30	; 48
    3830:	85 ea       	ldi	r24, 0xA5	; 165
    3832:	93 e0       	ldi	r25, 0x03	; 3
    3834:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
    3838:	28 c0       	rjmp	.+80     	; 0x388a <TaskFrames+0x5c6>
							}
							else
							{
								BlinkSelection(48,7,"BACK ");
    383a:	4a ea       	ldi	r20, 0xAA	; 170
    383c:	53 e0       	ldi	r21, 0x03	; 3
    383e:	67 e0       	ldi	r22, 0x07	; 7
    3840:	80 e3       	ldi	r24, 0x30	; 48
    3842:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
    3846:	21 c0       	rjmp	.+66     	; 0x388a <TaskFrames+0x5c6>
							break;
						}
						break;
			case 7:
			
			BlinkSelection(48,7,"BACK ");
    3848:	4a ea       	ldi	r20, 0xAA	; 170
    384a:	53 e0       	ldi	r21, 0x03	; 3
    384c:	67 e0       	ldi	r22, 0x07	; 7
    384e:	80 e3       	ldi	r24, 0x30	; 48
    3850:	0e 94 1a 14 	call	0x2834	; 0x2834 <BlinkSelection>
			if(SwitchPressed==2||SwitchPressed==3)
    3854:	80 91 e3 04 	lds	r24, 0x04E3
    3858:	82 50       	subi	r24, 0x02	; 2
    385a:	82 30       	cpi	r24, 0x02	; 2
    385c:	40 f4       	brcc	.+16     	; 0x386e <TaskFrames+0x5aa>
			{
				//FrameNo=2;
				SubframeNo=0;
    385e:	10 92 fd 04 	sts	0x04FD, r1
				SubSubframe=0;
    3862:	10 92 fe 04 	sts	0x04FE, r1
				SwitchPressed=0;
    3866:	10 92 e3 04 	sts	0x04E3, r1
				FrameNo=0;
    386a:	10 92 fc 04 	sts	0x04FC, r1
			}
			if(SwitchPressed==1)
    386e:	80 91 e3 04 	lds	r24, 0x04E3
    3872:	81 30       	cpi	r24, 0x01	; 1
    3874:	51 f4       	brne	.+20     	; 0x388a <TaskFrames+0x5c6>
			{
				SwitchPressed=0;
    3876:	10 92 e3 04 	sts	0x04E3, r1
				SubframeNo=0;
    387a:	10 92 fd 04 	sts	0x04FD, r1
				PopulateSSDbuffer("BACK",48,7);
    387e:	47 e0       	ldi	r20, 0x07	; 7
    3880:	60 e3       	ldi	r22, 0x30	; 48
    3882:	85 ea       	ldi	r24, 0xA5	; 165
    3884:	93 e0       	ldi	r25, 0x03	; 3
    3886:	0e 94 b3 11 	call	0x2366	; 0x2366 <PopulateSSDbuffer>
		default:
		/* Your code here */
		break;
	}
	return 0;
}
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	08 95       	ret

0000389c <NonPeriodicTaskFuncSet>:
			}
		}
		return 0;
}
uint16_t NonPeriodicTaskFuncSet(void *ptr)
{
    389c:	fc 01       	movw	r30, r24
	uint8_t *data;
	uint8_t funcpoint[2];
	data=(uint8_t*)ptr;
	NonPeriodictaskArr[data[0]].taskfucntion=(funPtrBase*)(((uint16_t*)(data+2))[0]);
    389e:	80 81       	ld	r24, Z
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	dc 01       	movw	r26, r24
    38a4:	aa 0f       	add	r26, r26
    38a6:	bb 1f       	adc	r27, r27
    38a8:	aa 0f       	add	r26, r26
    38aa:	bb 1f       	adc	r27, r27
    38ac:	8a 0f       	add	r24, r26
    38ae:	9b 1f       	adc	r25, r27
    38b0:	dc 01       	movw	r26, r24
    38b2:	a0 50       	subi	r26, 0x00	; 0
    38b4:	bb 4f       	sbci	r27, 0xFB	; 251
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	8d 93       	st	X+, r24
    38bc:	9c 93       	st	X, r25
	NonPeriodictaskArr[data[0]].On=data[1];
    38be:	21 81       	ldd	r18, Z+1	; 0x01
    38c0:	80 81       	ld	r24, Z
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	dc 01       	movw	r26, r24
    38c6:	aa 0f       	add	r26, r26
    38c8:	bb 1f       	adc	r27, r27
    38ca:	aa 0f       	add	r26, r26
    38cc:	bb 1f       	adc	r27, r27
    38ce:	8a 0f       	add	r24, r26
    38d0:	9b 1f       	adc	r25, r27
    38d2:	dc 01       	movw	r26, r24
    38d4:	a0 50       	subi	r26, 0x00	; 0
    38d6:	bb 4f       	sbci	r27, 0xFB	; 251
    38d8:	12 96       	adiw	r26, 0x02	; 2
    38da:	2c 93       	st	X, r18
	NonPeriodictaskArr[data[0]].ptr=ptr;	
    38dc:	80 81       	ld	r24, Z
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	dc 01       	movw	r26, r24
    38e2:	aa 0f       	add	r26, r26
    38e4:	bb 1f       	adc	r27, r27
    38e6:	aa 0f       	add	r26, r26
    38e8:	bb 1f       	adc	r27, r27
    38ea:	8a 0f       	add	r24, r26
    38ec:	9b 1f       	adc	r25, r27
    38ee:	dc 01       	movw	r26, r24
    38f0:	a0 50       	subi	r26, 0x00	; 0
    38f2:	bb 4f       	sbci	r27, 0xFB	; 251
    38f4:	14 96       	adiw	r26, 0x04	; 4
    38f6:	fc 93       	st	X, r31
    38f8:	ee 93       	st	-X, r30
    38fa:	13 97       	sbiw	r26, 0x03	; 3
}
    38fc:	08 95       	ret

000038fe <BaseHandler>:
uint16_t BaseHandler(void *ptr)
{
	uint8_t *data;
	data=(uint8_t*)ptr;
    taskfuncbase[*data-1].On=1;
    38fe:	fc 01       	movw	r30, r24
    3900:	80 81       	ld	r24, Z
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	fc 01       	movw	r30, r24
    3908:	ee 0f       	add	r30, r30
    390a:	ff 1f       	adc	r31, r31
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	ee 0f       	add	r30, r30
    3912:	ff 1f       	adc	r31, r31
    3914:	e8 1b       	sub	r30, r24
    3916:	f9 0b       	sbc	r31, r25
    3918:	ee 58       	subi	r30, 0x8E	; 142
    391a:	fd 4f       	sbci	r31, 0xFD	; 253
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	85 83       	std	Z+5, r24	; 0x05
	//uart_string("bhandler\n");
}
    3920:	08 95       	ret

00003922 <tasksBase>:
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
{
    3922:	7f 92       	push	r7
    3924:	8f 92       	push	r8
    3926:	9f 92       	push	r9
    3928:	af 92       	push	r10
    392a:	bf 92       	push	r11
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	00 d0       	rcall	.+0      	; 0x393e <tasksBase+0x1c>
    393e:	00 d0       	rcall	.+0      	; 0x3940 <tasksBase+0x1e>
    3940:	1f 92       	push	r1
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
    3946:	80 91 1b 05 	lds	r24, 0x051B
    394a:	81 11       	cpse	r24, r1
    394c:	4c c0       	rjmp	.+152    	; 0x39e6 <tasksBase+0xc4>
    394e:	07 e7       	ldi	r16, 0x77	; 119
    3950:	12 e0       	ldi	r17, 0x02	; 2
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3952:	0f 2e       	mov	r0, r31
    3954:	fc e8       	ldi	r31, 0x8C	; 140
    3956:	ef 2e       	mov	r14, r31
    3958:	f2 e0       	ldi	r31, 0x02	; 2
    395a:	ff 2e       	mov	r15, r31
    395c:	f0 2d       	mov	r31, r0
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<3;i++)
		{
			if(taskfuncbase[i].On==dON)
    395e:	f8 01       	movw	r30, r16
    3960:	80 81       	ld	r24, Z
    3962:	81 30       	cpi	r24, 0x01	; 1
    3964:	29 f4       	brne	.+10     	; 0x3970 <tasksBase+0x4e>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3966:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<3;i++)
		{
			if(taskfuncbase[i].On==dON)
			{
				
				taskfuncbase[i].Openfucntion();
    3968:	01 90       	ld	r0, Z+
    396a:	f0 81       	ld	r31, Z
    396c:	e0 2d       	mov	r30, r0
    396e:	09 95       	icall
    3970:	09 5f       	subi	r16, 0xF9	; 249
    3972:	1f 4f       	sbci	r17, 0xFF	; 255
uint16_t tasksBase()
{
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<3;i++)
    3974:	0e 15       	cp	r16, r14
    3976:	1f 05       	cpc	r17, r15
    3978:	91 f7       	brne	.-28     	; 0x395e <tasksBase+0x3c>
			{
				
				taskfuncbase[i].Openfucntion();
			}
		}
		opentaskbase=1;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	80 93 1b 05 	sts	0x051B, r24
    3980:	32 c0       	rjmp	.+100    	; 0x39e6 <tasksBase+0xc4>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3982:	58 01       	movw	r10, r16
		
	}
	
	for(int i=0;i<3;i++)
	{
		taskfuncbase[i].counter++;
    3984:	f8 01       	movw	r30, r16
    3986:	80 81       	ld	r24, Z
    3988:	8f 5f       	subi	r24, 0xFF	; 255
    398a:	80 83       	st	Z, r24
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    398c:	f7 01       	movw	r30, r14
    398e:	90 81       	ld	r25, Z
    3990:	91 30       	cpi	r25, 0x01	; 1
    3992:	01 f5       	brne	.+64     	; 0x39d4 <tasksBase+0xb2>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3994:	f8 01       	movw	r30, r16
    3996:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<3;i++)
	{
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    3998:	90 81       	ld	r25, Z
    399a:	89 17       	cp	r24, r25
    399c:	d8 f0       	brcs	.+54     	; 0x39d4 <tasksBase+0xb2>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    399e:	f8 01       	movw	r30, r16
    39a0:	36 97       	sbiw	r30, 0x06	; 6
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
		{
			uint16_t Temp;
			uint8_t arr[3];
			Temp=taskfuncbase[i].taskfucntion();
    39a2:	01 90       	ld	r0, Z+
    39a4:	f0 81       	ld	r31, Z
    39a6:	e0 2d       	mov	r30, r0
    39a8:	09 95       	icall
    39aa:	9d 83       	std	Y+5, r25	; 0x05
    39ac:	8c 83       	std	Y+4, r24	; 0x04
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	80 fd       	sbrc	r24, 0
    39b2:	0e c0       	rjmp	.+28     	; 0x39d0 <tasksBase+0xae>
			{
				//uart_string("done");
				arr[0]=1;
    39b4:	79 82       	std	Y+1, r7	; 0x01
				arr[1]=(((uint8_t*)&Temp)[1]>>1)&0x7f;
    39b6:	86 95       	lsr	r24
    39b8:	8a 83       	std	Y+2, r24	; 0x02
				arr[2]=((uint8_t*)&Temp)[0];
    39ba:	8c 81       	ldd	r24, Y+4	; 0x04
    39bc:	8b 83       	std	Y+3, r24	; 0x03
				callbackarrayfuc func;
				func=callbackgetFunction(2);
    39be:	82 e0       	ldi	r24, 0x02	; 2
    39c0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <callbackgetFunction>
    39c4:	fc 01       	movw	r30, r24
				func(arr);
    39c6:	ce 01       	movw	r24, r28
    39c8:	01 96       	adiw	r24, 0x01	; 1
    39ca:	09 95       	icall
				taskfuncbase[i].On=0;
    39cc:	f7 01       	movw	r30, r14
    39ce:	10 82       	st	Z, r1
			}
			taskfuncbase[i].counter=0;
    39d0:	f5 01       	movw	r30, r10
    39d2:	10 82       	st	Z, r1
    39d4:	09 5f       	subi	r16, 0xF9	; 249
    39d6:	1f 4f       	sbci	r17, 0xFF	; 255
    39d8:	f7 e0       	ldi	r31, 0x07	; 7
    39da:	ef 0e       	add	r14, r31
    39dc:	f1 1c       	adc	r15, r1
		}
		opentaskbase=1;
		
	}
	
	for(int i=0;i<3;i++)
    39de:	0c 15       	cp	r16, r12
    39e0:	1d 05       	cpc	r17, r13
    39e2:	79 f6       	brne	.-98     	; 0x3982 <tasksBase+0x60>
    39e4:	11 c0       	rjmp	.+34     	; 0x3a08 <tasksBase+0xe6>
    39e6:	08 e7       	ldi	r16, 0x78	; 120
    39e8:	12 e0       	ldi	r17, 0x02	; 2
    39ea:	0f 2e       	mov	r0, r31
    39ec:	f7 e7       	ldi	r31, 0x77	; 119
    39ee:	ef 2e       	mov	r14, r31
    39f0:	f2 e0       	ldi	r31, 0x02	; 2
    39f2:	ff 2e       	mov	r15, r31
    39f4:	f0 2d       	mov	r31, r0
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    39f6:	0f 2e       	mov	r0, r31
    39f8:	fd e8       	ldi	r31, 0x8D	; 141
    39fa:	cf 2e       	mov	r12, r31
    39fc:	f2 e0       	ldi	r31, 0x02	; 2
    39fe:	df 2e       	mov	r13, r31
    3a00:	f0 2d       	mov	r31, r0
			Temp=taskfuncbase[i].taskfucntion();
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
			{
				//uart_string("done");
				arr[0]=1;
    3a02:	77 24       	eor	r7, r7
    3a04:	73 94       	inc	r7
    3a06:	bd cf       	rjmp	.-134    	; 0x3982 <tasksBase+0x60>
			//UartHandlerMain();
		}
	}
	
	return 0;
}
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	df 90       	pop	r13
    3a24:	cf 90       	pop	r12
    3a26:	bf 90       	pop	r11
    3a28:	af 90       	pop	r10
    3a2a:	9f 90       	pop	r9
    3a2c:	8f 90       	pop	r8
    3a2e:	7f 90       	pop	r7
    3a30:	08 95       	ret

00003a32 <tasks>:
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
{
    3a32:	ef 92       	push	r14
    3a34:	ff 92       	push	r15
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
	static uint8_t opentask=0;
	if(opentask==0)
    3a3e:	80 91 19 05 	lds	r24, 0x0519
    3a42:	81 11       	cpse	r24, r1
    3a44:	3e c0       	rjmp	.+124    	; 0x3ac2 <tasks+0x90>
	{
		callbackSetFunction(1,BaseHandler);
    3a46:	6f e7       	ldi	r22, 0x7F	; 127
    3a48:	7c e1       	ldi	r23, 0x1C	; 28
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	0e 94 df 13 	call	0x27be	; 0x27be <callbackSetFunction>
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
    3a50:	6e e4       	ldi	r22, 0x4E	; 78
    3a52:	7c e1       	ldi	r23, 0x1C	; 28
    3a54:	83 e0       	ldi	r24, 0x03	; 3
    3a56:	0e 94 df 13 	call	0x27be	; 0x27be <callbackSetFunction>
		Nvm_TableInit();
    3a5a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <Nvm_TableInit>
    3a5e:	cc e8       	ldi	r28, 0x8C	; 140
    3a60:	d2 e0       	ldi	r29, 0x02	; 2
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3a62:	04 ec       	ldi	r16, 0xC4	; 196
    3a64:	12 e0       	ldi	r17, 0x02	; 2
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
    3a66:	88 81       	ld	r24, Y
    3a68:	81 30       	cpi	r24, 0x01	; 1
    3a6a:	31 f4       	brne	.+12     	; 0x3a78 <tasks+0x46>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
			{
				
				taskfunc[i].Openfucntion();
    3a70:	01 90       	ld	r0, Z+
    3a72:	f0 81       	ld	r31, Z
    3a74:	e0 2d       	mov	r30, r0
    3a76:	09 95       	icall
    3a78:	27 96       	adiw	r28, 0x07	; 7
	if(opentask==0)
	{
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
    3a7a:	c0 17       	cp	r28, r16
    3a7c:	d1 07       	cpc	r29, r17
    3a7e:	99 f7       	brne	.-26     	; 0x3a66 <tasks+0x34>
			{
				
				taskfunc[i].Openfucntion();
			}
		}
		opentask=1;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	80 93 19 05 	sts	0x0519, r24
		openDone=1;
    3a86:	80 93 1a 05 	sts	0x051A, r24
		UartHandlerInit();
    3a8a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UartHandlerInit>
    3a8e:	19 c0       	rjmp	.+50     	; 0x3ac2 <tasks+0x90>
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
    3a90:	88 81       	ld	r24, Y
    3a92:	8f 5f       	subi	r24, 0xFF	; 255
    3a94:	88 83       	st	Y, r24
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3a96:	fe 01       	movw	r30, r28
    3a98:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    3a9a:	90 81       	ld	r25, Z
    3a9c:	91 30       	cpi	r25, 0x01	; 1
    3a9e:	61 f4       	brne	.+24     	; 0x3ab8 <tasks+0x86>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    3aa4:	90 81       	ld	r25, Z
    3aa6:	89 17       	cp	r24, r25
    3aa8:	38 f0       	brcs	.+14     	; 0x3ab8 <tasks+0x86>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3aaa:	fe 01       	movw	r30, r28
    3aac:	36 97       	sbiw	r30, 0x06	; 6
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
		{
			taskfunc[i].taskfucntion();
    3aae:	01 90       	ld	r0, Z+
    3ab0:	f0 81       	ld	r31, Z
    3ab2:	e0 2d       	mov	r30, r0
    3ab4:	09 95       	icall
			taskfunc[i].counter=0;
    3ab6:	18 82       	st	Y, r1
    3ab8:	27 96       	adiw	r28, 0x07	; 7
		openDone=1;
		UartHandlerInit();
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
    3aba:	ce 15       	cp	r28, r14
    3abc:	df 05       	cpc	r29, r15
    3abe:	41 f7       	brne	.-48     	; 0x3a90 <tasks+0x5e>
    3ac0:	09 c0       	rjmp	.+18     	; 0x3ad4 <tasks+0xa2>
    3ac2:	cd e8       	ldi	r28, 0x8D	; 141
    3ac4:	d2 e0       	ldi	r29, 0x02	; 2
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3ac6:	0f 2e       	mov	r0, r31
    3ac8:	f5 ec       	ldi	r31, 0xC5	; 197
    3aca:	ef 2e       	mov	r14, r31
    3acc:	f2 e0       	ldi	r31, 0x02	; 2
    3ace:	ff 2e       	mov	r15, r31
    3ad0:	f0 2d       	mov	r31, r0
    3ad2:	de cf       	rjmp	.-68     	; 0x3a90 <tasks+0x5e>
			taskfunc[i].counter=0;
			
			//UartHandlerMain();
		}
	}
    ReadEveryValueADC();
    3ad4:	0e 94 80 0c 	call	0x1900	; 0x1900 <ReadEveryValueADC>
	
	return 0;
}
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	1f 91       	pop	r17
    3ae2:	0f 91       	pop	r16
    3ae4:	ff 90       	pop	r15
    3ae6:	ef 90       	pop	r14
    3ae8:	08 95       	ret

00003aea <NonPeriodicTaskFuncCall>:
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	c2 e0       	ldi	r28, 0x02	; 2
    3af4:	d5 e0       	ldi	r29, 0x05	; 5
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    3af6:	0b e1       	ldi	r16, 0x1B	; 27
    3af8:	15 e0       	ldi	r17, 0x05	; 5
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
		{
			tasktime++;
    3afa:	80 91 1c 05 	lds	r24, 0x051C
    3afe:	90 91 1d 05 	lds	r25, 0x051D
    3b02:	01 96       	adiw	r24, 0x01	; 1
    3b04:	90 93 1d 05 	sts	0x051D, r25
    3b08:	80 93 1c 05 	sts	0x051C, r24
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
    3b0c:	28 81       	ld	r18, Y
    3b0e:	21 30       	cpi	r18, 0x01	; 1
    3b10:	79 f4       	brne	.+30     	; 0x3b30 <NonPeriodicTaskFuncCall+0x46>
    3b12:	85 38       	cpi	r24, 0x85	; 133
    3b14:	93 40       	sbci	r25, 0x03	; 3
    3b16:	60 f0       	brcs	.+24     	; 0x3b30 <NonPeriodicTaskFuncCall+0x46>
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    3b18:	fe 01       	movw	r30, r28
    3b1a:	32 97       	sbiw	r30, 0x02	; 2
		for(int i=0;i<5;i++)
		{
			tasktime++;
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
			{
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
    3b1c:	01 90       	ld	r0, Z+
    3b1e:	f0 81       	ld	r31, Z
    3b20:	e0 2d       	mov	r30, r0
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	09 95       	icall
				tasktime=0;			
    3b28:	10 92 1d 05 	sts	0x051D, r1
    3b2c:	10 92 1c 05 	sts	0x051C, r1
    3b30:	25 96       	adiw	r28, 0x05	; 5
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
    3b32:	c0 17       	cp	r28, r16
    3b34:	d1 07       	cpc	r29, r17
    3b36:	09 f7       	brne	.-62     	; 0x3afa <NonPeriodicTaskFuncCall+0x10>
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
				tasktime=0;			
			}
		}
		return 0;
}
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	08 95       	ret

00003b46 <ApplicationHookUP>:
		}
    }
	}
}
void ApplicationHookUP(uint8_t * event)
{
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	ec 01       	movw	r28, r24
	SSDtask();
    3b4c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <SSDtask>
	if(openDone==1)
    3b50:	80 91 1a 05 	lds	r24, 0x051A
    3b54:	81 30       	cpi	r24, 0x01	; 1
    3b56:	19 f4       	brne	.+6      	; 0x3b5e <ApplicationHookUP+0x18>
	{
		HookupTasks(event);
    3b58:	ce 01       	movw	r24, r28
    3b5a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <HookupTasks>
		//DataTransmit();
	}
	if(UartEvents==1)
    3b5e:	80 91 1e 05 	lds	r24, 0x051E
    3b62:	81 30       	cpi	r24, 0x01	; 1
    3b64:	11 f4       	brne	.+4      	; 0x3b6a <ApplicationHookUP+0x24>
	{
		taskfunc[5].On=1;
    3b66:	80 93 af 02 	sts	0x02AF, r24
	}
	
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	08 95       	ret

00003b70 <RTEModuleFirstCh>:
#ifndef RTE_ASW_H_
#define RTE_ASW_H_
#include <avr/io.h>
extern void RTEModuleFirstCh(uint16_t *ChannelValue)
{
    Rte_Base2AswLAYERADCReadConnector(ChannelValue)	;
    3b70:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <Rte_Base2AswLAYERADCReadConnector>
    3b74:	08 95       	ret

00003b76 <Rte_Uart_WriteBuffer>:
{
	Rte_recievebuffer0.ustring=ustring;
}*/
void Rte_Uart_WriteBuffer(unsigned char *ustring)
{
	Rte_Base2AswLayerUartWriteBuffer(ustring);	
    3b76:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <Rte_Base2AswLayerUartWriteBuffer>
    3b7a:	08 95       	ret

00003b7c <RTE_BaseWriteCh1Data>:
#include "..\MddleLayer\ADCread.h"
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\MddleLayer\UartTransmit.h"

extern void RTE_BaseWriteCh1Data(uint16_t *ChannelValue)
{
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	ec 01       	movw	r28, r24
	//uart_num(*ChannelValue);
	//*ChannelValue=2;
	uint16_t val=*ChannelValue;
	*ChannelValue=GetADC_Value(val);
    3b82:	88 81       	ld	r24, Y
    3b84:	99 81       	ldd	r25, Y+1	; 0x01
    3b86:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GetADC_Value>
    3b8a:	99 83       	std	Y+1, r25	; 0x01
    3b8c:	88 83       	st	Y, r24
}
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <Rte_BaseWriteUartData>:
	*PingEcho=InterfacePulse(val);
}

void Rte_BaseWriteUartData(unsigned char *Ustring)
{
	FillUartBuffer(Ustring);
    3b94:	0e 94 ed 11 	call	0x23da	; 0x23da <FillUartBuffer>
    3b98:	08 95       	ret

00003b9a <Rte_Base2AswLAYERADCReadConnector>:
 *  Author: Nikhil
 */ 
#include <avr/io.h>
void Rte_Base2AswLAYERADCReadConnector(uint16_t *DATA)
{
	RTE_BaseWriteCh1Data(DATA);
    3b9a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <RTE_BaseWriteCh1Data>
    3b9e:	08 95       	ret

00003ba0 <Rte_Base2AswLayerUartWriteBuffer>:
	Rte_BaseWritePingEchoData(DATA);
}

Rte_Base2AswLayerUartWriteBuffer(unsigned char *ustring)
{
	Rte_BaseWriteUartData(ustring);
    3ba0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Rte_BaseWriteUartData>
    3ba4:	08 95       	ret

00003ba6 <__divmodhi4>:
    3ba6:	97 fb       	bst	r25, 7
    3ba8:	07 2e       	mov	r0, r23
    3baa:	16 f4       	brtc	.+4      	; 0x3bb0 <__divmodhi4+0xa>
    3bac:	00 94       	com	r0
    3bae:	07 d0       	rcall	.+14     	; 0x3bbe <__divmodhi4_neg1>
    3bb0:	77 fd       	sbrc	r23, 7
    3bb2:	09 d0       	rcall	.+18     	; 0x3bc6 <__divmodhi4_neg2>
    3bb4:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodhi4>
    3bb8:	07 fc       	sbrc	r0, 7
    3bba:	05 d0       	rcall	.+10     	; 0x3bc6 <__divmodhi4_neg2>
    3bbc:	3e f4       	brtc	.+14     	; 0x3bcc <__divmodhi4_exit>

00003bbe <__divmodhi4_neg1>:
    3bbe:	90 95       	com	r25
    3bc0:	81 95       	neg	r24
    3bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc4:	08 95       	ret

00003bc6 <__divmodhi4_neg2>:
    3bc6:	70 95       	com	r23
    3bc8:	61 95       	neg	r22
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255

00003bcc <__divmodhi4_exit>:
    3bcc:	08 95       	ret

00003bce <__umulhisi3>:
    3bce:	a2 9f       	mul	r26, r18
    3bd0:	b0 01       	movw	r22, r0
    3bd2:	b3 9f       	mul	r27, r19
    3bd4:	c0 01       	movw	r24, r0
    3bd6:	a3 9f       	mul	r26, r19
    3bd8:	01 d0       	rcall	.+2      	; 0x3bdc <__umulhisi3+0xe>
    3bda:	b2 9f       	mul	r27, r18
    3bdc:	70 0d       	add	r23, r0
    3bde:	81 1d       	adc	r24, r1
    3be0:	11 24       	eor	r1, r1
    3be2:	91 1d       	adc	r25, r1
    3be4:	08 95       	ret

00003be6 <__udivmodhi4>:
    3be6:	aa 1b       	sub	r26, r26
    3be8:	bb 1b       	sub	r27, r27
    3bea:	51 e1       	ldi	r21, 0x11	; 17
    3bec:	07 c0       	rjmp	.+14     	; 0x3bfc <__udivmodhi4_ep>

00003bee <__udivmodhi4_loop>:
    3bee:	aa 1f       	adc	r26, r26
    3bf0:	bb 1f       	adc	r27, r27
    3bf2:	a6 17       	cp	r26, r22
    3bf4:	b7 07       	cpc	r27, r23
    3bf6:	10 f0       	brcs	.+4      	; 0x3bfc <__udivmodhi4_ep>
    3bf8:	a6 1b       	sub	r26, r22
    3bfa:	b7 0b       	sbc	r27, r23

00003bfc <__udivmodhi4_ep>:
    3bfc:	88 1f       	adc	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	5a 95       	dec	r21
    3c02:	a9 f7       	brne	.-22     	; 0x3bee <__udivmodhi4_loop>
    3c04:	80 95       	com	r24
    3c06:	90 95       	com	r25
    3c08:	bc 01       	movw	r22, r24
    3c0a:	cd 01       	movw	r24, r26
    3c0c:	08 95       	ret

00003c0e <strcpy_P>:
    3c0e:	fb 01       	movw	r30, r22
    3c10:	dc 01       	movw	r26, r24
    3c12:	05 90       	lpm	r0, Z+
    3c14:	0d 92       	st	X+, r0
    3c16:	00 20       	and	r0, r0
    3c18:	e1 f7       	brne	.-8      	; 0x3c12 <strcpy_P+0x4>
    3c1a:	08 95       	ret

00003c1c <strcmp>:
    3c1c:	fb 01       	movw	r30, r22
    3c1e:	dc 01       	movw	r26, r24
    3c20:	8d 91       	ld	r24, X+
    3c22:	01 90       	ld	r0, Z+
    3c24:	80 19       	sub	r24, r0
    3c26:	01 10       	cpse	r0, r1
    3c28:	d9 f3       	breq	.-10     	; 0x3c20 <strcmp+0x4>
    3c2a:	99 0b       	sbc	r25, r25
    3c2c:	08 95       	ret

00003c2e <_exit>:
    3c2e:	f8 94       	cli

00003c30 <__stop_program>:
    3c30:	ff cf       	rjmp	.-2      	; 0x3c30 <__stop_program>
