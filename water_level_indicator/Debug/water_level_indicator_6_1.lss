
water_level_indicator_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  0000370a  0000379e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000370a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e5  00800392  00800392  00003a30  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00003a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000436f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000988  00000000  00000000  0000439e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ab4a  00000000  00000000  00004d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a38  00000000  00000000  0000f870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f14  00000000  00000000  000132a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001670  00000000  00000000  000171bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021b2  00000000  00000000  0001882c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004ee3  00000000  00000000  0001a9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000858  00000000  00000000  0001f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static uint8_t DebugStates;
static uint8_t DebugArrayindex;
static uint8_t populateArray();
static void  DebugBufferCheck();
void DebugMode()
{
       0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__ctors_end>
       4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_1>
       8:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>

   switch(DebugStates)
       c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      10:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      14:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      18:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
   {   
	   unsigned char data='&';
	   case 0:
	       PopInterface(&data);
      1c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      20:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
		   if(data=='#')
      24:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_9>
      28:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
		   {
			  DebugStates++; 
      2c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      30:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
			  uart_string("IAM0");
      34:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      38:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      3c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
   
}

static uint8_t populateArray()
{
	unsigned char data='&';
      40:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_16>
	uint8_t ret=1;
	PopInterface(&data);
      44:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      48:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_18>
	if(DebugArrayindex<10 && data!='&' )
      4c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      50:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      54:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_21>
	{
	   DebugArray[DebugArrayindex]=data;
      58:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_22>
      5c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
      60:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
	   DebugArrayindex++;
      64:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>

00000068 <ssd1306_init_sequence>:
	   uart_char(data);
      68:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
		   }
		   break;
	   case 1:
	      if(populateArray()==0)
		  {
			DebugStates++;
      78:	00 d5 f0 d9 22 da 12 db 20 8d 14 af                 ...."... ...

00000084 <ssd1306xled_font6x8>:
	...
{ 
   static uint8_t debugdat=10;
   switch(DebugArray[0])
   {
	   case '2':
	       if(DebugArray[1]=='E')
      8c:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
		  }
		  break;
	   case 2:
	      DebugBufferCheck();
		  DebugStates=0;
		  DebugArrayindex=0;
      9c:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
      ac:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
      bc:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
      cc:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
      dc:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      ec:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      fc:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     10c:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     11c:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     12c:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     13c:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     14c:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     15c:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     16c:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     17c:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     18c:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     19c:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     1ac:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     1bc:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1cc:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     1dc:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1ec:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1fc:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     20c:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     21c:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     22c:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     23c:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     24c:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     25c:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     26c:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     27c:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     28c:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     29c:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

000002ac <PIN>:
     2ac:	23 00 26 00 29 00                                   #.&.).

000002b2 <DDR>:
     2b2:	24 00 27 00 2a 00                                   $.'.*.

000002b8 <Port>:
     2b8:	25 00 28 00 2b 00                                   %.(.+.

000002be <Frames>:
     2be:	f2 02 c2 02                                         ....

000002c2 <Frame2>:
     2c2:	61 03 92 03 55 03 4c 03 43 03 33 03 92 03 92 03     a...U.L.C.3.....
     2d2:	92 03 92 03 92 03 32 03 31 03 30 03 2f 03 2a 03     ......2.1.0./.*.
     2e2:	29 03 28 03 27 03 26 03 25 03 24 03 23 03 22 03     ).(.'.&.%.$.#.".

000002f2 <Frame1>:
     2f2:	8d 03 8c 03 7f 03 7e 03 7d 03 7c 03 7b 03 7a 03     ......~.}.|.{.z.
     302:	79 03 78 03 77 03 76 03 75 03 74 03 73 03 6e 03     y.x.w.v.u.t.s.n.
     312:	6d 03 6c 03 6b 03 6a 03 69 03 68 03 67 03 66 03     m.l.k.j.i.h.g.f.

00000322 <F2MROW8>:
	...

00000323 <F2MROW7>:
	...

00000324 <F2MROW6>:
	...

00000325 <F2MROW5>:
	...

00000326 <F2MROW4>:
	...

00000327 <F2MROW3>:
	...

00000328 <F2MROW2>:
	...

00000329 <F2MROW1>:
	...

0000032a <F2SROW8>:
     32a:	42 41 43 4b 00                                      BACK.

0000032f <F2SROW7>:
	...

00000330 <F2SROW6>:
	...

00000331 <F2SROW5>:
	...

00000332 <F2SROW4>:
	...

00000333 <F2FROW6>:
     333:	20 34 2e 53 65 6e 73 6f 72 20 73 74 61 74 65 00      4.Sensor state.

00000343 <F2FROW5>:
     343:	20 33 2e 44 65 62 75 67 00                           3.Debug.

0000034c <F2FROW4>:
     34c:	20 32 2e 4d 6f 74 6f 72 00                           2.Motor.

00000355 <F2FROW3>:
     355:	20 31 2e 53 65 74 74 69 6e 67 73 00                  1.Settings.

00000361 <F2FROW1>:
     361:	57 49 46 49 00                                      WIFI.

00000366 <F1MROW8>:
	...

00000367 <F1MROW7>:
	...

00000368 <F1MROW6>:
	...

00000369 <F1MROW5>:
	...

0000036a <F1MROW4>:
	...

0000036b <F1MROW3>:
	...

0000036c <F1MROW2>:
	...

0000036d <F1MROW1>:
	...

0000036e <F1SROW8>:
     36e:	4d 65 6e 75 00                                      Menu.

00000373 <F1SROW7>:
	...

00000374 <F1SROW6>:
	...

00000375 <F1SROW5>:
	...

00000376 <F1SROW4>:
	...

00000377 <F1SROW3>:
	...

00000378 <F1SROW2>:
	...

00000379 <F1SROW1>:
	...

0000037a <F1FROW8>:
	...

0000037b <F1FROW7>:
	...

0000037c <F1FROW6>:
	...

0000037d <F1FROW5>:
	...

0000037e <F1FROW4>:
	...

0000037f <F1FROW3>:
     37f:	54 61 6e 6b 20 4c 65 76 65 6c 20 3a 00              Tank Level :.

0000038c <F1FROW2>:
	...

0000038d <F1FROW1>:
     38d:	57 49 46 49 00                                      WIFI.

00000392 <FrameBlank>:
     392:	20 20 20 20 20 20 20 20 20 20 00 00                           ..

0000039e <__ctors_end>:
     39e:	11 24       	eor	r1, r1
     3a0:	1f be       	out	0x3f, r1	; 63
     3a2:	cf ef       	ldi	r28, 0xFF	; 255
     3a4:	d8 e0       	ldi	r29, 0x08	; 8
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	cd bf       	out	0x3d, r28	; 61

000003aa <__do_copy_data>:
     3aa:	13 e0       	ldi	r17, 0x03	; 3
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b1 e0       	ldi	r27, 0x01	; 1
     3b0:	ea e0       	ldi	r30, 0x0A	; 10
     3b2:	f7 e3       	ldi	r31, 0x37	; 55
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <__do_copy_data+0x10>
     3b6:	05 90       	lpm	r0, Z+
     3b8:	0d 92       	st	X+, r0
     3ba:	a2 39       	cpi	r26, 0x92	; 146
     3bc:	b1 07       	cpc	r27, r17
     3be:	d9 f7       	brne	.-10     	; 0x3b6 <__do_copy_data+0xc>

000003c0 <__do_clear_bss>:
     3c0:	26 e0       	ldi	r18, 0x06	; 6
     3c2:	a2 e9       	ldi	r26, 0x92	; 146
     3c4:	b3 e0       	ldi	r27, 0x03	; 3
     3c6:	01 c0       	rjmp	.+2      	; 0x3ca <.do_clear_bss_start>

000003c8 <.do_clear_bss_loop>:
     3c8:	1d 92       	st	X+, r1

000003ca <.do_clear_bss_start>:
     3ca:	a7 37       	cpi	r26, 0x77	; 119
     3cc:	b2 07       	cpc	r27, r18
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <.do_clear_bss_loop>
     3d0:	0e 94 63 13 	call	0x26c6	; 0x26c6 <main>
     3d4:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <_exit>

000003d8 <__bad_interrupt>:
     3d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003dc <SetBlink>:

static Ports Prt;
void SetBlink(Pin p,uint16_t Duration /*higher for the id and lower nibble for number of blinks in a second*/,Ports port)
{   
	
	if((Duration&0x00ff)>DurationTime)
     3dc:	9b 01       	movw	r18, r22
     3de:	33 27       	eor	r19, r19
     3e0:	e0 91 92 03 	lds	r30, 0x0392
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e2 17       	cp	r30, r18
     3e8:	f3 07       	cpc	r31, r19
     3ea:	68 f4       	brcc	.+26     	; 0x406 <SetBlink+0x2a>
	{
			BlinkPin=p;
     3ec:	80 93 93 03 	sts	0x0393, r24
			DurationTime=Duration&0x00FF;
     3f0:	60 93 92 03 	sts	0x0392, r22
			CurrentBlink=Duration&0xf000;
     3f4:	66 27       	eor	r22, r22
     3f6:	70 7f       	andi	r23, 0xF0	; 240
     3f8:	70 93 95 03 	sts	0x0395, r23
     3fc:	60 93 94 03 	sts	0x0394, r22
			Prt=port;
     400:	40 93 96 03 	sts	0x0396, r20
     404:	08 95       	ret
	}
    else if((Duration&0x00ff)==0)
     406:	23 2b       	or	r18, r19
     408:	59 f4       	brne	.+22     	; 0x420 <SetBlink+0x44>
	{
		if((Duration&0xf000)==CurrentBlink)
     40a:	66 27       	eor	r22, r22
     40c:	70 7f       	andi	r23, 0xF0	; 240
     40e:	80 91 94 03 	lds	r24, 0x0394
     412:	90 91 95 03 	lds	r25, 0x0395
     416:	68 17       	cp	r22, r24
     418:	79 07       	cpc	r23, r25
     41a:	11 f4       	brne	.+4      	; 0x420 <SetBlink+0x44>
		{
			
			DurationTime=0;
     41c:	10 92 92 03 	sts	0x0392, r1
     420:	08 95       	ret

00000422 <Blink>:

void Blink()
{
	static uint16_t countBlink;
	static uint8_t BlinkOut;
	if(DurationTime)
     422:	60 91 92 03 	lds	r22, 0x0392
     426:	66 23       	and	r22, r22
     428:	31 f1       	breq	.+76     	; 0x476 <Blink+0x54>
	{ 
		
	if(countBlink>=((5000/Timeslice)/DurationTime))
     42a:	20 91 97 03 	lds	r18, 0x0397
     42e:	30 91 98 03 	lds	r19, 0x0398
     432:	88 ee       	ldi	r24, 0xE8	; 232
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	0e 94 3f 1b 	call	0x367e	; 0x367e <__divmodhi4>
     43c:	26 17       	cp	r18, r22
     43e:	37 07       	cpc	r19, r23
     440:	98 f0       	brcs	.+38     	; 0x468 <Blink+0x46>
	{
		BlinkOut=BlinkOut^1;
     442:	90 91 99 03 	lds	r25, 0x0399
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	89 27       	eor	r24, r25
     44a:	80 93 99 03 	sts	0x0399, r24
		PinOutput(BlinkOut,BlinkPin,Prt);
     44e:	40 91 96 03 	lds	r20, 0x0396
     452:	60 91 93 03 	lds	r22, 0x0393
     456:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
		countBlink=0;
		countBlink++;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 98 03 	sts	0x0398, r25
     462:	80 93 97 03 	sts	0x0397, r24
     466:	08 95       	ret
	}
	else
	{
		countBlink++;		
     468:	2f 5f       	subi	r18, 0xFF	; 255
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	30 93 98 03 	sts	0x0398, r19
     470:	20 93 97 03 	sts	0x0397, r18
     474:	08 95       	ret
	}
	}
	else
	{
		PinOutput(0,BlinkPin,Prt);
     476:	40 91 96 03 	lds	r20, 0x0396
     47a:	60 91 93 03 	lds	r22, 0x0393
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
     484:	08 95       	ret

00000486 <ESPreadvalue>:
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
{
     486:	4f 92       	push	r4
     488:	5f 92       	push	r5
     48a:	6f 92       	push	r6
     48c:	7f 92       	push	r7
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	1f 92       	push	r1
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	7c 01       	movw	r14, r24
	 unsigned char data='&';
     4ae:	86 e2       	ldi	r24, 0x26	; 38
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	0f 2e       	mov	r0, r31
     4b4:	fc e0       	ldi	r31, 0x0C	; 12
     4b6:	af 2e       	mov	r10, r31
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	bf 2e       	mov	r11, r31
     4bc:	f0 2d       	mov	r31, r0
     4be:	0f 2e       	mov	r0, r31
     4c0:	fb e0       	ldi	r31, 0x0B	; 11
     4c2:	cf 2e       	mov	r12, r31
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	df 2e       	mov	r13, r31
     4c8:	f0 2d       	mov	r31, r0
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     4ca:	08 e7       	ldi	r16, 0x78	; 120
     4cc:	11 e0       	ldi	r17, 0x01	; 1
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
					  k=0;
     4ce:	51 2c       	mov	r5, r1
     4d0:	75 2c       	mov	r7, r5
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     4d2:	99 24       	eor	r9, r9
     4d4:	93 94       	inc	r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     4d6:	4a c0       	rjmp	.+148    	; 0x56c <ESPreadvalue+0xe6>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     4d8:	c9 01       	movw	r24, r18
     4da:	d9 01       	movw	r26, r18
     4dc:	12 97       	sbiw	r26, 0x02	; 2
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     4de:	4c 91       	ld	r20, X
     4e0:	41 30       	cpi	r20, 0x01	; 1
     4e2:	11 f5       	brne	.+68     	; 0x528 <ESPreadvalue+0xa2>
     4e4:	66 32       	cpi	r22, 0x26	; 38
     4e6:	01 f1       	breq	.+64     	; 0x528 <ESPreadvalue+0xa2>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     4e8:	af 01       	movw	r20, r30
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     4ea:	60 80       	ld	r6, Z
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     4ec:	d9 01       	movw	r26, r18
     4ee:	14 97       	sbiw	r26, 0x04	; 4
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     4f0:	0d 90       	ld	r0, X+
     4f2:	bc 91       	ld	r27, X
     4f4:	a0 2d       	mov	r26, r0
     4f6:	a6 0d       	add	r26, r6
     4f8:	b1 1d       	adc	r27, r1
     4fa:	ac 91       	ld	r26, X
     4fc:	6a 13       	cpse	r22, r26
     4fe:	0f c0       	rjmp	.+30     	; 0x51e <ESPreadvalue+0x98>
			{
			  if(Esp_Commands_a[i].MatchCounter<Esp_Commands_a[i].ResposeLength )
     500:	d9 01       	movw	r26, r18
     502:	4c 90       	ld	r4, X
     504:	64 14       	cp	r6, r4
     506:	10 f4       	brcc	.+4      	; 0x50c <ESPreadvalue+0x86>
			  {
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
     508:	63 94       	inc	r6
     50a:	60 82       	st	Z, r6
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
     50c:	da 01       	movw	r26, r20
     50e:	4c 91       	ld	r20, X
     510:	dc 01       	movw	r26, r24
     512:	8c 91       	ld	r24, X
     514:	48 13       	cpse	r20, r24
     516:	08 c0       	rjmp	.+16     	; 0x528 <ESPreadvalue+0xa2>
			  {

					  Datalog=1;
					  k=0;
     518:	87 2c       	mov	r8, r7
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     51a:	79 2d       	mov	r23, r9
     51c:	05 c0       	rjmp	.+10     	; 0x528 <ESPreadvalue+0xa2>
					  k=0;
			  }
			}
			else if(Esp_Commands_a[i].MatchCounter<(Esp_Commands_a[i].ResposeLength))
     51e:	d9 01       	movw	r26, r18
     520:	8c 91       	ld	r24, X
     522:	68 16       	cp	r6, r24
     524:	08 f4       	brcc	.+2      	; 0x528 <ESPreadvalue+0xa2>
			{
				Esp_Commands_a[i].MatchCounter=0;
     526:	10 82       	st	Z, r1
     528:	27 5f       	subi	r18, 0xF7	; 247
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	39 96       	adiw	r30, 0x09	; 9
	{
		unsigned char *reg;
		uint8_t i;
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     52e:	20 17       	cp	r18, r16
     530:	31 07       	cpc	r19, r17
     532:	91 f6       	brne	.-92     	; 0x4d8 <ESPreadvalue+0x52>
     534:	70 93 9b 03 	sts	0x039B, r23
     538:	80 92 9c 03 	sts	0x039C, r8
				//k=0;
			}
			
		}
	}
	if(Datalog==1)
     53c:	71 30       	cpi	r23, 0x01	; 1
     53e:	b1 f4       	brne	.+44     	; 0x56c <ESPreadvalue+0xe6>
	{
		if(data!='&'){
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	86 32       	cpi	r24, 0x26	; 38
     544:	09 f1       	breq	.+66     	; 0x588 <ESPreadvalue+0x102>
		EspDataBuffer[k]=data;
     546:	e8 2d       	mov	r30, r8
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	e3 56       	subi	r30, 0x63	; 99
     54c:	fc 4f       	sbci	r31, 0xFC	; 252
     54e:	80 83       	st	Z, r24
		k++;
     550:	98 2d       	mov	r25, r8
     552:	9f 5f       	subi	r25, 0xFF	; 255
     554:	90 93 9c 03 	sts	0x039C, r25
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     558:	9c 31       	cpi	r25, 0x1C	; 28
     55a:	11 f0       	breq	.+4      	; 0x560 <ESPreadvalue+0xda>
     55c:	8a 30       	cpi	r24, 0x0A	; 10
     55e:	31 f4       	brne	.+12     	; 0x56c <ESPreadvalue+0xe6>
		{
			Datalog=0;
     560:	50 92 9b 03 	sts	0x039B, r5
			k=0;
     564:	50 92 9c 03 	sts	0x039C, r5
			datagot=1;
     568:	90 92 bc 03 	sts	0x03BC, r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     56c:	ce 01       	movw	r24, r28
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	f7 01       	movw	r30, r14
     572:	09 95       	icall
     574:	81 11       	cpse	r24, r1
     576:	0c c0       	rjmp	.+24     	; 0x590 <ESPreadvalue+0x10a>
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     578:	69 81       	ldd	r22, Y+1	; 0x01
     57a:	70 91 9b 03 	lds	r23, 0x039B
     57e:	80 90 9c 03 	lds	r8, 0x039C
     582:	95 01       	movw	r18, r10
     584:	f6 01       	movw	r30, r12
     586:	a8 cf       	rjmp	.-176    	; 0x4d8 <ESPreadvalue+0x52>
		if(data!='&'){
		EspDataBuffer[k]=data;
		k++;
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     588:	fc e1       	ldi	r31, 0x1C	; 28
     58a:	8f 12       	cpse	r8, r31
     58c:	ef cf       	rjmp	.-34     	; 0x56c <ESPreadvalue+0xe6>
     58e:	e8 cf       	rjmp	.-48     	; 0x560 <ESPreadvalue+0xda>
			//Esp_Commands_a[Wait_Command].MatchCounter=0;
		}
	}
	}
	return 0;
}
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	5f 90       	pop	r5
     5b4:	4f 90       	pop	r4
     5b6:	08 95       	ret

000005b8 <ESP_Init>:
    
	return ReturnValue;
}

void ESP_Init()
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec e0       	ldi	r30, 0x0C	; 12
     5be:	f1 e0       	ldi	r31, 0x01	; 1
	
    
	return ReturnValue;
}

void ESP_Init()
     5c0:	88 e7       	ldi	r24, 0x78	; 120
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	ef 01       	movw	r28, r30
     5c6:	24 97       	sbiw	r28, 0x04	; 4
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
     5c8:	a8 81       	ld	r26, Y
     5ca:	b9 81       	ldd	r27, Y+1	; 0x01
     5cc:	ed 01       	movw	r28, r26
     5ce:	09 90       	ld	r0, Y+
     5d0:	00 20       	and	r0, r0
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <ESP_Init+0x16>
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	ca 1b       	sub	r28, r26
     5d8:	db 0b       	sbc	r29, r27
     5da:	c0 83       	st	Z, r28
     5dc:	39 96       	adiw	r30, 0x09	; 9
	return ReturnValue;
}

void ESP_Init()
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     5de:	e8 17       	cp	r30, r24
     5e0:	f9 07       	cpc	r31, r25
     5e2:	81 f7       	brne	.-32     	; 0x5c4 <ESP_Init+0xc>
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
        
	}
	
	Esp_Commands_a[Disconnect_Command].state=1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 64 01 	sts	0x0164, r24
    Esp_Commands_a[Connection_Wait].state=1;
     5ea:	80 93 13 01 	sts	0x0113, r24
	Esp_Commands_a[Uart_command].state=1;
     5ee:	80 93 6d 01 	sts	0x016D, r24
	
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <CipSend>:

ESPRetVal CipSend(void)
{
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	00 d0       	rcall	.+0      	; 0x600 <CipSend+0x8>
     600:	00 d0       	rcall	.+0      	; 0x602 <CipSend+0xa>
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
  ESPRetVal ReturnValue=ESP_CmdSndBusy;
      char Val[4];
	  Val[0]=(char)PortSel;
     606:	80 91 c0 03 	lds	r24, 0x03C0
     60a:	89 83       	std	Y+1, r24	; 0x01
	  Val[1]='\0';
     60c:	1a 82       	std	Y+2, r1	; 0x02
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
     60e:	ce 01       	movw	r24, r28
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
	  RTE_WriteBufferUart(",");
     616:	8f eb       	ldi	r24, 0xBF	; 191
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
     61e:	20 91 c1 03 	lds	r18, 0x03C1
     622:	30 91 c2 03 	lds	r19, 0x03C2
     626:	e2 2f       	mov	r30, r18
}

static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
     628:	49 e2       	ldi	r20, 0x29	; 41
     62a:	24 9f       	mul	r18, r20
     62c:	41 2d       	mov	r20, r1
     62e:	11 24       	eor	r1, r1
     630:	42 95       	swap	r20
     632:	4f 70       	andi	r20, 0x0F	; 15
	T=(num - (H*100))/10;
     634:	1c e9       	ldi	r17, 0x9C	; 156
     636:	14 03       	mulsu	r17, r20
     638:	c0 01       	movw	r24, r0
     63a:	11 24       	eor	r1, r1
     63c:	82 0f       	add	r24, r18
     63e:	91 1d       	adc	r25, r1
     640:	6a e0       	ldi	r22, 0x0A	; 10
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	0e 94 3f 1b 	call	0x367e	; 0x367e <__divmodhi4>
	O=(num - (H*100) - (T*10));

	Ustring[0]=(H+48);
     648:	84 2f       	mov	r24, r20
     64a:	80 5d       	subi	r24, 0xD0	; 208
     64c:	89 83       	std	Y+1, r24	; 0x01
	Ustring[1]=(T+48);
     64e:	86 2f       	mov	r24, r22
     650:	80 5d       	subi	r24, 0xD0	; 208
     652:	8a 83       	std	Y+2, r24	; 0x02
static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
     654:	e0 5d       	subi	r30, 0xD0	; 208
     656:	41 9f       	mul	r20, r17
     658:	e0 0d       	add	r30, r0
     65a:	11 24       	eor	r1, r1
     65c:	66 0f       	add	r22, r22
     65e:	96 2f       	mov	r25, r22
     660:	99 0f       	add	r25, r25
     662:	99 0f       	add	r25, r25
     664:	69 0f       	add	r22, r25

	Ustring[0]=(H+48);
	Ustring[1]=(T+48);
	Ustring[2]=(O+48);
     666:	e6 1b       	sub	r30, r22
     668:	eb 83       	std	Y+3, r30	; 0x03
	  Val[1]='\0';
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
	  RTE_WriteBufferUart(",");
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
	  Val[3]='\0';
     66a:	1c 82       	std	Y+4, r1	; 0x04
	  if(EspDataCount<10)
     66c:	2a 30       	cpi	r18, 0x0A	; 10
     66e:	31 05       	cpc	r19, r1
     670:	1c f4       	brge	.+6      	; 0x678 <CipSend+0x80>
	  {
		  Val[0]=Val[2];
     672:	e9 83       	std	Y+1, r30	; 0x01
		  Val[1]='\0';		  
     674:	1a 82       	std	Y+2, r1	; 0x02
     676:	06 c0       	rjmp	.+12     	; 0x684 <CipSend+0x8c>
	  }
	  else if(EspDataCount<100)
     678:	24 36       	cpi	r18, 0x64	; 100
     67a:	31 05       	cpc	r19, r1
     67c:	1c f4       	brge	.+6      	; 0x684 <CipSend+0x8c>
	  {
		  Val[0]=Val[1]; 
     67e:	89 83       	std	Y+1, r24	; 0x01
		  Val[1]=Val[2]; 
     680:	ea 83       	std	Y+2, r30	; 0x02
		  Val[2]='\0'; 
     682:	1b 82       	std	Y+3, r1	; 0x03
	  }
	  RTE_WriteBufferUart(Val);//uart_char(Recieved[0]);
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
	  //uart_char(Recieved[1]); 
	  RTE_WriteBufferUart("\r\n");//uart_string("\r\n");
     68c:	81 ec       	ldi	r24, 0xC1	; 193
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>

}
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	08 95       	ret

000006a4 <WifiDisconnectCheck>:

ESPRetVal WifiDisconnectCheck()
{
		if(Esp_Commands_a[Disconnect_Command].MatchCounter==Esp_Commands_a[Disconnect_Command].ResposeLength)
     6a4:	90 91 65 01 	lds	r25, 0x0165
     6a8:	80 91 66 01 	lds	r24, 0x0166
     6ac:	98 13       	cpse	r25, r24
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <WifiDisconnectCheck+0x14>
		{
			//Esp_Commands_a[Connection_Wait].MatchCounter=0;
			Esp_Commands_a[Disconnect_Command].MatchCounter=0;
     6b0:	10 92 65 01 	sts	0x0165, r1
			return ESP_CmdSndOK;
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 95       	ret
		}
	return ESP_CmdSNDFailed;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
}
     6ba:	08 95       	ret

000006bc <EspGlobalCounter>:
return FuncRet;
}
uint16_t EspGlobalCounter(uint8_t state)
{
	
	if(state==1)
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	29 f4       	brne	.+10     	; 0x6ca <EspGlobalCounter+0xe>
	{
	  	counter1=0;
     6c0:	10 92 bf 03 	sts	0x03BF, r1
     6c4:	10 92 be 03 	sts	0x03BE, r1
     6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <EspGlobalCounter+0x24>
	}
	else if(state==2)
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	49 f4       	brne	.+18     	; 0x6e0 <EspGlobalCounter+0x24>
	{
		counter1++;
     6ce:	80 91 be 03 	lds	r24, 0x03BE
     6d2:	90 91 bf 03 	lds	r25, 0x03BF
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	90 93 bf 03 	sts	0x03BF, r25
     6dc:	80 93 be 03 	sts	0x03BE, r24
	}

return	counter1;
}
     6e0:	80 91 be 03 	lds	r24, 0x03BE
     6e4:	90 91 bf 03 	lds	r25, 0x03BF
     6e8:	08 95       	ret

000006ea <CommandSend>:
	}
	return 0;
}

ESPRetVal CommandSend(ESP_CommandIndex Index)
{
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	18 2f       	mov	r17, r24
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
	if(ConnectionFlag==0)
     6f2:	80 91 bd 03 	lds	r24, 0x03BD
     6f6:	81 11       	cpse	r24, r1
     6f8:	26 c0       	rjmp	.+76     	; 0x746 <CommandSend+0x5c>
	{
		RTE_WriteBufferUart(Esp_Commands_a[Index].ustring);//uart_string(Esp_Commands_a[Index].ustring);
     6fa:	c1 2f       	mov	r28, r17
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
     6fe:	fe 01       	movw	r30, r28
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ec 0f       	add	r30, r28
     70e:	fd 1f       	adc	r31, r29
     710:	ea 5f       	subi	r30, 0xFA	; 250
     712:	fe 4f       	sbci	r31, 0xFE	; 254
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
		if(Index==Send_Command)
     71c:	17 30       	cpi	r17, 0x07	; 7
     71e:	11 f4       	brne	.+4      	; 0x724 <CommandSend+0x3a>
		{
			(void)CipSend();
     720:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <CipSend>
		}
		Esp_Commands_a[Index].state=1;
     724:	9e 01       	movw	r18, r28
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	22 0f       	add	r18, r18
     72c:	33 1f       	adc	r19, r19
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
     732:	c2 0f       	add	r28, r18
     734:	d3 1f       	adc	r29, r19
     736:	ca 5f       	subi	r28, 0xFA	; 250
     738:	de 4f       	sbci	r29, 0xFE	; 254
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	8c 83       	std	Y+4, r24	; 0x04
		ConnectionFlag=1;
     73e:	80 93 bd 03 	sts	0x03BD, r24
		EspGlobalCounter(1);
     742:	0e 94 5e 03 	call	0x6bc	; 0x6bc <EspGlobalCounter>
	}
	if((Esp_Commands_a[Index].MatchCounter)==Esp_Commands_a[Index].ResposeLength)
     746:	c1 2f       	mov	r28, r17
     748:	d0 e0       	ldi	r29, 0x00	; 0
     74a:	fe 01       	movw	r30, r28
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	ec 0f       	add	r30, r28
     75a:	fd 1f       	adc	r31, r29
     75c:	ea 5f       	subi	r30, 0xFA	; 250
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	95 81       	ldd	r25, Z+5	; 0x05
     762:	86 81       	ldd	r24, Z+6	; 0x06
     764:	98 13       	cpse	r25, r24
     766:	13 c0       	rjmp	.+38     	; 0x78e <CommandSend+0xa4>
	{
		if(Index!=Wait_Command)
     768:	16 30       	cpi	r17, 0x06	; 6
     76a:	69 f0       	breq	.+26     	; 0x786 <CommandSend+0x9c>
		{
			Esp_Commands_a[Index].state=0;
     76c:	fe 01       	movw	r30, r28
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	ec 0f       	add	r30, r28
     77c:	fd 1f       	adc	r31, r29
     77e:	ea 5f       	subi	r30, 0xFA	; 250
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	14 82       	std	Z+4, r1	; 0x04
		    Esp_Commands_a[Index].MatchCounter=0;
     784:	15 82       	std	Z+5, r1	; 0x05
		}
		ConnectionFlag=0;
     786:	10 92 bd 03 	sts	0x03BD, r1
		ReturnValue=ESP_CmdSndOK;
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	01 c0       	rjmp	.+2      	; 0x790 <CommandSend+0xa6>
ESPRetVal CommandSend(ESP_CommandIndex Index)
{
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
     78e:	11 e0       	ldi	r17, 0x01	; 1
		    Esp_Commands_a[Index].MatchCounter=0;
		}
		ConnectionFlag=0;
		ReturnValue=ESP_CmdSndOK;
	}
	counter=EspGlobalCounter(2);
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	0e 94 5e 03 	call	0x6bc	; 0x6bc <EspGlobalCounter>
	
	if(counter>Esp_Commands_a[Index].WaitTime)
     796:	fe 01       	movw	r30, r28
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	ec 0f       	add	r30, r28
     7a6:	fd 1f       	adc	r31, r29
     7a8:	ea 5f       	subi	r30, 0xFA	; 250
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	27 81       	ldd	r18, Z+7	; 0x07
     7ae:	30 85       	ldd	r19, Z+8	; 0x08
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	60 f4       	brcc	.+24     	; 0x7ce <CommandSend+0xe4>
	{
	  Esp_Commands_a[Index].state=0;
     7b6:	14 82       	std	Z+4, r1	; 0x04
	  Esp_Commands_a[Index].MatchCounter=0;
     7b8:	15 82       	std	Z+5, r1	; 0x05
	  counter1=0;
     7ba:	10 92 bf 03 	sts	0x03BF, r1
     7be:	10 92 be 03 	sts	0x03BE, r1
	  ConnectionFlag=0;
     7c2:	10 92 bd 03 	sts	0x03BD, r1
	  EspGlobalCounter(1);
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <EspGlobalCounter>
	  ReturnValue=ESP_CmdSNDFailed;
     7cc:	12 e0       	ldi	r17, 0x02	; 2
	  
	}
	
    
	return ReturnValue;
}
     7ce:	81 2f       	mov	r24, r17
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	08 95       	ret

000007d8 <ESPAsServer>:
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
  if(flag==0)
     7d8:	80 91 c3 03 	lds	r24, 0x03C3
     7dc:	81 11       	cpse	r24, r1
     7de:	06 c0       	rjmp	.+12     	; 0x7ec <ESPAsServer+0x14>
  {
	index=Server_Command;
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	80 93 c4 03 	sts	0x03C4, r24
	flag=1;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 c3 03 	sts	0x03C3, r24
  }
  
	  ReturnValue=CommandSend(index);
     7ec:	80 91 c4 03 	lds	r24, 0x03C4
     7f0:	0e 94 75 03 	call	0x6ea	; 0x6ea <CommandSend>
	  if(ReturnValue==ESP_CmdSndOK)
     7f4:	81 11       	cpse	r24, r1
     7f6:	0b c0       	rjmp	.+22     	; 0x80e <ESPAsServer+0x36>
	  {
		  index=index+1;
     7f8:	80 91 c4 03 	lds	r24, 0x03C4
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	80 93 c4 03 	sts	0x03C4, r24
		    if(index==Wait_Command)
     802:	86 30       	cpi	r24, 0x06	; 6
     804:	89 f5       	brne	.+98     	; 0x868 <ESPAsServer+0x90>
		    {
			    FuncRet= ESP_CmdSndOK;
				flag=0;
     806:	10 92 c3 03 	sts	0x03C3, r1
	  if(ReturnValue==ESP_CmdSndOK)
	  {
		  index=index+1;
		    if(index==Wait_Command)
		    {
			    FuncRet= ESP_CmdSndOK;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret
				flag=0;
		    }
	  }
	 else if(ReturnValue==ESP_CmdSNDFailed)
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	69 f5       	brne	.+90     	; 0x86c <ESPAsServer+0x94>
	  {
		   if(RetryCounts>4)
     812:	80 91 c5 03 	lds	r24, 0x03C5
     816:	85 30       	cpi	r24, 0x05	; 5
     818:	00 f1       	brcs	.+64     	; 0x85a <ESPAsServer+0x82>
		   {
			   if(index==Mode_Command)
     81a:	20 91 c4 03 	lds	r18, 0x03C4
     81e:	22 30       	cpi	r18, 0x02	; 2
     820:	31 f4       	brne	.+12     	; 0x82e <ESPAsServer+0x56>
			   {
				   RetryCounts=0;
     822:	10 92 c5 03 	sts	0x03C5, r1
				   FuncRet= ESP_CmdSNDFailed;
				   flag=0;
     826:	10 92 c3 03 	sts	0x03C3, r1
		   if(RetryCounts>4)
		   {
			   if(index==Mode_Command)
			   {
				   RetryCounts=0;
				   FuncRet= ESP_CmdSNDFailed;
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	17 c0       	rjmp	.+46     	; 0x85c <ESPAsServer+0x84>
				   flag=0;
			   }
			   else
			   {
				   
				   Esp_Commands_a[index].state=0;
     82e:	e2 2f       	mov	r30, r18
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	cf 01       	movw	r24, r30
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	ea 5f       	subi	r30, 0xFA	; 250
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	14 82       	std	Z+4, r1	; 0x04
				   Esp_Commands_a[index].MatchCounter=0;
     84a:	15 82       	std	Z+5, r1	; 0x05
				   index=index-1;
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	20 93 c4 03 	sts	0x03C4, r18
				   RetryCounts=0;
     852:	10 92 c5 03 	sts	0x03C5, r1
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	01 c0       	rjmp	.+2      	; 0x85c <ESPAsServer+0x84>
     85a:	81 e0       	ldi	r24, 0x01	; 1
				   Esp_Commands_a[index].MatchCounter=0;
				   index=index-1;
				   RetryCounts=0;
			   }
		   }
		  RetryCounts++;
     85c:	90 91 c5 03 	lds	r25, 0x03C5
     860:	9f 5f       	subi	r25, 0xFF	; 255
     862:	90 93 c5 03 	sts	0x03C5, r25
     866:	08 95       	ret
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	08 95       	ret
     86c:	81 e0       	ldi	r24, 0x01	; 1
	  



  return FuncRet;
}
     86e:	08 95       	ret

00000870 <findpos>:
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     870:	fc 01       	movw	r30, r24
     872:	e6 0f       	add	r30, r22
     874:	f1 1d       	adc	r31, r1
     876:	20 81       	ld	r18, Z
     878:	22 23       	and	r18, r18
     87a:	89 f0       	breq	.+34     	; 0x89e <findpos+0x2e>
	{
		if(ustring[pos]==sub)
     87c:	24 13       	cpse	r18, r20
     87e:	06 c0       	rjmp	.+12     	; 0x88c <findpos+0x1c>
     880:	02 c0       	rjmp	.+4      	; 0x886 <findpos+0x16>
     882:	24 13       	cpse	r18, r20
     884:	03 c0       	rjmp	.+6      	; 0x88c <findpos+0x1c>
		{
			return pos+1;
     886:	86 2f       	mov	r24, r22
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	08 95       	ret
		}
		pos++;
     88c:	6f 5f       	subi	r22, 0xFF	; 255
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     88e:	fc 01       	movw	r30, r24
     890:	e6 0f       	add	r30, r22
     892:	f1 1d       	adc	r31, r1
     894:	20 81       	ld	r18, Z
     896:	21 11       	cpse	r18, r1
     898:	f4 cf       	rjmp	.-24     	; 0x882 <findpos+0x12>
		{
			return pos+1;
		}
		pos++;
	}
	return 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	08 95       	ret
     89e:	80 e0       	ldi	r24, 0x00	; 0
}
     8a0:	08 95       	ret

000008a2 <PortCopy>:

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     8a2:	42 17       	cp	r20, r18
     8a4:	70 f4       	brcc	.+28     	; 0x8c2 <PortCopy+0x20>
     8a6:	fb 01       	movw	r30, r22
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     8a8:	30 e0       	ldi	r19, 0x00	; 0
	while(start<end && pos<4 )
	{
		copy[pos]=ustring[start];
     8aa:	dc 01       	movw	r26, r24
     8ac:	a4 0f       	add	r26, r20
     8ae:	b1 1d       	adc	r27, r1
     8b0:	5c 91       	ld	r21, X
     8b2:	51 93       	st	Z+, r21
		pos++;
     8b4:	3f 5f       	subi	r19, 0xFF	; 255
		start++;
     8b6:	4f 5f       	subi	r20, 0xFF	; 255
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     8b8:	42 17       	cp	r20, r18
     8ba:	20 f4       	brcc	.+8      	; 0x8c4 <PortCopy+0x22>
     8bc:	34 30       	cpi	r19, 0x04	; 4
     8be:	a9 f7       	brne	.-22     	; 0x8aa <PortCopy+0x8>
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <PortCopy+0x22>
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     8c2:	30 e0       	ldi	r19, 0x00	; 0
	{
		copy[pos]=ustring[start];
		pos++;
		start++;
	}
	copy[pos]=ustring[start];
     8c4:	fc 01       	movw	r30, r24
     8c6:	e4 0f       	add	r30, r20
     8c8:	f1 1d       	adc	r31, r1
     8ca:	80 81       	ld	r24, Z
     8cc:	fb 01       	movw	r30, r22
     8ce:	e3 0f       	add	r30, r19
     8d0:	f1 1d       	adc	r31, r1
     8d2:	80 83       	st	Z, r24
	PortLen=pos;
     8d4:	30 93 d8 03 	sts	0x03D8, r19
     8d8:	08 95       	ret

000008da <SendData>:
	
}

ESPRetVal SendData(uint8_t count)
{
	EspDataCount=count;
     8da:	80 93 c1 03 	sts	0x03C1, r24
     8de:	10 92 c2 03 	sts	0x03C2, r1
	return CommandSend(Send_Command);
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	0e 94 75 03 	call	0x6ea	; 0x6ea <CommandSend>
}
     8e8:	08 95       	ret

000008ea <ConnectCommand>:


ESPRetVal ConnectCommand()
{
	//uart_num(Esp_Commands_a[Connection_Wait].MatchCounter);
	if(Esp_Commands_a[Connection_Wait].MatchCounter==Esp_Commands_a[Connection_Wait].ResposeLength)
     8ea:	90 91 14 01 	lds	r25, 0x0114
     8ee:	80 91 15 01 	lds	r24, 0x0115
     8f2:	98 13       	cpse	r25, r24
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <ConnectCommand+0x14>
	{
		//uart_string("wifi connected");
		Esp_Commands_a[Connection_Wait].MatchCounter=0;
     8f6:	10 92 14 01 	sts	0x0114, r1
		//Esp_Commands_a[Disconnect_Command].MatchCounter=0;
		return ESP_CmdSndOK;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
	}
	return ESP_CmdSNDFailed;
     8fe:	82 e0       	ldi	r24, 0x02	; 2
}
     900:	08 95       	ret

00000902 <CheckInput>:
uint8_t CheckInput()
{
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	//uart_string(EspDataBuffer);
	if(datagot==1)
     90a:	80 91 bc 03 	lds	r24, 0x03BC
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	09 f0       	breq	.+2      	; 0x914 <CheckInput+0x12>
     912:	4f c0       	rjmp	.+158    	; 0x9b2 <CheckInput+0xb0>
	{
		if(Esp_Commands_a[Wait_Command].MatchCounter==Esp_Commands_a[Wait_Command].ResposeLength)
     914:	90 91 41 01 	lds	r25, 0x0141
     918:	80 91 42 01 	lds	r24, 0x0142
     91c:	98 13       	cpse	r25, r24
     91e:	47 c0       	rjmp	.+142    	; 0x9ae <CheckInput+0xac>
		{ 
			Esp_Commands_a[Wait_Command].state=1;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 40 01 	sts	0x0140, r24
			Esp_Commands_a[Wait_Command].MatchCounter=0;	
     926:	10 92 41 01 	sts	0x0141, r1
			PortStart=findpos(EspDataBuffer,0,',');
     92a:	4c e2       	ldi	r20, 0x2C	; 44
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	8d e9       	ldi	r24, 0x9D	; 157
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	0e 94 38 04 	call	0x870	; 0x870 <findpos>
     936:	c8 2f       	mov	r28, r24
			PortEnd=findpos(EspDataBuffer,PortStart,',');
     938:	4c e2       	ldi	r20, 0x2C	; 44
     93a:	68 2f       	mov	r22, r24
     93c:	8d e9       	ldi	r24, 0x9D	; 157
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	0e 94 38 04 	call	0x870	; 0x870 <findpos>
     944:	08 2f       	mov	r16, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortStart,PortEnd);
     946:	28 2f       	mov	r18, r24
     948:	4c 2f       	mov	r20, r28
     94a:	69 ec       	ldi	r22, 0xC9	; 201
     94c:	73 e0       	ldi	r23, 0x03	; 3
     94e:	8d e9       	ldi	r24, 0x9D	; 157
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	0e 94 51 04 	call	0x8a2	; 0x8a2 <PortCopy>
			PortSel=EspPortBuffer[0];
     956:	c9 ec       	ldi	r28, 0xC9	; 201
     958:	d3 e0       	ldi	r29, 0x03	; 3
     95a:	88 81       	ld	r24, Y
     95c:	80 93 c0 03 	sts	0x03C0, r24
			PortStart=findpos(EspDataBuffer,PortEnd,':');
     960:	4a e3       	ldi	r20, 0x3A	; 58
     962:	60 2f       	mov	r22, r16
     964:	8d e9       	ldi	r24, 0x9D	; 157
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	0e 94 38 04 	call	0x870	; 0x870 <findpos>
     96c:	18 2f       	mov	r17, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     96e:	28 2f       	mov	r18, r24
     970:	40 2f       	mov	r20, r16
     972:	be 01       	movw	r22, r28
     974:	8d e9       	ldi	r24, 0x9D	; 157
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 51 04 	call	0x8a2	; 0x8a2 <PortCopy>
			Recieved[0]=EspPortBuffer[0];
     97c:	c8 81       	ld	r28, Y
     97e:	c0 93 db 03 	sts	0x03DB, r28
			Recieved[1]=EspPortBuffer[1];
     982:	80 91 ca 03 	lds	r24, 0x03CA
     986:	80 93 dc 03 	sts	0x03DC, r24
			uint8_t initial ;
			initial=(uint8_t )EspPortBuffer[0];
			PortEnd=PortStart;
     98a:	10 93 da 03 	sts	0x03DA, r17
			PortStart=PortStart+(uint8_t )EspPortBuffer[0];
     98e:	c1 0f       	add	r28, r17
     990:	c0 93 d9 03 	sts	0x03D9, r28
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     994:	2c 2f       	mov	r18, r28
     996:	41 2f       	mov	r20, r17
     998:	69 ec       	ldi	r22, 0xC9	; 201
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	8d e9       	ldi	r24, 0x9D	; 157
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <PortCopy>
			for( posi=PortEnd;posi<PortStart;posi++)
			{
				Recieved[posi]=EspDataBuffer[posi];
				
			}*/
			EspPortBuffer[PortStart-2]='\0';
     9a4:	ec 2f       	mov	r30, r28
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	e9 53       	subi	r30, 0x39	; 57
     9aa:	fc 4f       	sbci	r31, 0xFC	; 252
     9ac:	10 82       	st	Z, r1
			//RTE_WriteBufferUart(EspPortBuffer);//uart_string(EspPortBuffer);
			//RTE_WriteBufferUart(EspDataBuffer);
			
		}
		//uart_string(EspDataBuffer);
		datagot=0;
     9ae:	10 92 bc 03 	sts	0x03BC, r1
	}
	if(Esp_Commands_a[Uart_command].MatchCounter==Esp_Commands_a[Uart_command].ResposeLength)
     9b2:	90 91 6e 01 	lds	r25, 0x016E
     9b6:	80 91 6f 01 	lds	r24, 0x016F
     9ba:	98 13       	cpse	r25, r24
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <CheckInput+0xc2>
	{
		//uart_string("uart debug mode enabled");
		UartEvents=0x01;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 fe 04 	sts	0x04FE, r24
	}
	
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <RequestWait>:
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
	  static ESPRetVal ReturnValue=ESP_CmdSndBusy;
	  if(FlagReq==0)
     9ce:	80 91 c6 03 	lds	r24, 0x03C6
     9d2:	81 11       	cpse	r24, r1
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <RequestWait+0x18>
	  {
		    indexReq=Wait_Command;
     9d6:	86 e0       	ldi	r24, 0x06	; 6
     9d8:	80 93 c7 03 	sts	0x03C7, r24
		    FlagReq=1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 c6 03 	sts	0x03C6, r24
	        BUFFEREnable=1;
     9e2:	80 93 c8 03 	sts	0x03C8, r24
			 
			
	  }

 
	  	  if(ReturnValue!=ESP_CmdSndOK )
     9e6:	80 91 1d 02 	lds	r24, 0x021D
     9ea:	88 23       	and	r24, r24
     9ec:	39 f0       	breq	.+14     	; 0x9fc <RequestWait+0x2e>
	  	  { 
				ReturnValue=CommandSend(Wait_Command);
     9ee:	86 e0       	ldi	r24, 0x06	; 6
     9f0:	0e 94 75 03 	call	0x6ea	; 0x6ea <CommandSend>
     9f4:	80 93 1d 02 	sts	0x021D, r24
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 95       	ret
				ReturnValue=CommandSend(Wait_Command);

		  }
		  else
		  {
					if(datagot==1)
     9fc:	80 91 bc 03 	lds	r24, 0x03BC
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	59 f4       	brne	.+22     	; 0xa1a <RequestWait+0x4c>
					{
						FlagReq=0;
     a04:	10 92 c6 03 	sts	0x03C6, r1
						BUFFEREnable=0;
     a08:	10 92 c8 03 	sts	0x03C8, r1
						CheckInput();
     a0c:	0e 94 81 04 	call	0x902	; 0x902 <CheckInput>
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
						ReturnValue=ESP_CmdSndBusy;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 1d 02 	sts	0x021D, r24
						FlagReq=0;
						BUFFEREnable=0;
						CheckInput();
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
					}		   
		  }

	  	  
return FuncRet;
}
     a1c:	08 95       	ret

00000a1e <enable>:

uint8_t enable()
{
	
   return ESP_DataRead_a[0].Purpose;
}
     a1e:	80 91 74 01 	lds	r24, 0x0174
     a22:	08 95       	ret

00000a24 <checkRecievedData>:

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     a24:	60 91 72 01 	lds	r22, 0x0172
     a28:	70 91 73 01 	lds	r23, 0x0173
     a2c:	89 ec       	ldi	r24, 0xC9	; 201
     a2e:	93 e0       	ldi	r25, 0x03	; 3
     a30:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <strcmp>
     a34:	28 2f       	mov	r18, r24
     a36:	39 2f       	mov	r19, r25
     a38:	23 2b       	or	r18, r19
     a3a:	21 f4       	brne	.+8      	; 0xa44 <checkRecievedData+0x20>
			{
				ESP_DataRead_a[i].Purpose=0;
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 74 01 	sts	0x0174, r24
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <checkRecievedData+0x24>
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
			{
				ESP_DataRead_a[i].Purpose=0;
     a44:	10 92 74 01 	sts	0x0174, r1

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     a48:	60 91 75 01 	lds	r22, 0x0175
     a4c:	70 91 76 01 	lds	r23, 0x0176
     a50:	89 ec       	ldi	r24, 0xC9	; 201
     a52:	93 e0       	ldi	r25, 0x03	; 3
     a54:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <strcmp>
     a58:	28 2f       	mov	r18, r24
     a5a:	39 2f       	mov	r19, r25
     a5c:	23 2b       	or	r18, r19
     a5e:	19 f0       	breq	.+6      	; 0xa66 <checkRecievedData+0x42>
			{
				ESP_DataRead_a[i].Purpose=0;
     a60:	10 92 77 01 	sts	0x0177, r1
     a64:	08 95       	ret
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 77 01 	sts	0x0177, r24
     a6c:	08 95       	ret

00000a6e <ESPpop>:
}

uint8_t ESPpop(char *Bytex)
{
	static uint8_t PosByte;
	EspDataBuffer[30]='!';
     a6e:	21 e2       	ldi	r18, 0x21	; 33
     a70:	20 93 bb 03 	sts	0x03BB, r18
	*Bytex=EspDataBuffer[PosByte+7];
     a74:	20 91 e5 03 	lds	r18, 0x03E5
     a78:	e2 2f       	mov	r30, r18
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	e3 56       	subi	r30, 0x63	; 99
     a7e:	fc 4f       	sbci	r31, 0xFC	; 252
     a80:	37 81       	ldd	r19, Z+7	; 0x07
     a82:	fc 01       	movw	r30, r24
     a84:	30 83       	st	Z, r19
	if(PosByte==23)
     a86:	27 31       	cpi	r18, 0x17	; 23
     a88:	21 f4       	brne	.+8      	; 0xa92 <ESPpop+0x24>
	{
		PosByte=0;
     a8a:	10 92 e5 03 	sts	0x03E5, r1
		return 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	08 95       	ret
	}
	else
	{
		PosByte++;
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	20 93 e5 03 	sts	0x03E5, r18
	}
	return 0;
     a98:	80 e0       	ldi	r24, 0x00	; 0
}
     a9a:	08 95       	ret

00000a9c <ESPCallBack>:

void ESPCallBack(void *fillcallback)
{
	char* mediator;
	mediator=(char*)fillcallback;
	EspDataBuffer[28]=mediator[0];
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 81       	ld	r18, Z
     aa0:	20 93 b9 03 	sts	0x03B9, r18
	EspDataBuffer[29]=mediator[1];
     aa4:	81 81       	ldd	r24, Z+1	; 0x01
     aa6:	80 93 ba 03 	sts	0x03BA, r24
     aaa:	08 95       	ret

00000aac <UartHandlerInit>:
	
}


void UartHandlerInit()
{
     aac:	08 95       	ret

00000aae <adc_init>:
 */ 
#include "ADC.h"
#include "..\BaseLayer\UART.h"
void adc_init(void){

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHzjkh
     aae:	ea e7       	ldi	r30, 0x7A	; 122
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	87 60       	ori	r24, 0x07	; 7
     ab6:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0)|(1 << REFS1); // Set ADC reference to 2.56 internal
     ab8:	ac e7       	ldi	r26, 0x7C	; 124
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	8c 91       	ld	r24, X
     abe:	80 6c       	ori	r24, 0xC0	; 192
     ac0:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     ac2:	8c 91       	ld	r24, X
     ac4:	80 62       	ori	r24, 0x20	; 32
     ac6:	8c 93       	st	X, r24

	// No MUX values needed to be changed to use ADC0

	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	ADCSRA |= (1 << ADIE);	
     ac8:	80 81       	ld	r24, Z
     aca:	88 60       	ori	r24, 0x08	; 8
     acc:	80 83       	st	Z, r24
     ace:	08 95       	ret

00000ad0 <adc_read>:
    //ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
}

void adc_read(unsigned char ch){
    ADCSRA |= (1 << ADEN);
     ad0:	ea e7       	ldi	r30, 0x7A	; 122
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	90 81       	ld	r25, Z
     ad6:	90 68       	ori	r25, 0x80	; 128
     ad8:	90 83       	st	Z, r25
	ADMUX &= 0xF8; // clear bottom 3 bits
     ada:	ac e7       	ldi	r26, 0x7C	; 124
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	9c 91       	ld	r25, X
     ae0:	98 7f       	andi	r25, 0xF8	; 248
     ae2:	9c 93       	st	X, r25
	ADMUX |= ch; // then set bottom 3 bits to channel n
     ae4:	9c 91       	ld	r25, X
     ae6:	89 2b       	or	r24, r25
     ae8:	8c 93       	st	X, r24

	//uart_num(ch);
	ADCSRA |= (1 << ADSC);//|(1<<ADEN);  // Start A2D Conversions
     aea:	80 81       	ld	r24, Z
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 83       	st	Z, r24
     af0:	08 95       	ret

00000af2 <ADC_State>:
	
}

uint8_t ADC_State()
{	
	return bit_is_set(ADCSRA,ADSC);
     af2:	80 91 7a 00 	lds	r24, 0x007A
}
     af6:	80 74       	andi	r24, 0x40	; 64
     af8:	08 95       	ret

00000afa <ADCValue>:
uint16_t ADCValue()
{
		uint8_t thelow=ADCL;
     afa:	80 91 78 00 	lds	r24, 0x0078
		uint16_t tenbit=ADCH<<2|thelow>>6;
     afe:	20 91 79 00 	lds	r18, 0x0079
     b02:	82 95       	swap	r24
     b04:	86 95       	lsr	r24
     b06:	86 95       	lsr	r24
     b08:	83 70       	andi	r24, 0x03	; 3
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	28 2b       	or	r18, r24
		//PORTD=tenbit;
		//uart_num(thelow);
		//uart_num(ADMUX&0x07);
		return(tenbit);

}
     b16:	82 2f       	mov	r24, r18
     b18:	93 2f       	mov	r25, r19
     b1a:	08 95       	ret

00000b1c <__vector_21>:

ISR(ADC_vect)
{
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	8f 93       	push	r24
	uint8_t thelow=ADCL;
     b28:	80 91 78 00 	lds	r24, 0x0078
	uint16_t tenbit=ADCH<<2|thelow>>6;
     b2c:	80 91 79 00 	lds	r24, 0x0079
	//PORTD=tenbit;
	
	
     b30:	8f 91       	pop	r24
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <PushIntoCircularBuffer>:
 *  Author: Nikhil
 */ 
#include "CircularQueue.h"
#include "UART.h"
CbuffState_t PushIntoCircularBuffer(Cbuff_t* CircularBuffer,unsigned char data)
{
     b3c:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
     b3e:	92 81       	ldd	r25, Z+2	; 0x02
     b40:	89 2f       	mov	r24, r25
     b42:	8f 5f       	subi	r24, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
     b44:	24 81       	ldd	r18, Z+4	; 0x04
     b46:	82 17       	cp	r24, r18
     b48:	08 f0       	brcs	.+2      	; 0xb4c <PushIntoCircularBuffer+0x10>
	{
		next=0;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
     b4c:	23 81       	ldd	r18, Z+3	; 0x03
     b4e:	28 17       	cp	r18, r24
     b50:	41 f0       	breq	.+16     	; 0xb62 <PushIntoCircularBuffer+0x26>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
     b52:	a0 81       	ld	r26, Z
     b54:	b1 81       	ldd	r27, Z+1	; 0x01
     b56:	a9 0f       	add	r26, r25
     b58:	b1 1d       	adc	r27, r1
     b5a:	6c 93       	st	X, r22
		CircularBuffer->head=next;
     b5c:	82 83       	std	Z+2, r24	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
     b62:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
     b64:	08 95       	ret

00000b66 <PopFromCircularBuffer>:

CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
     b66:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	98 2f       	mov	r25, r24
     b6c:	9f 5f       	subi	r25, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
     b6e:	22 81       	ldd	r18, Z+2	; 0x02
     b70:	82 17       	cp	r24, r18
     b72:	71 f0       	breq	.+28     	; 0xb90 <PopFromCircularBuffer+0x2a>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
     b74:	24 81       	ldd	r18, Z+4	; 0x04
     b76:	92 17       	cp	r25, r18
     b78:	08 f0       	brcs	.+2      	; 0xb7c <PopFromCircularBuffer+0x16>
	{
		next=0;
     b7a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
     b7c:	a0 81       	ld	r26, Z
     b7e:	b1 81       	ldd	r27, Z+1	; 0x01
     b80:	a8 0f       	add	r26, r24
     b82:	b1 1d       	adc	r27, r1
     b84:	8c 91       	ld	r24, X
     b86:	db 01       	movw	r26, r22
     b88:	8c 93       	st	X, r24
	 CircularBuffer->tail=next;
     b8a:	93 83       	std	Z+3, r25	; 0x03
	 
  return BuffOk;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	08 95       	ret
CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
     b90:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	 CircularBuffer->tail=next;
	 
  return BuffOk;
}
     b92:	08 95       	ret

00000b94 <IsBuffempty>:

CbuffState_t IsBuffempty(Cbuff_t  *CircularBuffer)
{
     b94:	fc 01       	movw	r30, r24
		if(CircularBuffer->tail==CircularBuffer->head)
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	23 81       	ldd	r18, Z+3	; 0x03
     b9a:	92 81       	ldd	r25, Z+2	; 0x02
     b9c:	29 13       	cpse	r18, r25
     b9e:	80 e0       	ldi	r24, 0x00	; 0
		{
			return BuffEmpty;
		}
	return BuffOk;
}
     ba0:	08 95       	ret

00000ba2 <HeadTailDiff>:

uint8_t HeadTailDiff(Cbuff_t  *CircularBuffer,uint8_t dat)
{
     ba2:	fc 01       	movw	r30, r24
	if(CircularBuffer->tail>CircularBuffer->head)
     ba4:	93 81       	ldd	r25, Z+3	; 0x03
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	89 17       	cp	r24, r25
     baa:	20 f4       	brcc	.+8      	; 0xbb4 <HeadTailDiff+0x12>
	{
		return ((CircularBuffer->MaxLen-CircularBuffer->tail)+CircularBuffer->head);
     bac:	24 81       	ldd	r18, Z+4	; 0x04
     bae:	82 0f       	add	r24, r18
     bb0:	89 1b       	sub	r24, r25
     bb2:	08 95       	ret
	}
	else
	{
		return (CircularBuffer->head-CircularBuffer->tail);
     bb4:	89 1b       	sub	r24, r25
	}
     bb6:	08 95       	ret

00000bb8 <TriggerUltraSonic>:
	
}

static void TriggerUltraSonic(void)
{
	PinOutput(0,PIN_OUT8,D);
     bb8:	42 e0       	ldi	r20, 0x02	; 2
     bba:	67 e0       	ldi	r22, 0x07	; 7
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <TriggerUltraSonic+0xc>
	_delay_us(2);
	PinOutput(1,PIN_OUT8,D);
     bc4:	42 e0       	ldi	r20, 0x02	; 2
     bc6:	67 e0       	ldi	r22, 0x07	; 7
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <TriggerUltraSonic+0x18>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <TriggerUltraSonic+0x1a>
     bd2:	00 00       	nop
	_delay_us(5);
	PinOutput(0,PIN_OUT8,D);
     bd4:	42 e0       	ldi	r20, 0x02	; 2
     bd6:	67 e0       	ldi	r22, 0x07	; 7
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
     bde:	08 95       	ret

00000be0 <changeIntLogic>:
}

void changeIntLogic(uint8_t logic)
{
	 
	if(logic==1)
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	31 f4       	brne	.+12     	; 0xbf0 <changeIntLogic+0x10>
	{
		//EICRA  |= (1 << ISC00)| (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     be4:	e9 e6       	ldi	r30, 0x69	; 105
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	81 60       	ori	r24, 0x01	; 1
     bec:	80 83       	st	Z, r24
     bee:	08 95       	ret
	}
	else
	{
		//EICRA  &=~(1<<ISC00);
		//EICRA  |= (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     bf0:	e9 e6       	ldi	r30, 0x69	; 105
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	80 83       	st	Z, r24
     bfa:	08 95       	ret

00000bfc <__vector_1>:
	Start=0;
	Status=1;
}

ISR (INT0_vect)
{   
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
	//uart_string("nIKHIL");
	if(Start==0)
     c1e:	80 91 e6 03 	lds	r24, 0x03E6
     c22:	81 11       	cpse	r24, r1
     c24:	0a c0       	rjmp	.+20     	; 0xc3a <__vector_1+0x3e>
	{
		Timer2Enable();
     c26:	0e 94 bd 0a 	call	0x157a	; 0x157a <Timer2Enable>
		changeIntLogic(0);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <changeIntLogic>
		Start=1; 
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 e6 03 	sts	0x03E6, r24
     c38:	0b c0       	rjmp	.+22     	; 0xc50 <__vector_1+0x54>
		      
	}/* interrupt code here */
	else
	{   	
		Timer2Count();
     c3a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <Timer2Count>
		changeIntLogic(1);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <changeIntLogic>
		Start=0;
     c46:	10 92 e6 03 	sts	0x03E6, r1
		Status=1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 e7 03 	sts	0x03E7, r24
		  
	}
	
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <ExtIntInit>:
#include "pinout.h"
#include "UART.h"
void ExtIntInit()
{
	
	changeIntLogic(1);//MCUCR |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <changeIntLogic>
	EIMSK  |= (1 << INT0);      // Turns on INT0
     c7a:	e8 9a       	sbi	0x1d, 0	; 29
	Start=0;
     c7c:	10 92 e6 03 	sts	0x03E6, r1
	Status=1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 e7 03 	sts	0x03E7, r24
     c86:	08 95       	ret

00000c88 <InterfacePulse>:
		EICRA  |= (1 << ISC00);
	}
}

uint16_t InterfacePulse(uint16_t Pulse)
{
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	ec 01       	movw	r28, r24
	static uint8_t timeout=0;
	uint8_t *Data=&Pulse;
    
	if(timeout>1)
     c8e:	80 91 e8 03 	lds	r24, 0x03E8
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	60 f0       	brcs	.+24     	; 0xcae <InterfacePulse+0x26>
	{
		changeIntLogic(1);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <changeIntLogic>
		TriggerUltraSonic();
     c9c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <TriggerUltraSonic>
		Status=0;
     ca0:	10 92 e7 03 	sts	0x03E7, r1
		Start=0;
     ca4:	10 92 e6 03 	sts	0x03E6, r1
		timeout=0;
     ca8:	10 92 e8 03 	sts	0x03E8, r1
     cac:	3b c0       	rjmp	.+118    	; 0xd24 <InterfacePulse+0x9c>
		//uart_num(timeout);
	}
	else
	{
		
			if(Status==1)
     cae:	90 91 e7 03 	lds	r25, 0x03E7
     cb2:	91 30       	cpi	r25, 0x01	; 1
     cb4:	99 f5       	brne	.+102    	; 0xd1c <InterfacePulse+0x94>
			{
				//TriggerUltraSonic();
				TimerValue=TimerValue+(overflowfag*255);
     cb6:	20 91 17 05 	lds	r18, 0x0517
     cba:	80 91 15 05 	lds	r24, 0x0515
     cbe:	90 91 16 05 	lds	r25, 0x0516
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	23 9f       	mul	r18, r19
     cc6:	80 0d       	add	r24, r0
     cc8:	91 1d       	adc	r25, r1
     cca:	11 24       	eor	r1, r1
     ccc:	90 93 16 05 	sts	0x0516, r25
     cd0:	80 93 15 05 	sts	0x0515, r24
				TimerValue=(16*TimerValue)/58;// PRESCALER IS 256 so 1 count is 16us
     cd4:	20 91 15 05 	lds	r18, 0x0515
     cd8:	30 91 16 05 	lds	r19, 0x0516
     cdc:	22 95       	swap	r18
     cde:	32 95       	swap	r19
     ce0:	30 7f       	andi	r19, 0xF0	; 240
     ce2:	32 27       	eor	r19, r18
     ce4:	20 7f       	andi	r18, 0xF0	; 240
     ce6:	32 27       	eor	r19, r18
     ce8:	af e9       	ldi	r26, 0x9F	; 159
     cea:	b6 e4       	ldi	r27, 0x46	; 70
     cec:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
     cf0:	92 95       	swap	r25
     cf2:	82 95       	swap	r24
     cf4:	8f 70       	andi	r24, 0x0F	; 15
     cf6:	89 27       	eor	r24, r25
     cf8:	9f 70       	andi	r25, 0x0F	; 15
     cfa:	89 27       	eor	r24, r25
     cfc:	90 93 16 05 	sts	0x0516, r25
     d00:	80 93 15 05 	sts	0x0515, r24
				Pulse=TimerValue;
     d04:	c0 91 15 05 	lds	r28, 0x0515
     d08:	d0 91 16 05 	lds	r29, 0x0516
				Pulse|=0X8000;
     d0c:	d0 68       	ori	r29, 0x80	; 128
				timeout=0;
     d0e:	10 92 e8 03 	sts	0x03E8, r1
				Status=0;
     d12:	10 92 e7 03 	sts	0x03E7, r1
				TriggerUltraSonic();
     d16:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <TriggerUltraSonic>
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <InterfacePulse+0x9c>
			}
			else
			{
				Pulse|=0x1000;
     d1c:	d0 61       	ori	r29, 0x10	; 16
				timeout++;
     d1e:	8f 5f       	subi	r24, 0xFF	; 255
     d20:	80 93 e8 03 	sts	0x03E8, r24
			}

	}
	return Pulse;
}
     d24:	8c 2f       	mov	r24, r28
     d26:	9d 2f       	mov	r25, r29
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <i2c_init>:
	
};
void i2c_init(void)
{
	
	TWBR = (uint8_t)TWBR_val;
     d2e:	e8 eb       	ldi	r30, 0xB8	; 184
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	8c e0       	ldi	r24, 0x0C	; 12
     d34:	80 83       	st	Z, r24
	uart_num(TWBR);
     d36:	80 81       	ld	r24, Z
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 87 0b 	call	0x170e	; 0x170e <uart_num>
     d3e:	08 95       	ret

00000d40 <EOTi2c>:
}
uint8_t EOTi2c()
{

	while( !(TWCR & (1<<TWINT)) )
     d40:	ec eb       	ldi	r30, 0xBC	; 188
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 23       	and	r24, r24
     d48:	ec f7       	brge	.-6      	; 0xd44 <EOTi2c+0x4>
	{
	}

	return 1;
}
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret

00000d4e <i2c_start>:


uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     d4e:	ec eb       	ldi	r30, 0xBC	; 188
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     d54:	94 ea       	ldi	r25, 0xA4	; 164
     d56:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) )
     d58:	90 81       	ld	r25, Z
     d5a:	99 23       	and	r25, r25
     d5c:	ec f7       	brge	.-6      	; 0xd58 <i2c_start+0xa>
	{
		
	}
	//uart_num(!(TWCR & (1<<TWINT)));
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     d5e:	90 91 b9 00 	lds	r25, 0x00B9
     d62:	98 7f       	andi	r25, 0xF8	; 248
     d64:	98 30       	cpi	r25, 0x08	; 8
     d66:	a1 f4       	brne	.+40     	; 0xd90 <i2c_start+0x42>
	//uart_string("hrrr");
	// load slave address into data register
	TWDR = address;
     d68:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     d6c:	84 e8       	ldi	r24, 0x84	; 132
     d6e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     d72:	ec eb       	ldi	r30, 0xBC	; 188
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 23       	and	r24, r24
     d7a:	ec f7       	brge	.-6      	; 0xd76 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     d7c:	90 91 b9 00 	lds	r25, 0x00B9
     d80:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     d82:	98 31       	cpi	r25, 0x18	; 24
     d84:	39 f0       	breq	.+14     	; 0xd94 <i2c_start+0x46>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 34       	cpi	r25, 0x40	; 64
     d8a:	29 f4       	brne	.+10     	; 0xd96 <i2c_start+0x48>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret
	{
		
	}
	//uart_num(!(TWCR & (1<<TWINT)));
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     d94:	80 e0       	ldi	r24, 0x00	; 0
}
     d96:	08 95       	ret

00000d98 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     d98:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     d9c:	84 e8       	ldi	r24, 0x84	; 132
     d9e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     da2:	ec eb       	ldi	r30, 0xBC	; 188
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 23       	and	r24, r24
     daa:	ec f7       	brge	.-6      	; 0xda6 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     dac:	90 91 b9 00 	lds	r25, 0x00B9
     db0:	98 7f       	andi	r25, 0xF8	; 248
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	98 32       	cpi	r25, 0x28	; 40
     db6:	09 f4       	brne	.+2      	; 0xdba <i2c_write+0x22>
     db8:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     dba:	08 95       	ret

00000dbc <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     dbc:	84 e9       	ldi	r24, 0x94	; 148
     dbe:	80 93 bc 00 	sts	0x00BC, r24
     dc2:	08 95       	ret

00000dc4 <i2c_writeRegInit>:
	

	return 0;
}
uint8_t i2c_writeRegInit(uint8_t devaddr, uint8_t regaddr, uint16_t length)
{
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	f8 2e       	mov	r15, r24
     dd2:	e6 2e       	mov	r14, r22
     dd4:	8a 01       	movw	r16, r20

	for (uint16_t i = 0; i < length; i++)
     dd6:	41 15       	cp	r20, r1
     dd8:	51 05       	cpc	r21, r1
     dda:	d1 f0       	breq	.+52     	; 0xe10 <i2c_writeRegInit+0x4c>
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
     dde:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     de0:	8f 2d       	mov	r24, r15
     de2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <i2c_start>
     de6:	81 11       	cpse	r24, r1
     de8:	15 c0       	rjmp	.+42     	; 0xe14 <i2c_writeRegInit+0x50>
		i2c_write(regaddr);
     dea:	8e 2d       	mov	r24, r14
     dec:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
		if (i2c_write(pgm_read_byte(&ssd1306_init_sequence[i]))) return 1;
     df0:	fe 01       	movw	r30, r28
     df2:	e8 59       	subi	r30, 0x98	; 152
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	84 91       	lpm	r24, Z
     df8:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
     dfc:	81 11       	cpse	r24, r1
     dfe:	0c c0       	rjmp	.+24     	; 0xe18 <i2c_writeRegInit+0x54>
		i2c_stop();
     e00:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
	return 0;
}
uint8_t i2c_writeRegInit(uint8_t devaddr, uint8_t regaddr, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
     e04:	21 96       	adiw	r28, 0x01	; 1
     e06:	c0 17       	cp	r28, r16
     e08:	d1 07       	cpc	r29, r17
     e0a:	51 f7       	brne	.-44     	; 0xde0 <i2c_writeRegInit+0x1c>
		i2c_stop();
	}

	

	return 0;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <i2c_writeRegInit+0x56>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <i2c_writeRegInit+0x56>
uint8_t i2c_writeRegInit(uint8_t devaddr, uint8_t regaddr, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <i2c_writeRegInit+0x56>
		i2c_write(regaddr);
		if (i2c_write(pgm_read_byte(&ssd1306_init_sequence[i]))) return 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
	}

	

	return 0;
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	f8 2e       	mov	r15, r24
     e36:	e6 2e       	mov	r14, r22

	for (uint16_t i = 0; i < length; i++)
     e38:	21 15       	cp	r18, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	c9 f0       	breq	.+50     	; 0xe70 <i2c_writeReg+0x48>
     e3e:	c4 2f       	mov	r28, r20
     e40:	d5 2f       	mov	r29, r21
	i2c_stop();
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
     e42:	89 01       	movw	r16, r18
     e44:	0c 0f       	add	r16, r28
     e46:	1d 1f       	adc	r17, r29
{

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     e48:	8f 2d       	mov	r24, r15
     e4a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <i2c_start>
     e4e:	81 11       	cpse	r24, r1
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <i2c_writeReg+0x4c>
        i2c_write(regaddr);
     e52:	8e 2d       	mov	r24, r14
     e54:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
		if (i2c_write(data[i])) return 1;
     e58:	89 91       	ld	r24, Y+
     e5a:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
     e5e:	81 11       	cpse	r24, r1
     e60:	0b c0       	rjmp	.+22     	; 0xe78 <i2c_writeReg+0x50>
		i2c_stop();
     e62:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
     e66:	c0 17       	cp	r28, r16
     e68:	d1 07       	cpc	r29, r17
     e6a:	71 f7       	brne	.-36     	; 0xe48 <i2c_writeReg+0x20>
		i2c_stop();
	}

	

	return 0;
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <i2c_writeReg+0x52>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <i2c_writeReg+0x52>
uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <i2c_writeReg+0x52>
        i2c_write(regaddr);
		if (i2c_write(data[i])) return 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
	}

	

	return 0;
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <ssd1036_Init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
}

uint8_t ssd1036_Init()
{
	return i2c_writeRegInit(0x78,0x00,28);
     e88:	4c e1       	ldi	r20, 0x1C	; 28
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	88 e7       	ldi	r24, 0x78	; 120
     e90:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <i2c_writeRegInit>
}
     e94:	08 95       	ret

00000e96 <ssd1036_chumma>:
		//chumma[i]=0x00;
	//}
	// i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
     e96:	25 e0       	ldi	r18, 0x05	; 5
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	49 ee       	ldi	r20, 0xE9	; 233
     e9c:	53 e0       	ldi	r21, 0x03	; 3
     e9e:	60 e4       	ldi	r22, 0x40	; 64
     ea0:	88 e7       	ldi	r24, 0x78	; 120
     ea2:	0e 94 14 07 	call	0xe28	; 0xe28 <i2c_writeReg>
} 
     ea6:	08 95       	ret

00000ea8 <ssd1306_char_font6x8>:

void ssd1306_char_font6x8(char ch) {
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	08 2f       	mov	r16, r24
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
     eb2:	88 e7       	ldi	r24, 0x78	; 120
     eb4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <i2c_start>
     eb8:	81 11       	cpse	r24, r1
     eba:	20 c0       	rjmp	.+64     	; 0xefc <ssd1306_char_font6x8+0x54>
	i2c_write(0x40);
     ebc:	80 e4       	ldi	r24, 0x40	; 64
     ebe:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
     ec2:	00 52       	subi	r16, 0x20	; 32
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     ec4:	80 2f       	mov	r24, r16
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8c 01       	movw	r16, r24
     eca:	00 0f       	add	r16, r16
     ecc:	11 1f       	adc	r17, r17
     ece:	80 0f       	add	r24, r16
     ed0:	91 1f       	adc	r25, r17
     ed2:	8c 01       	movw	r16, r24
     ed4:	00 0f       	add	r16, r16
     ed6:	11 1f       	adc	r17, r17
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	d0 e0       	ldi	r29, 0x00	; 0
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     edc:	fe 01       	movw	r30, r28
     ede:	e0 0f       	add	r30, r16
     ee0:	f1 1f       	adc	r31, r17
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     ee2:	ec 57       	subi	r30, 0x7C	; 124
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	84 91       	lpm	r24, Z
     ee8:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
     eec:	81 11       	cpse	r24, r1
     eee:	06 c0       	rjmp	.+12     	; 0xefc <ssd1306_char_font6x8+0x54>
     ef0:	21 96       	adiw	r28, 0x01	; 1

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
     ef2:	c6 30       	cpi	r28, 0x06	; 6
     ef4:	d1 05       	cpc	r29, r1
     ef6:	91 f7       	brne	.-28     	; 0xedc <ssd1306_char_font6x8+0x34>
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
     ef8:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <ssd1306_setpos>:
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
void ssd1306_setpos(uint8_t x, uint8_t y)
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	c8 2f       	mov	r28, r24
     f0c:	d6 2f       	mov	r29, r22
	if (i2c_start(0x78 | 0x00)) return 1;
     f0e:	88 e7       	ldi	r24, 0x78	; 120
     f10:	0e 94 a7 06 	call	0xd4e	; 0xd4e <i2c_start>
     f14:	81 11       	cpse	r24, r1
     f16:	12 c0       	rjmp	.+36     	; 0xf3c <ssd1306_setpos+0x36>
	i2c_write(0x00);
     f18:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
	i2c_write(0xb0 + y);
     f1c:	8d 2f       	mov	r24, r29
     f1e:	80 55       	subi	r24, 0x50	; 80
     f20:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
	i2c_write((x & 0x0f));
     f24:	8c 2f       	mov	r24, r28
     f26:	8f 70       	andi	r24, 0x0F	; 15
     f28:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
	i2c_write(((x & 0xf0) >> 4) | 0x10); // | 0x10
     f2c:	8c 2f       	mov	r24, r28
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
	/* TODO: Verify correctness */	 // | 0x01
	i2c_stop();
     f38:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <ssd1306_String_font6x8>:
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
     f48:	86 2f       	mov	r24, r22
	ssd1306_setpos(x,y);
     f4a:	64 2f       	mov	r22, r20
     f4c:	0e 94 83 07 	call	0xf06	; 0xf06 <ssd1306_setpos>
	while ( *SSDstring)
     f50:	88 81       	ld	r24, Y
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <ssd1306_String_font6x8+0x20>
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
     f56:	21 96       	adiw	r28, 0x01	; 1
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
	{
     ssd1306_char_font6x8(*SSDstring++);
     f58:	0e 94 54 07 	call	0xea8	; 0xea8 <ssd1306_char_font6x8>
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
     f5c:	89 91       	ld	r24, Y+
     f5e:	81 11       	cpse	r24, r1
     f60:	fb cf       	rjmp	.-10     	; 0xf58 <ssd1306_String_font6x8+0x16>
	{
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <ssd1306_Fill_Rectangle>:
		i2c_write(0x01);
	}
	i2c_stop();
}
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	d4 2f       	mov	r29, r20
		ssd1306_setpos(x,y);
     f6e:	0e 94 83 07 	call	0xf06	; 0xf06 <ssd1306_setpos>
		if (i2c_start(0x78 | 0x00)) return 1;
     f72:	88 e7       	ldi	r24, 0x78	; 120
     f74:	0e 94 a7 06 	call	0xd4e	; 0xd4e <i2c_start>
     f78:	81 11       	cpse	r24, r1
     f7a:	19 c0       	rjmp	.+50     	; 0xfae <ssd1306_Fill_Rectangle+0x46>
		i2c_write(0x40);
     f7c:	80 e4       	ldi	r24, 0x40	; 64
     f7e:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
		for(uint8_t i=0;i<data;i++)
     f82:	d1 11       	cpse	r29, r1
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <ssd1306_Fill_Rectangle+0x22>
     f86:	cd 2f       	mov	r28, r29
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <ssd1306_Fill_Rectangle+0x36>
     f8a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			i2c_write(0xff);
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
		ssd1306_setpos(x,y);
		if (i2c_start(0x78 | 0x00)) return 1;
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
     f92:	cf 5f       	subi	r28, 0xFF	; 255
     f94:	cd 13       	cpse	r28, r29
     f96:	fa cf       	rjmp	.-12     	; 0xf8c <ssd1306_Fill_Rectangle+0x24>
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     f98:	df 37       	cpi	r29, 0x7F	; 127
     f9a:	a8 f3       	brcs	.-22     	; 0xf86 <ssd1306_Fill_Rectangle+0x1e>
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <ssd1306_Fill_Rectangle+0x42>
		{
		  i2c_write(0x01);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 cc 06 	call	0xd98	; 0xd98 <i2c_write>
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     fa4:	cf 5f       	subi	r28, 0xFF	; 255
     fa6:	cf 37       	cpi	r28, 0x7F	; 127
     fa8:	d0 f3       	brcs	.-12     	; 0xf9e <ssd1306_Fill_Rectangle+0x36>
		{
		  i2c_write(0x01);
		}
		i2c_stop();
     faa:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <SSDGetByte>:

uint8_t SSDGetByte(char SSDch,uint8_t SSDarrIndex)
{
	uint8_t c = SSDch - 32;
     fb4:	80 52       	subi	r24, 0x20	; 32
	return (pgm_read_byte(&ssd1306xled_font6x8[c * 6 + SSDarrIndex]));
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	fc 01       	movw	r30, r24
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	8e 0f       	add	r24, r30
     fc0:	9f 1f       	adc	r25, r31
     fc2:	fc 01       	movw	r30, r24
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	e6 0f       	add	r30, r22
     fca:	f1 1d       	adc	r31, r1
     fcc:	ec 57       	subi	r30, 0x7C	; 124
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	84 91       	lpm	r24, Z
}
     fd2:	08 95       	ret

00000fd4 <SwitchNvmOff>:
	NVMState=0;
}

static void SwitchNvmOff()
{
	EECR &= ~(1<<EERIE);
     fd4:	fb 98       	cbi	0x1f, 3	; 31
	NVMState=2;
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	80 93 1e 02 	sts	0x021E, r24
     fdc:	08 95       	ret

00000fde <__vector_22>:
uint8_t *message;
//EEPROM writing ISR
volatile uint8_t WriteSize;
static void SwitchNvmOff();
ISR(EE_READY_vect)
{
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
	/*check if not end of string and address
	didn't reach end of EEPROM*/
	
	if(WriteorRead==0)
    1000:	80 91 1d 05 	lds	r24, 0x051D
    1004:	81 11       	cpse	r24, r1
    1006:	27 c0       	rjmp	.+78     	; 0x1056 <__vector_22+0x78>
	{
		//uart_num(eepromaddress);
		//uart_string("\n");
	if (WriteSize!=0)
    1008:	80 91 20 05 	lds	r24, 0x0520
    100c:	88 23       	and	r24, r24
    100e:	01 f1       	breq	.+64     	; 0x1050 <__vector_22+0x72>
	{
		//loads address and increments for next load
		NVMState=1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
    1016:	80 91 1b 05 	lds	r24, 0x051B
    101a:	90 91 1c 05 	lds	r25, 0x051C
    101e:	92 bd       	out	0x22, r25	; 34
    1020:	81 bd       	out	0x21, r24	; 33
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	90 93 1c 05 	sts	0x051C, r25
    1028:	80 93 1b 05 	sts	0x051B, r24
		//loads current byte and increments index for next load
		WriteSize--;
    102c:	80 91 20 05 	lds	r24, 0x0520
    1030:	81 50       	subi	r24, 0x01	; 1
    1032:	80 93 20 05 	sts	0x0520, r24
		EEDR=message[WriteSize];
    1036:	80 91 20 05 	lds	r24, 0x0520
    103a:	e0 91 19 05 	lds	r30, 0x0519
    103e:	f0 91 1a 05 	lds	r31, 0x051A
    1042:	e8 0f       	add	r30, r24
    1044:	f1 1d       	adc	r31, r1
    1046:	80 81       	ld	r24, Z
    1048:	80 bd       	out	0x20, r24	; 32
		//uart_num(message[WriteSize]);
		//master write enable
		EECR|=(1<<EEMPE);
    104a:	fa 9a       	sbi	0x1f, 2	; 31
		//strobe eeprom write
		EECR|=(1<<EEPE);
    104c:	f9 9a       	sbi	0x1f, 1	; 31
    104e:	44 c0       	rjmp	.+136    	; 0x10d8 <__vector_22+0xfa>
	}
	else
	{
		//disable eeprom ready interrupt
		//uart_string("switch off");
		SwitchNvmOff();
    1050:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SwitchNvmOff>
    1054:	41 c0       	rjmp	.+130    	; 0x10d8 <__vector_22+0xfa>
    }
	}
	else
	{
	
	if(eepromaddress<=(eepromaddressCopy))
    1056:	20 91 1b 05 	lds	r18, 0x051B
    105a:	30 91 1c 05 	lds	r19, 0x051C
    105e:	80 91 1e 05 	lds	r24, 0x051E
    1062:	90 91 1f 05 	lds	r25, 0x051F
    1066:	82 17       	cp	r24, r18
    1068:	93 07       	cpc	r25, r19
    106a:	50 f1       	brcs	.+84     	; 0x10c0 <__vector_22+0xe2>
	{
		NVMState=1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
    1072:	80 91 1b 05 	lds	r24, 0x051B
    1076:	90 91 1c 05 	lds	r25, 0x051C
    107a:	92 bd       	out	0x22, r25	; 34
    107c:	81 bd       	out	0x21, r24	; 33
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	90 93 1c 05 	sts	0x051C, r25
    1084:	80 93 1b 05 	sts	0x051B, r24
		EECR|=(1<<EERE);
    1088:	f8 9a       	sbi	0x1f, 0	; 31
		message[IndexNvmCount]=EEDR;
    108a:	90 91 18 05 	lds	r25, 0x0518
    108e:	80 b5       	in	r24, 0x20	; 32
    1090:	e0 91 19 05 	lds	r30, 0x0519
    1094:	f0 91 1a 05 	lds	r31, 0x051A
    1098:	e9 0f       	add	r30, r25
    109a:	f1 1d       	adc	r31, r1
    109c:	80 83       	st	Z, r24
		uart_num(message[IndexNvmCount]);
    109e:	80 91 18 05 	lds	r24, 0x0518
    10a2:	e0 91 19 05 	lds	r30, 0x0519
    10a6:	f0 91 1a 05 	lds	r31, 0x051A
    10aa:	e8 0f       	add	r30, r24
    10ac:	f1 1d       	adc	r31, r1
    10ae:	80 81       	ld	r24, Z
    10b0:	0e 94 87 0b 	call	0x170e	; 0x170e <uart_num>
		IndexNvmCount--;
    10b4:	80 91 18 05 	lds	r24, 0x0518
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	80 93 18 05 	sts	0x0518, r24
    10be:	0c c0       	rjmp	.+24     	; 0x10d8 <__vector_22+0xfa>
	}
		else
		{
			//disable eeprom ready interrupt
			uart_string("switch read");
    10c0:	8e ef       	ldi	r24, 0xFE	; 254
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <uart_string>
			SwitchNvmOff();
    10c8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SwitchNvmOff>
			IndexNvmCount=0;
    10cc:	10 92 18 05 	sts	0x0518, r1
			eepromaddressCopy=0;
    10d0:	10 92 1f 05 	sts	0x051F, r1
    10d4:	10 92 1e 05 	sts	0x051E, r1
			
		}
	}
}
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <PinOutConfig>:
//static Port PORTB_OUT;

void PinOutConfig(uint8_t State,Pin Pin_s,Ports Port_s)
{
   volatile uint8_t *Reg;
   Reg=portModeRegister(Port_s);
    10fa:	e4 2f       	mov	r30, r20
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 54       	subi	r30, 0x4E	; 78
    1104:	fd 4f       	sbci	r31, 0xFD	; 253
    1106:	25 91       	lpm	r18, Z+
    1108:	34 91       	lpm	r19, Z
    110a:	e2 2f       	mov	r30, r18
    110c:	f3 2f       	mov	r31, r19
  if(State==1)
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	69 f4       	brne	.+26     	; 0x112c <PinOutConfig+0x32>
  {
	  
	  *Reg|=1<<Pin_s;
    1112:	20 81       	ld	r18, Z
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	ac 01       	movw	r20, r24
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <PinOutConfig+0x26>
    111c:	44 0f       	add	r20, r20
    111e:	55 1f       	adc	r21, r21
    1120:	6a 95       	dec	r22
    1122:	e2 f7       	brpl	.-8      	; 0x111c <PinOutConfig+0x22>
    1124:	ba 01       	movw	r22, r20
    1126:	62 2b       	or	r22, r18
    1128:	60 83       	st	Z, r22
    112a:	08 95       	ret
  }
  else 
  {
	  *Reg&=~(1<<Pin_s);
    112c:	20 81       	ld	r18, Z
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	ac 01       	movw	r20, r24
    1134:	02 c0       	rjmp	.+4      	; 0x113a <PinOutConfig+0x40>
    1136:	44 0f       	add	r20, r20
    1138:	55 1f       	adc	r21, r21
    113a:	6a 95       	dec	r22
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <PinOutConfig+0x3c>
    113e:	ba 01       	movw	r22, r20
    1140:	60 95       	com	r22
    1142:	62 23       	and	r22, r18
    1144:	60 83       	st	Z, r22
    1146:	08 95       	ret

00001148 <PinOutput>:
  } 
}
void PinOutput(uint8_t Out,Pin Pin_s,Ports Port_s )
{
    volatile uint8_t *out;
	out=portOutRegister(Port_s);
    1148:	e4 2f       	mov	r30, r20
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	e8 54       	subi	r30, 0x48	; 72
    1152:	fd 4f       	sbci	r31, 0xFD	; 253
    1154:	25 91       	lpm	r18, Z+
    1156:	34 91       	lpm	r19, Z
    1158:	e2 2f       	mov	r30, r18
    115a:	f3 2f       	mov	r31, r19
	    if(Out==ON)
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	69 f4       	brne	.+26     	; 0x117a <PinOutput+0x32>
		{
			*out=*out|(1<<Pin_s);
    1160:	20 81       	ld	r18, Z
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	ac 01       	movw	r20, r24
    1168:	02 c0       	rjmp	.+4      	; 0x116e <PinOutput+0x26>
    116a:	44 0f       	add	r20, r20
    116c:	55 1f       	adc	r21, r21
    116e:	6a 95       	dec	r22
    1170:	e2 f7       	brpl	.-8      	; 0x116a <PinOutput+0x22>
    1172:	ba 01       	movw	r22, r20
    1174:	62 2b       	or	r22, r18
    1176:	60 83       	st	Z, r22
    1178:	08 95       	ret
		}
		else
		{
			*out&=~(1<<Pin_s);
    117a:	20 81       	ld	r18, Z
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	ac 01       	movw	r20, r24
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <PinOutput+0x40>
    1184:	44 0f       	add	r20, r20
    1186:	55 1f       	adc	r21, r21
    1188:	6a 95       	dec	r22
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <PinOutput+0x3c>
    118c:	ba 01       	movw	r22, r20
    118e:	60 95       	com	r22
    1190:	62 23       	and	r22, r18
    1192:	60 83       	st	Z, r22
    1194:	08 95       	ret

00001196 <PinValue>:


void PinValue(uint8_t *Value,Pin Pin_s,Ports Port_s)
{
	    volatile uint8_t *out;
	    out=portInputRegister(Port_s);
    1196:	e4 2f       	mov	r30, r20
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	e4 55       	subi	r30, 0x54	; 84
    11a0:	fd 4f       	sbci	r31, 0xFD	; 253
    11a2:	25 91       	lpm	r18, Z+
    11a4:	34 91       	lpm	r19, Z
    11a6:	e2 2f       	mov	r30, r18
    11a8:	f3 2f       	mov	r31, r19
		
		//*Value=bit_is_clear(*out,Pin_s);
		*Value=bit_is_set(*out,Pin_s);
    11aa:	40 81       	ld	r20, Z
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	f9 01       	movw	r30, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <PinValue+0x22>
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	6a 95       	dec	r22
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <PinValue+0x1e>
    11bc:	bf 01       	movw	r22, r30
    11be:	64 23       	and	r22, r20
    11c0:	fc 01       	movw	r30, r24
    11c2:	60 83       	st	Z, r22
    11c4:	08 95       	ret

000011c6 <spi_init_master>:
uint8_t ClockSpeed1[Endoflist]={0,1,2,3,0,1,2,3};
	
void spi_init_master (void)
{
	// Set MOSI, SCK as Output
	DDRB = DDRB|(1<<5)|(1<<3)|(1<<2);
    11c6:	84 b1       	in	r24, 0x04	; 4
    11c8:	8c 62       	ori	r24, 0x2C	; 44
    11ca:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master
	//Prescaler: Fosc/16, Enable Interrupts
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    11cc:	81 e5       	ldi	r24, 0x51	; 81
    11ce:	8c bd       	out	0x2c, r24	; 44
    11d0:	08 95       	ret

000011d2 <spi_dataorder>:
}

void spi_dataorder(uint8_t data )
{
	
	SPCR |=(data<<DORD);//1 lsb first
    11d2:	2c b5       	in	r18, 0x2c	; 44
    11d4:	30 e2       	ldi	r19, 0x20	; 32
    11d6:	83 9f       	mul	r24, r19
    11d8:	c0 01       	movw	r24, r0
    11da:	11 24       	eor	r1, r1
    11dc:	82 2b       	or	r24, r18
    11de:	8c bd       	out	0x2c, r24	; 44
    11e0:	08 95       	ret

000011e2 <spi_clockspeed>:
}

void spi_clockspeed(SPI_CLK_Divider clock)
{
	
	if(clock==2||clock==8||clock==32||clock==64)
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <spi_clockspeed+0x10>
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <spi_clockspeed+0x10>
    11ea:	80 32       	cpi	r24, 0x20	; 32
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <spi_clockspeed+0x10>
    11ee:	80 34       	cpi	r24, 0x40	; 64
    11f0:	a1 f4       	brne	.+40     	; 0x121a <spi_clockspeed+0x38>
	{
		
		SPCR =SPCR|1<<ClockSpeed1[clock];//ClockSpeed1[clock];//1 for fosc/4,rest till 4
    11f2:	4c b5       	in	r20, 0x2c	; 44
    11f4:	e8 2f       	mov	r30, r24
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	e1 5e       	subi	r30, 0xE1	; 225
    11fa:	fd 4f       	sbci	r31, 0xFD	; 253
    11fc:	21 e0       	ldi	r18, 0x01	; 1
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	c9 01       	movw	r24, r18
    1202:	00 80       	ld	r0, Z
    1204:	02 c0       	rjmp	.+4      	; 0x120a <spi_clockspeed+0x28>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <spi_clockspeed+0x24>
    120e:	84 2b       	or	r24, r20
    1210:	8c bd       	out	0x2c, r24	; 44
		SPSR=SPSR|0x01;
    1212:	8d b5       	in	r24, 0x2d	; 45
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	8d bd       	out	0x2d, r24	; 45
    1218:	08 95       	ret
	}
	else if(clock==4||clock==16||clock==64||clock==128)
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	21 f0       	breq	.+8      	; 0x1226 <spi_clockspeed+0x44>
    121e:	80 31       	cpi	r24, 0x10	; 16
    1220:	11 f0       	breq	.+4      	; 0x1226 <spi_clockspeed+0x44>
    1222:	80 38       	cpi	r24, 0x80	; 128
    1224:	19 f4       	brne	.+6      	; 0x122c <spi_clockspeed+0x4a>
	{
		
		SPCR =SPCR|clock;	
    1226:	ec b5       	in	r30, 0x2c	; 44
    1228:	8e 2b       	or	r24, r30
    122a:	8c bd       	out	0x2c, r24	; 44
    122c:	08 95       	ret

0000122e <spi_clockphase>:

void spi_clockphase(uint8_t data)
{
	
	
	SPCR|=1<<CPOL;//1 to 4
    122e:	8c b5       	in	r24, 0x2c	; 44
    1230:	88 60       	ori	r24, 0x08	; 8
    1232:	8c bd       	out	0x2c, r24	; 44
    1234:	08 95       	ret

00001236 <spi_tranceiver>:
	
}
unsigned char spi_tranceiver (unsigned char data)
{
	// Load data into the buffer
	SPDR = data;
    1236:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
    1238:	0d b4       	in	r0, 0x2d	; 45
    123a:	07 fe       	sbrs	r0, 7
    123c:	fd cf       	rjmp	.-6      	; 0x1238 <spi_tranceiver+0x2>
	
	// Return received data
	return(SPDR);
    123e:	8e b5       	in	r24, 0x2e	; 46
    1240:	08 95       	ret

00001242 <ssd1306_AsyncStart>:
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
	switch (ssdStartState)
    1242:	90 91 f4 03 	lds	r25, 0x03F4
    1246:	91 30       	cpi	r25, 0x01	; 1
    1248:	81 f0       	breq	.+32     	; 0x126a <ssd1306_AsyncStart+0x28>
    124a:	28 f0       	brcs	.+10     	; 0x1256 <ssd1306_AsyncStart+0x14>
    124c:	92 30       	cpi	r25, 0x02	; 2
    124e:	d1 f0       	breq	.+52     	; 0x1284 <ssd1306_AsyncStart+0x42>
    1250:	93 30       	cpi	r25, 0x03	; 3
    1252:	89 f5       	brne	.+98     	; 0x12b6 <ssd1306_AsyncStart+0x74>
    1254:	21 c0       	rjmp	.+66     	; 0x1298 <ssd1306_AsyncStart+0x56>
	{
		case 0:
		// reset TWI control register
		TWCR = 0;
    1256:	ec eb       	ldi	r30, 0xBC	; 188
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1
		// transmit START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    125c:	84 ea       	ldi	r24, 0xA4	; 164
    125e:	80 83       	st	Z, r24
		ssdStartState=1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 f4 03 	sts	0x03F4, r24
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    1266:	82 e0       	ldi	r24, 0x02	; 2
		// reset TWI control register
		TWCR = 0;
		// transmit START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
		ssdStartState=1;
		break;
    1268:	08 95       	ret
		case 1:
		if(EOTi2c()==1)
    126a:	0e 94 a0 06 	call	0xd40	; 0xd40 <EOTi2c>
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	21 f5       	brne	.+72     	; 0x12ba <ssd1306_AsyncStart+0x78>
		{
			
			if((TWSR & 0xF8) == TW_START)
    1272:	80 91 b9 00 	lds	r24, 0x00B9
    1276:	88 7f       	andi	r24, 0xF8	; 248
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	09 f5       	brne	.+66     	; 0x12be <ssd1306_AsyncStart+0x7c>
			{
				ssdStartState=2;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	80 93 f4 03 	sts	0x03F4, r24
    1282:	08 95       	ret
			}
		}
		break;
		case 2:
		// load slave address into data register
		TWDR = address;
    1284:	80 93 bb 00 	sts	0x00BB, r24
		// start transmission of address
		TWCR = (1<<TWINT) | (1<<TWEN);
    1288:	84 e8       	ldi	r24, 0x84	; 132
    128a:	80 93 bc 00 	sts	0x00BC, r24
		ssdStartState=3;
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	80 93 f4 03 	sts	0x03F4, r24
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    1294:	82 e0       	ldi	r24, 0x02	; 2
		// load slave address into data register
		TWDR = address;
		// start transmission of address
		TWCR = (1<<TWINT) | (1<<TWEN);
		ssdStartState=3;
		break;
    1296:	08 95       	ret
		case 3:
		if(EOTi2c())
    1298:	0e 94 a0 06 	call	0xd40	; 0xd40 <EOTi2c>
    129c:	88 23       	and	r24, r24
    129e:	89 f0       	breq	.+34     	; 0x12c2 <ssd1306_AsyncStart+0x80>
		{
			uint8_t twst = TW_STATUS & 0xF8;
    12a0:	80 91 b9 00 	lds	r24, 0x00B9
    12a4:	88 7f       	andi	r24, 0xF8	; 248
			if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
    12a6:	88 31       	cpi	r24, 0x18	; 24
    12a8:	11 f0       	breq	.+4      	; 0x12ae <ssd1306_AsyncStart+0x6c>
    12aa:	80 34       	cpi	r24, 0x40	; 64
    12ac:	61 f4       	brne	.+24     	; 0x12c6 <ssd1306_AsyncStart+0x84>
			{
				RetVal=0;//failed
			}
			else
			{
				ssdStartState=0;
    12ae:	10 92 f4 03 	sts	0x03F4, r1
				RetVal=1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	08 95       	ret
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	08 95       	ret
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	08 95       	ret
				ssdStartState=2;
				
			}
			else
			{
				RetVal=0; //failed
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	08 95       	ret
		if(EOTi2c())
		{
			uint8_t twst = TW_STATUS & 0xF8;
			if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
			{
				RetVal=0;//failed
    12c6:	80 e0       	ldi	r24, 0x00	; 0
		/* Your code here */
		break;
	}
	
	return RetVal;
}
    12c8:	08 95       	ret

000012ca <ssd1306_AsyncWrite>:
static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
	
	switch (SSDwriteState)
    12ca:	90 91 f5 03 	lds	r25, 0x03F5
    12ce:	99 23       	and	r25, r25
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <ssd1306_AsyncWrite+0xe>
    12d2:	91 30       	cpi	r25, 0x01	; 1
    12d4:	e1 f4       	brne	.+56     	; 0x130e <ssd1306_AsyncWrite+0x44>
    12d6:	0a c0       	rjmp	.+20     	; 0x12ec <ssd1306_AsyncWrite+0x22>
	{
			case 0:
			// load slave address into data register
			TWDR = SSDbyte;
    12d8:	80 93 bb 00 	sts	0x00BB, r24
			// start transmission of address
			TWCR = (1<<TWINT) | (1<<TWEN);
    12dc:	84 e8       	ldi	r24, 0x84	; 132
    12de:	80 93 bc 00 	sts	0x00BC, r24
			SSDwriteState=1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 f5 03 	sts	0x03F5, r24
}

static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
    12e8:	82 e0       	ldi	r24, 0x02	; 2
			// load slave address into data register
			TWDR = SSDbyte;
			// start transmission of address
			TWCR = (1<<TWINT) | (1<<TWEN);
			SSDwriteState=1;
			break;
    12ea:	08 95       	ret
			case 1:
			//uart_num(SSDbyte);
			if(EOTi2c())
    12ec:	0e 94 a0 06 	call	0xd40	; 0xd40 <EOTi2c>
    12f0:	88 23       	and	r24, r24
    12f2:	79 f0       	breq	.+30     	; 0x1312 <ssd1306_AsyncWrite+0x48>
			{
				
				//uart_string("value:");
				//uart_num((TWSR & 0xF8));
				//uart_string("\n");
				if((TWSR & 0xF8) == TW_MT_DATA_ACK )
    12f4:	80 91 b9 00 	lds	r24, 0x00B9
    12f8:	88 7f       	andi	r24, 0xF8	; 248
    12fa:	88 32       	cpi	r24, 0x28	; 40
    12fc:	21 f4       	brne	.+8      	; 0x1306 <ssd1306_AsyncWrite+0x3c>
				{
					SSDwriteState=0;
    12fe:	10 92 f5 03 	sts	0x03F5, r1
					RetVal=1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	08 95       	ret
				}
				else
				{
					SSDwriteState=0;
    1306:	10 92 f5 03 	sts	0x03F5, r1
					RetVal=0; //failed
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
}

static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	08 95       	ret
    1312:	82 e0       	ldi	r24, 0x02	; 2
		default:
		/* Your code here */
		break;
	}
	return RetVal;
}
    1314:	08 95       	ret

00001316 <SSDsetXY>:

uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
	switch (SSDsetXYstates)
    1316:	90 91 f2 03 	lds	r25, 0x03F2
    131a:	91 30       	cpi	r25, 0x01	; 1
    131c:	79 f0       	breq	.+30     	; 0x133c <SSDsetXY+0x26>
    131e:	20 f0       	brcs	.+8      	; 0x1328 <SSDsetXY+0x12>
    1320:	92 30       	cpi	r25, 0x02	; 2
    1322:	09 f0       	breq	.+2      	; 0x1326 <SSDsetXY+0x10>
    1324:	45 c0       	rjmp	.+138    	; 0x13b0 <SSDsetXY+0x9a>
    1326:	3e c0       	rjmp	.+124    	; 0x13a4 <SSDsetXY+0x8e>
	{
		case 0:
		//uart_string("4\n");
		if(ssd1306_AsyncStart(0x78)==1)
    1328:	88 e7       	ldi	r24, 0x78	; 120
    132a:	0e 94 21 09 	call	0x1242	; 0x1242 <ssd1306_AsyncStart>
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	09 f0       	breq	.+2      	; 0x1334 <SSDsetXY+0x1e>
    1332:	40 c0       	rjmp	.+128    	; 0x13b4 <SSDsetXY+0x9e>
		{
			SSDsetXYstates=1;
    1334:	80 93 f2 03 	sts	0x03F2, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	08 95       	ret
			SSDsetXYstates=1;
		}
		/* Your code here */
		break;
		case 1:
           switch (SSDsetXYWritestates)
    133c:	90 91 f3 03 	lds	r25, 0x03F3
    1340:	91 30       	cpi	r25, 0x01	; 1
    1342:	79 f0       	breq	.+30     	; 0x1362 <SSDsetXY+0x4c>
    1344:	28 f0       	brcs	.+10     	; 0x1350 <SSDsetXY+0x3a>
    1346:	92 30       	cpi	r25, 0x02	; 2
    1348:	b1 f0       	breq	.+44     	; 0x1376 <SSDsetXY+0x60>
    134a:	93 30       	cpi	r25, 0x03	; 3
    134c:	a9 f5       	brne	.+106    	; 0x13b8 <SSDsetXY+0xa2>
    134e:	1d c0       	rjmp	.+58     	; 0x138a <SSDsetXY+0x74>
           {
	           case 0:
			   if(ssd1306_AsyncWrite(0x00)==1)
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0e 94 65 09 	call	0x12ca	; 0x12ca <ssd1306_AsyncWrite>
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	89 f5       	brne	.+98     	; 0x13bc <SSDsetXY+0xa6>
			   {
				   SSDsetXYWritestates=1;
    135a:	80 93 f3 03 	sts	0x03F3, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	08 95       	ret
				   SSDsetXYWritestates=1;
			   }
	           /* Your code here */
	           break;
	           case 1:
	           if(ssd1306_AsyncWrite(0xb0 + y)==1)
    1362:	86 2f       	mov	r24, r22
    1364:	80 55       	subi	r24, 0x50	; 80
    1366:	0e 94 65 09 	call	0x12ca	; 0x12ca <ssd1306_AsyncWrite>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	49 f5       	brne	.+82     	; 0x13c0 <SSDsetXY+0xaa>
	           {
				   
		           SSDsetXYWritestates=2;
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	80 93 f3 03 	sts	0x03F3, r24
    1374:	08 95       	ret
	           }
	           /* Your code here */
	           break;
	           case 2:
	           if(ssd1306_AsyncWrite((x & 0x0f))==1)
    1376:	8f 70       	andi	r24, 0x0F	; 15
    1378:	0e 94 65 09 	call	0x12ca	; 0x12ca <ssd1306_AsyncWrite>
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	11 f5       	brne	.+68     	; 0x13c4 <SSDsetXY+0xae>
	           {
		           SSDsetXYWritestates=3;
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	80 93 f3 03 	sts	0x03F3, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	08 95       	ret
		           SSDsetXYWritestates=3;
	           }
	           /* Your code here */
	           break;
	           case 3:
	           if(ssd1306_AsyncWrite(((x & 0xf0) >> 4) | 0x10)==1)
    138a:	82 95       	swap	r24
    138c:	8f 70       	andi	r24, 0x0F	; 15
    138e:	80 61       	ori	r24, 0x10	; 16
    1390:	0e 94 65 09 	call	0x12ca	; 0x12ca <ssd1306_AsyncWrite>
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	c1 f4       	brne	.+48     	; 0x13c8 <SSDsetXY+0xb2>
	           {
		           SSDsetXYWritestates=0;
    1398:	10 92 f3 03 	sts	0x03F3, r1
				   SSDsetXYstates=2;
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	80 93 f2 03 	sts	0x03F2, r24
    13a2:	08 95       	ret
	           break;
           }
		/* Your code here */
		break;
		case 2:
		i2c_stop();
    13a4:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
		SSDsetXYstates=0;
    13a8:	10 92 f2 03 	sts	0x03F2, r1
		Reval=1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
		/* Your code here */
		break;
    13ae:	08 95       	ret


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	08 95       	ret
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	08 95       	ret
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	08 95       	ret
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	08 95       	ret
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	08 95       	ret
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	08 95       	ret
    13c8:	82 e0       	ldi	r24, 0x02	; 2
		/* Your code here */
		break;
	}
	
	return Reval;
}
    13ca:	08 95       	ret

000013cc <SSDWritechar_font6x8>:
uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
	   uint8_t fc;
   	switch (SSDWritecharstates)
    13cc:	90 91 f6 03 	lds	r25, 0x03F6
    13d0:	91 30       	cpi	r25, 0x01	; 1
    13d2:	79 f0       	breq	.+30     	; 0x13f2 <SSDWritechar_font6x8+0x26>
    13d4:	28 f0       	brcs	.+10     	; 0x13e0 <SSDWritechar_font6x8+0x14>
    13d6:	92 30       	cpi	r25, 0x02	; 2
    13d8:	d9 f0       	breq	.+54     	; 0x1410 <SSDWritechar_font6x8+0x44>
    13da:	93 30       	cpi	r25, 0x03	; 3
    13dc:	a9 f5       	brne	.+106    	; 0x1448 <SSDWritechar_font6x8+0x7c>
    13de:	2e c0       	rjmp	.+92     	; 0x143c <SSDWritechar_font6x8+0x70>
   	{
	   	case 0:
	   	if(ssd1306_AsyncStart(0x78|0x00)==1)
    13e0:	88 e7       	ldi	r24, 0x78	; 120
    13e2:	0e 94 21 09 	call	0x1242	; 0x1242 <ssd1306_AsyncStart>
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	89 f5       	brne	.+98     	; 0x144c <SSDWritechar_font6x8+0x80>
	   	{
		   	SSDWritecharstates=1;
    13ea:	80 93 f6 03 	sts	0x03F6, r24
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	08 95       	ret
		   	SSDWritecharstates=1;
	   	}
	   	/* Your code here */
	   	break;
	   	case 1:
		fc=ssd1306_AsyncWrite(0x40);
    13f2:	80 e4       	ldi	r24, 0x40	; 64
    13f4:	0e 94 65 09 	call	0x12ca	; 0x12ca <ssd1306_AsyncWrite>
		if(fc==1)
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	21 f4       	brne	.+8      	; 0x1404 <SSDWritechar_font6x8+0x38>
		{
			SSDWritecharstates=2;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	80 93 f6 03 	sts	0x03F6, r24
    1402:	08 95       	ret
		}
		else if(fc==0)
    1404:	81 11       	cpse	r24, r1
    1406:	24 c0       	rjmp	.+72     	; 0x1450 <SSDWritechar_font6x8+0x84>
		{
			SSDWritecharstates=0;
    1408:	10 92 f6 03 	sts	0x03F6, r1
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	08 95       	ret
		{
			SSDWritecharstates=0;
		}
		break;
		case 2:
		if(ssd1306_AsyncWrite(SSDGetByte(ch,Tablepointer))==1)
    1410:	60 91 f7 03 	lds	r22, 0x03F7
    1414:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SSDGetByte>
    1418:	0e 94 65 09 	call	0x12ca	; 0x12ca <ssd1306_AsyncWrite>
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	d1 f4       	brne	.+52     	; 0x1454 <SSDWritechar_font6x8+0x88>
		{
			Tablepointer++;
    1420:	80 91 f7 03 	lds	r24, 0x03F7
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	80 93 f7 03 	sts	0x03F7, r24
			if(Tablepointer==6)
    142a:	86 30       	cpi	r24, 0x06	; 6
    142c:	a9 f4       	brne	.+42     	; 0x1458 <SSDWritechar_font6x8+0x8c>
			{
				SSDWritecharstates=3;
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	80 93 f6 03 	sts	0x03F6, r24
				Tablepointer=0;
    1434:	10 92 f7 03 	sts	0x03F7, r1
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	08 95       	ret
				Tablepointer=0;
			}
		}
		break;
		case 3:
	   	i2c_stop();
    143c:	0e 94 de 06 	call	0xdbc	; 0xdbc <i2c_stop>
	   	SSDWritecharstates=0;
    1440:	10 92 f6 03 	sts	0x03F6, r1
	   	Reval=1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
	   	/* Your code here */
	   	break;
    1446:	08 95       	ret
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	08 95       	ret
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	08 95       	ret
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	08 95       	ret
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	08 95       	ret
    1458:	82 e0       	ldi	r24, 0x02	; 2
	   	break;
   	}
   	
   	return Reval;

}
    145a:	08 95       	ret

0000145c <SSDi2cHandlerFunc>:
	static SSDdata SSDdataObj;
	static uint8_t SSDhandlerstates;
	char buffer[12];
	static uint8_t SSDR=0,SSDC=0;

	switch (SSDhandlerstates)
    145c:	80 91 ee 03 	lds	r24, 0x03EE
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	71 f0       	breq	.+28     	; 0x1480 <SSDi2cHandlerFunc+0x24>
    1464:	18 f0       	brcs	.+6      	; 0x146c <SSDi2cHandlerFunc+0x10>
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	49 f5       	brne	.+82     	; 0x14bc <SSDi2cHandlerFunc+0x60>
    146a:	20 c0       	rjmp	.+64     	; 0x14ac <SSDi2cHandlerFunc+0x50>
	{
		case 0:
		if(ErasePoints[0]==0)
		{
			if(PopSSDinterface(&SSDdataObj)==BuffOk)
    146c:	8f ee       	ldi	r24, 0xEF	; 239
    146e:	93 e0       	ldi	r25, 0x03	; 3
    1470:	0e 94 26 12 	call	0x244c	; 0x244c <PopSSDinterface>
    1474:	81 11       	cpse	r24, r1
    1476:	22 c0       	rjmp	.+68     	; 0x14bc <SSDi2cHandlerFunc+0x60>
			{
			   SSDhandlerstates=1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 ee 03 	sts	0x03EE, r24
    147e:	08 95       	ret

		}
		/* Your code here */
		break;
        case 1:
		if((SSDdataObj.SSDx>0 )||(SSDdataObj.SSDy>0) )
    1480:	80 91 f0 03 	lds	r24, 0x03F0
    1484:	81 11       	cpse	r24, r1
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <SSDi2cHandlerFunc+0x34>
    1488:	90 91 f1 03 	lds	r25, 0x03F1
    148c:	99 23       	and	r25, r25
    148e:	51 f0       	breq	.+20     	; 0x14a4 <SSDi2cHandlerFunc+0x48>
		{
		 if(SSDsetXY(SSDdataObj.SSDx,SSDdataObj.SSDy)==1)
    1490:	60 91 f1 03 	lds	r22, 0x03F1
    1494:	0e 94 8b 09 	call	0x1316	; 0x1316 <SSDsetXY>
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	81 f4       	brne	.+32     	; 0x14bc <SSDi2cHandlerFunc+0x60>
		   {
			  SSDhandlerstates=2; 
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	80 93 ee 03 	sts	0x03EE, r24
    14a2:	08 95       	ret
		   }
		}
		else
		{
		   SSDhandlerstates=2; 	
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	80 93 ee 03 	sts	0x03EE, r24
    14aa:	08 95       	ret
		}
		
		break;
		case 2:
		//ssd1306_String_font6x8_test("nikhil",0,0);
		if(SSDWritechar_font6x8(SSDdataObj.SSDchar)==1)
    14ac:	80 91 ef 03 	lds	r24, 0x03EF
    14b0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <SSDWritechar_font6x8>
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	11 f4       	brne	.+4      	; 0x14bc <SSDi2cHandlerFunc+0x60>
		{
			SSDhandlerstates=0;
    14b8:	10 92 ee 03 	sts	0x03EE, r1
		default:
		/* Your code here */
		break;
	}
	
}
    14bc:	08 95       	ret

000014be <testfuc>:

}


uint8_t testfuc(void * data)
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	69 97       	sbiw	r28, 0x19	; 25
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
   char buffer[25];
   uint16_t address=0;
   
   if(ssdpos<24)
    14d2:	20 91 f8 03 	lds	r18, 0x03F8
    14d6:	28 31       	cpi	r18, 0x18	; 24
    14d8:	48 f5       	brcc	.+82     	; 0x152c <testfuc+0x6e>
   {

	//strcpy_P(buffer,(PGM_P)pgm_read_word(Frame1+ssdpos));  
	 //&Frame1[ssdpos];//pgm_read_word(&Frames[1]);
	 address=(pgm_read_word(&Frames[FramePos])+(ssdpos*2));
    14da:	e0 91 f9 03 	lds	r30, 0x03F9
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	e2 54       	subi	r30, 0x42	; 66
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	85 91       	lpm	r24, Z+
    14ea:	94 91       	lpm	r25, Z
    14ec:	e2 2f       	mov	r30, r18
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	e8 0f       	add	r30, r24
    14f6:	f9 1f       	adc	r31, r25
	 strcpy_P(buffer,(PGM_P)pgm_read_word(address));
    14f8:	85 91       	lpm	r24, Z+
    14fa:	94 91       	lpm	r25, Z
    14fc:	68 2f       	mov	r22, r24
    14fe:	79 2f       	mov	r23, r25
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcpy_P>
	 PopulateSSDbuffer(buffer,ssdposy,ssdposx);
    1508:	40 91 fa 03 	lds	r20, 0x03FA
    150c:	60 91 27 02 	lds	r22, 0x0227
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	0e 94 03 12 	call	0x2406	; 0x2406 <PopulateSSDbuffer>
	 
	 ssdposx++;
    1518:	80 91 fa 03 	lds	r24, 0x03FA
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 93 fa 03 	sts	0x03FA, r24
	 ssdpos++;
    1522:	80 91 f8 03 	lds	r24, 0x03F8
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	80 93 f8 03 	sts	0x03F8, r24
   }

  if(ssdpos==8||ssdpos==16)
    152c:	80 91 f8 03 	lds	r24, 0x03F8
    1530:	88 30       	cpi	r24, 0x08	; 8
    1532:	11 f0       	breq	.+4      	; 0x1538 <testfuc+0x7a>
    1534:	80 31       	cpi	r24, 0x10	; 16
    1536:	39 f4       	brne	.+14     	; 0x1546 <testfuc+0x88>
  {
	  ssdposy=ssdposy+60;
    1538:	80 91 27 02 	lds	r24, 0x0227
    153c:	84 5c       	subi	r24, 0xC4	; 196
    153e:	80 93 27 02 	sts	0x0227, r24
	  ssdposx=0;
    1542:	10 92 fa 03 	sts	0x03FA, r1
	 // ssdpos=0;
  }
  Unknown++;
    1546:	80 91 fb 03 	lds	r24, 0x03FB
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	80 93 fb 03 	sts	0x03FB, r24
	return 0;
}
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	69 96       	adiw	r28, 0x19	; 25
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <SSDSetFramePos>:

uint8_t SSDSetFramePos(uint8_t Pos)
{
	FramePos=Pos;
    1564:	80 93 f9 03 	sts	0x03F9, r24
	ssdpos=0;
    1568:	10 92 f8 03 	sts	0x03F8, r1
    ssdposy=1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 27 02 	sts	0x0227, r24
    ssdposx=0;
    1572:	10 92 fa 03 	sts	0x03FA, r1
	return 0;
}
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	08 95       	ret

0000157a <Timer2Enable>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "UART.h"
void Timer2Enable()
{
	overflowfag=0;
    157a:	10 92 17 05 	sts	0x0517, r1
	TimeReady=0;
    157e:	10 92 14 05 	sts	0x0514, r1
	TCCR2B|=1<<CS21|1<<CS22;
    1582:	e1 eb       	ldi	r30, 0xB1	; 177
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	86 60       	ori	r24, 0x06	; 6
    158a:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);
    158c:	e0 e7       	ldi	r30, 0x70	; 112
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	80 83       	st	Z, r24
	TCNT2 = 0;
    1596:	10 92 b2 00 	sts	0x00B2, r1
	TimerValue=0;
    159a:	10 92 16 05 	sts	0x0516, r1
    159e:	10 92 15 05 	sts	0x0515, r1
    15a2:	08 95       	ret

000015a4 <Timer2Disable>:
	TCNT2=0;
	return TCNT2;
}
void Timer2Disable()
{
	TCCR2B=0;
    15a4:	10 92 b1 00 	sts	0x00B1, r1
	TimeReady=1;	
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 14 05 	sts	0x0514, r24
    15ae:	08 95       	ret

000015b0 <Timer2Count>:
	//TCNT1L = 0;
	//TCNT1H=0;
}

uint8_t Timer2Count()
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    TimerValue=TCNT2;//((TCNT1L)*16)/58;//;	
    15b4:	c2 eb       	ldi	r28, 0xB2	; 178
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
    15b8:	88 81       	ld	r24, Y
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	90 93 16 05 	sts	0x0516, r25
    15c0:	80 93 15 05 	sts	0x0515, r24
	Timer2Disable();
    15c4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <Timer2Disable>
	TCNT2=0;
    15c8:	18 82       	st	Y, r1
	return TCNT2;
    15ca:	88 81       	ld	r24, Y
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <__vector_9>:
{
	TCCR2B=0;
	TimeReady=1;	
}
ISR(TIMER2_OVF_vect)
{
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	8f 93       	push	r24
	overflowfag=overflowfag+1;
    15de:	80 91 17 05 	lds	r24, 0x0517
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 17 05 	sts	0x0517, r24
	//uart_num(overflowfag);
	//TIMSK2|=(1<<TOIE2);
	//TimerValue+=255;
    15e8:	8f 91       	pop	r24
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <ConfigureCallBack>:
	UDR0=dat;
}

void ConfigureCallBack(uint16_t  (*callbackarg)(void))
{
	callbackFunction= callbackarg;
    15f4:	90 93 07 05 	sts	0x0507, r25
    15f8:	80 93 06 05 	sts	0x0506, r24
    15fc:	08 95       	ret

000015fe <Callhandler>:
}

//updated code
 uint16_t Callhandler(void *fptr)
{
	PushEventInterface(200,DebugHandlerFunc,PopInterface,0);
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	48 e0       	ldi	r20, 0x08	; 8
    1602:	5b e0       	ldi	r21, 0x0B	; 11
    1604:	64 ef       	ldi	r22, 0xF4	; 244
    1606:	7e e0       	ldi	r23, 0x0E	; 14
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    160e:	08 95       	ret

00001610 <PopInterface>:
	}
	
}

uint8_t PopInterface(unsigned char *dataval)
{
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	1f 92       	push	r1
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	8c 01       	movw	r16, r24
	unsigned char data;
	
	if(PopFromCircularBuffer(&CircularBuffer,&data)==BuffOk)
    1620:	be 01       	movw	r22, r28
    1622:	6f 5f       	subi	r22, 0xFF	; 255
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	88 e2       	ldi	r24, 0x28	; 40
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	0e 94 b3 05 	call	0xb66	; 0xb66 <PopFromCircularBuffer>
    162e:	81 11       	cpse	r24, r1
    1630:	05 c0       	rjmp	.+10     	; 0x163c <PopInterface+0x2c>
	{
		*dataval=data;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	f8 01       	movw	r30, r16
    1636:	80 83       	st	Z, r24
		return 0;
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	01 c0       	rjmp	.+2      	; 0x163e <PopInterface+0x2e>
	}
	return 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
}
    163e:	0f 90       	pop	r0
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	08 95       	ret

0000164a <uart_init>:
	y                      \
};                          \


void uart_init()
{   Data_Count=0;
    164a:	10 92 08 05 	sts	0x0508, r1
	UBRR0L=0x0C;//0x0C;//--> FOR BAUD esp;0x9b-->for 9800
	Data_Count=0;	
	//UCSRB|=(1<7);
	//uart_delay(100);*/
		//UCSR0A=0x02;//for esp baud 0x02
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);//UCSR0B=0x98;
    164e:	88 e9       	ldi	r24, 0x98	; 152
    1650:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);//UCSR0C=0x86;
    1654:	8e e0       	ldi	r24, 0x0E	; 14
    1656:	80 93 c2 00 	sts	0x00C2, r24
		UBRR0H=0x00;
    165a:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L=0x08;//--> FOR BAUD esp;0x9b-->for 9800//0x69
    165e:	88 e0       	ldi	r24, 0x08	; 8
    1660:	80 93 c4 00 	sts	0x00C4, r24
		//UDR0='B';
		//Data_Count=0;
		callbackFunction=0;
    1664:	10 92 07 05 	sts	0x0507, r1
    1668:	10 92 06 05 	sts	0x0506, r1
		callbackSetFunction(0,ConfigureCallBack);
    166c:	6a ef       	ldi	r22, 0xFA	; 250
    166e:	7a e0       	ldi	r23, 0x0A	; 10
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 fe 13 	call	0x27fc	; 0x27fc <callbackSetFunction>
    1676:	08 95       	ret

00001678 <uart_delay>:
}

void uart_delay(unsigned int delaytime)
{
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
	...
    1698:	2f 5f       	subi	r18, 0xFF	; 255
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	82 17       	cp	r24, r18
    169e:	93 07       	cpc	r25, r19
    16a0:	68 f7       	brcc	.-38     	; 0x167c <uart_delay+0x4>
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
	}
	
}
    16a2:	08 95       	ret

000016a4 <uart_string>:
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
{
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29

	while ( *ustring)
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 81       	ld	r18, Z
    16b4:	22 23       	and	r18, r18
    16b6:	c1 f0       	breq	.+48     	; 0x16e8 <uart_string+0x44>
		//UDR=*ustring++;
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
    16b8:	8c 01       	movw	r16, r24
    16ba:	0f 5f       	subi	r16, 0xFF	; 255
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
{

	while ( *ustring)
	{
		UDR0=*ustring++;
    16be:	0f 2e       	mov	r0, r31
    16c0:	f6 ec       	ldi	r31, 0xC6	; 198
    16c2:	ef 2e       	mov	r14, r31
    16c4:	f1 2c       	mov	r15, r1
    16c6:	f0 2d       	mov	r31, r0
		while((UCSR0A&0x40)==0x00);
    16c8:	c0 ec       	ldi	r28, 0xC0	; 192
    16ca:	d0 e0       	ldi	r29, 0x00	; 0
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
	{
		UDR0=*ustring++;
    16cc:	f7 01       	movw	r30, r14
    16ce:	20 83       	st	Z, r18
		while((UCSR0A&0x40)==0x00);
    16d0:	88 81       	ld	r24, Y
    16d2:	86 ff       	sbrs	r24, 6
    16d4:	fd cf       	rjmp	.-6      	; 0x16d0 <uart_string+0x2c>
		uart_delay(1000);
    16d6:	88 ee       	ldi	r24, 0xE8	; 232
    16d8:	93 e0       	ldi	r25, 0x03	; 3
    16da:	0e 94 3c 0b 	call	0x1678	; 0x1678 <uart_delay>
	}	
}
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
    16de:	f8 01       	movw	r30, r16
    16e0:	21 91       	ld	r18, Z+
    16e2:	8f 01       	movw	r16, r30
    16e4:	21 11       	cpse	r18, r1
    16e6:	f2 cf       	rjmp	.-28     	; 0x16cc <uart_string+0x28>
	{
		UDR0=*ustring++;
		while((UCSR0A&0x40)==0x00);
		uart_delay(1000);
	}
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <uart_char>:
		callbackSetFunction(0,ConfigureCallBack);
}

void uart_char(unsigned char uchar)
{
	UDR0=uchar;
    16f6:	80 93 c6 00 	sts	0x00C6, r24
	while((UCSR0A&0x40)==0x00);
    16fa:	e0 ec       	ldi	r30, 0xC0	; 192
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	86 ff       	sbrs	r24, 6
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <uart_char+0x8>
	uart_delay(1000);
    1704:	88 ee       	ldi	r24, 0xE8	; 232
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 3c 0b 	call	0x1678	; 0x1678 <uart_delay>
    170c:	08 95       	ret

0000170e <uart_num>:
		uart_delay(1000);
	}
}

void uart_num(unsigned char num)
{
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	c8 2f       	mov	r28, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
    1718:	19 e2       	ldi	r17, 0x29	; 41
    171a:	81 9f       	mul	r24, r17
    171c:	11 2d       	mov	r17, r1
    171e:	11 24       	eor	r1, r1
    1720:	12 95       	swap	r17
    1722:	1f 70       	andi	r17, 0x0F	; 15
	T=(num - (H*100))/10;
    1724:	0c e9       	ldi	r16, 0x9C	; 156
    1726:	01 03       	mulsu	r16, r17
    1728:	90 01       	movw	r18, r0
    172a:	11 24       	eor	r1, r1
    172c:	c9 01       	movw	r24, r18
    172e:	8c 0f       	add	r24, r28
    1730:	91 1d       	adc	r25, r1
    1732:	6a e0       	ldi	r22, 0x0A	; 10
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	0e 94 3f 1b 	call	0x367e	; 0x367e <__divmodhi4>
    173a:	d6 2f       	mov	r29, r22
	O=(num - (H*100) - (T*10));

	uart_char(H+48);
    173c:	81 2f       	mov	r24, r17
    173e:	80 5d       	subi	r24, 0xD0	; 208
    1740:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <uart_char>
	uart_char(T+48);
    1744:	8d 2f       	mov	r24, r29
    1746:	80 5d       	subi	r24, 0xD0	; 208
    1748:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <uart_char>
void uart_num(unsigned char num)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
    174c:	c0 5d       	subi	r28, 0xD0	; 208
    174e:	8c 2f       	mov	r24, r28
    1750:	10 9f       	mul	r17, r16
    1752:	80 0d       	add	r24, r0
    1754:	11 24       	eor	r1, r1
    1756:	dd 0f       	add	r29, r29
    1758:	9d 2f       	mov	r25, r29
    175a:	99 0f       	add	r25, r25
    175c:	99 0f       	add	r25, r25
    175e:	d9 0f       	add	r29, r25

	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);
    1760:	8d 1b       	sub	r24, r29
    1762:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <uart_char>
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <__vector_18>:
	}
	
}
circularbuff(CircularBuffer,100);
ISR(USART_RX_vect)
{
    1770:	1f 92       	push	r1
    1772:	0f 92       	push	r0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	0f 92       	push	r0
    1778:	11 24       	eor	r1, r1
    177a:	2f 93       	push	r18
    177c:	3f 93       	push	r19
    177e:	4f 93       	push	r20
    1780:	5f 93       	push	r21
    1782:	6f 93       	push	r22
    1784:	7f 93       	push	r23
    1786:	8f 93       	push	r24
    1788:	9f 93       	push	r25
    178a:	af 93       	push	r26
    178c:	bf 93       	push	r27
    178e:	ef 93       	push	r30
    1790:	ff 93       	push	r31
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	1f 92       	push	r1
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    
    static uint8_t flag=0;
	static UartBuffer BufferData;
	r=UDR0;
    179c:	80 91 c6 00 	lds	r24, 0x00C6
    17a0:	80 93 04 05 	sts	0x0504, r24
	uint8_t i;
	char data;
	//cli();
	PushIntoCircularBuffer(&CircularBuffer,r);
    17a4:	60 91 04 05 	lds	r22, 0x0504
    17a8:	88 e2       	ldi	r24, 0x28	; 40
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 9e 05 	call	0xb3c	; 0xb3c <PushIntoCircularBuffer>
	//sei();
	if(r=='d')
    17b0:	80 91 04 05 	lds	r24, 0x0504
    17b4:	84 36       	cpi	r24, 0x64	; 100
    17b6:	11 f4       	brne	.+4      	; 0x17bc <__vector_18+0x4c>
	{
		Data_Count=0;
    17b8:	10 92 08 05 	sts	0x0508, r1
		
	}
	data_in[Data_Count]=r;
    17bc:	e0 91 08 05 	lds	r30, 0x0508
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 91 04 05 	lds	r24, 0x0504
    17c6:	e1 50       	subi	r30, 0x01	; 1
    17c8:	fb 4f       	sbci	r31, 0xFB	; 251
    17ca:	80 83       	st	Z, r24
	Data_Count++;
    17cc:	80 91 08 05 	lds	r24, 0x0508
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	80 93 08 05 	sts	0x0508, r24
	if(Data_Count==5)
    17d6:	80 91 08 05 	lds	r24, 0x0508
    17da:	85 30       	cpi	r24, 0x05	; 5
    17dc:	31 f5       	brne	.+76     	; 0x182a <__vector_18+0xba>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
    17de:	80 91 ff 04 	lds	r24, 0x04FF
    17e2:	84 36       	cpi	r24, 0x64	; 100
    17e4:	01 f5       	brne	.+64     	; 0x1826 <__vector_18+0xb6>
    17e6:	80 91 00 05 	lds	r24, 0x0500
    17ea:	85 36       	cpi	r24, 0x65	; 101
    17ec:	e1 f4       	brne	.+56     	; 0x1826 <__vector_18+0xb6>
    17ee:	80 91 01 05 	lds	r24, 0x0501
    17f2:	82 36       	cpi	r24, 0x62	; 98
    17f4:	c1 f4       	brne	.+48     	; 0x1826 <__vector_18+0xb6>
    17f6:	80 91 02 05 	lds	r24, 0x0502
    17fa:	85 37       	cpi	r24, 0x75	; 117
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <__vector_18+0xb6>
    17fe:	80 91 03 05 	lds	r24, 0x0503
    1802:	87 36       	cpi	r24, 0x67	; 103
    1804:	81 f4       	brne	.+32     	; 0x1826 <__vector_18+0xb6>
    1806:	03 c0       	rjmp	.+6      	; 0x180e <__vector_18+0x9e>
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
			{
				uart_char(data);
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <uart_char>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
    180e:	be 01       	movw	r22, r28
    1810:	6f 5f       	subi	r22, 0xFF	; 255
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	88 e2       	ldi	r24, 0x28	; 40
    1816:	92 e0       	ldi	r25, 0x02	; 2
    1818:	0e 94 b3 05 	call	0xb66	; 0xb66 <PopFromCircularBuffer>
    181c:	88 23       	and	r24, r24
    181e:	a1 f3       	breq	.-24     	; 0x1808 <__vector_18+0x98>
			{
				uart_char(data);
			}
			flag=1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 fc 03 	sts	0x03FC, r24
		}
		Data_Count=0;
    1826:	10 92 08 05 	sts	0x0508, r1
	}
	if(callbackFunction!=0&&flag==0)
    182a:	60 91 06 05 	lds	r22, 0x0506
    182e:	70 91 07 05 	lds	r23, 0x0507
    1832:	61 15       	cp	r22, r1
    1834:	71 05       	cpc	r23, r1
    1836:	59 f0       	breq	.+22     	; 0x184e <__vector_18+0xde>
    1838:	80 91 fc 03 	lds	r24, 0x03FC
    183c:	81 11       	cpse	r24, r1
    183e:	07 c0       	rjmp	.+14     	; 0x184e <__vector_18+0xde>
	{
		PushEventInterface(200,callbackFunction,PopInterface,0);
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	48 e0       	ldi	r20, 0x08	; 8
    1844:	5b e0       	ldi	r21, 0x0B	; 11
    1846:	88 ec       	ldi	r24, 0xC8	; 200
    1848:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    184c:	20 c0       	rjmp	.+64     	; 0x188e <__vector_18+0x11e>
	}
	else if(flag==2)
    184e:	80 91 fc 03 	lds	r24, 0x03FC
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	81 f4       	brne	.+32     	; 0x1876 <__vector_18+0x106>
	{
		if(HeadTailDiff(&CircularBuffer,20)>=20)
    1856:	64 e1       	ldi	r22, 0x14	; 20
    1858:	88 e2       	ldi	r24, 0x28	; 40
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	0e 94 d1 05 	call	0xba2	; 0xba2 <HeadTailDiff>
    1860:	84 31       	cpi	r24, 0x14	; 20
    1862:	a8 f0       	brcs	.+42     	; 0x188e <__vector_18+0x11e>
		{
			PushEventInterface(200,Callhandler,PopInterface,0);
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	48 e0       	ldi	r20, 0x08	; 8
    1868:	5b e0       	ldi	r21, 0x0B	; 11
    186a:	6f ef       	ldi	r22, 0xFF	; 255
    186c:	7a e0       	ldi	r23, 0x0A	; 10
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    1874:	0c c0       	rjmp	.+24     	; 0x188e <__vector_18+0x11e>
		}
	}
	else if(flag==1)
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	51 f4       	brne	.+20     	; 0x188e <__vector_18+0x11e>
	{
		flag=2;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	80 93 fc 03 	sts	0x03FC, r24
		PopFromCircularBuffer(&CircularBuffer,&data);
    1880:	be 01       	movw	r22, r28
    1882:	6f 5f       	subi	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	88 e2       	ldi	r24, 0x28	; 40
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	0e 94 b3 05 	call	0xb66	; 0xb66 <PopFromCircularBuffer>
	}
	
}
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <CheckUartReadyToSend>:
{
	PushIntoCircularBuffer(&CircularBuffer,dataval);
}
uint8_t CheckUartReadyToSend()
{ 
	return (!(UCSR0A&(1<<UDRE0)));
    18b6:	80 91 c0 00 	lds	r24, 0x00C0
    18ba:	85 fb       	bst	r24, 5
    18bc:	88 27       	eor	r24, r24
    18be:	80 f9       	bld	r24, 0
}
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	89 27       	eor	r24, r25
    18c4:	08 95       	ret

000018c6 <SendByte>:

void SendByte(unsigned char dat)
{
	UDR0=dat;
    18c6:	80 93 c6 00 	sts	0x00C6, r24
    18ca:	08 95       	ret

000018cc <ReadEveryValueADC>:
static ChannelBuffer channelBuffer_s[6]={{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0}};
static uint8_t BufferLength;
static volatile uint16_t ADC_Array[10];
static uint8_t checkAlreadyThere(ChannelBuffer *Channel);
uint16_t ReadEveryValueADC(void)
{
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
	uint16_t Channel=0,status;
	static uint8_t position,conversionFlag;
	uint16_t Value;
	  if(conversionFlag==0)
    18d0:	80 91 12 04 	lds	r24, 0x0412
    18d4:	81 11       	cpse	r24, r1
    18d6:	37 c0       	rjmp	.+110    	; 0x1946 <ReadEveryValueADC+0x7a>
	  { 
		  
		 if(channelBuffer_s[position].filled==1&&channelBuffer_s[position].State==start)
    18d8:	20 91 13 04 	lds	r18, 0x0413
    18dc:	82 2f       	mov	r24, r18
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	fc 01       	movw	r30, r24
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	e8 0f       	add	r30, r24
    18e8:	f9 1f       	adc	r31, r25
    18ea:	e3 5d       	subi	r30, 0xD3	; 211
    18ec:	fd 4f       	sbci	r31, 0xFD	; 253
    18ee:	32 81       	ldd	r19, Z+2	; 0x02
    18f0:	31 30       	cpi	r19, 0x01	; 1
    18f2:	29 f5       	brne	.+74     	; 0x193e <ReadEveryValueADC+0x72>
    18f4:	fc 01       	movw	r30, r24
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	e3 5d       	subi	r30, 0xD3	; 211
    1900:	fd 4f       	sbci	r31, 0xFD	; 253
    1902:	31 81       	ldd	r19, Z+1	; 0x01
    1904:	31 11       	cpse	r19, r1
    1906:	1b c0       	rjmp	.+54     	; 0x193e <ReadEveryValueADC+0x72>
		 {
			 //uart_num(channelBuffer_s[position].channel);
			 adc_read(channelBuffer_s[position].channel);
    1908:	fc 01       	movw	r30, r24
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	8e 0f       	add	r24, r30
    1910:	9f 1f       	adc	r25, r31
    1912:	fc 01       	movw	r30, r24
    1914:	e3 5d       	subi	r30, 0xD3	; 211
    1916:	fd 4f       	sbci	r31, 0xFD	; 253
    1918:	80 81       	ld	r24, Z
    191a:	0e 94 68 05 	call	0xad0	; 0xad0 <adc_read>
			 channelBuffer_s[position].State=busy;
    191e:	80 91 13 04 	lds	r24, 0x0413
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	8e 0f       	add	r24, r30
    192c:	9f 1f       	adc	r25, r31
    192e:	fc 01       	movw	r30, r24
    1930:	e3 5d       	subi	r30, 0xD3	; 211
    1932:	fd 4f       	sbci	r31, 0xFD	; 253
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	81 83       	std	Z+1, r24	; 0x01
			 conversionFlag=1;
    1938:	80 93 12 04 	sts	0x0412, r24
    193c:	3a c0       	rjmp	.+116    	; 0x19b2 <ReadEveryValueADC+0xe6>
		 } 	
		 else
		 {
			 position++;
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	20 93 13 04 	sts	0x0413, r18
    1944:	36 c0       	rjmp	.+108    	; 0x19b2 <ReadEveryValueADC+0xe6>
		 }
	  }
	  else if(ADC_State()==0)
    1946:	0e 94 79 05 	call	0xaf2	; 0xaf2 <ADC_State>
    194a:	81 11       	cpse	r24, r1
    194c:	32 c0       	rjmp	.+100    	; 0x19b2 <ReadEveryValueADC+0xe6>
	  {   
		  if(channelBuffer_s[position].State==busy)
    194e:	80 91 13 04 	lds	r24, 0x0413
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	e8 0f       	add	r30, r24
    195c:	f9 1f       	adc	r31, r25
    195e:	e3 5d       	subi	r30, 0xD3	; 211
    1960:	fd 4f       	sbci	r31, 0xFD	; 253
    1962:	21 81       	ldd	r18, Z+1	; 0x01
    1964:	21 30       	cpi	r18, 0x01	; 1
    1966:	29 f5       	brne	.+74     	; 0x19b2 <ReadEveryValueADC+0xe6>
		  {  
			 //uart_string("in Second");
			 ADC_Array[channelBuffer_s[position].channel]=ADCValue();
    1968:	fc 01       	movw	r30, r24
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	8e 0f       	add	r24, r30
    1970:	9f 1f       	adc	r25, r31
    1972:	fc 01       	movw	r30, r24
    1974:	e3 5d       	subi	r30, 0xD3	; 211
    1976:	fd 4f       	sbci	r31, 0xFD	; 253
    1978:	c0 81       	ld	r28, Z
    197a:	d0 e0       	ldi	r29, 0x00	; 0
    197c:	0e 94 7d 05 	call	0xafa	; 0xafa <ADCValue>
    1980:	cc 0f       	add	r28, r28
    1982:	dd 1f       	adc	r29, r29
    1984:	c3 50       	subi	r28, 0x03	; 3
    1986:	dc 4f       	sbci	r29, 0xFC	; 252
    1988:	99 83       	std	Y+1, r25	; 0x01
    198a:	88 83       	st	Y, r24
			 channelBuffer_s[position].State=done;
    198c:	20 91 13 04 	lds	r18, 0x0413
    1990:	82 2f       	mov	r24, r18
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	fc 01       	movw	r30, r24
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	8e 0f       	add	r24, r30
    199c:	9f 1f       	adc	r25, r31
    199e:	fc 01       	movw	r30, r24
    19a0:	e3 5d       	subi	r30, 0xD3	; 211
    19a2:	fd 4f       	sbci	r31, 0xFD	; 253
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	81 83       	std	Z+1, r24	; 0x01
			 position++;
    19a8:	2f 5f       	subi	r18, 0xFF	; 255
    19aa:	20 93 13 04 	sts	0x0413, r18
			 conversionFlag=0;
    19ae:	10 92 12 04 	sts	0x0412, r1
		  }
	  }
	  if(position==6)
    19b2:	80 91 13 04 	lds	r24, 0x0413
    19b6:	86 30       	cpi	r24, 0x06	; 6
    19b8:	11 f4       	brne	.+4      	; 0x19be <ReadEveryValueADC+0xf2>
	  {
		  position=0;
    19ba:	10 92 13 04 	sts	0x0413, r1
	  }

	
	return 0;
}
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <GetADC_Value>:

uint16_t GetADC_Value(uint16_t ADC_ChannelAndValue)
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <GetADC_Value+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
	uint16_t returnValue=0;
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	86 95       	lsr	r24
    19da:	86 95       	lsr	r24
    19dc:	86 95       	lsr	r24
    19de:	87 70       	andi	r24, 0x07	; 7
    19e0:	80 93 11 04 	sts	0x0411, r24
	channelProp.channel=ChannelSelect;
    19e4:	30 91 11 04 	lds	r19, 0x0411
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    19e8:	80 91 2d 02 	lds	r24, 0x022D
    19ec:	38 17       	cp	r19, r24
    19ee:	41 f0       	breq	.+16     	; 0x1a00 <GetADC_Value+0x38>
    19f0:	e0 e3       	ldi	r30, 0x30	; 48
    19f2:	f2 e0       	ldi	r31, 0x02	; 2

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    19f8:	20 81       	ld	r18, Z
    19fa:	32 13       	cpse	r19, r18
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <GetADC_Value+0x5c>
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <GetADC_Value+0x3c>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
		{
          Channel->State=channelBuffer_s[index].State;
    1a04:	dc 01       	movw	r26, r24
    1a06:	aa 0f       	add	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	a8 0f       	add	r26, r24
    1a0c:	b9 1f       	adc	r27, r25
    1a0e:	a3 5d       	subi	r26, 0xD3	; 211
    1a10:	bd 4f       	sbci	r27, 0xFD	; 253
    1a12:	11 96       	adiw	r26, 0x01	; 1
    1a14:	2c 91       	ld	r18, X
		  Channel->filled=1;
		  buffpos=index;
    1a16:	80 93 14 04 	sts	0x0414, r24
			BufferLength++;
			//uart_num(BufferLength);
		}
		
	}
	if(channelProp.State==done)
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	99 f1       	breq	.+102    	; 0x1a84 <GetADC_Value+0xbc>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	48 c0       	rjmp	.+144    	; 0x1ab4 <GetADC_Value+0xec>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	33 96       	adiw	r30, 0x03	; 3
    1a28:	86 30       	cpi	r24, 0x06	; 6
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	29 f7       	brne	.-54     	; 0x19f8 <GetADC_Value+0x30>
    1a2e:	45 c0       	rjmp	.+138    	; 0x1aba <GetADC_Value+0xf2>
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
		{
			if(channelBuffer_s[Buffer_empty].filled=Buffer_empty)
    1a30:	10 92 2f 02 	sts	0x022F, r1
    1a34:	11 c0       	rjmp	.+34     	; 0x1a58 <GetADC_Value+0x90>
						BufferLength=0;
				}
		}
		else
		{
			if(channelBuffer_s[BufferLength].filled!=Buffer_empty)
    1a36:	82 2f       	mov	r24, r18
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	8e 0f       	add	r24, r30
    1a42:	9f 1f       	adc	r25, r31
    1a44:	fc 01       	movw	r30, r24
    1a46:	e3 5d       	subi	r30, 0xD3	; 211
    1a48:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	88 23       	and	r24, r24
    1a4e:	21 f0       	breq	.+8      	; 0x1a58 <GetADC_Value+0x90>
			{
				FreeBuffer=1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 16 04 	sts	0x0416, r24
    1a56:	39 c0       	rjmp	.+114    	; 0x1aca <GetADC_Value+0x102>
			}
		}
		if(FreeBuffer==Buffer_empty)
    1a58:	80 91 16 04 	lds	r24, 0x0416
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	35 c0       	rjmp	.+106    	; 0x1aca <GetADC_Value+0x102>
		{
			channelBuffer_s[BufferLength].channel=ChannelSelect;
    1a60:	82 2f       	mov	r24, r18
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	30 91 11 04 	lds	r19, 0x0411
    1a68:	fc 01       	movw	r30, r24
    1a6a:	ee 0f       	add	r30, r30
    1a6c:	ff 1f       	adc	r31, r31
    1a6e:	e8 0f       	add	r30, r24
    1a70:	f9 1f       	adc	r31, r25
    1a72:	e3 5d       	subi	r30, 0xD3	; 211
    1a74:	fd 4f       	sbci	r31, 0xFD	; 253
    1a76:	30 83       	st	Z, r19
			channelBuffer_s[BufferLength].filled=1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	82 83       	std	Z+2, r24	; 0x02
			BufferLength++;
    1a7c:	2f 5f       	subi	r18, 0xFF	; 255
    1a7e:	20 93 15 04 	sts	0x0415, r18
    1a82:	23 c0       	rjmp	.+70     	; 0x1aca <GetADC_Value+0x102>
		}
		
	}
	if(channelProp.State==done)
	{
		returnValue=ADC_Array[channelProp.channel];
    1a84:	e3 2f       	mov	r30, r19
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	ee 0f       	add	r30, r30
    1a8a:	ff 1f       	adc	r31, r31
    1a8c:	e3 50       	subi	r30, 0x03	; 3
    1a8e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a90:	20 81       	ld	r18, Z
    1a92:	31 81       	ldd	r19, Z+1	; 0x01
		returnValue|=0x8000;
    1a94:	30 68       	ori	r19, 0x80	; 128
		channelBuffer_s[bufferpos].channel=ChannelSelect;	
    1a96:	99 27       	eor	r25, r25
    1a98:	40 91 11 04 	lds	r20, 0x0411
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	8e 0f       	add	r24, r30
    1aa4:	9f 1f       	adc	r25, r31
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e3 5d       	subi	r30, 0xD3	; 211
    1aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    1aac:	40 83       	st	Z, r20
		channelBuffer_s[bufferpos].State=0;
    1aae:	11 82       	std	Z+1, r1	; 0x01
		channelBuffer_s[bufferpos].filled=1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	82 83       	std	Z+2, r24	; 0x02
	else
	{
		returnValue|=0x0000;
	}
    //returnValue|=0x8000;
	return returnValue;
    1ab4:	82 2f       	mov	r24, r18
    1ab6:	93 2f       	mov	r25, r19
    1ab8:	0b c0       	rjmp	.+22     	; 0x1ad0 <GetADC_Value+0x108>
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
	channelProp.channel=ChannelSelect;
    bufferpos=checkAlreadyThere(&channelProp);
    1aba:	10 92 14 04 	sts	0x0414, r1
	
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
    1abe:	20 91 15 04 	lds	r18, 0x0415
    1ac2:	26 30       	cpi	r18, 0x06	; 6
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <GetADC_Value+0x100>
    1ac6:	b7 cf       	rjmp	.-146    	; 0x1a36 <GetADC_Value+0x6e>
    1ac8:	b3 cf       	rjmp	.-154    	; 0x1a30 <GetADC_Value+0x68>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	f2 cf       	rjmp	.-28     	; 0x1ab4 <GetADC_Value+0xec>
	}
    //returnValue|=0x8000;
	return returnValue;
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <BaseTask1>:
#include "..\BaseLayer\UART.h"
#include "..\BaseLayer\pinout.h"
#include "..\BaseLayer\SSDi2cHandler.h"

uint16_t BaseTask1(void)
{
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <BaseTask1+0x6>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	uint16_t PulseData=0;
	static uint8_t CountTaskTime,BTF;
	PulseData=InterfacePulse(PulseData);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 44 06 	call	0xc88	; 0xc88 <InterfacePulse>
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
	if(((uint8_t*)(&PulseData))[1]==0x80 || ((uint8_t*)(&PulseData))[1]==0x00 )
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 38       	cpi	r24, 0x80	; 128
    1af4:	11 f0       	breq	.+4      	; 0x1afa <BaseTask1+0x20>
    1af6:	81 11       	cpse	r24, r1
    1af8:	17 c0       	rjmp	.+46     	; 0x1b28 <BaseTask1+0x4e>
	{
		//CountTaskTime=CountTaskTime+2;
		if(CountTaskTime>127)
    1afa:	80 91 17 04 	lds	r24, 0x0417
    1afe:	88 23       	and	r24, r24
    1b00:	24 f4       	brge	.+8      	; 0x1b0a <BaseTask1+0x30>
		{
			BTF=1;
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	90 93 18 04 	sts	0x0418, r25
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <BaseTask1+0x38>
		}
		if(BTF==1)
    1b0a:	90 91 18 04 	lds	r25, 0x0418
    1b0e:	91 30       	cpi	r25, 0x01	; 1
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <BaseTask1+0x40>
		{
			CountTaskTime=CountTaskTime-2;
    1b12:	82 50       	subi	r24, 0x02	; 2
    1b14:	80 93 17 04 	sts	0x0417, r24
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <BaseTask1+0x46>
		}
		else
		{
			CountTaskTime=CountTaskTime+2;
    1b1a:	8e 5f       	subi	r24, 0xFE	; 254
    1b1c:	80 93 17 04 	sts	0x0417, r24
		}
		((uint8_t*)(&PulseData))[0]=CountTaskTime;
		return PulseData;
    1b20:	80 91 17 04 	lds	r24, 0x0417
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <BaseTask1+0x52>
	}
    else
	{
		((uint8_t*)(&PulseData))[1]=0x01;
	}
	return PulseData;
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <BaseTask1Open>:
uint16_t BaseTask1Open(void)
{
	return 0;
}
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	08 95       	ret

00001b3c <BaseTask2>:

uint16_t BaseTask2(void)
{
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <BaseTask2+0x6>
    1b42:	1f 92       	push	r1
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
	uint16_t RetVal;
	static uint8_t ButtonCount,previousButtonVal,currenButtonvalue,SuccessCount;
	PinValue(&value,PIN_OUT3,B );
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	0e 94 cb 08 	call	0x1196	; 0x1196 <PinValue>
	if(value==previousButtonVal)
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	90 91 19 04 	lds	r25, 0x0419
    1b5a:	89 13       	cpse	r24, r25
    1b5c:	08 c0       	rjmp	.+16     	; 0x1b6e <BaseTask2+0x32>
	{
		ButtonCount++;
    1b5e:	90 91 1a 04 	lds	r25, 0x041A
    1b62:	9f 5f       	subi	r25, 0xFF	; 255
    1b64:	90 93 1a 04 	sts	0x041A, r25
		previousButtonVal=value;
    1b68:	80 93 19 04 	sts	0x0419, r24
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <BaseTask2+0x3a>
	}
	else
	{
		ButtonCount=0;
    1b6e:	10 92 1a 04 	sts	0x041A, r1
		previousButtonVal=value;
    1b72:	80 93 19 04 	sts	0x0419, r24
	}
	if(ButtonCount>=10)
    1b76:	80 91 1a 04 	lds	r24, 0x041A
    1b7a:	8a 30       	cpi	r24, 0x0A	; 10
    1b7c:	28 f0       	brcs	.+10     	; 0x1b88 <BaseTask2+0x4c>
	{
		currenButtonvalue=value;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	80 93 1b 04 	sts	0x041B, r24
		ButtonCount=0;
    1b84:	10 92 1a 04 	sts	0x041A, r1
	}
	SuccessCount++;
    1b88:	80 91 1c 04 	lds	r24, 0x041C
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 1c 04 	sts	0x041C, r24
	if(SuccessCount>200)
    1b92:	89 3c       	cpi	r24, 0xC9	; 201
    1b94:	28 f0       	brcs	.+10     	; 0x1ba0 <BaseTask2+0x64>
	{
	  	
	  	((uint8_t *)&RetVal)[1]=0x02;
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	8b 83       	std	Y+3, r24	; 0x03
		SuccessCount=0;	
    1b9a:	10 92 1c 04 	sts	0x041C, r1
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <BaseTask2+0x68>
	}
	else
	{
		((uint8_t *)&RetVal)[1]=0x03;
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
	}
    ((uint8_t *)&RetVal)[0]=currenButtonvalue;
	return RetVal;
}
    1ba4:	80 91 1b 04 	lds	r24, 0x041B
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <BaseTask2Open>:

uint16_t BaseTask2Open(void)
{
	return 0;
}
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	08 95       	ret

00001bbc <SSDtask>:

uint16_t SSDtask(void)
{
	SSDi2cHandlerFunc(0);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 2e 0a 	call	0x145c	; 0x145c <SSDi2cHandlerFunc>
	return 0xfffff;
}
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	9f ef       	ldi	r25, 0xFF	; 255
    1bc8:	08 95       	ret

00001bca <Testtask>:
{
	static uint8_t count;
	count++;
	if(1)
	{
		count=0;
    1bca:	10 92 1d 04 	sts	0x041D, r1
		testfuc(0);
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 5f 0a 	call	0x14be	; 0x14be <testfuc>
	}
	
	return 0xfffff;
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255
    1bda:	08 95       	ret

00001bdc <chartohex>:
	return 0;
}

static uint8_t chartohex(char arg)
{
	if(arg>='0' && arg<='9' )
    1bdc:	98 2f       	mov	r25, r24
    1bde:	90 53       	subi	r25, 0x30	; 48
    1be0:	9a 30       	cpi	r25, 0x0A	; 10
    1be2:	30 f4       	brcc	.+12     	; 0x1bf0 <chartohex+0x14>
	{
		return charHex[arg-'0'];
    1be4:	e8 2f       	mov	r30, r24
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	e1 5e       	subi	r30, 0xE1	; 225
    1bea:	fd 4f       	sbci	r31, 0xFD	; 253
    1bec:	80 81       	ld	r24, Z
    1bee:	08 95       	ret
	}
	else if(arg>='A' && arg<='F')
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	91 54       	subi	r25, 0x41	; 65
    1bf4:	96 30       	cpi	r25, 0x06	; 6
    1bf6:	30 f4       	brcc	.+12     	; 0x1c04 <chartohex+0x28>
	{
		return charHex[arg-'A'+10];
    1bf8:	e8 2f       	mov	r30, r24
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	e8 5e       	subi	r30, 0xE8	; 232
    1bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1c00:	80 81       	ld	r24, Z
    1c02:	08 95       	ret
	}
	return 0;	
    1c04:	80 e0       	ldi	r24, 0x00	; 0
}
    1c06:	08 95       	ret

00001c08 <ReadRambytesNonCnt>:
//-->EXAMPLE ROUTINE :-FD01ED01EE01EF01F004
//01ED --> one address
//everything is in hex
//04-->length
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	7c 01       	movw	r14, r24
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
    1c18:	8a e0       	ldi	r24, 0x0A	; 10
    1c1a:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1c1e:	d7 01       	movw	r26, r14
    1c20:	1c 96       	adiw	r26, 0x0c	; 12
    1c22:	8c 91       	ld	r24, X
    1c24:	88 23       	and	r24, r24
    1c26:	69 f1       	breq	.+90     	; 0x1c82 <ReadRambytesNonCnt+0x7a>
    1c28:	d1 2c       	mov	r13, r1
	{
		address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[i+1+4]<<8)|((uint8_t*)Ptr)[i+4]));
    1c2a:	f7 01       	movw	r30, r14
    1c2c:	ed 0d       	add	r30, r13
    1c2e:	f1 1d       	adc	r31, r1
    1c30:	b5 81       	ldd	r27, Z+5	; 0x05
    1c32:	db 2f       	mov	r29, r27
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	c8 2f       	mov	r28, r24
    1c38:	84 81       	ldd	r24, Z+4	; 0x04
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	08 2b       	or	r16, r24
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1c3e:	d8 01       	movw	r26, r16
    1c40:	ec 91       	ld	r30, X
    1c42:	e2 95       	swap	r30
    1c44:	ef 70       	andi	r30, 0x0F	; 15
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	e1 5c       	subi	r30, 0xC1	; 193
    1c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4c:	80 81       	ld	r24, Z
    1c4e:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1c52:	d8 01       	movw	r26, r16
    1c54:	ec 91       	ld	r30, X
    1c56:	ef 70       	andi	r30, 0x0F	; 15
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	e1 5c       	subi	r30, 0xC1	; 193
    1c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c5e:	80 81       	ld	r24, Z
    1c60:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1c64:	80 e2       	ldi	r24, 0x20	; 32
    1c66:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1c6a:	d3 94       	inc	r13
    1c6c:	d3 94       	inc	r13
    1c6e:	2d 2d       	mov	r18, r13
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	f7 01       	movw	r30, r14
    1c74:	84 85       	ldd	r24, Z+12	; 0x0c
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	28 17       	cp	r18, r24
    1c7e:	39 07       	cpc	r19, r25
    1c80:	a4 f2       	brlt	.-88     	; 0x1c2a <ReadRambytesNonCnt+0x22>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
	}
	
	return 0;	
}
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	08 95       	ret

00001c96 <WriteRambyte>:
	
	return 0;
}

uint16_t WriteRambyte(void *Ptr)
{
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	f5 81       	ldd	r31, Z+5	; 0x05
    1caa:	df 2f       	mov	r29, r31
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	c8 2f       	mov	r28, r24
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	84 81       	ldd	r24, Z+4	; 0x04
    1cb4:	c8 2b       	or	r28, r24
	FillUartBufferSiglechar('\n');
    1cb6:	8a e0       	ldi	r24, 0x0A	; 10
    1cb8:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	84 85       	ldd	r24, Z+12	; 0x0c
    1cc0:	88 23       	and	r24, r24
    1cc2:	39 f1       	breq	.+78     	; 0x1d12 <WriteRambyte+0x7c>
    1cc4:	d1 2c       	mov	r13, r1
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
    1cc6:	0f 2e       	mov	r0, r31
    1cc8:	f6 e8       	ldi	r31, 0x86	; 134
    1cca:	ef 2e       	mov	r14, r31
    1ccc:	f5 e0       	ldi	r31, 0x05	; 5
    1cce:	ff 2e       	mov	r15, r31
    1cd0:	f0 2d       	mov	r31, r0
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1cd2:	e8 81       	ld	r30, Y
    1cd4:	e2 95       	swap	r30
    1cd6:	ef 70       	andi	r30, 0x0F	; 15
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	e1 5c       	subi	r30, 0xC1	; 193
    1cdc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cde:	80 81       	ld	r24, Z
    1ce0:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1ce4:	e8 81       	ld	r30, Y
    1ce6:	ef 70       	andi	r30, 0x0F	; 15
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	e1 5c       	subi	r30, 0xC1	; 193
    1cec:	fd 4f       	sbci	r31, 0xFD	; 253
    1cee:	80 81       	ld	r24, Z
    1cf0:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1cf4:	80 e2       	ldi	r24, 0x20	; 32
    1cf6:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		*address=((uint8_t*)Ptr)[i+6];
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	ed 0d       	add	r30, r13
    1cfe:	f1 1d       	adc	r31, r1
    1d00:	86 81       	ldd	r24, Z+6	; 0x06
    1d02:	89 93       	st	Y+, r24
		address++;
		Datastore[1]=0;
    1d04:	f7 01       	movw	r30, r14
    1d06:	10 82       	st	Z, r1
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1d08:	d3 94       	inc	r13
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d0e:	d8 16       	cp	r13, r24
    1d10:	00 f3       	brcs	.-64     	; 0x1cd2 <WriteRambyte+0x3c>
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
	}

	PushEventInterface(52,1,Datastore,0);	
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	45 e8       	ldi	r20, 0x85	; 133
    1d18:	55 e0       	ldi	r21, 0x05	; 5
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	84 e3       	ldi	r24, 0x34	; 52
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
	return 0;
}
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	08 95       	ret

00001d3a <ReadRambyte>:
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
{
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1d48:	fc 01       	movw	r30, r24
    1d4a:	f5 80       	ldd	r15, Z+5	; 0x05
    1d4c:	e1 2c       	mov	r14, r1
    1d4e:	84 81       	ldd	r24, Z+4	; 0x04
    1d50:	e8 2a       	or	r14, r24
    1d52:	e7 01       	movw	r28, r14
	FillUartBufferSiglechar('\n');
    1d54:	8a e0       	ldi	r24, 0x0A	; 10
    1d56:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
	PopulateSSDbuffer("Value:",3,5);
    1d5a:	45 e0       	ldi	r20, 0x05	; 5
    1d5c:	63 e0       	ldi	r22, 0x03	; 3
    1d5e:	8a e0       	ldi	r24, 0x0A	; 10
    1d60:	93 e0       	ldi	r25, 0x03	; 3
    1d62:	0e 94 03 12 	call	0x2406	; 0x2406 <PopulateSSDbuffer>
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1d66:	f8 01       	movw	r30, r16
    1d68:	86 81       	ldd	r24, Z+6	; 0x06
    1d6a:	88 23       	and	r24, r24
    1d6c:	a1 f1       	breq	.+104    	; 0x1dd6 <ReadRambyte+0x9c>
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1d6e:	e8 81       	ld	r30, Y
    1d70:	e2 95       	swap	r30
    1d72:	ef 70       	andi	r30, 0x0F	; 15
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	e1 5c       	subi	r30, 0xC1	; 193
    1d78:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7a:	80 81       	ld	r24, Z
    1d7c:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1d80:	e8 81       	ld	r30, Y
    1d82:	ef 70       	andi	r30, 0x0F	; 15
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	e1 5c       	subi	r30, 0xC1	; 193
    1d88:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8a:	80 81       	ld	r24, Z
    1d8c:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		PopulateSSDbufferChar(HexChar[((address[0]&0XF0)>>4)],0,0);
    1d90:	e8 81       	ld	r30, Y
    1d92:	e2 95       	swap	r30
    1d94:	ef 70       	andi	r30, 0x0F	; 15
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	e1 5c       	subi	r30, 0xC1	; 193
    1d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	0e 94 1d 12 	call	0x243a	; 0x243a <PopulateSSDbufferChar>
		PopulateSSDbufferChar(HexChar[(address[0]&0X0F)],0,0);
    1da6:	e9 91       	ld	r30, Y+
    1da8:	ef 70       	andi	r30, 0x0F	; 15
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	e1 5c       	subi	r30, 0xC1	; 193
    1dae:	fd 4f       	sbci	r31, 0xFD	; 253
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	0e 94 1d 12 	call	0x243a	; 0x243a <PopulateSSDbufferChar>
		PopulateSSDbufferChar(' ',0,0);
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	80 e2       	ldi	r24, 0x20	; 32
    1dc0:	0e 94 1d 12 	call	0x243a	; 0x243a <PopulateSSDbufferChar>
		FillUartBufferSiglechar(' ');
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	0e 94 4f 12 	call	0x249e	; 0x249e <FillUartBufferSiglechar>
		return charHex[arg-'A'+10];
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
    1dca:	9c 2f       	mov	r25, r28
    1dcc:	9e 19       	sub	r25, r14
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	PopulateSSDbuffer("Value:",3,5);
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1dce:	f8 01       	movw	r30, r16
    1dd0:	86 81       	ldd	r24, Z+6	; 0x06
    1dd2:	98 17       	cp	r25, r24
    1dd4:	60 f2       	brcs	.-104    	; 0x1d6e <ReadRambyte+0x34>
		FillUartBufferSiglechar(' ');
		address++;
	}
	
	return 0;
}
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	08 95       	ret

00001de8 <DebugHandlerFunc>:
VariableManager VariableManager_t[5];
static	uint8_t chartohex(char arg);
typedef uint16_t (*argp)(void *);
argp argp1;
uint16_t DebugHandlerFunc(void *fptr)
{
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <DebugHandlerFunc+0x12>
    1dfa:	1f 92       	push	r1
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	8c 01       	movw	r16, r24
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
    1e02:	8d e9       	ldi	r24, 0x9D	; 157
    1e04:	9e e0       	ldi	r25, 0x0E	; 14
    1e06:	9b 83       	std	Y+3, r25	; 0x03
    1e08:	8a 83       	std	Y+2, r24	; 0x02
uint16_t DebugHandlerFunc(void *fptr)
{
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
    1e0a:	d1 2c       	mov	r13, r1
    1e0c:	f1 2c       	mov	r15, r1
		}
		k++;
		if(k==2)
		{
		  i++;
		  k=0;	
    1e0e:	e1 2c       	mov	r14, r1
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1e10:	31 c0       	rjmp	.+98     	; 0x1e74 <DebugHandlerFunc+0x8c>
	{
		
		if(i<10)
    1e12:	29 e0       	ldi	r18, 0x09	; 9
    1e14:	2f 15       	cp	r18, r15
    1e16:	38 f1       	brcs	.+78     	; 0x1e66 <DebugHandlerFunc+0x7e>
	{
		if(k==0)
    1e18:	d1 10       	cpse	r13, r1
    1e1a:	0e c0       	rjmp	.+28     	; 0x1e38 <DebugHandlerFunc+0x50>
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <chartohex>
    1e22:	ef 2d       	mov	r30, r15
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	e2 5e       	subi	r30, 0xE2	; 226
    1e28:	fb 4f       	sbci	r31, 0xFB	; 251
    1e2a:	20 e1       	ldi	r18, 0x10	; 16
    1e2c:	82 9f       	mul	r24, r18
    1e2e:	c0 01       	movw	r24, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	80 83       	st	Z, r24
		}
		if(k==1)
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
		}
		k++;
    1e34:	d3 94       	inc	r13
    1e36:	1e c0       	rjmp	.+60     	; 0x1e74 <DebugHandlerFunc+0x8c>
	{
		if(k==0)
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
		}
		if(k==1)
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	d8 12       	cpse	r13, r24
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <DebugHandlerFunc+0x70>
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
    1e3e:	cf 2c       	mov	r12, r15
    1e40:	d1 2c       	mov	r13, r1
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <chartohex>
    1e48:	f6 01       	movw	r30, r12
    1e4a:	e2 5e       	subi	r30, 0xE2	; 226
    1e4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e4e:	8f 70       	andi	r24, 0x0F	; 15
    1e50:	90 81       	ld	r25, Z
    1e52:	89 2b       	or	r24, r25
    1e54:	80 83       	st	Z, r24
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <DebugHandlerFunc+0x78>
		}
		k++;
    1e58:	d3 94       	inc	r13
		if(k==2)
    1e5a:	e2 e0       	ldi	r30, 0x02	; 2
    1e5c:	de 12       	cpse	r13, r30
    1e5e:	0a c0       	rjmp	.+20     	; 0x1e74 <DebugHandlerFunc+0x8c>
		{
		  i++;
    1e60:	f3 94       	inc	r15
		  k=0;	
    1e62:	de 2c       	mov	r13, r14
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <DebugHandlerFunc+0x8c>
		}
	}
	else
	{
	  Pos[i]=data;
    1e66:	ef 2d       	mov	r30, r15
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	e2 5e       	subi	r30, 0xE2	; 226
    1e6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	80 83       	st	Z, r24
	  i++;
    1e72:	f3 94       	inc	r15
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	f8 01       	movw	r30, r16
    1e7a:	09 95       	icall
    1e7c:	88 23       	and	r24, r24
    1e7e:	49 f2       	breq	.-110    	; 0x1e12 <DebugHandlerFunc+0x2a>
	  i++;
	}
			
	}

	if(Pos[0]==0xab)
    1e80:	80 91 1e 04 	lds	r24, 0x041E
    1e84:	8b 3a       	cpi	r24, 0xAB	; 171
    1e86:	71 f5       	brne	.+92     	; 0x1ee4 <DebugHandlerFunc+0xfc>
	{
	   
        TEMP=ReadRambyte;
		if(Pos[3]==0)
    1e88:	80 91 21 04 	lds	r24, 0x0421
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	1a c0       	rjmp	.+52     	; 0x1ec4 <DebugHandlerFunc+0xdc>
		{
		  //uart_string((char*)0x01ed/*(char*)((uint16_t)(Pos[1]<<8)|Pos[2])*/);	
          Datastore[0]=0;
    1e90:	10 92 85 05 	sts	0x0585, r1
          Datastore[1]=1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 86 05 	sts	0x0586, r24
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	80 93 87 05 	sts	0x0587, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	80 93 88 05 	sts	0x0588, r24
          Datastore[4]=Pos[2];
    1ea6:	80 91 20 04 	lds	r24, 0x0420
    1eaa:	80 93 89 05 	sts	0x0589, r24
          Datastore[5]=Pos[1];
    1eae:	80 91 1f 04 	lds	r24, 0x041F
    1eb2:	80 93 8a 05 	sts	0x058A, r24
          Datastore[6]=Pos[4];
    1eb6:	80 91 22 04 	lds	r24, 0x0422
    1eba:	80 93 8b 05 	sts	0x058B, r24
		  Datastore[12]=Pos[4];
    1ebe:	80 93 91 05 	sts	0x0591, r24
    1ec2:	9b c0       	rjmp	.+310    	; 0x1ffa <DebugHandlerFunc+0x212>
		 //ReadRambyte(Datastore);;
		 //PushEventInterface(52,1,Datastore,0);
		}
		else if(Pos[3]==1)
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <DebugHandlerFunc+0xe2>
    1ec8:	98 c0       	rjmp	.+304    	; 0x1ffa <DebugHandlerFunc+0x212>
		{
		  //
		  Datastore[1]=0;
    1eca:	10 92 86 05 	sts	0x0586, r1
		  PushEventInterface(52,1,Datastore,0);
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	45 e8       	ldi	r20, 0x85	; 133
    1ed4:	55 e0       	ldi	r21, 0x05	; 5
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	84 e3       	ldi	r24, 0x34	; 52
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    1ee2:	8b c0       	rjmp	.+278    	; 0x1ffa <DebugHandlerFunc+0x212>
		} else if(Pos[3]==2)
		{
			
		}
	}
	else if(Pos[0]==0xac)
    1ee4:	8c 3a       	cpi	r24, 0xAC	; 172
    1ee6:	99 f5       	brne	.+102    	; 0x1f4e <DebugHandlerFunc+0x166>
	{
		 TEMP=WriteRambyte;
    1ee8:	8b e4       	ldi	r24, 0x4B	; 75
    1eea:	9e e0       	ldi	r25, 0x0E	; 14
    1eec:	9b 83       	std	Y+3, r25	; 0x03
    1eee:	8a 83       	std	Y+2, r24	; 0x02
          Datastore[0]=0;
    1ef0:	10 92 85 05 	sts	0x0585, r1
          Datastore[1]=1;
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	90 93 86 05 	sts	0x0586, r25
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    1efa:	80 93 87 05 	sts	0x0587, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	80 93 88 05 	sts	0x0588, r24
          Datastore[4]=Pos[2];
    1f04:	80 91 20 04 	lds	r24, 0x0420
    1f08:	80 93 89 05 	sts	0x0589, r24
          Datastore[5]=Pos[1];
    1f0c:	80 91 1f 04 	lds	r24, 0x041F
    1f10:	80 93 8a 05 	sts	0x058A, r24
          Datastore[6]=Pos[3];
    1f14:	80 91 21 04 	lds	r24, 0x0421
    1f18:	80 93 8b 05 	sts	0x058B, r24
		  Datastore[7]=Pos[4];
    1f1c:	80 91 22 04 	lds	r24, 0x0422
    1f20:	80 93 8c 05 	sts	0x058C, r24
		  Datastore[8]=Pos[5];
    1f24:	80 91 23 04 	lds	r24, 0x0423
    1f28:	80 93 8d 05 	sts	0x058D, r24
		  Datastore[9]=Pos[6];
    1f2c:	80 91 24 04 	lds	r24, 0x0424
    1f30:	80 93 8e 05 	sts	0x058E, r24
	      Datastore[10]=Pos[7];
    1f34:	80 91 25 04 	lds	r24, 0x0425
    1f38:	80 93 8f 05 	sts	0x058F, r24
		  Datastore[11]=Pos[8];
    1f3c:	80 91 26 04 	lds	r24, 0x0426
    1f40:	80 93 90 05 	sts	0x0590, r24
		  Datastore[12]=Pos[9];
    1f44:	80 91 27 04 	lds	r24, 0x0427
    1f48:	80 93 91 05 	sts	0x0591, r24
    1f4c:	56 c0       	rjmp	.+172    	; 0x1ffa <DebugHandlerFunc+0x212>
		  //PushEventInterface(52,1,Datastore,0);	
	}
	else if(Pos[0]==0xfd)
    1f4e:	8d 3f       	cpi	r24, 0xFD	; 253
    1f50:	99 f5       	brne	.+102    	; 0x1fb8 <DebugHandlerFunc+0x1d0>
	{
		TEMP=ReadRambytesNonCnt;
    1f52:	84 e0       	ldi	r24, 0x04	; 4
    1f54:	9e e0       	ldi	r25, 0x0E	; 14
    1f56:	9b 83       	std	Y+3, r25	; 0x03
    1f58:	8a 83       	std	Y+2, r24	; 0x02
		Datastore[0]=0;
    1f5a:	10 92 85 05 	sts	0x0585, r1
		Datastore[1]=1;
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	90 93 86 05 	sts	0x0586, r25
		Datastore[2]=((uint8_t*)(&TEMP))[0];
    1f64:	80 93 87 05 	sts	0x0587, r24
		Datastore[3]=((uint8_t*)(&TEMP))[1];
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	80 93 88 05 	sts	0x0588, r24
		Datastore[4]=Pos[2];
    1f6e:	80 91 20 04 	lds	r24, 0x0420
    1f72:	80 93 89 05 	sts	0x0589, r24
		Datastore[5]=Pos[1];
    1f76:	80 91 1f 04 	lds	r24, 0x041F
    1f7a:	80 93 8a 05 	sts	0x058A, r24
		Datastore[6]=Pos[4];
    1f7e:	80 91 22 04 	lds	r24, 0x0422
    1f82:	80 93 8b 05 	sts	0x058B, r24
		Datastore[7]=Pos[3];
    1f86:	80 91 21 04 	lds	r24, 0x0421
    1f8a:	80 93 8c 05 	sts	0x058C, r24
		Datastore[8]=Pos[6];
    1f8e:	80 91 24 04 	lds	r24, 0x0424
    1f92:	80 93 8d 05 	sts	0x058D, r24
		Datastore[9]=Pos[5];
    1f96:	80 91 23 04 	lds	r24, 0x0423
    1f9a:	80 93 8e 05 	sts	0x058E, r24
	    Datastore[10]=Pos[8];
    1f9e:	80 91 26 04 	lds	r24, 0x0426
    1fa2:	80 93 8f 05 	sts	0x058F, r24
	    Datastore[11]=Pos[7];
    1fa6:	80 91 25 04 	lds	r24, 0x0425
    1faa:	80 93 90 05 	sts	0x0590, r24
	    Datastore[12]=Pos[9];
    1fae:	80 91 27 04 	lds	r24, 0x0427
    1fb2:	80 93 91 05 	sts	0x0591, r24
    1fb6:	21 c0       	rjmp	.+66     	; 0x1ffa <DebugHandlerFunc+0x212>
		
	}
	else if(Pos[0]==0xbd)
    1fb8:	8d 3b       	cpi	r24, 0xBD	; 189
    1fba:	f9 f4       	brne	.+62     	; 0x1ffa <DebugHandlerFunc+0x212>
	{
		TEMP=ReadRambyte;
        Datastore[0]=0;
    1fbc:	10 92 85 05 	sts	0x0585, r1
        Datastore[1]=1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 86 05 	sts	0x0586, r24
        Datastore[2]=((uint8_t*)(&TEMP))[0];
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	80 93 87 05 	sts	0x0587, r24
        Datastore[3]=((uint8_t*)(&TEMP))[1];
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	80 93 88 05 	sts	0x0588, r24
        Datastore[4]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[0];
    1fd2:	e0 91 1f 04 	lds	r30, 0x041F
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	e5 56       	subi	r30, 0x65	; 101
    1fe2:	fa 4f       	sbci	r31, 0xFA	; 250
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 93 89 05 	sts	0x0589, r24
        Datastore[5]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[1];
    1fea:	81 81       	ldd	r24, Z+1	; 0x01
    1fec:	80 93 8a 05 	sts	0x058A, r24
        Datastore[6]=VariableManager_t[Pos[1]].VariableSize;
    1ff0:	83 81       	ldd	r24, Z+3	; 0x03
    1ff2:	80 93 8b 05 	sts	0x058B, r24
        Datastore[12]=VariableManager_t[Pos[1]].VariableSize;
    1ff6:	80 93 91 05 	sts	0x0591, r24
	}
	if(data=='!')
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	81 32       	cpi	r24, 0x21	; 33
    1ffe:	89 f4       	brne	.+34     	; 0x2022 <DebugHandlerFunc+0x23a>
	{
	  argp1=(argp *)(((uint16_t*)(Pos+11))[0]);
    2000:	60 91 29 04 	lds	r22, 0x0429
    2004:	70 91 2a 04 	lds	r23, 0x042A
    2008:	70 93 9a 05 	sts	0x059A, r23
    200c:	60 93 99 05 	sts	0x0599, r22
	  PushEventInterface(201,argp1,Datastore,0);
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	45 e8       	ldi	r20, 0x85	; 133
    2016:	55 e0       	ldi	r21, 0x05	; 5
    2018:	89 ec       	ldi	r24, 0xC9	; 201
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <DebugHandlerFunc+0x24e>
	}
	else
	{
	  PushEventInterface(52,1,Datastore,0);
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	45 e8       	ldi	r20, 0x85	; 133
    2028:	55 e0       	ldi	r21, 0x05	; 5
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	84 e3       	ldi	r24, 0x34	; 52
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
	}
	return 0;
}
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	08 95       	ret

00002052 <OutPutVariableRegister>:
	return 0;	
}

uint8_t OutPutVariableRegister(uint16_t Outadd,uint8_t Varsize,uint8_t Varid)
{
	VariableManager_t[Varid].VariableAdd=Outadd;
    2052:	e4 2f       	mov	r30, r20
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	e5 56       	subi	r30, 0x65	; 101
    2060:	fa 4f       	sbci	r31, 0xFA	; 250
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
	VariableManager_t[Varid].VariableId=Varid;
    2066:	42 83       	std	Z+2, r20	; 0x02
	VariableManager_t[Varid].VariableSize=Varsize;
    2068:	63 83       	std	Z+3, r22	; 0x03
    206a:	08 95       	ret

0000206c <Nvm_TableInit>:
 *  Author: Nikhil
 */ 
#include "EepromStructure.h"
void Nvm_TableInit()
{
	Nvm_Table_t[0].Id=0;
    206c:	10 92 0d 05 	sts	0x050D, r1
	Nvm_Table_t[0].Nvm_Size=sizeof(Nvm_T_Ping);
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	80 93 0e 05 	sts	0x050E, r24
	Nvm_Table_t[1].Id=1;
    2076:	80 93 0f 05 	sts	0x050F, r24
	Nvm_Table_t[1].Nvm_Size=sizeof(Nvm_T_OH);
    207a:	94 e0       	ldi	r25, 0x04	; 4
    207c:	90 93 10 05 	sts	0x0510, r25
	Nvm_Table_t[2].Id=5;
    2080:	95 e0       	ldi	r25, 0x05	; 5
    2082:	90 93 11 05 	sts	0x0511, r25
	Nvm_Table_t[2].Nvm_Size=sizeof(Nvm_T_TankOverflow);
    2086:	80 93 12 05 	sts	0x0512, r24
    208a:	08 95       	ret

0000208c <WriteMax>:
 */ 
#include "MaxDisp.h"
#include "..\BaseLayer\SPI.h"
#include "..\BaseLayer\pinout.h"
void WriteMax(uint8_t address,uint8_t data)
{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	d8 2f       	mov	r29, r24
    2092:	c6 2f       	mov	r28, r22
	PinOutput(OFF,PIN_OUT2,B);
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	61 e0       	ldi	r22, 0x01	; 1
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	spi_tranceiver(address);
    209e:	8d 2f       	mov	r24, r29
    20a0:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	spi_tranceiver(data);
    20a4:	8c 2f       	mov	r24, r28
    20a6:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	PinOutput(ON,PIN_OUT2,B);
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
}
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <InitMax>:
void InitMax()
{
	 PinOutput(OFF,PIN_OUT2,B);
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 spi_init_master();
    20c4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <spi_init_master>
	 spi_dataorder(0);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <spi_dataorder>
	 spi_clockspeed(Divby0);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <spi_clockspeed>
	 spi_clockphase(2);
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	0e 94 17 09 	call	0x122e	; 0x122e <spi_clockphase>
	 PinOutput(OFF,PIN_OUT2,B);
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 spi_tranceiver(DECODEMODE);
    20e4:	89 e0       	ldi	r24, 0x09	; 9
    20e6:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 spi_tranceiver(0xFF);
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 spi_tranceiver(SCANLIMIT);
    2104:	8b e0       	ldi	r24, 0x0B	; 11
    2106:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 spi_tranceiver(0x01);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 spi_tranceiver(POWERON);
    2124:	8c e0       	ldi	r24, 0x0C	; 12
    2126:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 spi_tranceiver(0x01);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 spi_tranceiver(INTENSITY);
    2144:	8a e0       	ldi	r24, 0x0A	; 10
    2146:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 spi_tranceiver(0x03);
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 spi_tranceiver(0x07);
    2164:	87 e0       	ldi	r24, 0x07	; 7
    2166:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 spi_tranceiver(0x03);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
    2184:	08 95       	ret

00002186 <ScanlimitExpand>:
}

void ScanlimitExpand(uint8_t num)
{
    2186:	cf 93       	push	r28
    2188:	c8 2f       	mov	r28, r24

	PinOutput(OFF,PIN_OUT2,B);
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
	spi_tranceiver(SCANLIMIT);
    2194:	8b e0       	ldi	r24, 0x0B	; 11
    2196:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	spi_tranceiver(num);
    219a:	8c 2f       	mov	r24, r28
    219c:	0e 94 1b 09 	call	0x1236	; 0x1236 <spi_tranceiver>
	PinOutput(ON,PIN_OUT2,B);	
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
}
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <DispDigits>:

void DispDigits(uint16_t num)
{
    21ae:	ff 92       	push	r15
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	ec 01       	movw	r28, r24
		WriteMax(Digit5,0x0f);
    21ba:	6f e0       	ldi	r22, 0x0F	; 15
    21bc:	85 e0       	ldi	r24, 0x05	; 5
    21be:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		WriteMax(Digit4,0x0f);
    21c2:	6f e0       	ldi	r22, 0x0F	; 15
    21c4:	84 e0       	ldi	r24, 0x04	; 4
    21c6:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		WriteMax(Digit3,0x0f);
    21ca:	6f e0       	ldi	r22, 0x0F	; 15
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		WriteMax(Digit2,0x0f);
    21d2:	6f e0       	ldi	r22, 0x0F	; 15
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		uint8_t count=0,digit=0;
		while (num)
    21da:	20 97       	sbiw	r28, 0x00	; 0
    21dc:	19 f1       	breq	.+70     	; 0x2224 <DispDigits+0x76>
{
		WriteMax(Digit5,0x0f);
		WriteMax(Digit4,0x0f);
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
    21de:	f1 2c       	mov	r15, r1
		while (num)
		{
			digit=num%10;
			WriteMax(count+1,digit);
    21e0:	f3 94       	inc	r15
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
		while (num)
		{
			digit=num%10;
    21e2:	9e 01       	movw	r18, r28
    21e4:	ad ec       	ldi	r26, 0xCD	; 205
    21e6:	bc ec       	ldi	r27, 0xCC	; 204
    21e8:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    21ec:	8c 01       	movw	r16, r24
    21ee:	16 95       	lsr	r17
    21f0:	07 95       	ror	r16
    21f2:	16 95       	lsr	r17
    21f4:	07 95       	ror	r16
    21f6:	16 95       	lsr	r17
    21f8:	07 95       	ror	r16
    21fa:	a8 01       	movw	r20, r16
    21fc:	44 0f       	add	r20, r20
    21fe:	55 1f       	adc	r21, r21
    2200:	98 01       	movw	r18, r16
    2202:	22 0f       	add	r18, r18
    2204:	33 1f       	adc	r19, r19
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	24 0f       	add	r18, r20
    2210:	35 1f       	adc	r19, r21
    2212:	be 01       	movw	r22, r28
    2214:	62 1b       	sub	r22, r18
    2216:	73 0b       	sbc	r23, r19
			WriteMax(count+1,digit);
    2218:	8f 2d       	mov	r24, r15
    221a:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
			num=num/10;
    221e:	e8 01       	movw	r28, r16
		WriteMax(Digit5,0x0f);
		WriteMax(Digit4,0x0f);
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
		while (num)
    2220:	20 97       	sbiw	r28, 0x00	; 0
    2222:	f1 f6       	brne	.-68     	; 0x21e0 <DispDigits+0x32>
		{
			count=count-1;
		}
		
	//ScanlimitExpand(count);
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	08 95       	ret

00002230 <DispChar>:

void DispChar(uint16_t num,uint8_t MaxDispPos)
{
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	d8 2f       	mov	r29, r24
    2236:	c6 2f       	mov	r28, r22
	static uint8_t count,DigitScrollPos,Digitpos;
	static Digits d[4]={Digit8,Digit7,Digit6,Digit5};
	//static uint8_t Dispval dis[4]={13,num,5,8};
	count++;
    2238:	90 91 2a 04 	lds	r25, 0x042A
    223c:	9f 5f       	subi	r25, 0xFF	; 255
    223e:	90 93 2a 04 	sts	0x042A, r25
	if(count>100)
    2242:	95 36       	cpi	r25, 0x65	; 101
    2244:	08 f4       	brcc	.+2      	; 0x2248 <DispChar+0x18>
    2246:	5d c0       	rjmp	.+186    	; 0x2302 <DispChar+0xd2>
	{
		if(DigitScrollPos<4)
    2248:	90 91 2b 04 	lds	r25, 0x042B
    224c:	94 30       	cpi	r25, 0x04	; 4
    224e:	08 f0       	brcs	.+2      	; 0x2252 <DispChar+0x22>
    2250:	54 c0       	rjmp	.+168    	; 0x22fa <DispChar+0xca>
		{
        if(DigitScrollPos==3)
    2252:	93 30       	cpi	r25, 0x03	; 3
    2254:	81 f4       	brne	.+32     	; 0x2276 <DispChar+0x46>
		{
	 	WriteMax(d[0],num);
    2256:	68 2f       	mov	r22, r24
    2258:	88 e0       	ldi	r24, 0x08	; 8
    225a:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
	 	WriteMax(d[1],5);		
    225e:	65 e0       	ldi	r22, 0x05	; 5
    2260:	87 e0       	ldi	r24, 0x07	; 7
    2262:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
	 	WriteMax(d[2],8);
    2266:	68 e0       	ldi	r22, 0x08	; 8
    2268:	86 e0       	ldi	r24, 0x06	; 6
    226a:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		WriteMax(d[3],0x0f);
    226e:	6f e0       	ldi	r22, 0x0F	; 15
    2270:	85 e0       	ldi	r24, 0x05	; 5
    2272:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		}
		        if(DigitScrollPos==0)
    2276:	80 91 2b 04 	lds	r24, 0x042B
    227a:	81 11       	cpse	r24, r1
    227c:	10 c0       	rjmp	.+32     	; 0x229e <DispChar+0x6e>
		        {
			        WriteMax(d[1],num);
    227e:	6d 2f       	mov	r22, r29
    2280:	87 e0       	ldi	r24, 0x07	; 7
    2282:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
			        WriteMax(d[2],5);
    2286:	65 e0       	ldi	r22, 0x05	; 5
    2288:	86 e0       	ldi	r24, 0x06	; 6
    228a:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
			        WriteMax(d[3],8);
    228e:	68 e0       	ldi	r22, 0x08	; 8
    2290:	85 e0       	ldi	r24, 0x05	; 5
    2292:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
			        WriteMax(d[0],0x0f);
    2296:	6f e0       	ldi	r22, 0x0F	; 15
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
		        }
				        if(DigitScrollPos==1)
    229e:	80 91 2b 04 	lds	r24, 0x042B
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	81 f4       	brne	.+32     	; 0x22c6 <DispChar+0x96>
				        {
					        WriteMax(d[2],num);
    22a6:	6d 2f       	mov	r22, r29
    22a8:	86 e0       	ldi	r24, 0x06	; 6
    22aa:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
					        WriteMax(d[3],5);
    22ae:	65 e0       	ldi	r22, 0x05	; 5
    22b0:	85 e0       	ldi	r24, 0x05	; 5
    22b2:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
					        WriteMax(d[0],8);
    22b6:	68 e0       	ldi	r22, 0x08	; 8
    22b8:	88 e0       	ldi	r24, 0x08	; 8
    22ba:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
					        WriteMax(d[1],0x0f);
    22be:	6f e0       	ldi	r22, 0x0F	; 15
    22c0:	87 e0       	ldi	r24, 0x07	; 7
    22c2:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
				        }
						        if(DigitScrollPos==2)
    22c6:	80 91 2b 04 	lds	r24, 0x042B
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	81 f4       	brne	.+32     	; 0x22ee <DispChar+0xbe>
						        {
							        WriteMax(d[3],num);
    22ce:	6d 2f       	mov	r22, r29
    22d0:	85 e0       	ldi	r24, 0x05	; 5
    22d2:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
							        WriteMax(d[0],5);
    22d6:	65 e0       	ldi	r22, 0x05	; 5
    22d8:	88 e0       	ldi	r24, 0x08	; 8
    22da:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
							        WriteMax(d[1],8);
    22de:	68 e0       	ldi	r22, 0x08	; 8
    22e0:	87 e0       	ldi	r24, 0x07	; 7
    22e2:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
							        WriteMax(d[2],0x0f);
    22e6:	6f e0       	ldi	r22, 0x0F	; 15
    22e8:	86 e0       	ldi	r24, 0x06	; 6
    22ea:	0e 94 46 10 	call	0x208c	; 0x208c <WriteMax>
						        }
		 DigitScrollPos++;
    22ee:	80 91 2b 04 	lds	r24, 0x042B
    22f2:	8f 5f       	subi	r24, 0xFF	; 255
    22f4:	80 93 2b 04 	sts	0x042B, r24
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <DispChar+0xce>
		}
		else
		{
			DigitScrollPos=0;
    22fa:	10 92 2b 04 	sts	0x042B, r1
		}
		count=0;
    22fe:	10 92 2a 04 	sts	0x042A, r1
	}


	ScanlimitExpand(MaxDispPos);
    2302:	8c 2f       	mov	r24, r28
    2304:	0e 94 c3 10 	call	0x2186	; 0x2186 <ScanlimitExpand>
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	08 95       	ret

0000230e <SignalHandlerFunc>:
 *  Author: Nikhil
 */ 
#include "..\OS\EventQ.h"
static uint16_t SignalData[5];
uint16_t SignalHandlerFunc(void *data)
{
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	ec 01       	movw	r28, r24
	uint8_t *ptr=(uint8_t*)data;
	uint16_t reval;
	if(ptr[0]==0)
    2314:	28 81       	ld	r18, Y
    2316:	21 11       	cpse	r18, r1
    2318:	21 c0       	rjmp	.+66     	; 0x235c <SignalHandlerFunc+0x4e>
	{
		
		if(((uint8_t*)&SignalData[ptr[1]])[1]==2)
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	fc 01       	movw	r30, r24
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	e4 5d       	subi	r30, 0xD4	; 212
    2326:	fb 4f       	sbci	r31, 0xFB	; 251
    2328:	21 81       	ldd	r18, Z+1	; 0x01
    232a:	22 30       	cpi	r18, 0x02	; 2
    232c:	21 f4       	brne	.+8      	; 0x2336 <SignalHandlerFunc+0x28>
		{
			reval= SignalData[ptr[1]];
    232e:	40 81       	ld	r20, Z
    2330:	32 2f       	mov	r19, r18
			((uint8_t*)&SignalData[ptr[1]])[1]=0;
    2332:	11 82       	std	Z+1, r1	; 0x01
    2334:	25 c0       	rjmp	.+74     	; 0x2380 <SignalHandlerFunc+0x72>
		}
		else 
		{
			PushEventInterface(50,SignalHandlerFunc,0,ptr[2]);
    2336:	2a 81       	ldd	r18, Y+2	; 0x02
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	67 e8       	ldi	r22, 0x87	; 135
    233e:	71 e1       	ldi	r23, 0x11	; 17
    2340:	82 e3       	ldi	r24, 0x32	; 50
    2342:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
			reval= SignalData[ptr[1]];
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	e4 5d       	subi	r30, 0xD4	; 212
    2350:	fb 4f       	sbci	r31, 0xFB	; 251
    2352:	40 81       	ld	r20, Z
    2354:	31 81       	ldd	r19, Z+1	; 0x01
			((uint8_t*)&SignalData[ptr[1]])[1]=1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	81 83       	std	Z+1, r24	; 0x01
    235a:	12 c0       	rjmp	.+36     	; 0x2380 <SignalHandlerFunc+0x72>
		}
	}
	else if(ptr[0]==1)
    235c:	21 30       	cpi	r18, 0x01	; 1
    235e:	81 f4       	brne	.+32     	; 0x2380 <SignalHandlerFunc+0x72>
	{
		((uint8_t*)&SignalData[ptr[1]])[0]=ptr[2];
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	e4 5d       	subi	r30, 0xD4	; 212
    236c:	fb 4f       	sbci	r31, 0xFB	; 251
    236e:	80 83       	st	Z, r24
		((uint8_t*)&SignalData[ptr[1]])[1]=2;
    2370:	e9 81       	ldd	r30, Y+1	; 0x01
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	e4 5d       	subi	r30, 0xD4	; 212
    237a:	fb 4f       	sbci	r31, 0xFB	; 251
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	81 83       	std	Z+1, r24	; 0x01
		//uart_string("here");
	}
	
	return reval;
    2380:	84 2f       	mov	r24, r20
    2382:	93 2f       	mov	r25, r19
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <PushIntoSSDCircularBuffer>:
	y                      \
};

circularbuffSSD(CircularBufferSSD,21);                    
CbuffState_t PushIntoSSDCircularBuffer(SSDbuff_t* CircularBuffer,SSDdata data)
{
    238a:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	28 2f       	mov	r18, r24
    2390:	2f 5f       	subi	r18, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    2392:	94 81       	ldd	r25, Z+4	; 0x04
    2394:	29 17       	cp	r18, r25
    2396:	08 f0       	brcs	.+2      	; 0x239a <PushIntoSSDCircularBuffer+0x10>
	{
		next=0;
    2398:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	92 17       	cp	r25, r18
    239e:	81 f0       	breq	.+32     	; 0x23c0 <PushIntoSSDCircularBuffer+0x36>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	dc 01       	movw	r26, r24
    23a4:	aa 0f       	add	r26, r26
    23a6:	bb 1f       	adc	r27, r27
    23a8:	8a 0f       	add	r24, r26
    23aa:	9b 1f       	adc	r25, r27
    23ac:	a0 81       	ld	r26, Z
    23ae:	b1 81       	ldd	r27, Z+1	; 0x01
    23b0:	a8 0f       	add	r26, r24
    23b2:	b9 1f       	adc	r27, r25
    23b4:	4d 93       	st	X+, r20
    23b6:	5d 93       	st	X+, r21
    23b8:	6c 93       	st	X, r22
		CircularBuffer->head=next;
    23ba:	22 83       	std	Z+2, r18	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
    23c0:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
    23c2:	08 95       	ret

000023c4 <PopFromSSDCircularBuffer>:

CbuffState_t PopFromSSDCircularBuffer(SSDbuff_t  *CircularBuffer,SSDdata *data)
{
    23c4:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
    23c6:	83 81       	ldd	r24, Z+3	; 0x03
    23c8:	58 2f       	mov	r21, r24
    23ca:	5f 5f       	subi	r21, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    23cc:	92 81       	ldd	r25, Z+2	; 0x02
    23ce:	89 17       	cp	r24, r25
    23d0:	c1 f0       	breq	.+48     	; 0x2402 <PopFromSSDCircularBuffer+0x3e>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    23d2:	94 81       	ldd	r25, Z+4	; 0x04
    23d4:	59 17       	cp	r21, r25
    23d6:	08 f0       	brcs	.+2      	; 0x23da <PopFromSSDCircularBuffer+0x16>
	{
		next=0;
    23d8:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	dc 01       	movw	r26, r24
    23de:	aa 0f       	add	r26, r26
    23e0:	bb 1f       	adc	r27, r27
    23e2:	8a 0f       	add	r24, r26
    23e4:	9b 1f       	adc	r25, r27
    23e6:	a0 81       	ld	r26, Z
    23e8:	b1 81       	ldd	r27, Z+1	; 0x01
    23ea:	a8 0f       	add	r26, r24
    23ec:	b9 1f       	adc	r27, r25
    23ee:	2d 91       	ld	r18, X+
    23f0:	3d 91       	ld	r19, X+
    23f2:	4c 91       	ld	r20, X
    23f4:	db 01       	movw	r26, r22
    23f6:	2d 93       	st	X+, r18
    23f8:	3d 93       	st	X+, r19
    23fa:	4c 93       	st	X, r20
	CircularBuffer->tail=next;
    23fc:	53 83       	std	Z+3, r21	; 0x03
	
	return BuffOk;
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	08 95       	ret
CbuffState_t PopFromSSDCircularBuffer(SSDbuff_t  *CircularBuffer,SSDdata *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
    2402:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	
	return BuffOk;
}
    2404:	08 95       	ret

00002406 <PopulateSSDbuffer>:
	}
	return BuffOk;
}

uint8_t PopulateSSDbuffer(unsigned char* SSDstring,uint8_t x,uint8_t y)
{
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
	SSDdata SSDdataMediator;
	uint8_t SSDlen;
	SSDlen=strlen(SSDstring)-1;
	SSDdataMediator.SSDx=x;
    240c:	56 2f       	mov	r21, r22
	SSDdataMediator.SSDy=y;
    240e:	64 2f       	mov	r22, r20

	while(*SSDstring)	
    2410:	fc 01       	movw	r30, r24
    2412:	40 81       	ld	r20, Z
    2414:	44 23       	and	r20, r20
    2416:	61 f0       	breq	.+24     	; 0x2430 <PopulateSSDbuffer+0x2a>
		return BuffEmpty;
	}
	return BuffOk;
}

uint8_t PopulateSSDbuffer(unsigned char* SSDstring,uint8_t x,uint8_t y)
    2418:	ec 01       	movw	r28, r24
    241a:	21 96       	adiw	r28, 0x01	; 1
	while(*SSDstring)	
	{
		//uart_char(*SSDstring);
		SSDdataMediator.SSDchar=*SSDstring++;
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
		SSDdataMediator.SSDx=0;
    241c:	10 e0       	ldi	r17, 0x00	; 0

	while(*SSDstring)	
	{
		//uart_char(*SSDstring);
		SSDdataMediator.SSDchar=*SSDstring++;
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
    241e:	8f e5       	ldi	r24, 0x5F	; 95
    2420:	92 e0       	ldi	r25, 0x02	; 2
    2422:	0e 94 c5 11 	call	0x238a	; 0x238a <PushIntoSSDCircularBuffer>
		SSDdataMediator.SSDx=0;
    2426:	51 2f       	mov	r21, r17
		SSDdataMediator.SSDy=0;
    2428:	61 2f       	mov	r22, r17
	uint8_t SSDlen;
	SSDlen=strlen(SSDstring)-1;
	SSDdataMediator.SSDx=x;
	SSDdataMediator.SSDy=y;

	while(*SSDstring)	
    242a:	49 91       	ld	r20, Y+
    242c:	41 11       	cpse	r20, r1
    242e:	f7 cf       	rjmp	.-18     	; 0x241e <PopulateSSDbuffer+0x18>
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
		SSDdataMediator.SSDx=0;
		SSDdataMediator.SSDy=0;
	}
	return 1;
}
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	08 95       	ret

0000243a <PopulateSSDbufferChar>:
uint8_t PopulateSSDbufferChar(unsigned char SSDChar,uint8_t x,uint8_t y)
{
    243a:	56 2f       	mov	r21, r22
    243c:	64 2f       	mov	r22, r20
	SSDdata SSDdataMediator;
	SSDdataMediator.SSDx=x;
	SSDdataMediator.SSDy=y;
	SSDdataMediator.SSDchar=SSDChar;	
	PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
    243e:	48 2f       	mov	r20, r24
    2440:	8f e5       	ldi	r24, 0x5F	; 95
    2442:	92 e0       	ldi	r25, 0x02	; 2
    2444:	0e 94 c5 11 	call	0x238a	; 0x238a <PushIntoSSDCircularBuffer>
	return 1;
}
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	08 95       	ret

0000244c <PopSSDinterface>:
CbuffState_t PopSSDinterface(SSDdata *SSDdataPara)
{
	return (PopFromSSDCircularBuffer(&CircularBufferSSD,SSDdataPara));
    244c:	bc 01       	movw	r22, r24
    244e:	8f e5       	ldi	r24, 0x5F	; 95
    2450:	92 e0       	ldi	r25, 0x02	; 2
    2452:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <PopFromSSDCircularBuffer>
}
    2456:	08 95       	ret

00002458 <DataTransmit>:

circularbuffOut(CircularBufferOut,100);
void DataTransmit()
{
	static unsigned char data='&';
	if(CheckUartReadyToSend()==0 && PopFromCircularBuffer(&CircularBufferOut,&data)==BuffOk)
    2458:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <CheckUartReadyToSend>
    245c:	81 11       	cpse	r24, r1
    245e:	0c c0       	rjmp	.+24     	; 0x2478 <DataTransmit+0x20>
    2460:	69 e6       	ldi	r22, 0x69	; 105
    2462:	72 e0       	ldi	r23, 0x02	; 2
    2464:	84 e6       	ldi	r24, 0x64	; 100
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	0e 94 b3 05 	call	0xb66	; 0xb66 <PopFromCircularBuffer>
    246c:	81 11       	cpse	r24, r1
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <DataTransmit+0x20>
	{    

			//UDR=data;
		SendByte(data);
    2470:	80 91 69 02 	lds	r24, 0x0269
    2474:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <SendByte>
    2478:	08 95       	ret

0000247a <FillUartBuffer>:
	}

}

void FillUartBuffer(unsigned char *Uchar)
{
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
	
	while(*Uchar)
    247e:	fc 01       	movw	r30, r24
    2480:	60 81       	ld	r22, Z
    2482:	66 23       	and	r22, r22
    2484:	49 f0       	breq	.+18     	; 0x2498 <FillUartBuffer+0x1e>

	}

}

void FillUartBuffer(unsigned char *Uchar)
    2486:	ec 01       	movw	r28, r24
    2488:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*Uchar)
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
    248a:	84 e6       	ldi	r24, 0x64	; 100
    248c:	92 e0       	ldi	r25, 0x02	; 2
    248e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <PushIntoCircularBuffer>
}

void FillUartBuffer(unsigned char *Uchar)
{
	
	while(*Uchar)
    2492:	69 91       	ld	r22, Y+
    2494:	61 11       	cpse	r22, r1
    2496:	f9 cf       	rjmp	.-14     	; 0x248a <FillUartBuffer+0x10>
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
	}
	
}
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	08 95       	ret

0000249e <FillUartBufferSiglechar>:
void FillUartBufferSiglechar(char Uchar)
{
	PushIntoCircularBuffer(&CircularBufferOut,Uchar);	
    249e:	68 2f       	mov	r22, r24
    24a0:	84 e6       	ldi	r24, 0x64	; 100
    24a2:	92 e0       	ldi	r25, 0x02	; 2
    24a4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <PushIntoCircularBuffer>
    24a8:	08 95       	ret

000024aa <TransmitBufferEmpty>:
}
void TransmitBufferEmpty()
{
	if(IsBuffempty(&CircularBufferOut)==BuffOk)
    24aa:	84 e6       	ldi	r24, 0x64	; 100
    24ac:	92 e0       	ldi	r25, 0x02	; 2
    24ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <IsBuffempty>
    24b2:	81 11       	cpse	r24, r1
    24b4:	08 c0       	rjmp	.+16     	; 0x24c6 <TransmitBufferEmpty+0x1c>
	{

		PushEventInterface(3,DataTransmit,0,0);
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	6c e2       	ldi	r22, 0x2C	; 44
    24be:	72 e1       	ldi	r23, 0x12	; 18
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    24c6:	08 95       	ret

000024c8 <create>:
circularbuffevent(CircularBufferEvent,15);
//
/* Create an empty queue */
void create()
{
front = rear = NULL;
    24c8:	10 92 9b 04 	sts	0x049B, r1
    24cc:	10 92 9a 04 	sts	0x049A, r1
    24d0:	10 92 9d 04 	sts	0x049D, r1
    24d4:	10 92 9c 04 	sts	0x049C, r1
    24d8:	08 95       	ret

000024da <countSize>:
}

uint8_t countSize()
{
	return count;
}
    24da:	80 91 9e 04 	lds	r24, 0x049E
    24de:	08 95       	ret

000024e0 <PushIntoCircularEventBuffer>:

ebuffState_t PushIntoCircularEventBuffer(ebuff_t* CircularBuffer,struct EventQ data)
{
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <PushIntoCircularEventBuffer+0x6>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <PushIntoCircularEventBuffer+0x8>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <PushIntoCircularEventBuffer+0xa>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	29 83       	std	Y+1, r18	; 0x01
    24f0:	3a 83       	std	Y+2, r19	; 0x02
    24f2:	4b 83       	std	Y+3, r20	; 0x03
    24f4:	5c 83       	std	Y+4, r21	; 0x04
    24f6:	6d 83       	std	Y+5, r22	; 0x05
    24f8:	7e 83       	std	Y+6, r23	; 0x06
	uint8_t next=CircularBuffer->head+1;
    24fa:	fc 01       	movw	r30, r24
    24fc:	22 81       	ldd	r18, Z+2	; 0x02
    24fe:	42 2f       	mov	r20, r18
    2500:	4f 5f       	subi	r20, 0xFF	; 255
	ebuffState_t ReturnVal=eBuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    2502:	34 81       	ldd	r19, Z+4	; 0x04
    2504:	43 17       	cp	r20, r19
    2506:	08 f0       	brcs	.+2      	; 0x250a <PushIntoCircularEventBuffer+0x2a>
	{
		next=0;
    2508:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    250a:	fc 01       	movw	r30, r24
    250c:	33 81       	ldd	r19, Z+3	; 0x03
    250e:	34 17       	cp	r19, r20
    2510:	b9 f0       	breq	.+46     	; 0x2540 <PushIntoCircularEventBuffer+0x60>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	d9 01       	movw	r26, r18
    2516:	aa 0f       	add	r26, r26
    2518:	bb 1f       	adc	r27, r27
    251a:	2a 0f       	add	r18, r26
    251c:	3b 1f       	adc	r19, r27
    251e:	22 0f       	add	r18, r18
    2520:	33 1f       	adc	r19, r19
    2522:	a0 81       	ld	r26, Z
    2524:	b1 81       	ldd	r27, Z+1	; 0x01
    2526:	a2 0f       	add	r26, r18
    2528:	b3 1f       	adc	r27, r19
    252a:	26 e0       	ldi	r18, 0x06	; 6
    252c:	fe 01       	movw	r30, r28
    252e:	31 96       	adiw	r30, 0x01	; 1
    2530:	01 90       	ld	r0, Z+
    2532:	0d 92       	st	X+, r0
    2534:	2a 95       	dec	r18
    2536:	e1 f7       	brne	.-8      	; 0x2530 <PushIntoCircularEventBuffer+0x50>
		CircularBuffer->head=next;
    2538:	fc 01       	movw	r30, r24
    253a:	42 83       	std	Z+2, r20	; 0x02
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <PushIntoCircularEventBuffer+0x62>
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return eBuffFull;
    2540:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
}
    2542:	26 96       	adiw	r28, 0x06	; 6
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <PopFromCircularEventBuffer>:

ebuffState_t PopFromCircularEventBuffer(ebuff_t  *CircularBuffer,struct EventQ *data)
{
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	ec 01       	movw	r28, r24
	//cli();
	uint8_t next=CircularBuffer->tail+1;
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	28 2f       	mov	r18, r24
    255e:	2f 5f       	subi	r18, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	89 17       	cp	r24, r25
    2564:	c9 f0       	breq	.+50     	; 0x2598 <PopFromCircularEventBuffer+0x44>
	{
		return eBuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	29 17       	cp	r18, r25
    256a:	08 f0       	brcs	.+2      	; 0x256e <PopFromCircularEventBuffer+0x1a>
	{
		next=0;
    256c:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	fc 01       	movw	r30, r24
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31
    2576:	8e 0f       	add	r24, r30
    2578:	9f 1f       	adc	r25, r31
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	e8 81       	ld	r30, Y
    2580:	f9 81       	ldd	r31, Y+1	; 0x01
    2582:	e8 0f       	add	r30, r24
    2584:	f9 1f       	adc	r31, r25
    2586:	86 e0       	ldi	r24, 0x06	; 6
    2588:	db 01       	movw	r26, r22
    258a:	01 90       	ld	r0, Z+
    258c:	0d 92       	st	X+, r0
    258e:	8a 95       	dec	r24
    2590:	e1 f7       	brne	.-8      	; 0x258a <PopFromCircularEventBuffer+0x36>
	CircularBuffer->tail=next;
    2592:	2b 83       	std	Y+3, r18	; 0x03
	//sei();
	return eBuffOk;
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	01 c0       	rjmp	.+2      	; 0x259a <PopFromCircularEventBuffer+0x46>
{
	//cli();
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return eBuffEmpty;
    2598:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	//sei();
	return eBuffOk;
}
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

000025a0 <PushEventInterface>:
	return eBuffOk;
}


void PushEventInterface(uint8_t eventid,uint16_t  (*EventFuncarg)(void),void *func,uint8_t dataid)
{
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <PushEventInterface+0x6>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <PushEventInterface+0x8>
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <PushEventInterface+0xa>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	92 2f       	mov	r25, r18
	cli();
    25b0:	f8 94       	cli
	struct EventQ data;
	data.EventFunction=EventFuncarg;
    25b2:	26 2f       	mov	r18, r22
    25b4:	69 83       	std	Y+1, r22	; 0x01
    25b6:	7a 83       	std	Y+2, r23	; 0x02
	data.EventId=eventid;
    25b8:	8c 83       	std	Y+4, r24	; 0x04
	data.ptr=func;
    25ba:	64 2f       	mov	r22, r20
    25bc:	4d 83       	std	Y+5, r20	; 0x05
    25be:	5e 83       	std	Y+6, r21	; 0x06
	data.State=dataid;
    25c0:	9b 83       	std	Y+3, r25	; 0x03
	PushIntoCircularEventBuffer(&CircularBufferEvent,data);
    25c2:	37 2f       	mov	r19, r23
    25c4:	49 2f       	mov	r20, r25
    25c6:	58 2f       	mov	r21, r24
    25c8:	7e 81       	ldd	r23, Y+6	; 0x06
    25ca:	8a e6       	ldi	r24, 0x6A	; 106
    25cc:	92 e0       	ldi	r25, 0x02	; 2
    25ce:	0e 94 70 12 	call	0x24e0	; 0x24e0 <PushIntoCircularEventBuffer>
	sei();
    25d2:	78 94       	sei
}
    25d4:	26 96       	adiw	r28, 0x06	; 6
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	08 95       	ret

000025e6 <PopEventInterface>:

ebuffState_t PopEventInterface(struct EventQ *e)
{
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <PopEventInterface+0xa>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <PopEventInterface+0xc>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <PopEventInterface+0xe>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	8c 01       	movw	r16, r24
    struct EventQ data;
	if(PopFromCircularEventBuffer(&CircularBufferEvent,&data)==eBuffOk)
    25fa:	be 01       	movw	r22, r28
    25fc:	6f 5f       	subi	r22, 0xFF	; 255
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	8a e6       	ldi	r24, 0x6A	; 106
    2602:	92 e0       	ldi	r25, 0x02	; 2
    2604:	0e 94 aa 12 	call	0x2554	; 0x2554 <PopFromCircularEventBuffer>
    2608:	81 11       	cpse	r24, r1
    260a:	0a c0       	rjmp	.+20     	; 0x2620 <PopEventInterface+0x3a>
	{
		*e=data;
    260c:	86 e0       	ldi	r24, 0x06	; 6
    260e:	fe 01       	movw	r30, r28
    2610:	31 96       	adiw	r30, 0x01	; 1
    2612:	d8 01       	movw	r26, r16
    2614:	01 90       	ld	r0, Z+
    2616:	0d 92       	st	X+, r0
    2618:	8a 95       	dec	r24
    261a:	e1 f7       	brne	.-8      	; 0x2614 <PopEventInterface+0x2e>
		return eBuffOk;
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <PopEventInterface+0x3c>
	}
	return eBuffEmpty;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	26 96       	adiw	r28, 0x06	; 6
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	08 95       	ret

00002638 <__vector_16>:


//ISR(TIMER0_COMP_vect) {
static volatile uint8_t pin_timeout=1;
static volatile uint8_t TimeCount;
ISR(TIMER0_OVF_vect){
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	8f 93       	push	r24
    2644:	9f 93       	push	r25
    2646:	af 93       	push	r26
    2648:	bf 93       	push	r27
	static uint32_t counter5ms=0;
	if(counter5ms==1)
    264a:	80 91 a0 04 	lds	r24, 0x04A0
    264e:	90 91 a1 04 	lds	r25, 0x04A1
    2652:	a0 91 a2 04 	lds	r26, 0x04A2
    2656:	b0 91 a3 04 	lds	r27, 0x04A3
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	a1 05       	cpc	r26, r1
    265e:	b1 05       	cpc	r27, r1
    2660:	69 f4       	brne	.+26     	; 0x267c <__vector_16+0x44>
	{   
		TimeCount++;
    2662:	80 91 9f 04 	lds	r24, 0x049F
    2666:	8f 5f       	subi	r24, 0xFF	; 255
    2668:	80 93 9f 04 	sts	0x049F, r24
		counter5ms=0;
    266c:	10 92 a0 04 	sts	0x04A0, r1
    2670:	10 92 a1 04 	sts	0x04A1, r1
    2674:	10 92 a2 04 	sts	0x04A2, r1
    2678:	10 92 a3 04 	sts	0x04A3, r1
		

	}
	//TCNT0=70;
	TCNT0=0;
    267c:	16 bc       	out	0x26, r1	; 38
	counter5ms++;
    267e:	80 91 a0 04 	lds	r24, 0x04A0
    2682:	90 91 a1 04 	lds	r25, 0x04A1
    2686:	a0 91 a2 04 	lds	r26, 0x04A2
    268a:	b0 91 a3 04 	lds	r27, 0x04A3
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	a1 1d       	adc	r26, r1
    2692:	b1 1d       	adc	r27, r1
    2694:	80 93 a0 04 	sts	0x04A0, r24
    2698:	90 93 a1 04 	sts	0x04A1, r25
    269c:	a0 93 a2 04 	sts	0x04A2, r26
    26a0:	b0 93 a3 04 	sts	0x04A3, r27
}
    26a4:	bf 91       	pop	r27
    26a6:	af 91       	pop	r26
    26a8:	9f 91       	pop	r25
    26aa:	8f 91       	pop	r24
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <set_timer>:
void set_timer(uint16_t enable)
{
	//PORTB|=x;
	if(enable==1)
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <set_timer+0xe>
	{
		TIMSK0|=(1<<TOIE0);
    26ba:	ee e6       	ldi	r30, 0x6E	; 110
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	81 60       	ori	r24, 0x01	; 1
    26c2:	80 83       	st	Z, r24
    26c4:	08 95       	ret

000026c6 <main>:
   // event=0;
	uint16_t tmp;
	uint16_t Limitflag=0;
	//
    
	ExtIntInit();
    26c6:	0e 94 39 06 	call	0xc72	; 0xc72 <ExtIntInit>
	//
	//
	DDRC=0x00;
    26ca:	17 b8       	out	0x07, r1	; 7
	//PinOutConfig(PIN_OUT1);
	DDRD=0b11111011;					// set pd2 as input for int
    26cc:	8b ef       	ldi	r24, 0xFB	; 251
    26ce:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PIND2);	
    26d0:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PIND3);				// Port C lower nibble initialization as high (Pull-up mode)
    26d2:	5b 9a       	sbi	0x0b, 3	; 11
	//uart_string("I am working.");
	sei();
    26d4:	78 94       	sei
	// enable timer overflow interrupt for Timer0
	TIMSK0|=(1<<TOIE0);
    26d6:	ee e6       	ldi	r30, 0x6E	; 110
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	81 60       	ori	r24, 0x01	; 1
    26de:	80 83       	st	Z, r24
	// set timer0 counter initial value to 0
	TCNT0=70;//255-(clock_freq/1000000);
    26e0:	86 e4       	ldi	r24, 0x46	; 70
    26e2:	86 bd       	out	0x26, r24	; 38
	// start timer0 with / prescaler 78 Hz
	TCCR0B = (1<<CS01)|(1<<CS00);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	85 bd       	out	0x25, r24	; 37

uart_init();
    26e8:	0e 94 25 0b 	call	0x164a	; 0x164a <uart_init>
	adc_init();				//initialization of UART
    26ec:	0e 94 57 05 	call	0xaae	; 0xaae <adc_init>
	create();
    26f0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <create>
    uart_string("working");
    26f4:	81 e1       	ldi	r24, 0x11	; 17
    26f6:	93 e0       	ldi	r25, 0x03	; 3
    26f8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <uart_string>
	// enable interrupts
	//sei();
	//pin
	set_timer(1);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <set_timer>
	//uart_string(testev2->ptr);
	//AddEvent((uint8_t *)str,0);
	//AddEvent((uint8_t *)str,1);
	//AddEvent((uint8_t *)str1,2);
	//PrintEvents();
								e.EventId=1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	80 93 5f 06 	sts	0x065F, r24
								e.EventFunction=tasks;
    270a:	85 e8       	ldi	r24, 0x85	; 133
    270c:	9a e1       	ldi	r25, 0x1A	; 26
    270e:	90 93 5d 06 	sts	0x065D, r25
    2712:	80 93 5c 06 	sts	0x065C, r24
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
	   {
		   if(e.EventFunction!=0)
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    2716:	cf e5       	ldi	r28, 0x5F	; 95
    2718:	d6 e0       	ldi	r29, 0x06	; 6
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
				  if(e.EventId==52)
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    271a:	00 e6       	ldi	r16, 0x60	; 96
    271c:	16 e0       	ldi	r17, 0x06	; 6
	//PrintEvents();
								e.EventId=1;
								e.EventFunction=tasks;
	while(1)
	{
		if(TimeCount==1)
    271e:	80 91 9f 04 	lds	r24, 0x049F
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	b9 f4       	brne	.+46     	; 0x2754 <main+0x8e>
		{
			static uint8_t odd=1;
			odd++;
    2726:	80 91 6f 02 	lds	r24, 0x026F
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	80 93 6f 02 	sts	0x026F, r24
		   PushEventInterface(1,tasks,0,0);
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	65 e8       	ldi	r22, 0x85	; 133
    2738:	7a e1       	ldi	r23, 0x1A	; 26
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
		   PushEventInterface(2,NonPeriodicTaskFuncCall,0,0);
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	61 ee       	ldi	r22, 0xE1	; 225
    2748:	7a e1       	ldi	r23, 0x1A	; 26
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
           TimeCount=0;
    2750:	10 92 9f 04 	sts	0x049F, r1
		}
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
    2754:	8c e5       	ldi	r24, 0x5C	; 92
    2756:	96 e0       	ldi	r25, 0x06	; 6
    2758:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <PopEventInterface>
    275c:	81 11       	cpse	r24, r1
    275e:	3f c0       	rjmp	.+126    	; 0x27de <main+0x118>
	   {
		   if(e.EventFunction!=0)
    2760:	60 91 5c 06 	lds	r22, 0x065C
    2764:	70 91 5d 06 	lds	r23, 0x065D
    2768:	61 15       	cp	r22, r1
    276a:	71 05       	cpc	r23, r1
    276c:	c1 f1       	breq	.+112    	; 0x27de <main+0x118>
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    276e:	98 81       	ld	r25, Y
    2770:	89 2f       	mov	r24, r25
    2772:	8d 57       	subi	r24, 0x7D	; 125
    2774:	8b 34       	cpi	r24, 0x4B	; 75
    2776:	80 f4       	brcc	.+32     	; 0x2798 <main+0xd2>
		   {
			   if(e.EventId<175)
    2778:	9f 3a       	cpi	r25, 0xAF	; 175
    277a:	48 f4       	brcc	.+18     	; 0x278e <main+0xc8>
			   {
			   callbackgetFunction(e.EventId-125)(e.EventFunction);		
    277c:	0e 94 07 14 	call	0x280e	; 0x280e <callbackgetFunction>
    2780:	fc 01       	movw	r30, r24
    2782:	80 91 5c 06 	lds	r24, 0x065C
    2786:	90 91 5d 06 	lds	r25, 0x065D
    278a:	09 95       	icall
    278c:	28 c0       	rjmp	.+80     	; 0x27de <main+0x118>
			   }
			   else
			   {
				 callbackSetFunction(e.EventId-173,e.EventFunction);  
    278e:	89 2f       	mov	r24, r25
    2790:	8d 5a       	subi	r24, 0xAD	; 173
    2792:	0e 94 fe 13 	call	0x27fc	; 0x27fc <callbackSetFunction>
    2796:	23 c0       	rjmp	.+70     	; 0x27de <main+0x118>
			   }
		   }
		   else
		   {
			   if(e.EventId>=200)
    2798:	98 3c       	cpi	r25, 0xC8	; 200
    279a:	30 f0       	brcs	.+12     	; 0x27a8 <main+0xe2>
			   {
				  e.EventFunction(e.ptr); 
    279c:	d8 01       	movw	r26, r16
    279e:	8d 91       	ld	r24, X+
    27a0:	9c 91       	ld	r25, X
    27a2:	fb 01       	movw	r30, r22
    27a4:	09 95       	icall
    27a6:	1b c0       	rjmp	.+54     	; 0x27de <main+0x118>
			   }
			   else if(e.EventId>=50 && e.EventId<125)
    27a8:	89 2f       	mov	r24, r25
    27aa:	82 53       	subi	r24, 0x32	; 50
    27ac:	8b 34       	cpi	r24, 0x4B	; 75
    27ae:	98 f4       	brcc	.+38     	; 0x27d6 <main+0x110>
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
    27b0:	8f 5f       	subi	r24, 0xFF	; 255
    27b2:	0e 94 07 14 	call	0x280e	; 0x280e <callbackgetFunction>
    27b6:	fc 01       	movw	r30, r24
    27b8:	8e e5       	ldi	r24, 0x5E	; 94
    27ba:	96 e0       	ldi	r25, 0x06	; 6
    27bc:	09 95       	icall
				  if(e.EventId==52)
    27be:	88 81       	ld	r24, Y
    27c0:	84 33       	cpi	r24, 0x34	; 52
    27c2:	69 f4       	brne	.+26     	; 0x27de <main+0x118>
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    27c4:	83 e0       	ldi	r24, 0x03	; 3
    27c6:	0e 94 07 14 	call	0x280e	; 0x280e <callbackgetFunction>
    27ca:	fc 01       	movw	r30, r24
    27cc:	d8 01       	movw	r26, r16
    27ce:	8d 91       	ld	r24, X+
    27d0:	9c 91       	ld	r25, X
    27d2:	09 95       	icall
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <main+0x118>
				  }
				  //callbackSetFunction(e.EventId-48,e.EventFunction);
			   }
			   else
			   {
				  e.EventFunction(0); 
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	fb 01       	movw	r30, r22
    27dc:	09 95       	icall
			   }
			   
		   }
		   }
	   }
		  if(countSize()>1)
    27de:	0e 94 6d 12 	call	0x24da	; 0x24da <countSize>
		  {
			  
			//OSRR_Events();  
		 }
	if(event ==1 || event ==0)
    27e2:	80 91 09 05 	lds	r24, 0x0509
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	21 f0       	breq	.+8      	; 0x27f2 <main+0x12c>
    27ea:	80 91 09 05 	lds	r24, 0x0509
    27ee:	81 11       	cpse	r24, r1
    27f0:	96 cf       	rjmp	.-212    	; 0x271e <main+0x58>
	{
		ApplicationHookUP(&event);
    27f2:	89 e0       	ldi	r24, 0x09	; 9
    27f4:	95 e0       	ldi	r25, 0x05	; 5
    27f6:	0e 94 0f 1b 	call	0x361e	; 0x361e <ApplicationHookUP>
    27fa:	91 cf       	rjmp	.-222    	; 0x271e <main+0x58>

000027fc <callbackSetFunction>:
 */ 
#include "OSRR.h"
callbackarrayfuc callbackarray[10];
void callbackSetFunction(uint8_t pos,callbackarrayfuc arg)
{
	callbackarray[pos]=arg;
    27fc:	e8 2f       	mov	r30, r24
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	ee 0f       	add	r30, r30
    2802:	ff 1f       	adc	r31, r31
    2804:	ee 59       	subi	r30, 0x9E	; 158
    2806:	f9 4f       	sbci	r31, 0xF9	; 249
    2808:	71 83       	std	Z+1, r23	; 0x01
    280a:	60 83       	st	Z, r22
    280c:	08 95       	ret

0000280e <callbackgetFunction>:
}
callbackarrayfuc callbackgetFunction(uint8_t pos)
{
	return callbackarray[pos];
    280e:	e8 2f       	mov	r30, r24
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	ee 59       	subi	r30, 0x9E	; 158
    2818:	f9 4f       	sbci	r31, 0xF9	; 249
}
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	08 95       	ret

00002820 <num2CharArray>:
    //}

}

static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	c8 2f       	mov	r28, r24
    2826:	fb 01       	movw	r30, r22
    unsigned char H=0,T=0,O=0;
    H=num/100;
    2828:	49 e2       	ldi	r20, 0x29	; 41
    282a:	84 9f       	mul	r24, r20
    282c:	41 2d       	mov	r20, r1
    282e:	11 24       	eor	r1, r1
    2830:	42 95       	swap	r20
    2832:	4f 70       	andi	r20, 0x0F	; 15
    T=(num - (H*100))/10;
    2834:	1c e9       	ldi	r17, 0x9C	; 156
    2836:	14 03       	mulsu	r17, r20
    2838:	90 01       	movw	r18, r0
    283a:	11 24       	eor	r1, r1
    283c:	c9 01       	movw	r24, r18
    283e:	8c 0f       	add	r24, r28
    2840:	91 1d       	adc	r25, r1
    2842:	6a e0       	ldi	r22, 0x0A	; 10
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	0e 94 3f 1b 	call	0x367e	; 0x367e <__divmodhi4>
    O=(num - (H*100) - (T*10));

    Ustring[0]=(H+48);
    284a:	84 2f       	mov	r24, r20
    284c:	80 5d       	subi	r24, 0xD0	; 208
    284e:	80 83       	st	Z, r24
    Ustring[1]=(T+48);
    2850:	86 2f       	mov	r24, r22
    2852:	80 5d       	subi	r24, 0xD0	; 208
    2854:	81 83       	std	Z+1, r24	; 0x01
static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    unsigned char H=0,T=0,O=0;
    H=num/100;
    T=(num - (H*100))/10;
    O=(num - (H*100) - (T*10));
    2856:	c0 5d       	subi	r28, 0xD0	; 208
    2858:	41 9f       	mul	r20, r17
    285a:	c0 0d       	add	r28, r0
    285c:	11 24       	eor	r1, r1
    285e:	66 0f       	add	r22, r22
    2860:	86 2f       	mov	r24, r22
    2862:	88 0f       	add	r24, r24
    2864:	88 0f       	add	r24, r24
    2866:	68 0f       	add	r22, r24

    Ustring[0]=(H+48);
    Ustring[1]=(T+48);
    Ustring[2]=(O+48);
    2868:	c6 1b       	sub	r28, r22
    286a:	c2 83       	std	Z+2, r28	; 0x02
}
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	08 95       	ret

00002872 <task6>:
{
    static uint8_t CommunicationStates;
    static funPtrDebug fp;
    static uint16_t pointersave;
    uint8_t *length;
    if(EspConnected==1)
    2872:	20 91 d4 04 	lds	r18, 0x04D4
    2876:	21 30       	cpi	r18, 0x01	; 1
    2878:	09 f0       	breq	.+2      	; 0x287c <task6+0xa>
    287a:	4a c0       	rjmp	.+148    	; 0x2910 <task6+0x9e>
    {
        switch (CommunicationStates)
    287c:	20 91 d5 04 	lds	r18, 0x04D5
    2880:	21 30       	cpi	r18, 0x01	; 1
    2882:	79 f0       	breq	.+30     	; 0x28a2 <task6+0x30>
    2884:	30 f0       	brcs	.+12     	; 0x2892 <task6+0x20>
    2886:	22 30       	cpi	r18, 0x02	; 2
    2888:	d1 f0       	breq	.+52     	; 0x28be <task6+0x4c>
    288a:	23 30       	cpi	r18, 0x03	; 3
    288c:	09 f0       	breq	.+2      	; 0x2890 <task6+0x1e>
    288e:	40 c0       	rjmp	.+128    	; 0x2910 <task6+0x9e>
    2890:	28 c0       	rjmp	.+80     	; 0x28e2 <task6+0x70>
        {
        case 0:
            if(RequestWait()==ESP_CmdSndOK)
    2892:	0e 94 e7 04 	call	0x9ce	; 0x9ce <RequestWait>
    2896:	81 11       	cpse	r24, r1
    2898:	3b c0       	rjmp	.+118    	; 0x2910 <task6+0x9e>
            {
                CommunicationStates=1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	80 93 d5 04 	sts	0x04D5, r24
    28a0:	37 c0       	rjmp	.+110    	; 0x2910 <task6+0x9e>
            }
            break;
        case 1:
            CheckInput();
    28a2:	0e 94 81 04 	call	0x902	; 0x902 <CheckInput>
            PushEventInterface(200,DebugHandlerFunc,ESPpop,0);
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	47 e3       	ldi	r20, 0x37	; 55
    28aa:	55 e0       	ldi	r21, 0x05	; 5
    28ac:	64 ef       	ldi	r22, 0xF4	; 244
    28ae:	7e e0       	ldi	r23, 0x0E	; 14
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
            //DebugHandlerFunc(ESPpop);
            CommunicationStates=2;
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	80 93 d5 04 	sts	0x04D5, r24
            break;
    28bc:	29 c0       	rjmp	.+82     	; 0x2910 <task6+0x9e>
        case 2:
            if(((uint8_t*)callback)[1]==1)
    28be:	fc 01       	movw	r30, r24
    28c0:	21 81       	ldd	r18, Z+1	; 0x01
    28c2:	21 30       	cpi	r18, 0x01	; 1
    28c4:	29 f5       	brne	.+74     	; 0x2910 <task6+0x9e>
            {
                pointersave=callback;
    28c6:	90 93 d7 04 	sts	0x04D7, r25
    28ca:	80 93 d6 04 	sts	0x04D6, r24
                fp=(funPtrDebug*)(((uint16_t*)(callback+2))[0]);
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	90 93 d9 04 	sts	0x04D9, r25
    28d6:	80 93 d8 04 	sts	0x04D8, r24
                CommunicationStates=3;
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	80 93 d5 04 	sts	0x04D5, r24
    28e0:	17 c0       	rjmp	.+46     	; 0x2910 <task6+0x9e>
            }
            break;
        case 3:
            length=pointersave;
            if(ESP_CmdSndOK==SendData(((length[6]*3))))
    28e2:	e0 91 d6 04 	lds	r30, 0x04D6
    28e6:	f0 91 d7 04 	lds	r31, 0x04D7
    28ea:	86 81       	ldd	r24, Z+6	; 0x06
    28ec:	98 2f       	mov	r25, r24
    28ee:	99 0f       	add	r25, r25
    28f0:	89 0f       	add	r24, r25
    28f2:	0e 94 6d 04 	call	0x8da	; 0x8da <SendData>
    28f6:	81 11       	cpse	r24, r1
    28f8:	0b c0       	rjmp	.+22     	; 0x2910 <task6+0x9e>
            {
                CommunicationStates=0;
    28fa:	10 92 d5 04 	sts	0x04D5, r1
                char val2[4]="255\0";
                fp(pointersave);
    28fe:	e0 91 d8 04 	lds	r30, 0x04D8
    2902:	f0 91 d9 04 	lds	r31, 0x04D9
    2906:	80 91 d6 04 	lds	r24, 0x04D6
    290a:	90 91 d7 04 	lds	r25, 0x04D7
    290e:	09 95       	icall
            }
        }
    }
    return 0;
}
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	08 95       	ret

00002916 <task1>:
uint16_t TaskImageRendering(void);
//Esp_Index=Mode_Command;
//Site[36]=name;
//background-color:#757575;height;100%;position:absolute;line-height:inherit;width:62%" ><center><span style="color:white">62</span></center></div></body></html>";
uint16_t task1(void)
{
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	28 97       	sbiw	r28, 0x08	; 8
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    static uint16_t Init_Flag=0;
    static uint8_t Toggle=0,Toggle1=1,ssdcount;
    uint16_t value,one,two,three;
    char SSDNUM[4];
    uint16_t Out;
    time1=time1+1;
    292e:	80 91 a6 04 	lds	r24, 0x04A6
    2932:	90 91 a7 04 	lds	r25, 0x04A7
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	90 93 a7 04 	sts	0x04A7, r25
    293c:	80 93 a6 04 	sts	0x04A6, r24
    if(Init_Flag==0)
    2940:	20 91 a8 04 	lds	r18, 0x04A8
    2944:	30 91 a9 04 	lds	r19, 0x04A9
    2948:	23 2b       	or	r18, r19
    294a:	71 f4       	brne	.+28     	; 0x2968 <task1+0x52>
    {
        InitMax();
    294c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <InitMax>
        Init_Flag=1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	90 93 a9 04 	sts	0x04A9, r25
    2958:	80 93 a8 04 	sts	0x04A8, r24
        TankSize=10000/124;
    295c:	80 e5       	ldi	r24, 0x50	; 80
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	90 93 ab 04 	sts	0x04AB, r25
    2964:	80 93 aa 04 	sts	0x04AA, r24
    }
    DispChar(0x0d,7);
    2968:	67 e0       	ldi	r22, 0x07	; 7
    296a:	8d e0       	ldi	r24, 0x0D	; 13
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 18 11 	call	0x2230	; 0x2230 <DispChar>
    if(time1==10)
    2972:	20 91 a6 04 	lds	r18, 0x04A6
    2976:	30 91 a7 04 	lds	r19, 0x04A7
    297a:	2a 30       	cpi	r18, 0x0A	; 10
    297c:	31 05       	cpc	r19, r1
    297e:	09 f0       	breq	.+2      	; 0x2982 <task1+0x6c>
    2980:	8a c0       	rjmp	.+276    	; 0x2a96 <task1+0x180>
    {   //ssd1036_chumma();

        uint16_t percnt;
        Out=(10000-(SensorValue*TankSize))/100;
    2982:	40 91 ac 04 	lds	r20, 0x04AC
    2986:	20 91 aa 04 	lds	r18, 0x04AA
    298a:	30 91 ab 04 	lds	r19, 0x04AB
    298e:	42 9f       	mul	r20, r18
    2990:	c0 01       	movw	r24, r0
    2992:	43 9f       	mul	r20, r19
    2994:	90 0d       	add	r25, r0
    2996:	11 24       	eor	r1, r1
    2998:	20 e1       	ldi	r18, 0x10	; 16
    299a:	37 e2       	ldi	r19, 0x27	; 39
    299c:	28 1b       	sub	r18, r24
    299e:	39 0b       	sbc	r19, r25
    29a0:	36 95       	lsr	r19
    29a2:	27 95       	ror	r18
    29a4:	36 95       	lsr	r19
    29a6:	27 95       	ror	r18
    29a8:	ab e7       	ldi	r26, 0x7B	; 123
    29aa:	b4 e1       	ldi	r27, 0x14	; 20
    29ac:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    29b0:	ac 01       	movw	r20, r24
    29b2:	56 95       	lsr	r21
    29b4:	47 95       	ror	r20
        percnt=Out;
        SSDNUM[3]='\0';
    29b6:	1c 82       	std	Y+4, r1	; 0x04
        Out=Out*127;
    29b8:	9a 01       	movw	r18, r20
    29ba:	36 95       	lsr	r19
    29bc:	32 2f       	mov	r19, r18
    29be:	22 27       	eor	r18, r18
    29c0:	37 95       	ror	r19
    29c2:	27 95       	ror	r18
    29c4:	24 1b       	sub	r18, r20
    29c6:	35 0b       	sbc	r19, r21
        Out=Out/100;														//ssdcount=one;
    29c8:	36 95       	lsr	r19
    29ca:	27 95       	ror	r18
    29cc:	36 95       	lsr	r19
    29ce:	27 95       	ror	r18
    29d0:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    29d4:	8c 01       	movw	r16, r24
    29d6:	16 95       	lsr	r17
    29d8:	07 95       	ror	r16
        num2CharArray(percnt,SSDNUM);
    29da:	be 01       	movw	r22, r28
    29dc:	6f 5f       	subi	r22, 0xFF	; 255
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	84 2f       	mov	r24, r20
    29e2:	0e 94 10 14 	call	0x2820	; 0x2820 <num2CharArray>
        ssd1306_String_font6x8(SSDNUM,74,3);
    29e6:	43 e0       	ldi	r20, 0x03	; 3
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	6a e4       	ldi	r22, 0x4A	; 74
    29ec:	70 e0       	ldi	r23, 0x00	; 0
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	0e 94 a1 07 	call	0xf42	; 0xf42 <ssd1306_String_font6x8>
        ssd1306_String_font6x8("'/.",96,3);
    29f6:	43 e0       	ldi	r20, 0x03	; 3
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	60 e6       	ldi	r22, 0x60	; 96
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	89 e1       	ldi	r24, 0x19	; 25
    2a00:	93 e0       	ldi	r25, 0x03	; 3
    2a02:	0e 94 a1 07 	call	0xf42	; 0xf42 <ssd1306_String_font6x8>
        if(SensorValue<20 && Upcounter<40)
    2a06:	20 91 ac 04 	lds	r18, 0x04AC
    2a0a:	24 31       	cpi	r18, 0x14	; 20
    2a0c:	88 f4       	brcc	.+34     	; 0x2a30 <task1+0x11a>
    2a0e:	80 91 ad 04 	lds	r24, 0x04AD
    2a12:	90 91 ae 04 	lds	r25, 0x04AE
    2a16:	88 32       	cpi	r24, 0x28	; 40
    2a18:	91 05       	cpc	r25, r1
    2a1a:	50 f4       	brcc	.+20     	; 0x2a30 <task1+0x11a>
        {
            Upcounter++;
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	90 93 ae 04 	sts	0x04AE, r25
    2a22:	80 93 ad 04 	sts	0x04AD, r24
            DownCounter=0;
    2a26:	10 92 b0 04 	sts	0x04B0, r1
    2a2a:	10 92 af 04 	sts	0x04AF, r1
    2a2e:	26 c0       	rjmp	.+76     	; 0x2a7c <task1+0x166>
        }
        else if(SensorValue>122 && DownCounter<40 && SensorValue<255)
    2a30:	2b 37       	cpi	r18, 0x7B	; 123
    2a32:	98 f0       	brcs	.+38     	; 0x2a5a <task1+0x144>
    2a34:	80 91 af 04 	lds	r24, 0x04AF
    2a38:	90 91 b0 04 	lds	r25, 0x04B0
    2a3c:	88 32       	cpi	r24, 0x28	; 40
    2a3e:	91 05       	cpc	r25, r1
    2a40:	60 f4       	brcc	.+24     	; 0x2a5a <task1+0x144>
    2a42:	2f 3f       	cpi	r18, 0xFF	; 255
    2a44:	51 f0       	breq	.+20     	; 0x2a5a <task1+0x144>
        {
            Upcounter=0;
    2a46:	10 92 ae 04 	sts	0x04AE, r1
    2a4a:	10 92 ad 04 	sts	0x04AD, r1
            DownCounter++;
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	90 93 b0 04 	sts	0x04B0, r25
    2a54:	80 93 af 04 	sts	0x04AF, r24
    2a58:	11 c0       	rjmp	.+34     	; 0x2a7c <task1+0x166>
        }
        else
        {
            Upcounter=0;
    2a5a:	10 92 ae 04 	sts	0x04AE, r1
    2a5e:	10 92 ad 04 	sts	0x04AD, r1
            DownCounter=0;
    2a62:	10 92 b0 04 	sts	0x04B0, r1
    2a66:	10 92 af 04 	sts	0x04AF, r1
            COUNT=0;
    2a6a:	10 92 b2 04 	sts	0x04B2, r1
    2a6e:	10 92 b1 04 	sts	0x04B1, r1
            PinOutput(0,PIN_OUT7,D);
    2a72:	42 e0       	ldi	r20, 0x02	; 2
    2a74:	66 e0       	ldi	r22, 0x06	; 6
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
        }
        DispDigits(Out);
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DispDigits>

        //PinOutput(Toggle,PIN_OUT1,B);
        //
        //COUNT=COUNT+1;

        Toggle1=Toggle1^1;
    2a82:	90 91 70 02 	lds	r25, 0x0270
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	89 27       	eor	r24, r25
    2a8a:	80 93 70 02 	sts	0x0270, r24

        //
        time1=0;
    2a8e:	10 92 a7 04 	sts	0x04A7, r1
    2a92:	10 92 a6 04 	sts	0x04A6, r1



    }

    if(Upcounter!=0||DownCounter!=0 )
    2a96:	20 91 ad 04 	lds	r18, 0x04AD
    2a9a:	30 91 ae 04 	lds	r19, 0x04AE
    2a9e:	23 2b       	or	r18, r19
    2aa0:	31 f4       	brne	.+12     	; 0x2aae <task1+0x198>
    2aa2:	80 91 af 04 	lds	r24, 0x04AF
    2aa6:	90 91 b0 04 	lds	r25, 0x04B0
    2aaa:	89 2b       	or	r24, r25
    2aac:	f1 f0       	breq	.+60     	; 0x2aea <task1+0x1d4>
    {

        if (COUNT>100)
    2aae:	80 91 b1 04 	lds	r24, 0x04B1
    2ab2:	90 91 b2 04 	lds	r25, 0x04B2
    2ab6:	85 36       	cpi	r24, 0x65	; 101
    2ab8:	91 05       	cpc	r25, r1
    2aba:	70 f0       	brcs	.+28     	; 0x2ad8 <task1+0x1c2>
        {
            COUNT=0;
    2abc:	10 92 b2 04 	sts	0x04B2, r1
    2ac0:	10 92 b1 04 	sts	0x04B1, r1
            Toggle=Toggle^1;
    2ac4:	90 91 b3 04 	lds	r25, 0x04B3
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	89 27       	eor	r24, r25
    2acc:	80 93 b3 04 	sts	0x04B3, r24
            PinOutput(Toggle,PIN_OUT7,D);
    2ad0:	42 e0       	ldi	r20, 0x02	; 2
    2ad2:	66 e0       	ldi	r22, 0x06	; 6
    2ad4:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
        }
        COUNT++;
    2ad8:	80 91 b1 04 	lds	r24, 0x04B1
    2adc:	90 91 b2 04 	lds	r25, 0x04B2
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	90 93 b2 04 	sts	0x04B2, r25
    2ae6:	80 93 b1 04 	sts	0x04B1, r24
    }

    if(time2>1)
    2aea:	20 91 b4 04 	lds	r18, 0x04B4
    2aee:	30 91 b5 04 	lds	r19, 0x04B5
    2af2:	22 30       	cpi	r18, 0x02	; 2
    2af4:	31 05       	cpc	r19, r1
    2af6:	08 f4       	brcc	.+2      	; 0x2afa <task1+0x1e4>
    2af8:	57 c0       	rjmp	.+174    	; 0x2ba8 <task1+0x292>
    {
        uint16_t a=0x0000,c;
    2afa:	18 86       	std	Y+8, r1	; 0x08
    2afc:	1f 82       	std	Y+7, r1	; 0x07
        uint8_t *array=&c,*Val=&a;
        RTEReadFirstCh(&a);
    2afe:	ce 01       	movw	r24, r28
    2b00:	07 96       	adiw	r24, 0x07	; 7
    2b02:	0e 94 24 1b 	call	0x3648	; 0x3648 <RTEModuleFirstCh>
        //uart_num(array[1]);
        //if(a&0x8000==0x8000)
        //{
        //uart_string("in 1");
        c=(a>>15)&0x0001;
    2b06:	8f 81       	ldd	r24, Y+7	; 0x07
    2b08:	98 85       	ldd	r25, Y+8	; 0x08
    2b0a:	29 2f       	mov	r18, r25
    2b0c:	22 1f       	adc	r18, r18
    2b0e:	22 27       	eor	r18, r18
    2b10:	22 1f       	adc	r18, r18
    2b12:	2d 83       	std	Y+5, r18	; 0x05
    2b14:	1e 82       	std	Y+6, r1	; 0x06
        if(array[0]==0x01)
    2b16:	21 30       	cpi	r18, 0x01	; 1
    2b18:	d9 f4       	brne	.+54     	; 0x2b50 <task1+0x23a>
        {
            //a=(a&0x03ff);
            //a=a*(4882);
            //a=a/1000;
            a=a&0x03ff;
    2b1a:	93 70       	andi	r25, 0x03	; 3
    2b1c:	98 87       	std	Y+8, r25	; 0x08
    2b1e:	8f 83       	std	Y+7, r24	; 0x07
            one=(110*a);
            one=one/1024;
            one=(one);

            SSDNUM[3]='\0';															//ssdcount=one;
    2b20:	1c 82       	std	Y+4, r1	; 0x04
            num2CharArray(SensorValue,SSDNUM);
    2b22:	be 01       	movw	r22, r28
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	80 91 ac 04 	lds	r24, 0x04AC
    2b2c:	0e 94 10 14 	call	0x2820	; 0x2820 <num2CharArray>
            ssd1306_String_font6x8(SSDNUM,92,0);
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	6c e5       	ldi	r22, 0x5C	; 92
    2b36:	70 e0       	ldi	r23, 0x00	; 0
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	0e 94 a1 07 	call	0xf42	; 0xf42 <ssd1306_String_font6x8>
            ssd1306_String_font6x8("cm",112,0);
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	60 e7       	ldi	r22, 0x70	; 112
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	8d e1       	ldi	r24, 0x1D	; 29
    2b4a:	93 e0       	ldi	r25, 0x03	; 3
    2b4c:	0e 94 a1 07 	call	0xf42	; 0xf42 <ssd1306_String_font6x8>
            }
            //uart_num(one);
            //uart_string("#1#");
            // uart_num(Val[0]);
        }
        a=0x0800;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	98 e0       	ldi	r25, 0x08	; 8
    2b54:	98 87       	std	Y+8, r25	; 0x08
    2b56:	8f 83       	std	Y+7, r24	; 0x07
        RTEReadFirstCh(&a);
    2b58:	ce 01       	movw	r24, r28
    2b5a:	07 96       	adiw	r24, 0x07	; 7
    2b5c:	0e 94 24 1b 	call	0x3648	; 0x3648 <RTEModuleFirstCh>
            two=(5*a)*10/1024;
            //uart_string("#2#");
            //uart_num(two);
            //uart_string("#2#");					   // uart_num(Val[0]);
        }
        a=0x1000;
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e1       	ldi	r25, 0x10	; 16
    2b64:	98 87       	std	Y+8, r25	; 0x08
    2b66:	8f 83       	std	Y+7, r24	; 0x07
        RTEReadFirstCh(&a);
    2b68:	ce 01       	movw	r24, r28
    2b6a:	07 96       	adiw	r24, 0x07	; 7
    2b6c:	0e 94 24 1b 	call	0x3648	; 0x3648 <RTEModuleFirstCh>
        //uart_num(array[1]);
        //if(a&0x8000==0x8000)
        //{
        //uart_string("in 1");
        c=(a>>15)&0x0001;
    2b70:	8f 81       	ldd	r24, Y+7	; 0x07
    2b72:	98 85       	ldd	r25, Y+8	; 0x08
    2b74:	29 2f       	mov	r18, r25
    2b76:	22 1f       	adc	r18, r18
    2b78:	22 27       	eor	r18, r18
    2b7a:	22 1f       	adc	r18, r18
    2b7c:	2d 83       	std	Y+5, r18	; 0x05
    2b7e:	1e 82       	std	Y+6, r1	; 0x06
        if(array[0]==0x01)
    2b80:	21 30       	cpi	r18, 0x01	; 1
    2b82:	19 f4       	brne	.+6      	; 0x2b8a <task1+0x274>
        {
            a=a&0x03ff;
    2b84:	93 70       	andi	r25, 0x03	; 3
    2b86:	98 87       	std	Y+8, r25	; 0x08
    2b88:	8f 83       	std	Y+7, r24	; 0x07
            three=(5*a)*10/1024;
            //uart_string("#3#");
            //uart_16Uint(a);
            //uart_string("#3#");						//uart_num(Val[0]);
        }
        time2=0;
    2b8a:	10 92 b5 04 	sts	0x04B5, r1
    2b8e:	10 92 b4 04 	sts	0x04B4, r1
        if(ssdcount<127)
    2b92:	80 91 b6 04 	lds	r24, 0x04B6
    2b96:	8f 37       	cpi	r24, 0x7F	; 127
    2b98:	20 f4       	brcc	.+8      	; 0x2ba2 <task1+0x28c>
        {
            ssdcount++;
    2b9a:	8f 5f       	subi	r24, 0xFF	; 255
    2b9c:	80 93 b6 04 	sts	0x04B6, r24
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <task1+0x292>
        }
        else
        {
            ssdcount=ssdcount-55;
    2ba2:	87 53       	subi	r24, 0x37	; 55
    2ba4:	80 93 b6 04 	sts	0x04B6, r24
        }

    }


    if(Out<127)
    2ba8:	0f 37       	cpi	r16, 0x7F	; 127
    2baa:	11 05       	cpc	r17, r1
    2bac:	38 f4       	brcc	.+14     	; 0x2bbc <task1+0x2a6>
    {
        ssd1306_Fill_Rectangle(0,5,Out);
    2bae:	a8 01       	movw	r20, r16
    2bb0:	65 e0       	ldi	r22, 0x05	; 5
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 b4 07 	call	0xf68	; 0xf68 <ssd1306_Fill_Rectangle>
    }

    time2++;
    2bbc:	80 91 b4 04 	lds	r24, 0x04B4
    2bc0:	90 91 b5 04 	lds	r25, 0x04B5
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	90 93 b5 04 	sts	0x04B5, r25
    2bca:	80 93 b4 04 	sts	0x04B4, r24
    //a=4;
    return 0;
}
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	28 96       	adiw	r28, 0x08	; 8
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret

00002be8 <task2>:
uint16_t task2(void)
{
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	27 97       	sbiw	r28, 0x07	; 7
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    static uint16_t time1=0,k;
    static uint8_t Errorcount;
    time1=time1+1;
    2bfe:	80 91 b7 04 	lds	r24, 0x04B7
    2c02:	90 91 b8 04 	lds	r25, 0x04B8
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	90 93 b8 04 	sts	0x04B8, r25
    2c0c:	80 93 b7 04 	sts	0x04B7, r24
    uint16_t Pulse=0;
    uint8_t *check=&Pulse;
    if(time1==100)
    2c10:	84 36       	cpi	r24, 0x64	; 100
    2c12:	91 05       	cpc	r25, r1
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <task2+0x30>
    2c16:	e8 c0       	rjmp	.+464    	; 0x2de8 <task2+0x200>
    {

        signal=0;
    2c18:	10 92 a5 04 	sts	0x04A5, r1
        time1=0;
    2c1c:	10 92 b8 04 	sts	0x04B8, r1
    2c20:	10 92 b7 04 	sts	0x04B7, r1
        uint8_t arr[3];
        arr[0]=0;
    2c24:	1d 82       	std	Y+5, r1	; 0x05
        arr[1]=0;
    2c26:	1e 82       	std	Y+6, r1	; 0x06
        arr[2]=1;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	8f 83       	std	Y+7, r24	; 0x07
        ((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	05 96       	adiw	r24, 0x05	; 5
    2c30:	0e 94 87 11 	call	0x230e	; 0x230e <SignalHandlerFunc>
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
        if(arr[1]==0x02)
    2c38:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3a:	82 30       	cpi	r24, 0x02	; 2
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <task2+0x58>
    2c3e:	be c0       	rjmp	.+380    	; 0x2dbc <task2+0x1d4>
        {
			if(1)
			{
            FilterUltrasonic(arr[0]);
    2c40:	ed 81       	ldd	r30, Y+5	; 0x05

static void FilterUltrasonic(uint8_t Distance)
{
    static uint16_t value, previousvalue=0,offset,onebyk;
    uint16_t multiplier;
    onebyk=181;
    2c42:	85 eb       	ldi	r24, 0xB5	; 181
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	90 93 bb 04 	sts	0x04BB, r25
    2c4a:	80 93 ba 04 	sts	0x04BA, r24
    //value=(Distance+previousvalue);
    if(Distance>value)
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	40 91 bc 04 	lds	r20, 0x04BC
    2c54:	50 91 bd 04 	lds	r21, 0x04BD
    2c58:	4e 17       	cp	r20, r30
    2c5a:	5f 07       	cpc	r21, r31
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <task2+0x78>
    2c5e:	42 c0       	rjmp	.+132    	; 0x2ce4 <task2+0xfc>
    {
        multiplier=(Distance-value)*100;
    2c60:	cf 01       	movw	r24, r30
    2c62:	84 1b       	sub	r24, r20
    2c64:	95 0b       	sbc	r25, r21
    2c66:	64 e6       	ldi	r22, 0x64	; 100
    2c68:	68 9f       	mul	r22, r24
    2c6a:	90 01       	movw	r18, r0
    2c6c:	69 9f       	mul	r22, r25
    2c6e:	30 0d       	add	r19, r0
    2c70:	11 24       	eor	r1, r1
        if(multiplier<1804)
    2c72:	2c 30       	cpi	r18, 0x0C	; 12
    2c74:	87 e0       	ldi	r24, 0x07	; 7
    2c76:	38 07       	cpc	r19, r24
    2c78:	90 f4       	brcc	.+36     	; 0x2c9e <task2+0xb6>
        {
            offset=((Distance-value)*100)/onebyk;
    2c7a:	a5 e8       	ldi	r26, 0x85	; 133
    2c7c:	ba e5       	ldi	r27, 0x5A	; 90
    2c7e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    2c82:	00 24       	eor	r0, r0
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	00 1c       	adc	r0, r0
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	00 1c       	adc	r0, r0
    2c90:	89 2f       	mov	r24, r25
    2c92:	90 2d       	mov	r25, r0
    2c94:	90 93 bf 04 	sts	0x04BF, r25
    2c98:	80 93 be 04 	sts	0x04BE, r24
    2c9c:	11 c0       	rjmp	.+34     	; 0x2cc0 <task2+0xd8>
        }
        else
        {
            offset=((Distance-value)*100)/1804;
    2c9e:	36 95       	lsr	r19
    2ca0:	27 95       	ror	r18
    2ca2:	36 95       	lsr	r19
    2ca4:	27 95       	ror	r18
    2ca6:	a9 ea       	ldi	r26, 0xA9	; 169
    2ca8:	b8 e4       	ldi	r27, 0x48	; 72
    2caa:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    2cae:	88 0f       	add	r24, r24
    2cb0:	89 2f       	mov	r24, r25
    2cb2:	88 1f       	adc	r24, r24
    2cb4:	99 0b       	sbc	r25, r25
    2cb6:	91 95       	neg	r25
    2cb8:	90 93 bf 04 	sts	0x04BF, r25
    2cbc:	80 93 be 04 	sts	0x04BE, r24
        }
        if(offset==0)
    2cc0:	80 91 be 04 	lds	r24, 0x04BE
    2cc4:	90 91 bf 04 	lds	r25, 0x04BF
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <task2+0xee>
        {
            value=Distance;
    2ccc:	f0 93 bd 04 	sts	0x04BD, r31
    2cd0:	e0 93 bc 04 	sts	0x04BC, r30
    2cd4:	48 c0       	rjmp	.+144    	; 0x2d66 <task2+0x17e>
        }
        else
        {
            value=value+offset;
    2cd6:	84 0f       	add	r24, r20
    2cd8:	95 1f       	adc	r25, r21
    2cda:	90 93 bd 04 	sts	0x04BD, r25
    2cde:	80 93 bc 04 	sts	0x04BC, r24
    2ce2:	41 c0       	rjmp	.+130    	; 0x2d66 <task2+0x17e>


    }
    else
    {
        multiplier=(value-Distance)*100;
    2ce4:	ca 01       	movw	r24, r20
    2ce6:	8e 1b       	sub	r24, r30
    2ce8:	9f 0b       	sbc	r25, r31
    2cea:	64 e6       	ldi	r22, 0x64	; 100
    2cec:	68 9f       	mul	r22, r24
    2cee:	90 01       	movw	r18, r0
    2cf0:	69 9f       	mul	r22, r25
    2cf2:	30 0d       	add	r19, r0
    2cf4:	11 24       	eor	r1, r1
        if(multiplier<1804)
    2cf6:	2c 30       	cpi	r18, 0x0C	; 12
    2cf8:	87 e0       	ldi	r24, 0x07	; 7
    2cfa:	38 07       	cpc	r19, r24
    2cfc:	90 f4       	brcc	.+36     	; 0x2d22 <task2+0x13a>
        {
            offset=((value-Distance)*100)/onebyk;
    2cfe:	a5 e8       	ldi	r26, 0x85	; 133
    2d00:	ba e5       	ldi	r27, 0x5A	; 90
    2d02:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    2d06:	00 24       	eor	r0, r0
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	00 1c       	adc	r0, r0
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	00 1c       	adc	r0, r0
    2d14:	89 2f       	mov	r24, r25
    2d16:	90 2d       	mov	r25, r0
    2d18:	90 93 bf 04 	sts	0x04BF, r25
    2d1c:	80 93 be 04 	sts	0x04BE, r24
    2d20:	11 c0       	rjmp	.+34     	; 0x2d44 <task2+0x15c>
        }
        else
        {
            offset=((value-Distance)*100)/1804;
    2d22:	36 95       	lsr	r19
    2d24:	27 95       	ror	r18
    2d26:	36 95       	lsr	r19
    2d28:	27 95       	ror	r18
    2d2a:	a9 ea       	ldi	r26, 0xA9	; 169
    2d2c:	b8 e4       	ldi	r27, 0x48	; 72
    2d2e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__umulhisi3>
    2d32:	88 0f       	add	r24, r24
    2d34:	89 2f       	mov	r24, r25
    2d36:	88 1f       	adc	r24, r24
    2d38:	99 0b       	sbc	r25, r25
    2d3a:	91 95       	neg	r25
    2d3c:	90 93 bf 04 	sts	0x04BF, r25
    2d40:	80 93 be 04 	sts	0x04BE, r24
        }


        if(offset==0)
    2d44:	80 91 be 04 	lds	r24, 0x04BE
    2d48:	90 91 bf 04 	lds	r25, 0x04BF
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	29 f4       	brne	.+10     	; 0x2d5a <task2+0x172>
        {
            value=Distance;
    2d50:	f0 93 bd 04 	sts	0x04BD, r31
    2d54:	e0 93 bc 04 	sts	0x04BC, r30
    2d58:	06 c0       	rjmp	.+12     	; 0x2d66 <task2+0x17e>
        }
        else
        {
            value=value-offset;
    2d5a:	48 1b       	sub	r20, r24
    2d5c:	59 0b       	sbc	r21, r25
    2d5e:	50 93 bd 04 	sts	0x04BD, r21
    2d62:	40 93 bc 04 	sts	0x04BC, r20
        }
    }
    previousvalue=value;
    2d66:	80 91 bc 04 	lds	r24, 0x04BC
    2d6a:	90 91 bd 04 	lds	r25, 0x04BD
    2d6e:	80 93 c0 04 	sts	0x04C0, r24
    2d72:	90 93 c1 04 	sts	0x04C1, r25
    Sigout=(uint8_t)previousvalue;
    2d76:	80 93 76 06 	sts	0x0676, r24
    SensorValue=(uint8_t)previousvalue;
    2d7a:	80 93 ac 04 	sts	0x04AC, r24

    //uart_num(Sigout);
    quality=100;
    2d7e:	14 e6       	ldi	r17, 0x64	; 100
    2d80:	10 93 a4 04 	sts	0x04A4, r17
        if(arr[1]==0x02)
        {
			if(1)
			{
            FilterUltrasonic(arr[0]);
			char val[4]="255";
    2d84:	82 e3       	ldi	r24, 0x32	; 50
    2d86:	95 e3       	ldi	r25, 0x35	; 53
    2d88:	a5 e3       	ldi	r26, 0x35	; 53
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	ab 83       	std	Y+3, r26	; 0x03
    2d92:	bc 83       	std	Y+4, r27	; 0x04
			val[3]='\0';
			num2CharArray(arr[0],val);
    2d94:	be 01       	movw	r22, r28
    2d96:	6f 5f       	subi	r22, 0xFF	; 255
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	0e 94 10 14 	call	0x2820	; 0x2820 <num2CharArray>
			val[3]='\0';
    2da0:	1c 82       	std	Y+4, r1	; 0x04
			//PopulateSSDbuffer(val,0,4);
			//PopulateSSDbuffer("=L",arr[0],3);
            SetBlink(PIN_OUT1,0x1000,B);
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	70 e1       	ldi	r23, 0x10	; 16
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SetBlink>
            Errorcount=0;
    2db2:	10 92 b9 04 	sts	0x04B9, r1
            quality=100;
    2db6:	10 93 a4 04 	sts	0x04A4, r17
    2dba:	16 c0       	rjmp	.+44     	; 0x2de8 <task2+0x200>
			}
        }
        else
        {
            Errorcount++;
    2dbc:	80 91 b9 04 	lds	r24, 0x04B9
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	80 93 b9 04 	sts	0x04B9, r24
            if(Errorcount>=10)
    2dc6:	8a 30       	cpi	r24, 0x0A	; 10
    2dc8:	78 f0       	brcs	.+30     	; 0x2de8 <task2+0x200>
            {

                SetBlink(PIN_OUT1,0x1002,B);
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	62 e0       	ldi	r22, 0x02	; 2
    2dd0:	70 e1       	ldi	r23, 0x10	; 16
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SetBlink>
                Sigout=0xff;
    2dda:	8f ef       	ldi	r24, 0xFF	; 255
    2ddc:	80 93 76 06 	sts	0x0676, r24
                SensorValue=0xff;
    2de0:	80 93 ac 04 	sts	0x04AC, r24
                quality=0;
    2de4:	10 92 a4 04 	sts	0x04A4, r1


    }

    return 0;
}
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	27 96       	adiw	r28, 0x07	; 7
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	08 95       	ret

00002e00 <task3>:
uint16_t task3(void)
{
    Blink();
    2e00:	0e 94 11 02 	call	0x422	; 0x422 <Blink>
	static uint8_t countts,countts2,limit=110;
	countts++;
    2e04:	80 91 c2 04 	lds	r24, 0x04C2
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	80 93 c2 04 	sts	0x04C2, r24
    if(CaliberateDistanceValues(SensorValue)==0)
    2e0e:	60 91 ac 04 	lds	r22, 0x04AC
    //uart_string("\n");
}
static uint8_t CaliberateDistanceValues(uint8_t Pingvalue)
{
    static uint8_t PreviousValue,PingCount;
    if(PreviousValue>=3 && Pingvalue!=255)
    2e12:	20 91 c4 04 	lds	r18, 0x04C4
    2e16:	23 30       	cpi	r18, 0x03	; 3
    2e18:	30 f1       	brcs	.+76     	; 0x2e66 <task3+0x66>
    2e1a:	6f 3f       	cpi	r22, 0xFF	; 255
    2e1c:	21 f1       	breq	.+72     	; 0x2e66 <task3+0x66>
    {
        if(Pingvalue>=(PreviousValue+3) && Pingvalue<=(PreviousValue-3))
    2e1e:	86 2f       	mov	r24, r22
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	a9 01       	movw	r20, r18
    2e26:	4d 5f       	subi	r20, 0xFD	; 253
    2e28:	5f 4f       	sbci	r21, 0xFF	; 255
    2e2a:	84 17       	cp	r24, r20
    2e2c:	95 07       	cpc	r25, r21
    2e2e:	6c f0       	brlt	.+26     	; 0x2e4a <task3+0x4a>
    2e30:	23 50       	subi	r18, 0x03	; 3
    2e32:	31 09       	sbc	r19, r1
    2e34:	28 17       	cp	r18, r24
    2e36:	39 07       	cpc	r19, r25
    2e38:	44 f0       	brlt	.+16     	; 0x2e4a <task3+0x4a>
        {
            PreviousValue=Pingvalue;
    2e3a:	60 93 c4 04 	sts	0x04C4, r22
            PingCount=PingCount-1;
    2e3e:	80 91 c5 04 	lds	r24, 0x04C5
    2e42:	81 50       	subi	r24, 0x01	; 1
    2e44:	80 93 c5 04 	sts	0x04C5, r24
    2e48:	0e c0       	rjmp	.+28     	; 0x2e66 <task3+0x66>
        }
        else
        {
            PingCount++;
    2e4a:	80 91 c5 04 	lds	r24, 0x04C5
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
            if(PingCount>=20)
    2e50:	84 31       	cpi	r24, 0x14	; 20
    2e52:	18 f4       	brcc	.+6      	; 0x2e5a <task3+0x5a>
            PreviousValue=Pingvalue;
            PingCount=PingCount-1;
        }
        else
        {
            PingCount++;
    2e54:	80 93 c5 04 	sts	0x04C5, r24
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <task3+0x66>
            if(PingCount>=20)
            {
                PingCount=0;
    2e5a:	10 92 c5 04 	sts	0x04C5, r1
    Blink();
	static uint8_t countts,countts2,limit=110;
	countts++;
    if(CaliberateDistanceValues(SensorValue)==0)
    {
        RTE_WriteBufferUart("Sensor calibrated");
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	93 e0       	ldi	r25, 0x03	; 3
    2e62:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
    }


	//ssd1306_String_font6x8(val,112,0);
	if(countts>3)
    2e66:	80 91 c2 04 	lds	r24, 0x04C2
    2e6a:	84 30       	cpi	r24, 0x04	; 4
    2e6c:	a0 f0       	brcs	.+40     	; 0x2e96 <task3+0x96>
	{
		countts2++;
    2e6e:	80 91 c3 04 	lds	r24, 0x04C3
    2e72:	8f 5f       	subi	r24, 0xFF	; 255
    2e74:	80 93 c3 04 	sts	0x04C3, r24

		if(countts2>SensorValue)
    2e78:	90 91 ac 04 	lds	r25, 0x04AC
    2e7c:	98 17       	cp	r25, r24
    2e7e:	48 f4       	brcc	.+18     	; 0x2e92 <task3+0x92>
		{
			if(limit>0)
    2e80:	80 91 71 02 	lds	r24, 0x0271
    2e84:	88 23       	and	r24, r24
    2e86:	19 f0       	breq	.+6      	; 0x2e8e <task3+0x8e>
			{
				limit=limit-10;
    2e88:	8a 50       	subi	r24, 0x0A	; 10
    2e8a:	80 93 71 02 	sts	0x0271, r24
				
			}
			
			countts2=0;
    2e8e:	10 92 c3 04 	sts	0x04C3, r1
		}
		countts=0;
    2e92:	10 92 c2 04 	sts	0x04C2, r1
	//

		

    return 0;
}
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	08 95       	ret

00002e9c <task4>:
uint16_t task4(void)
{
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <task4+0x6>
    2ea2:	1f 92       	push	r1
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
    static uint16_t countTask4;
    static uint8_t PreviousState,SWITCHCOUNT;
    uint8_t arr[3];
    arr[0]=0;
    2ea8:	19 82       	std	Y+1, r1	; 0x01
    arr[1]=1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	8a 83       	std	Y+2, r24	; 0x02
    arr[2]=2;
    2eae:	82 e0       	ldi	r24, 0x02	; 2
    2eb0:	8b 83       	std	Y+3, r24	; 0x03
    ((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	0e 94 87 11 	call	0x230e	; 0x230e <SignalHandlerFunc>
    char val[4]	;
    if(arr[0])
    2eba:	88 23       	and	r24, r24
    2ebc:	29 f0       	breq	.+10     	; 0x2ec8 <task4+0x2c>
    {
        //RTE_WriteBufferUart("data1");
        // uart_string("ON\n");
        SWITCHCOUNT++;
    2ebe:	80 91 c6 04 	lds	r24, 0x04C6
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	80 93 c6 04 	sts	0x04C6, r24
    }
    if(SWITCHCOUNT>200)
    2ec8:	80 91 c6 04 	lds	r24, 0x04C6
    2ecc:	89 3c       	cpi	r24, 0xC9	; 201
    2ece:	10 f0       	brcs	.+4      	; 0x2ed4 <task4+0x38>
    {
        //uart_string("data1:\n");
        //uart_num(arr[0]);
        SWITCHCOUNT=0;
    2ed0:	10 92 c6 04 	sts	0x04C6, r1
     {
       PinOutput(0,PIN_OUT5,D);
        SetBlink(PIN_OUT1,0x2000,B);
     }*/

    countTask4++;
    2ed4:	80 91 c7 04 	lds	r24, 0x04C7
    2ed8:	90 91 c8 04 	lds	r25, 0x04C8
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	90 93 c8 04 	sts	0x04C8, r25
    2ee2:	80 93 c7 04 	sts	0x04C7, r24
    if(countTask4>=100)
    2ee6:	84 36       	cpi	r24, 0x64	; 100
    2ee8:	91 05       	cpc	r25, r1
    2eea:	b8 f0       	brcs	.+46     	; 0x2f1a <task4+0x7e>
    {
        hours.OperatingHours++;
    2eec:	80 91 c9 04 	lds	r24, 0x04C9
    2ef0:	90 91 ca 04 	lds	r25, 0x04CA
    2ef4:	a0 91 cb 04 	lds	r26, 0x04CB
    2ef8:	b0 91 cc 04 	lds	r27, 0x04CC
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	a1 1d       	adc	r26, r1
    2f00:	b1 1d       	adc	r27, r1
    2f02:	80 93 c9 04 	sts	0x04C9, r24
    2f06:	90 93 ca 04 	sts	0x04CA, r25
    2f0a:	a0 93 cb 04 	sts	0x04CB, r26
    2f0e:	b0 93 cc 04 	sts	0x04CC, r27
        //StoreNVM(Nvm_OH,(uint8_t*)&hours,0);;
        countTask4=0;
    2f12:	10 92 c8 04 	sts	0x04C8, r1
    2f16:	10 92 c7 04 	sts	0x04C7, r1
        //uart_num(countSize());
        //uart_num(deq().EventId);
    }
    //SetDataESP(&count);
}
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	08 95       	ret

00002f26 <task5>:
uint16_t task5(void)
{   
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <task5+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <task5+0x8>
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
	f.LargestValue++;
    2f32:	80 91 cd 04 	lds	r24, 0x04CD
    2f36:	8f 5f       	subi	r24, 0xFF	; 255
    2f38:	80 93 cd 04 	sts	0x04CD, r24
    if(f.LargestValue==201)
    2f3c:	89 3c       	cpi	r24, 0xC9	; 201
    2f3e:	99 f4       	brne	.+38     	; 0x2f66 <task5+0x40>
    {
        //StoreNVM(Nvm_Ping,&f,1);
        hours.OperatingHours++;
    2f40:	80 91 c9 04 	lds	r24, 0x04C9
    2f44:	90 91 ca 04 	lds	r25, 0x04CA
    2f48:	a0 91 cb 04 	lds	r26, 0x04CB
    2f4c:	b0 91 cc 04 	lds	r27, 0x04CC
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	a1 1d       	adc	r26, r1
    2f54:	b1 1d       	adc	r27, r1
    2f56:	80 93 c9 04 	sts	0x04C9, r24
    2f5a:	90 93 ca 04 	sts	0x04CA, r25
    2f5e:	a0 93 cb 04 	sts	0x04CB, r26
    2f62:	b0 93 cc 04 	sts	0x04CC, r27
    }

    ESPRetVal RetVal;
    static uint8_t done=0,ConnectionLost,send=0;
    static uint16_t Tc;
    if(ConnectionLost==0)
    2f66:	80 91 ce 04 	lds	r24, 0x04CE
    2f6a:	81 11       	cpse	r24, r1
    2f6c:	a2 c0       	rjmp	.+324    	; 0x30b2 <task5+0x18c>
    {
        if(ESP_flags.Server_flag==0 && done==0)
    2f6e:	80 91 cf 04 	lds	r24, 0x04CF
    2f72:	82 fd       	sbrc	r24, 2
    2f74:	11 c0       	rjmp	.+34     	; 0x2f98 <task5+0x72>
    2f76:	90 91 d0 04 	lds	r25, 0x04D0
    2f7a:	91 11       	cpse	r25, r1
    2f7c:	0d c0       	rjmp	.+26     	; 0x2f98 <task5+0x72>
        {

            RetVal=ESPAsServer();
    2f7e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <ESPAsServer>

            if(RetVal==ESP_CmdSndOK)
    2f82:	81 11       	cpse	r24, r1
    2f84:	7b c0       	rjmp	.+246    	; 0x307c <task5+0x156>
            {
                ESP_flags.Server_flag=1;
    2f86:	80 91 cf 04 	lds	r24, 0x04CF
    2f8a:	84 60       	ori	r24, 0x04	; 4
    2f8c:	80 93 cf 04 	sts	0x04CF, r24
                done=1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	80 93 d0 04 	sts	0x04D0, r24
    2f96:	7a c0       	rjmp	.+244    	; 0x308c <task5+0x166>
            }

        }
        else if(ESP_flags.Request_Flag==0 && done ==1)
    2f98:	83 fd       	sbrc	r24, 3
    2f9a:	12 c0       	rjmp	.+36     	; 0x2fc0 <task5+0x9a>
    2f9c:	80 91 d0 04 	lds	r24, 0x04D0
    2fa0:	81 30       	cpi	r24, 0x01	; 1
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <task5+0x80>
    2fa4:	6b c0       	rjmp	.+214    	; 0x307c <task5+0x156>
        {
            //uart_string("DONE");
            if(RetVal==RequestWait())
    2fa6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <RequestWait>
    2faa:	81 11       	cpse	r24, r1
    2fac:	67 c0       	rjmp	.+206    	; 0x307c <task5+0x156>
            {
                ESP_flags.Request_Flag=1;
    2fae:	80 91 cf 04 	lds	r24, 0x04CF
    2fb2:	88 60       	ori	r24, 0x08	; 8
    2fb4:	80 93 cf 04 	sts	0x04CF, r24
                done =2;
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	80 93 d0 04 	sts	0x04D0, r24
    2fbe:	66 c0       	rjmp	.+204    	; 0x308c <task5+0x166>
            }
        }

        else if(ESP_flags.Request_Flag==1&& done ==2)
    2fc0:	80 91 d0 04 	lds	r24, 0x04D0
    2fc4:	82 30       	cpi	r24, 0x02	; 2
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <task5+0xa4>
    2fc8:	59 c0       	rjmp	.+178    	; 0x307c <task5+0x156>
        {

            CheckInput();
    2fca:	0e 94 81 04 	call	0x902	; 0x902 <CheckInput>
            if(enable()==1)
    2fce:	0e 94 0f 05 	call	0xa1e	; 0xa1e <enable>
    2fd2:	81 30       	cpi	r24, 0x01	; 1
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <task5+0xb2>
    2fd6:	52 c0       	rjmp	.+164    	; 0x307c <task5+0x156>
            {
                Tc++;
    2fd8:	80 91 d1 04 	lds	r24, 0x04D1
    2fdc:	90 91 d2 04 	lds	r25, 0x04D2
    2fe0:	01 96       	adiw	r24, 0x01	; 1
    2fe2:	90 93 d2 04 	sts	0x04D2, r25
    2fe6:	80 93 d1 04 	sts	0x04D1, r24
                if(send==0)
                {

                }

                if(Tc>400)
    2fea:	81 39       	cpi	r24, 0x91	; 145
    2fec:	91 40       	sbci	r25, 0x01	; 1
    2fee:	08 f4       	brcc	.+2      	; 0x2ff2 <task5+0xcc>
    2ff0:	45 c0       	rjmp	.+138    	; 0x307c <task5+0x156>
                {
                    RetVal=SendData(36);
    2ff2:	84 e2       	ldi	r24, 0x24	; 36
    2ff4:	0e 94 6d 04 	call	0x8da	; 0x8da <SendData>
                    if(/* &&*/ ESP_CmdSndOK==RetVal)
    2ff8:	81 11       	cpse	r24, r1
    2ffa:	40 c0       	rjmp	.+128    	; 0x307c <task5+0x156>
                    {
                        send=0;
    2ffc:	10 92 d3 04 	sts	0x04D3, r1
                        Tc=0;
    3000:	10 92 d2 04 	sts	0x04D2, r1
    3004:	10 92 d1 04 	sts	0x04D1, r1
                        char val[4]="255";
    3008:	82 e3       	ldi	r24, 0x32	; 50
    300a:	95 e3       	ldi	r25, 0x35	; 53
    300c:	a5 e3       	ldi	r26, 0x35	; 53
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	89 83       	std	Y+1, r24	; 0x01
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	ab 83       	std	Y+3, r26	; 0x03
    3016:	bc 83       	std	Y+4, r27	; 0x04
                        val[3]='\0';
                        if(quality==100)
    3018:	80 91 a4 04 	lds	r24, 0x04A4
    301c:	84 36       	cpi	r24, 0x64	; 100
    301e:	31 f5       	brne	.+76     	; 0x306c <task5+0x146>
                        {

                            val[3]='\0';
                            num2CharArray(SensorValue,val);
    3020:	be 01       	movw	r22, r28
    3022:	6f 5f       	subi	r22, 0xFF	; 255
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	80 91 ac 04 	lds	r24, 0x04AC
    302a:	0e 94 10 14 	call	0x2820	; 0x2820 <num2CharArray>
                            RTE_WriteBufferUart("Water Level Monitor");
    302e:	82 e3       	ldi	r24, 0x32	; 50
    3030:	93 e0       	ldi	r25, 0x03	; 3
    3032:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    3036:	82 ec       	ldi	r24, 0xC2	; 194
    3038:	92 e0       	ldi	r25, 0x02	; 2
    303a:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("1.Level");
    303e:	86 e4       	ldi	r24, 0x46	; 70
    3040:	93 e0       	ldi	r25, 0x03	; 3
    3042:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
							RTE_WriteBufferUart("\n");
    3046:	82 ec       	ldi	r24, 0xC2	; 194
    3048:	92 e0       	ldi	r25, 0x02	; 2
    304a:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("2.Debug");
    304e:	8e e4       	ldi	r24, 0x4E	; 78
    3050:	93 e0       	ldi	r25, 0x03	; 3
    3052:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    3056:	82 ec       	ldi	r24, 0xC2	; 194
    3058:	92 e0       	ldi	r25, 0x02	; 2
    305a:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
                            done=3;
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	80 93 d0 04 	sts	0x04D0, r24
                            EspConnected=1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	80 93 d4 04 	sts	0x04D4, r24
    306a:	08 c0       	rjmp	.+16     	; 0x307c <task5+0x156>
                            //printBuffer();
                        }
                        else
                        {
                            RTE_WriteBufferUart(val);
    306c:	ce 01       	movw	r24, r28
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    3074:	82 ec       	ldi	r24, 0xC2	; 194
    3076:	92 e0       	ldi	r25, 0x02	; 2
    3078:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>

                }
            }

        }
        if(done==3)
    307c:	80 91 d0 04 	lds	r24, 0x04D0
    3080:	83 30       	cpi	r24, 0x03	; 3
    3082:	21 f4       	brne	.+8      	; 0x308c <task5+0x166>
        {
            task6(0);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 39 14 	call	0x2872	; 0x2872 <task6>
        }
        if(ESP_CmdSndOK==WifiDisconnectCheck())
    308c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <WifiDisconnectCheck>
    3090:	81 11       	cpse	r24, r1
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <task5+0x18c>
        {
            ConnectionLost=1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	80 93 ce 04 	sts	0x04CE, r24
            SetBlink(PIN_OUT1,0x3028,B);
    309a:	40 e0       	ldi	r20, 0x00	; 0
    309c:	50 e0       	ldi	r21, 0x00	; 0
    309e:	68 e2       	ldi	r22, 0x28	; 40
    30a0:	70 e3       	ldi	r23, 0x30	; 48
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SetBlink>
            RTE_WriteBufferUart("HEREOff\n");
    30aa:	86 e5       	ldi	r24, 0x56	; 86
    30ac:	93 e0       	ldi	r25, 0x03	; 3
    30ae:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
        }
    }
    if(ESP_CmdSndOK==ConnectCommand())
    30b2:	0e 94 75 04 	call	0x8ea	; 0x8ea <ConnectCommand>
    30b6:	81 11       	cpse	r24, r1
    30b8:	16 c0       	rjmp	.+44     	; 0x30e6 <task5+0x1c0>
    {
        RTE_WriteBufferUart("HEREON\n");
    30ba:	8f e5       	ldi	r24, 0x5F	; 95
    30bc:	93 e0       	ldi	r25, 0x03	; 3
    30be:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
        ConnectionLost=0;
    30c2:	10 92 ce 04 	sts	0x04CE, r1
        ESP_flags.Server_flag=0;
    30c6:	80 91 cf 04 	lds	r24, 0x04CF
        ESP_flags.Request_Flag=0;
    30ca:	8b 7f       	andi	r24, 0xFB	; 251
    30cc:	87 7f       	andi	r24, 0xF7	; 247
    30ce:	80 93 cf 04 	sts	0x04CF, r24
        done=0;
    30d2:	10 92 d0 04 	sts	0x04D0, r1
        SetBlink(PIN_OUT1,0x3000,B);
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	70 e3       	ldi	r23, 0x30	; 48
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SetBlink>
    }
}
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	08 95       	ret

000030f4 <task1Open>:
    return 0;
}
uint16_t task1Open(void)
{

    PinOutConfig(0,PIN_OUT2,C);
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    PinOutConfig(0,PIN_OUT3,C);
    30fe:	41 e0       	ldi	r20, 0x01	; 1
    3100:	62 e0       	ldi	r22, 0x02	; 2
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    PinOutConfig(1,PIN_OUT1,B);
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    //uart_string("In open 1");

    return 0;
}
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	08 95       	ret

00003118 <task2Open>:
uint16_t task2Open(void)
{

    //uart_string("In open 2");
    PinOutConfig(1,PIN_OUT2,B);
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    PinOutConfig(1,PIN_OUT1,B);
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	60 e0       	ldi	r22, 0x00	; 0
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    PinOutConfig(1,PIN_OUT8,D);
    312c:	42 e0       	ldi	r20, 0x02	; 2
    312e:	67 e0       	ldi	r22, 0x07	; 7
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>

    return 0;
}
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	08 95       	ret

0000313c <task3Open>:
uint16_t task3Open(void)
{
    uart_string("In open 3");
    313c:	87 e6       	ldi	r24, 0x67	; 103
    313e:	93 e0       	ldi	r25, 0x03	; 3
    3140:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <uart_string>
    uart_num(countSize());
    3144:	0e 94 6d 12 	call	0x24da	; 0x24da <countSize>
    3148:	0e 94 87 0b 	call	0x170e	; 0x170e <uart_num>
    return 0;
}
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	08 95       	ret

00003152 <task4Open>:
uint16_t task4Open(void)
{
    static uint16_t tracker;
    tracker++;
    3152:	80 91 da 04 	lds	r24, 0x04DA
    3156:	90 91 db 04 	lds	r25, 0x04DB
    315a:	01 96       	adiw	r24, 0x01	; 1
    315c:	90 93 db 04 	sts	0x04DB, r25
    3160:	80 93 da 04 	sts	0x04DA, r24
    if(tracker>500)
    3164:	85 3f       	cpi	r24, 0xF5	; 245
    3166:	91 40       	sbci	r25, 0x01	; 1
    3168:	40 f0       	brcs	.+16     	; 0x317a <task4Open+0x28>
    {
        RTE_WriteBufferUart("open4");
    316a:	81 e7       	ldi	r24, 0x71	; 113
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	0e 94 27 1b 	call	0x364e	; 0x364e <Rte_Uart_WriteBuffer>
        //uart_string("open4c");
        tracker=0;
    3172:	10 92 db 04 	sts	0x04DB, r1
    3176:	10 92 da 04 	sts	0x04DA, r1
    }

    PinOutConfig(0,PIN_OUT3,B);
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	62 e0       	ldi	r22, 0x02	; 2
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    PinOutConfig(1,PIN_OUT7,D);
    3184:	42 e0       	ldi	r20, 0x02	; 2
    3186:	66 e0       	ldi	r22, 0x06	; 6
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <PinOutConfig>
    PinOutput(1,PIN_OUT3,B);
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	62 e0       	ldi	r22, 0x02	; 2
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
    PinOutput(0,PIN_OUT7,D);
    3198:	42 e0       	ldi	r20, 0x02	; 2
    319a:	66 e0       	ldi	r22, 0x06	; 6
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 a4 08 	call	0x1148	; 0x1148 <PinOutput>
    return 0;
}
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	08 95       	ret

000031a8 <task5Open>:

uint16_t task5Open(void)
{
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <task5Open+0xa>
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31b6:	2f e7       	ldi	r18, 0x7F	; 127
    31b8:	8a e1       	ldi	r24, 0x1A	; 26
    31ba:	96 e0       	ldi	r25, 0x06	; 6
    31bc:	21 50       	subi	r18, 0x01	; 1
    31be:	80 40       	sbci	r24, 0x00	; 0
    31c0:	90 40       	sbci	r25, 0x00	; 0
    31c2:	e1 f7       	brne	.-8      	; 0x31bc <task5Open+0x14>
    31c4:	00 c0       	rjmp	.+0      	; 0x31c6 <task5Open+0x1e>
    31c6:	00 00       	nop
    _delay_ms(2000);
    uart_init();
    31c8:	0e 94 25 0b 	call	0x164a	; 0x164a <uart_init>
    PushEventInterface(125,ESPreadvalue,0,0);
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	63 e4       	ldi	r22, 0x43	; 67
    31d4:	72 e0       	ldi	r23, 0x02	; 2
    31d6:	8d e7       	ldi	r24, 0x7D	; 125
    31d8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    PushEventInterface(175,SignalHandlerFunc,0,0);
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	67 e8       	ldi	r22, 0x87	; 135
    31e4:	71 e1       	ldi	r23, 0x11	; 17
    31e6:	8f ea       	ldi	r24, 0xAF	; 175
    31e8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <PushEventInterface>
    uint16_t Address;
    Address=task6;
    31ec:	89 e3       	ldi	r24, 0x39	; 57
    31ee:	94 e1       	ldi	r25, 0x14	; 20
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
    ESPCallBack(&Address);
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <ESPCallBack>
    OutPutVariableRegister(&SensorValue,1,0);
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	8c ea       	ldi	r24, 0xAC	; 172
    3202:	94 e0       	ldi	r25, 0x04	; 4
    3204:	0e 94 29 10 	call	0x2052	; 0x2052 <OutPutVariableRegister>
    i2c_init();
    3208:	0e 94 97 06 	call	0xd2e	; 0xd2e <i2c_init>
    uart_num(i2c_start(0x78));
    320c:	88 e7       	ldi	r24, 0x78	; 120
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	0e 94 a7 06 	call	0xd4e	; 0xd4e <i2c_start>
    3214:	0e 94 87 0b 	call	0x170e	; 0x170e <uart_num>
    uart_num(ssd1036_Init());
    3218:	0e 94 44 07 	call	0xe88	; 0xe88 <ssd1036_Init>
    321c:	0e 94 87 0b 	call	0x170e	; 0x170e <uart_num>
   uart_num(ssd1036_chumma());
    3220:	0e 94 4b 07 	call	0xe96	; 0xe96 <ssd1036_chumma>
    3224:	0e 94 87 0b 	call	0x170e	; 0x170e <uart_num>
    3228:	00 e0       	ldi	r16, 0x00	; 0
    322a:	14 e0       	ldi	r17, 0x04	; 4
    for(uint16_t i=0;i<1024;i++)
    {
    	ssd1036_chumma();
    322c:	0e 94 4b 07 	call	0xe96	; 0xe96 <ssd1036_chumma>
    3230:	01 50       	subi	r16, 0x01	; 1
    3232:	11 09       	sbc	r17, r1
    OutPutVariableRegister(&SensorValue,1,0);
    i2c_init();
    uart_num(i2c_start(0x78));
    uart_num(ssd1036_Init());
   uart_num(ssd1036_chumma());
    for(uint16_t i=0;i<1024;i++)
    3234:	d9 f7       	brne	.-10     	; 0x322c <task5Open+0x84>
    {
    	ssd1036_chumma();
    }

    ssd1306_String_font6x8("Water Level",0,0);
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	87 e7       	ldi	r24, 0x77	; 119
    3240:	93 e0       	ldi	r25, 0x03	; 3
    3242:	0e 94 a1 07 	call	0xf42	; 0xf42 <ssd1306_String_font6x8>
    ssd1306_String_font6x8("Controller",68,1);
    3246:	41 e0       	ldi	r20, 0x01	; 1
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	64 e4       	ldi	r22, 0x44	; 68
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	83 e8       	ldi	r24, 0x83	; 131
    3250:	93 e0       	ldi	r25, 0x03	; 3
    3252:	0e 94 a1 07 	call	0xf42	; 0xf42 <ssd1306_String_font6x8>
    3256:	2f ef       	ldi	r18, 0xFF	; 255
    3258:	88 e0       	ldi	r24, 0x08	; 8
    325a:	9d e3       	ldi	r25, 0x3D	; 61
    325c:	21 50       	subi	r18, 0x01	; 1
    325e:	80 40       	sbci	r24, 0x00	; 0
    3260:	90 40       	sbci	r25, 0x00	; 0
    3262:	e1 f7       	brne	.-8      	; 0x325c <task5Open+0xb4>
    3264:	00 c0       	rjmp	.+0      	; 0x3266 <task5Open+0xbe>
    3266:	00 00       	nop
    3268:	00 e0       	ldi	r16, 0x00	; 0
    326a:	14 e0       	ldi	r17, 0x04	; 4
    _delay_ms(20000);
    	for(uint16_t i=0;i<1024;i++)
    	{
    		ssd1036_chumma();
    326c:	0e 94 4b 07 	call	0xe96	; 0xe96 <ssd1036_chumma>
    3270:	01 50       	subi	r16, 0x01	; 1
    3272:	11 09       	sbc	r17, r1
    }

    ssd1306_String_font6x8("Water Level",0,0);
    ssd1306_String_font6x8("Controller",68,1);
    _delay_ms(20000);
    	for(uint16_t i=0;i<1024;i++)
    3274:	d9 f7       	brne	.-10     	; 0x326c <task5Open+0xc4>
    uart_num(point[3]);*/
	//PopulateSSDbuffer("Wifi",0,1);
	//PopulateSSDbuffer("Tank level:",0,3);
	
    static Nvm_T_TankOverflow Tankov;
    ESP_Init();
    3276:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <ESP_Init>
    static uint8_t testnvm=9;
    //Tankov.Tank=2;
    a.LargestValue=52;
    327a:	84 e3       	ldi	r24, 0x34	; 52
    327c:	80 93 dc 04 	sts	0x04DC, r24
    f.LargestValue=48;
    3280:	80 e3       	ldi	r24, 0x30	; 48
    3282:	80 93 cd 04 	sts	0x04CD, r24
    c.LargestValue=54;
    3286:	86 e3       	ldi	r24, 0x36	; 54
    3288:	80 93 dd 04 	sts	0x04DD, r24
    uart_num(GetCurrentEvent()->ptr[0]);*/
    //uart_string("here\n");
    //PrintEvents();
    //uart_string("\n");
    return 0;
}
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	08 95       	ret

0000329e <HookupTasks>:
    //uart_num(event);
    //uart_string("\n");
    //if(event==0x01)
    //{

    if(UartEvents==0x01)
    329e:	80 91 fe 04 	lds	r24, 0x04FE
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	11 f0       	breq	.+4      	; 0x32aa <HookupTasks+0xc>
        //DebugMode();
    }
    else
    {
        // ESPreadvalue(PopInterface);
        checkRecievedData();
    32a6:	0e 94 12 05 	call	0xa24	; 0xa24 <checkRecievedData>
    32aa:	08 95       	ret

000032ac <TaskFrames>:
    Ustring[2]=(O+48);
}


uint16_t TaskFrames()
{
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <TaskFrames+0x6>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <TaskFrames+0x8>
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t FrameNo,FrameTime;
	char val[4]="255";
    32b8:	82 e3       	ldi	r24, 0x32	; 50
    32ba:	95 e3       	ldi	r25, 0x35	; 53
    32bc:	a5 e3       	ldi	r26, 0x35	; 53
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	ab 83       	std	Y+3, r26	; 0x03
    32c6:	bc 83       	std	Y+4, r27	; 0x04
	switch (FrameNo)
    32c8:	80 91 de 04 	lds	r24, 0x04DE
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	89 f0       	breq	.+34     	; 0x32f2 <TaskFrames+0x46>
    32d0:	30 f0       	brcs	.+12     	; 0x32de <TaskFrames+0x32>
    32d2:	82 30       	cpi	r24, 0x02	; 2
    32d4:	69 f1       	breq	.+90     	; 0x3330 <TaskFrames+0x84>
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	09 f0       	breq	.+2      	; 0x32dc <TaskFrames+0x30>
    32da:	45 c0       	rjmp	.+138    	; 0x3366 <TaskFrames+0xba>
    32dc:	37 c0       	rjmp	.+110    	; 0x334c <TaskFrames+0xa0>
	{
		case 0:
          SSDSetFramePos(0);		  
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <SSDSetFramePos>
		  FrameNo++;
    32e6:	80 91 de 04 	lds	r24, 0x04DE
    32ea:	8f 5f       	subi	r24, 0xFF	; 255
    32ec:	80 93 de 04 	sts	0x04DE, r24
		break;
    32f0:	3a c0       	rjmp	.+116    	; 0x3366 <TaskFrames+0xba>
		case 1:
		FrameTime++;
    32f2:	80 91 df 04 	lds	r24, 0x04DF
    32f6:	8f 5f       	subi	r24, 0xFF	; 255
    32f8:	80 93 df 04 	sts	0x04DF, r24
								num2CharArray(SensorValue,val);
    32fc:	be 01       	movw	r22, r28
    32fe:	6f 5f       	subi	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	80 91 ac 04 	lds	r24, 0x04AC
    3306:	0e 94 10 14 	call	0x2820	; 0x2820 <num2CharArray>
								val[3]='\0';
    330a:	1c 82       	std	Y+4, r1	; 0x04
								PopulateSSDbuffer(val,66,2);
    330c:	42 e0       	ldi	r20, 0x02	; 2
    330e:	62 e4       	ldi	r22, 0x42	; 66
    3310:	ce 01       	movw	r24, r28
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	0e 94 03 12 	call	0x2406	; 0x2406 <PopulateSSDbuffer>
		if(FrameTime>250)
    3318:	80 91 df 04 	lds	r24, 0x04DF
    331c:	8b 3f       	cpi	r24, 0xFB	; 251
    331e:	18 f1       	brcs	.+70     	; 0x3366 <TaskFrames+0xba>
		{               
			FrameTime=0;
    3320:	10 92 df 04 	sts	0x04DF, r1
			FrameNo++;
    3324:	80 91 de 04 	lds	r24, 0x04DE
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	80 93 de 04 	sts	0x04DE, r24
    332e:	1b c0       	rjmp	.+54     	; 0x3366 <TaskFrames+0xba>
		}
		break;
		case 2:
          SSDSetFramePos(1);
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 b2 0a 	call	0x1564	; 0x1564 <SSDSetFramePos>
		  uart_string("hre");
    3338:	8e e8       	ldi	r24, 0x8E	; 142
    333a:	93 e0       	ldi	r25, 0x03	; 3
    333c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <uart_string>
          FrameNo++;		
    3340:	80 91 de 04 	lds	r24, 0x04DE
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	80 93 de 04 	sts	0x04DE, r24
		break;
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <TaskFrames+0xba>
		case 3:
		FrameTime++;
    334c:	80 91 df 04 	lds	r24, 0x04DF
    3350:	8f 5f       	subi	r24, 0xFF	; 255
		if(FrameTime>50)
    3352:	83 33       	cpi	r24, 0x33	; 51
    3354:	18 f4       	brcc	.+6      	; 0x335c <TaskFrames+0xb0>
          SSDSetFramePos(1);
		  uart_string("hre");
          FrameNo++;		
		break;
		case 3:
		FrameTime++;
    3356:	80 93 df 04 	sts	0x04DF, r24
    335a:	05 c0       	rjmp	.+10     	; 0x3366 <TaskFrames+0xba>
		if(FrameTime>50)
		{
			FrameTime=0;
    335c:	10 92 df 04 	sts	0x04DF, r1
			FrameNo=4;
    3360:	84 e0       	ldi	r24, 0x04	; 4
    3362:	80 93 de 04 	sts	0x04DE, r24
		}		 
		default:
		/* Your code here */
		break;
	}
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	08 95       	ret

00003374 <NonPeriodicTaskFuncSet>:
			}
		}
		return 0;
}
uint16_t NonPeriodicTaskFuncSet(void *ptr)
{
    3374:	fc 01       	movw	r30, r24
	uint8_t *data;
	uint8_t funcpoint[2];
	data=(uint8_t*)ptr;
	NonPeriodictaskArr[data[0]].taskfucntion=(funPtrBase*)(((uint16_t*)(data+2))[0]);
    3376:	80 81       	ld	r24, Z
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	dc 01       	movw	r26, r24
    337c:	aa 0f       	add	r26, r26
    337e:	bb 1f       	adc	r27, r27
    3380:	aa 0f       	add	r26, r26
    3382:	bb 1f       	adc	r27, r27
    3384:	8a 0f       	add	r24, r26
    3386:	9b 1f       	adc	r25, r27
    3388:	dc 01       	movw	r26, r24
    338a:	a0 52       	subi	r26, 0x20	; 32
    338c:	bb 4f       	sbci	r27, 0xFB	; 251
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	8d 93       	st	X+, r24
    3394:	9c 93       	st	X, r25
	NonPeriodictaskArr[data[0]].On=data[1];
    3396:	21 81       	ldd	r18, Z+1	; 0x01
    3398:	80 81       	ld	r24, Z
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	dc 01       	movw	r26, r24
    339e:	aa 0f       	add	r26, r26
    33a0:	bb 1f       	adc	r27, r27
    33a2:	aa 0f       	add	r26, r26
    33a4:	bb 1f       	adc	r27, r27
    33a6:	8a 0f       	add	r24, r26
    33a8:	9b 1f       	adc	r25, r27
    33aa:	dc 01       	movw	r26, r24
    33ac:	a0 52       	subi	r26, 0x20	; 32
    33ae:	bb 4f       	sbci	r27, 0xFB	; 251
    33b0:	12 96       	adiw	r26, 0x02	; 2
    33b2:	2c 93       	st	X, r18
	NonPeriodictaskArr[data[0]].ptr=ptr;	
    33b4:	80 81       	ld	r24, Z
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	dc 01       	movw	r26, r24
    33ba:	aa 0f       	add	r26, r26
    33bc:	bb 1f       	adc	r27, r27
    33be:	aa 0f       	add	r26, r26
    33c0:	bb 1f       	adc	r27, r27
    33c2:	8a 0f       	add	r24, r26
    33c4:	9b 1f       	adc	r25, r27
    33c6:	dc 01       	movw	r26, r24
    33c8:	a0 52       	subi	r26, 0x20	; 32
    33ca:	bb 4f       	sbci	r27, 0xFB	; 251
    33cc:	14 96       	adiw	r26, 0x04	; 4
    33ce:	fc 93       	st	X, r31
    33d0:	ee 93       	st	-X, r30
    33d2:	13 97       	sbiw	r26, 0x03	; 3
}
    33d4:	08 95       	ret

000033d6 <BaseHandler>:
uint16_t BaseHandler(void *ptr)
{
	uint8_t *data;
	data=(uint8_t*)ptr;
    taskfuncbase[*data-1].On=1;
    33d6:	fc 01       	movw	r30, r24
    33d8:	80 81       	ld	r24, Z
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	fc 01       	movw	r30, r24
    33e0:	ee 0f       	add	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	ee 0f       	add	r30, r30
    33e6:	ff 1f       	adc	r31, r31
    33e8:	ee 0f       	add	r30, r30
    33ea:	ff 1f       	adc	r31, r31
    33ec:	e8 1b       	sub	r30, r24
    33ee:	f9 0b       	sbc	r31, r25
    33f0:	ee 58       	subi	r30, 0x8E	; 142
    33f2:	fd 4f       	sbci	r31, 0xFD	; 253
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	85 83       	std	Z+5, r24	; 0x05
	//uart_string("bhandler\n");
}
    33f8:	08 95       	ret

000033fa <tasksBase>:
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
{
    33fa:	7f 92       	push	r7
    33fc:	8f 92       	push	r8
    33fe:	9f 92       	push	r9
    3400:	af 92       	push	r10
    3402:	bf 92       	push	r11
    3404:	cf 92       	push	r12
    3406:	df 92       	push	r13
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	00 d0       	rcall	.+0      	; 0x3416 <tasksBase+0x1c>
    3416:	00 d0       	rcall	.+0      	; 0x3418 <tasksBase+0x1e>
    3418:	1f 92       	push	r1
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
    341e:	80 91 fb 04 	lds	r24, 0x04FB
    3422:	81 11       	cpse	r24, r1
    3424:	4c c0       	rjmp	.+152    	; 0x34be <tasksBase+0xc4>
    3426:	07 e7       	ldi	r16, 0x77	; 119
    3428:	12 e0       	ldi	r17, 0x02	; 2
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    342a:	0f 2e       	mov	r0, r31
    342c:	fc e8       	ldi	r31, 0x8C	; 140
    342e:	ef 2e       	mov	r14, r31
    3430:	f2 e0       	ldi	r31, 0x02	; 2
    3432:	ff 2e       	mov	r15, r31
    3434:	f0 2d       	mov	r31, r0
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<3;i++)
		{
			if(taskfuncbase[i].On==dON)
    3436:	f8 01       	movw	r30, r16
    3438:	80 81       	ld	r24, Z
    343a:	81 30       	cpi	r24, 0x01	; 1
    343c:	29 f4       	brne	.+10     	; 0x3448 <tasksBase+0x4e>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    343e:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<3;i++)
		{
			if(taskfuncbase[i].On==dON)
			{
				
				taskfuncbase[i].Openfucntion();
    3440:	01 90       	ld	r0, Z+
    3442:	f0 81       	ld	r31, Z
    3444:	e0 2d       	mov	r30, r0
    3446:	09 95       	icall
    3448:	09 5f       	subi	r16, 0xF9	; 249
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
uint16_t tasksBase()
{
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<3;i++)
    344c:	0e 15       	cp	r16, r14
    344e:	1f 05       	cpc	r17, r15
    3450:	91 f7       	brne	.-28     	; 0x3436 <tasksBase+0x3c>
			{
				
				taskfuncbase[i].Openfucntion();
			}
		}
		opentaskbase=1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	80 93 fb 04 	sts	0x04FB, r24
    3458:	32 c0       	rjmp	.+100    	; 0x34be <tasksBase+0xc4>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    345a:	58 01       	movw	r10, r16
		
	}
	
	for(int i=0;i<3;i++)
	{
		taskfuncbase[i].counter++;
    345c:	f8 01       	movw	r30, r16
    345e:	80 81       	ld	r24, Z
    3460:	8f 5f       	subi	r24, 0xFF	; 255
    3462:	80 83       	st	Z, r24
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    3464:	f7 01       	movw	r30, r14
    3466:	90 81       	ld	r25, Z
    3468:	91 30       	cpi	r25, 0x01	; 1
    346a:	01 f5       	brne	.+64     	; 0x34ac <tasksBase+0xb2>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    346c:	f8 01       	movw	r30, r16
    346e:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<3;i++)
	{
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    3470:	90 81       	ld	r25, Z
    3472:	89 17       	cp	r24, r25
    3474:	d8 f0       	brcs	.+54     	; 0x34ac <tasksBase+0xb2>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3476:	f8 01       	movw	r30, r16
    3478:	36 97       	sbiw	r30, 0x06	; 6
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
		{
			uint16_t Temp;
			uint8_t arr[3];
			Temp=taskfuncbase[i].taskfucntion();
    347a:	01 90       	ld	r0, Z+
    347c:	f0 81       	ld	r31, Z
    347e:	e0 2d       	mov	r30, r0
    3480:	09 95       	icall
    3482:	9d 83       	std	Y+5, r25	; 0x05
    3484:	8c 83       	std	Y+4, r24	; 0x04
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	80 fd       	sbrc	r24, 0
    348a:	0e c0       	rjmp	.+28     	; 0x34a8 <tasksBase+0xae>
			{
				//uart_string("done");
				arr[0]=1;
    348c:	79 82       	std	Y+1, r7	; 0x01
				arr[1]=(((uint8_t*)&Temp)[1]>>1)&0x7f;
    348e:	86 95       	lsr	r24
    3490:	8a 83       	std	Y+2, r24	; 0x02
				arr[2]=((uint8_t*)&Temp)[0];
    3492:	8c 81       	ldd	r24, Y+4	; 0x04
    3494:	8b 83       	std	Y+3, r24	; 0x03
				callbackarrayfuc func;
				func=callbackgetFunction(2);
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	0e 94 07 14 	call	0x280e	; 0x280e <callbackgetFunction>
    349c:	fc 01       	movw	r30, r24
				func(arr);
    349e:	ce 01       	movw	r24, r28
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	09 95       	icall
				taskfuncbase[i].On=0;
    34a4:	f7 01       	movw	r30, r14
    34a6:	10 82       	st	Z, r1
			}
			taskfuncbase[i].counter=0;
    34a8:	f5 01       	movw	r30, r10
    34aa:	10 82       	st	Z, r1
    34ac:	09 5f       	subi	r16, 0xF9	; 249
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	f7 e0       	ldi	r31, 0x07	; 7
    34b2:	ef 0e       	add	r14, r31
    34b4:	f1 1c       	adc	r15, r1
		}
		opentaskbase=1;
		
	}
	
	for(int i=0;i<3;i++)
    34b6:	0c 15       	cp	r16, r12
    34b8:	1d 05       	cpc	r17, r13
    34ba:	79 f6       	brne	.-98     	; 0x345a <tasksBase+0x60>
    34bc:	11 c0       	rjmp	.+34     	; 0x34e0 <tasksBase+0xe6>
    34be:	08 e7       	ldi	r16, 0x78	; 120
    34c0:	12 e0       	ldi	r17, 0x02	; 2
    34c2:	0f 2e       	mov	r0, r31
    34c4:	f7 e7       	ldi	r31, 0x77	; 119
    34c6:	ef 2e       	mov	r14, r31
    34c8:	f2 e0       	ldi	r31, 0x02	; 2
    34ca:	ff 2e       	mov	r15, r31
    34cc:	f0 2d       	mov	r31, r0
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    34ce:	0f 2e       	mov	r0, r31
    34d0:	fd e8       	ldi	r31, 0x8D	; 141
    34d2:	cf 2e       	mov	r12, r31
    34d4:	f2 e0       	ldi	r31, 0x02	; 2
    34d6:	df 2e       	mov	r13, r31
    34d8:	f0 2d       	mov	r31, r0
			Temp=taskfuncbase[i].taskfucntion();
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
			{
				//uart_string("done");
				arr[0]=1;
    34da:	77 24       	eor	r7, r7
    34dc:	73 94       	inc	r7
    34de:	bd cf       	rjmp	.-134    	; 0x345a <tasksBase+0x60>
			//UartHandlerMain();
		}
	}
	
	return 0;
}
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	bf 90       	pop	r11
    3500:	af 90       	pop	r10
    3502:	9f 90       	pop	r9
    3504:	8f 90       	pop	r8
    3506:	7f 90       	pop	r7
    3508:	08 95       	ret

0000350a <tasks>:
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
{
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
	static uint8_t opentask=0;
	if(opentask==0)
    3516:	80 91 f9 04 	lds	r24, 0x04F9
    351a:	81 11       	cpse	r24, r1
    351c:	3e c0       	rjmp	.+124    	; 0x359a <tasks+0x90>
	{
		callbackSetFunction(1,BaseHandler);
    351e:	6b ee       	ldi	r22, 0xEB	; 235
    3520:	79 e1       	ldi	r23, 0x19	; 25
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	0e 94 fe 13 	call	0x27fc	; 0x27fc <callbackSetFunction>
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
    3528:	6a eb       	ldi	r22, 0xBA	; 186
    352a:	79 e1       	ldi	r23, 0x19	; 25
    352c:	83 e0       	ldi	r24, 0x03	; 3
    352e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <callbackSetFunction>
		Nvm_TableInit();
    3532:	0e 94 36 10 	call	0x206c	; 0x206c <Nvm_TableInit>
    3536:	cc e8       	ldi	r28, 0x8C	; 140
    3538:	d2 e0       	ldi	r29, 0x02	; 2
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    353a:	04 ec       	ldi	r16, 0xC4	; 196
    353c:	12 e0       	ldi	r17, 0x02	; 2
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
    353e:	88 81       	ld	r24, Y
    3540:	81 30       	cpi	r24, 0x01	; 1
    3542:	31 f4       	brne	.+12     	; 0x3550 <tasks+0x46>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3544:	fe 01       	movw	r30, r28
    3546:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
			{
				
				taskfunc[i].Openfucntion();
    3548:	01 90       	ld	r0, Z+
    354a:	f0 81       	ld	r31, Z
    354c:	e0 2d       	mov	r30, r0
    354e:	09 95       	icall
    3550:	27 96       	adiw	r28, 0x07	; 7
	if(opentask==0)
	{
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
    3552:	c0 17       	cp	r28, r16
    3554:	d1 07       	cpc	r29, r17
    3556:	99 f7       	brne	.-26     	; 0x353e <tasks+0x34>
			{
				
				taskfunc[i].Openfucntion();
			}
		}
		opentask=1;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	80 93 f9 04 	sts	0x04F9, r24
		openDone=1;
    355e:	80 93 fa 04 	sts	0x04FA, r24
		UartHandlerInit();
    3562:	0e 94 56 05 	call	0xaac	; 0xaac <UartHandlerInit>
    3566:	19 c0       	rjmp	.+50     	; 0x359a <tasks+0x90>
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
    3568:	88 81       	ld	r24, Y
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	88 83       	st	Y, r24
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    356e:	fe 01       	movw	r30, r28
    3570:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    3572:	90 81       	ld	r25, Z
    3574:	91 30       	cpi	r25, 0x01	; 1
    3576:	61 f4       	brne	.+24     	; 0x3590 <tasks+0x86>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3578:	fe 01       	movw	r30, r28
    357a:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    357c:	90 81       	ld	r25, Z
    357e:	89 17       	cp	r24, r25
    3580:	38 f0       	brcs	.+14     	; 0x3590 <tasks+0x86>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3582:	fe 01       	movw	r30, r28
    3584:	36 97       	sbiw	r30, 0x06	; 6
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
		{
			taskfunc[i].taskfucntion();
    3586:	01 90       	ld	r0, Z+
    3588:	f0 81       	ld	r31, Z
    358a:	e0 2d       	mov	r30, r0
    358c:	09 95       	icall
			taskfunc[i].counter=0;
    358e:	18 82       	st	Y, r1
    3590:	27 96       	adiw	r28, 0x07	; 7
		openDone=1;
		UartHandlerInit();
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
    3592:	ce 15       	cp	r28, r14
    3594:	df 05       	cpc	r29, r15
    3596:	41 f7       	brne	.-48     	; 0x3568 <tasks+0x5e>
    3598:	09 c0       	rjmp	.+18     	; 0x35ac <tasks+0xa2>
    359a:	cd e8       	ldi	r28, 0x8D	; 141
    359c:	d2 e0       	ldi	r29, 0x02	; 2
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    359e:	0f 2e       	mov	r0, r31
    35a0:	f5 ec       	ldi	r31, 0xC5	; 197
    35a2:	ef 2e       	mov	r14, r31
    35a4:	f2 e0       	ldi	r31, 0x02	; 2
    35a6:	ff 2e       	mov	r15, r31
    35a8:	f0 2d       	mov	r31, r0
    35aa:	de cf       	rjmp	.-68     	; 0x3568 <tasks+0x5e>
			taskfunc[i].counter=0;
			
			//UartHandlerMain();
		}
	}
    ReadEveryValueADC();
    35ac:	0e 94 66 0c 	call	0x18cc	; 0x18cc <ReadEveryValueADC>
	
	return 0;
}
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	08 95       	ret

000035c2 <NonPeriodicTaskFuncCall>:
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	c2 ee       	ldi	r28, 0xE2	; 226
    35cc:	d4 e0       	ldi	r29, 0x04	; 4
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    35ce:	0b ef       	ldi	r16, 0xFB	; 251
    35d0:	14 e0       	ldi	r17, 0x04	; 4
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
		{
			tasktime++;
    35d2:	80 91 fc 04 	lds	r24, 0x04FC
    35d6:	90 91 fd 04 	lds	r25, 0x04FD
    35da:	01 96       	adiw	r24, 0x01	; 1
    35dc:	90 93 fd 04 	sts	0x04FD, r25
    35e0:	80 93 fc 04 	sts	0x04FC, r24
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
    35e4:	28 81       	ld	r18, Y
    35e6:	21 30       	cpi	r18, 0x01	; 1
    35e8:	79 f4       	brne	.+30     	; 0x3608 <NonPeriodicTaskFuncCall+0x46>
    35ea:	85 38       	cpi	r24, 0x85	; 133
    35ec:	93 40       	sbci	r25, 0x03	; 3
    35ee:	60 f0       	brcs	.+24     	; 0x3608 <NonPeriodicTaskFuncCall+0x46>
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    35f0:	fe 01       	movw	r30, r28
    35f2:	32 97       	sbiw	r30, 0x02	; 2
		for(int i=0;i<5;i++)
		{
			tasktime++;
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
			{
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
    35f4:	01 90       	ld	r0, Z+
    35f6:	f0 81       	ld	r31, Z
    35f8:	e0 2d       	mov	r30, r0
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	09 95       	icall
				tasktime=0;			
    3600:	10 92 fd 04 	sts	0x04FD, r1
    3604:	10 92 fc 04 	sts	0x04FC, r1
    3608:	25 96       	adiw	r28, 0x05	; 5
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
    360a:	c0 17       	cp	r28, r16
    360c:	d1 07       	cpc	r29, r17
    360e:	09 f7       	brne	.-62     	; 0x35d2 <NonPeriodicTaskFuncCall+0x10>
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
				tasktime=0;			
			}
		}
		return 0;
}
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	08 95       	ret

0000361e <ApplicationHookUP>:
		}
    }
	}
}
void ApplicationHookUP(uint8_t * event)
{
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	ec 01       	movw	r28, r24
	SSDtask();
    3624:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <SSDtask>
	if(openDone==1)
    3628:	80 91 fa 04 	lds	r24, 0x04FA
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	19 f4       	brne	.+6      	; 0x3636 <ApplicationHookUP+0x18>
	{
		HookupTasks(event);
    3630:	ce 01       	movw	r24, r28
    3632:	0e 94 4f 19 	call	0x329e	; 0x329e <HookupTasks>
		//DataTransmit();
	}
	if(UartEvents==1)
    3636:	80 91 fe 04 	lds	r24, 0x04FE
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	11 f4       	brne	.+4      	; 0x3642 <ApplicationHookUP+0x24>
	{
		taskfunc[5].On=1;
    363e:	80 93 af 02 	sts	0x02AF, r24
	}
	
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	08 95       	ret

00003648 <RTEModuleFirstCh>:
#ifndef RTE_ASW_H_
#define RTE_ASW_H_
#include <avr/io.h>
extern void RTEModuleFirstCh(uint16_t *ChannelValue)
{
    Rte_Base2AswLAYERADCReadConnector(ChannelValue)	;
    3648:	0e 94 39 1b 	call	0x3672	; 0x3672 <Rte_Base2AswLAYERADCReadConnector>
    364c:	08 95       	ret

0000364e <Rte_Uart_WriteBuffer>:
{
	Rte_recievebuffer0.ustring=ustring;
}*/
void Rte_Uart_WriteBuffer(unsigned char *ustring)
{
	Rte_Base2AswLayerUartWriteBuffer(ustring);	
    364e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <Rte_Base2AswLayerUartWriteBuffer>
    3652:	08 95       	ret

00003654 <RTE_BaseWriteCh1Data>:
#include "..\MddleLayer\ADCread.h"
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\MddleLayer\UartTransmit.h"

extern void RTE_BaseWriteCh1Data(uint16_t *ChannelValue)
{
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	ec 01       	movw	r28, r24
	//uart_num(*ChannelValue);
	//*ChannelValue=2;
	uint16_t val=*ChannelValue;
	*ChannelValue=GetADC_Value(val);
    365a:	88 81       	ld	r24, Y
    365c:	99 81       	ldd	r25, Y+1	; 0x01
    365e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <GetADC_Value>
    3662:	99 83       	std	Y+1, r25	; 0x01
    3664:	88 83       	st	Y, r24
}
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	08 95       	ret

0000366c <Rte_BaseWriteUartData>:
	*PingEcho=InterfacePulse(val);
}

void Rte_BaseWriteUartData(unsigned char *Ustring)
{
	FillUartBuffer(Ustring);
    366c:	0e 94 3d 12 	call	0x247a	; 0x247a <FillUartBuffer>
    3670:	08 95       	ret

00003672 <Rte_Base2AswLAYERADCReadConnector>:
 *  Author: Nikhil
 */ 
#include <avr/io.h>
void Rte_Base2AswLAYERADCReadConnector(uint16_t *DATA)
{
	RTE_BaseWriteCh1Data(DATA);
    3672:	0e 94 2a 1b 	call	0x3654	; 0x3654 <RTE_BaseWriteCh1Data>
    3676:	08 95       	ret

00003678 <Rte_Base2AswLayerUartWriteBuffer>:
	Rte_BaseWritePingEchoData(DATA);
}

Rte_Base2AswLayerUartWriteBuffer(unsigned char *ustring)
{
	Rte_BaseWriteUartData(ustring);
    3678:	0e 94 36 1b 	call	0x366c	; 0x366c <Rte_BaseWriteUartData>
    367c:	08 95       	ret

0000367e <__divmodhi4>:
    367e:	97 fb       	bst	r25, 7
    3680:	07 2e       	mov	r0, r23
    3682:	16 f4       	brtc	.+4      	; 0x3688 <__divmodhi4+0xa>
    3684:	00 94       	com	r0
    3686:	07 d0       	rcall	.+14     	; 0x3696 <__divmodhi4_neg1>
    3688:	77 fd       	sbrc	r23, 7
    368a:	09 d0       	rcall	.+18     	; 0x369e <__divmodhi4_neg2>
    368c:	0e 94 5f 1b 	call	0x36be	; 0x36be <__udivmodhi4>
    3690:	07 fc       	sbrc	r0, 7
    3692:	05 d0       	rcall	.+10     	; 0x369e <__divmodhi4_neg2>
    3694:	3e f4       	brtc	.+14     	; 0x36a4 <__divmodhi4_exit>

00003696 <__divmodhi4_neg1>:
    3696:	90 95       	com	r25
    3698:	81 95       	neg	r24
    369a:	9f 4f       	sbci	r25, 0xFF	; 255
    369c:	08 95       	ret

0000369e <__divmodhi4_neg2>:
    369e:	70 95       	com	r23
    36a0:	61 95       	neg	r22
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255

000036a4 <__divmodhi4_exit>:
    36a4:	08 95       	ret

000036a6 <__umulhisi3>:
    36a6:	a2 9f       	mul	r26, r18
    36a8:	b0 01       	movw	r22, r0
    36aa:	b3 9f       	mul	r27, r19
    36ac:	c0 01       	movw	r24, r0
    36ae:	a3 9f       	mul	r26, r19
    36b0:	01 d0       	rcall	.+2      	; 0x36b4 <__umulhisi3+0xe>
    36b2:	b2 9f       	mul	r27, r18
    36b4:	70 0d       	add	r23, r0
    36b6:	81 1d       	adc	r24, r1
    36b8:	11 24       	eor	r1, r1
    36ba:	91 1d       	adc	r25, r1
    36bc:	08 95       	ret

000036be <__udivmodhi4>:
    36be:	aa 1b       	sub	r26, r26
    36c0:	bb 1b       	sub	r27, r27
    36c2:	51 e1       	ldi	r21, 0x11	; 17
    36c4:	07 c0       	rjmp	.+14     	; 0x36d4 <__udivmodhi4_ep>

000036c6 <__udivmodhi4_loop>:
    36c6:	aa 1f       	adc	r26, r26
    36c8:	bb 1f       	adc	r27, r27
    36ca:	a6 17       	cp	r26, r22
    36cc:	b7 07       	cpc	r27, r23
    36ce:	10 f0       	brcs	.+4      	; 0x36d4 <__udivmodhi4_ep>
    36d0:	a6 1b       	sub	r26, r22
    36d2:	b7 0b       	sbc	r27, r23

000036d4 <__udivmodhi4_ep>:
    36d4:	88 1f       	adc	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	5a 95       	dec	r21
    36da:	a9 f7       	brne	.-22     	; 0x36c6 <__udivmodhi4_loop>
    36dc:	80 95       	com	r24
    36de:	90 95       	com	r25
    36e0:	bc 01       	movw	r22, r24
    36e2:	cd 01       	movw	r24, r26
    36e4:	08 95       	ret

000036e6 <strcpy_P>:
    36e6:	fb 01       	movw	r30, r22
    36e8:	dc 01       	movw	r26, r24
    36ea:	05 90       	lpm	r0, Z+
    36ec:	0d 92       	st	X+, r0
    36ee:	00 20       	and	r0, r0
    36f0:	e1 f7       	brne	.-8      	; 0x36ea <strcpy_P+0x4>
    36f2:	08 95       	ret

000036f4 <strcmp>:
    36f4:	fb 01       	movw	r30, r22
    36f6:	dc 01       	movw	r26, r24
    36f8:	8d 91       	ld	r24, X+
    36fa:	01 90       	ld	r0, Z+
    36fc:	80 19       	sub	r24, r0
    36fe:	01 10       	cpse	r0, r1
    3700:	d9 f3       	breq	.-10     	; 0x36f8 <strcmp+0x4>
    3702:	99 0b       	sbc	r25, r25
    3704:	08 95       	ret

00003706 <_exit>:
    3706:	f8 94       	cli

00003708 <__stop_program>:
    3708:	ff cf       	rjmp	.-2      	; 0x3708 <__stop_program>
