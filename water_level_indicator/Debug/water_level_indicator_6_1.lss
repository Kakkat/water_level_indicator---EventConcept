
water_level_indicator_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000256  00800100  00002c10  00002ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028b  00800356  00800356  00002efa  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  0000364c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003757  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a8  00000000  00000000  00003786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000093d7  00000000  00000000  0000402e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003532  00000000  00000000  0000d405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003905  00000000  00000000  00010937  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001470  00000000  00000000  0001423c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cdd  00000000  00000000  000156ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000431a  00000000  00000000  00017389  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  0001b6a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static uint8_t DebugStates;
static uint8_t DebugArrayindex;
static uint8_t populateArray();
static void  DebugBufferCheck();
void DebugMode()
{
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_1>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

   switch(DebugStates)
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   {   
	   unsigned char data='&';
	   case 0:
	       PopInterface(&data);
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
		   if(data=='#')
      24:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_9>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
		   {
			  DebugStates++; 
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
			  uart_string("IAM0");
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   
}

static uint8_t populateArray()
{
	unsigned char data='&';
      40:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__vector_16>
	uint8_t ret=1;
	PopInterface(&data);
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__vector_18>
	if(DebugArrayindex<10 && data!='&' )
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_21>
	{
	   DebugArray[DebugArrayindex]=data;
      58:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_22>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
	   DebugArrayindex++;
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <PIN>:
	   uart_char(data);
      68:	23 00 26 00 29 00                                   #.&.).

0000006e <DDR>:
			  DebugStates++; 
			  uart_string("IAM0");
		   }
		   break;
	   case 1:
	      if(populateArray()==0)
      6e:	24 00 27 00 2a 00                                   $.'.*.

00000074 <Port>:
		  {
			DebugStates++;
      74:	25 00 28 00 2b 00                                   %.(.+.

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
}

static void  DebugBufferCheck()
{ 
   static uint8_t debugdat=10;
   switch(DebugArray[0])
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
   {
	   case '2':
	       if(DebugArray[1]=='E')
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e0 e1       	ldi	r30, 0x10	; 16
		   {
			 //AddEvent((uint8_t *)&DebugArray[3],DebugArray[0]); 
			 //uart_num((uint8_t)(DebugArray[2]-'0'));
			 ///StoreNVM((uint8_t)(DebugArray[2]-'0'),&DebugArray[2],0);
			 uart_string("IAM");
      8e:	fc e2       	ldi	r31, 0x2C	; 44
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
			DebugStates++;
		  }
		  break;
	   case 2:
	      DebugBufferCheck();
		  DebugStates=0;
      96:	a6 35       	cpi	r26, 0x56	; 86
      98:	b1 07       	cpc	r27, r17
		  DebugArrayindex=0;
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	25 e0       	ldi	r18, 0x05	; 5
		  break;
   }
   
}
      9e:	a6 e5       	ldi	r26, 0x56	; 86
      a0:	b3 e0       	ldi	r27, 0x03	; 3
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a1 3e       	cpi	r26, 0xE1	; 225
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <main>
      b0:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <SetBlink>:
      b8:	9b 01       	movw	r18, r22
      ba:	33 27       	eor	r19, r19
      bc:	e0 91 56 03 	lds	r30, 0x0356
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	e2 17       	cp	r30, r18
      c4:	f3 07       	cpc	r31, r19
      c6:	68 f4       	brcc	.+26     	; 0xe2 <SetBlink+0x2a>
      c8:	80 93 57 03 	sts	0x0357, r24
      cc:	60 93 56 03 	sts	0x0356, r22
      d0:	66 27       	eor	r22, r22
      d2:	70 7f       	andi	r23, 0xF0	; 240
      d4:	70 93 59 03 	sts	0x0359, r23
      d8:	60 93 58 03 	sts	0x0358, r22
      dc:	40 93 5a 03 	sts	0x035A, r20
      e0:	08 95       	ret
      e2:	23 2b       	or	r18, r19
      e4:	59 f4       	brne	.+22     	; 0xfc <SetBlink+0x44>
      e6:	66 27       	eor	r22, r22
      e8:	70 7f       	andi	r23, 0xF0	; 240
      ea:	80 91 58 03 	lds	r24, 0x0358
      ee:	90 91 59 03 	lds	r25, 0x0359
      f2:	68 17       	cp	r22, r24
      f4:	79 07       	cpc	r23, r25
      f6:	11 f4       	brne	.+4      	; 0xfc <SetBlink+0x44>
      f8:	10 92 56 03 	sts	0x0356, r1
      fc:	08 95       	ret

000000fe <Blink>:
      fe:	60 91 56 03 	lds	r22, 0x0356
     102:	66 23       	and	r22, r22
     104:	31 f1       	breq	.+76     	; 0x152 <Blink+0x54>
     106:	20 91 5b 03 	lds	r18, 0x035B
     10a:	30 91 5c 03 	lds	r19, 0x035C
     10e:	88 ee       	ldi	r24, 0xE8	; 232
     110:	93 e0       	ldi	r25, 0x03	; 3
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__divmodhi4>
     118:	26 17       	cp	r18, r22
     11a:	37 07       	cpc	r19, r23
     11c:	98 f0       	brcs	.+38     	; 0x144 <Blink+0x46>
     11e:	90 91 5d 03 	lds	r25, 0x035D
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	89 27       	eor	r24, r25
     126:	80 93 5d 03 	sts	0x035D, r24
     12a:	40 91 5a 03 	lds	r20, 0x035A
     12e:	60 91 57 03 	lds	r22, 0x0357
     132:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 5c 03 	sts	0x035C, r25
     13e:	80 93 5b 03 	sts	0x035B, r24
     142:	08 95       	ret
     144:	2f 5f       	subi	r18, 0xFF	; 255
     146:	3f 4f       	sbci	r19, 0xFF	; 255
     148:	30 93 5c 03 	sts	0x035C, r19
     14c:	20 93 5b 03 	sts	0x035B, r18
     150:	08 95       	ret
     152:	40 91 5a 03 	lds	r20, 0x035A
     156:	60 91 57 03 	lds	r22, 0x0357
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
     160:	08 95       	ret

00000162 <ESPreadvalue>:
     162:	4f 92       	push	r4
     164:	5f 92       	push	r5
     166:	6f 92       	push	r6
     168:	7f 92       	push	r7
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	1f 92       	push	r1
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	7c 01       	movw	r14, r24
     18a:	86 e2       	ldi	r24, 0x26	; 38
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	0f 2e       	mov	r0, r31
     190:	fc e0       	ldi	r31, 0x0C	; 12
     192:	af 2e       	mov	r10, r31
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	bf 2e       	mov	r11, r31
     198:	f0 2d       	mov	r31, r0
     19a:	0f 2e       	mov	r0, r31
     19c:	fb e0       	ldi	r31, 0x0B	; 11
     19e:	cf 2e       	mov	r12, r31
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	df 2e       	mov	r13, r31
     1a4:	f0 2d       	mov	r31, r0
     1a6:	08 e7       	ldi	r16, 0x78	; 120
     1a8:	11 e0       	ldi	r17, 0x01	; 1
     1aa:	51 2c       	mov	r5, r1
     1ac:	75 2c       	mov	r7, r5
     1ae:	99 24       	eor	r9, r9
     1b0:	93 94       	inc	r9
     1b2:	4a c0       	rjmp	.+148    	; 0x248 <ESPreadvalue+0xe6>
     1b4:	c9 01       	movw	r24, r18
     1b6:	d9 01       	movw	r26, r18
     1b8:	12 97       	sbiw	r26, 0x02	; 2
     1ba:	4c 91       	ld	r20, X
     1bc:	41 30       	cpi	r20, 0x01	; 1
     1be:	11 f5       	brne	.+68     	; 0x204 <ESPreadvalue+0xa2>
     1c0:	66 32       	cpi	r22, 0x26	; 38
     1c2:	01 f1       	breq	.+64     	; 0x204 <ESPreadvalue+0xa2>
     1c4:	af 01       	movw	r20, r30
     1c6:	60 80       	ld	r6, Z
     1c8:	d9 01       	movw	r26, r18
     1ca:	14 97       	sbiw	r26, 0x04	; 4
     1cc:	0d 90       	ld	r0, X+
     1ce:	bc 91       	ld	r27, X
     1d0:	a0 2d       	mov	r26, r0
     1d2:	a6 0d       	add	r26, r6
     1d4:	b1 1d       	adc	r27, r1
     1d6:	ac 91       	ld	r26, X
     1d8:	6a 13       	cpse	r22, r26
     1da:	0f c0       	rjmp	.+30     	; 0x1fa <ESPreadvalue+0x98>
     1dc:	d9 01       	movw	r26, r18
     1de:	4c 90       	ld	r4, X
     1e0:	64 14       	cp	r6, r4
     1e2:	10 f4       	brcc	.+4      	; 0x1e8 <ESPreadvalue+0x86>
     1e4:	63 94       	inc	r6
     1e6:	60 82       	st	Z, r6
     1e8:	da 01       	movw	r26, r20
     1ea:	4c 91       	ld	r20, X
     1ec:	dc 01       	movw	r26, r24
     1ee:	8c 91       	ld	r24, X
     1f0:	48 13       	cpse	r20, r24
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <ESPreadvalue+0xa2>
     1f4:	87 2c       	mov	r8, r7
     1f6:	79 2d       	mov	r23, r9
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <ESPreadvalue+0xa2>
     1fa:	d9 01       	movw	r26, r18
     1fc:	8c 91       	ld	r24, X
     1fe:	68 16       	cp	r6, r24
     200:	08 f4       	brcc	.+2      	; 0x204 <ESPreadvalue+0xa2>
     202:	10 82       	st	Z, r1
     204:	27 5f       	subi	r18, 0xF7	; 247
     206:	3f 4f       	sbci	r19, 0xFF	; 255
     208:	39 96       	adiw	r30, 0x09	; 9
     20a:	20 17       	cp	r18, r16
     20c:	31 07       	cpc	r19, r17
     20e:	91 f6       	brne	.-92     	; 0x1b4 <ESPreadvalue+0x52>
     210:	70 93 5f 03 	sts	0x035F, r23
     214:	80 92 60 03 	sts	0x0360, r8
     218:	71 30       	cpi	r23, 0x01	; 1
     21a:	b1 f4       	brne	.+44     	; 0x248 <ESPreadvalue+0xe6>
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	86 32       	cpi	r24, 0x26	; 38
     220:	09 f1       	breq	.+66     	; 0x264 <ESPreadvalue+0x102>
     222:	e8 2d       	mov	r30, r8
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	ef 59       	subi	r30, 0x9F	; 159
     228:	fc 4f       	sbci	r31, 0xFC	; 252
     22a:	80 83       	st	Z, r24
     22c:	98 2d       	mov	r25, r8
     22e:	9f 5f       	subi	r25, 0xFF	; 255
     230:	90 93 60 03 	sts	0x0360, r25
     234:	9c 31       	cpi	r25, 0x1C	; 28
     236:	11 f0       	breq	.+4      	; 0x23c <ESPreadvalue+0xda>
     238:	8a 30       	cpi	r24, 0x0A	; 10
     23a:	31 f4       	brne	.+12     	; 0x248 <ESPreadvalue+0xe6>
     23c:	50 92 5f 03 	sts	0x035F, r5
     240:	50 92 60 03 	sts	0x0360, r5
     244:	90 92 80 03 	sts	0x0380, r9
     248:	ce 01       	movw	r24, r28
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	f7 01       	movw	r30, r14
     24e:	09 95       	icall
     250:	81 11       	cpse	r24, r1
     252:	0c c0       	rjmp	.+24     	; 0x26c <ESPreadvalue+0x10a>
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	70 91 5f 03 	lds	r23, 0x035F
     25a:	80 90 60 03 	lds	r8, 0x0360
     25e:	95 01       	movw	r18, r10
     260:	f6 01       	movw	r30, r12
     262:	a8 cf       	rjmp	.-176    	; 0x1b4 <ESPreadvalue+0x52>
     264:	fc e1       	ldi	r31, 0x1C	; 28
     266:	8f 12       	cpse	r8, r31
     268:	ef cf       	rjmp	.-34     	; 0x248 <ESPreadvalue+0xe6>
     26a:	e8 cf       	rjmp	.-48     	; 0x23c <ESPreadvalue+0xda>
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
			//Esp_Commands_a[Wait_Command].MatchCounter=0;
		}
	}
	}
	return 0;
}
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	bf 90       	pop	r11
     284:	af 90       	pop	r10
     286:	9f 90       	pop	r9
     288:	8f 90       	pop	r8
     28a:	7f 90       	pop	r7
     28c:	6f 90       	pop	r6
     28e:	5f 90       	pop	r5
     290:	4f 90       	pop	r4
     292:	08 95       	ret

00000294 <ESP_Init>:
    
	return ReturnValue;
}

void ESP_Init()
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec e0       	ldi	r30, 0x0C	; 12
     29a:	f1 e0       	ldi	r31, 0x01	; 1
	
    
	return ReturnValue;
}

void ESP_Init()
     29c:	88 e7       	ldi	r24, 0x78	; 120
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	ef 01       	movw	r28, r30
     2a2:	24 97       	sbiw	r28, 0x04	; 4
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
     2a4:	a8 81       	ld	r26, Y
     2a6:	b9 81       	ldd	r27, Y+1	; 0x01
     2a8:	ed 01       	movw	r28, r26
     2aa:	09 90       	ld	r0, Y+
     2ac:	00 20       	and	r0, r0
     2ae:	e9 f7       	brne	.-6      	; 0x2aa <ESP_Init+0x16>
     2b0:	21 97       	sbiw	r28, 0x01	; 1
     2b2:	ca 1b       	sub	r28, r26
     2b4:	db 0b       	sbc	r29, r27
     2b6:	c0 83       	st	Z, r28
     2b8:	39 96       	adiw	r30, 0x09	; 9
	return ReturnValue;
}

void ESP_Init()
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     2ba:	e8 17       	cp	r30, r24
     2bc:	f9 07       	cpc	r31, r25
     2be:	81 f7       	brne	.-32     	; 0x2a0 <ESP_Init+0xc>
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
        
	}
	
	Esp_Commands_a[Disconnect_Command].state=1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 64 01 	sts	0x0164, r24
    Esp_Commands_a[Connection_Wait].state=1;
     2c6:	80 93 13 01 	sts	0x0113, r24
	Esp_Commands_a[Uart_command].state=1;
     2ca:	80 93 6d 01 	sts	0x016D, r24
	
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <CipSend>:

ESPRetVal CipSend(void)
{
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	00 d0       	rcall	.+0      	; 0x2dc <CipSend+0x8>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <CipSend+0xa>
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
  ESPRetVal ReturnValue=ESP_CmdSndBusy;
      char Val[4];
	  Val[0]=(char)PortSel;
     2e2:	80 91 84 03 	lds	r24, 0x0384
     2e6:	89 83       	std	Y+1, r24	; 0x01
	  Val[1]='\0';
     2e8:	1a 82       	std	Y+2, r1	; 0x02
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
     2ea:	ce 01       	movw	r24, r28
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
	  RTE_WriteBufferUart(",");
     2f2:	8a ea       	ldi	r24, 0xAA	; 170
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
     2fa:	20 91 85 03 	lds	r18, 0x0385
     2fe:	30 91 86 03 	lds	r19, 0x0386
     302:	e2 2f       	mov	r30, r18
}

static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
     304:	49 e2       	ldi	r20, 0x29	; 41
     306:	24 9f       	mul	r18, r20
     308:	41 2d       	mov	r20, r1
     30a:	11 24       	eor	r1, r1
     30c:	42 95       	swap	r20
     30e:	4f 70       	andi	r20, 0x0F	; 15
	T=(num - (H*100))/10;
     310:	1c e9       	ldi	r17, 0x9C	; 156
     312:	14 03       	mulsu	r17, r20
     314:	c0 01       	movw	r24, r0
     316:	11 24       	eor	r1, r1
     318:	82 0f       	add	r24, r18
     31a:	91 1d       	adc	r25, r1
     31c:	6a e0       	ldi	r22, 0x0A	; 10
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__divmodhi4>
	O=(num - (H*100) - (T*10));

	Ustring[0]=(H+48);
     324:	84 2f       	mov	r24, r20
     326:	80 5d       	subi	r24, 0xD0	; 208
     328:	89 83       	std	Y+1, r24	; 0x01
	Ustring[1]=(T+48);
     32a:	86 2f       	mov	r24, r22
     32c:	80 5d       	subi	r24, 0xD0	; 208
     32e:	8a 83       	std	Y+2, r24	; 0x02
static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
     330:	e0 5d       	subi	r30, 0xD0	; 208
     332:	41 9f       	mul	r20, r17
     334:	e0 0d       	add	r30, r0
     336:	11 24       	eor	r1, r1
     338:	66 0f       	add	r22, r22
     33a:	96 2f       	mov	r25, r22
     33c:	99 0f       	add	r25, r25
     33e:	99 0f       	add	r25, r25
     340:	69 0f       	add	r22, r25

	Ustring[0]=(H+48);
	Ustring[1]=(T+48);
	Ustring[2]=(O+48);
     342:	e6 1b       	sub	r30, r22
     344:	eb 83       	std	Y+3, r30	; 0x03
	  Val[1]='\0';
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
	  RTE_WriteBufferUart(",");
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
	  Val[3]='\0';
     346:	1c 82       	std	Y+4, r1	; 0x04
	  if(EspDataCount<10)
     348:	2a 30       	cpi	r18, 0x0A	; 10
     34a:	31 05       	cpc	r19, r1
     34c:	1c f4       	brge	.+6      	; 0x354 <CipSend+0x80>
	  {
		  Val[0]=Val[2];
     34e:	e9 83       	std	Y+1, r30	; 0x01
		  Val[1]='\0';		  
     350:	1a 82       	std	Y+2, r1	; 0x02
     352:	06 c0       	rjmp	.+12     	; 0x360 <CipSend+0x8c>
	  }
	  else if(EspDataCount<100)
     354:	24 36       	cpi	r18, 0x64	; 100
     356:	31 05       	cpc	r19, r1
     358:	1c f4       	brge	.+6      	; 0x360 <CipSend+0x8c>
	  {
		  Val[0]=Val[1]; 
     35a:	89 83       	std	Y+1, r24	; 0x01
		  Val[1]=Val[2]; 
     35c:	ea 83       	std	Y+2, r30	; 0x02
		  Val[2]='\0'; 
     35e:	1b 82       	std	Y+3, r1	; 0x03
	  }
	  RTE_WriteBufferUart(Val);//uart_char(Recieved[0]);
     360:	ce 01       	movw	r24, r28
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
	  //uart_char(Recieved[1]); 
	  RTE_WriteBufferUart("\r\n");//uart_string("\r\n");
     368:	8c ea       	ldi	r24, 0xAC	; 172
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>

}
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	08 95       	ret

00000380 <WifiDisconnectCheck>:

ESPRetVal WifiDisconnectCheck()
{
		if(Esp_Commands_a[Disconnect_Command].MatchCounter==Esp_Commands_a[Disconnect_Command].ResposeLength)
     380:	90 91 65 01 	lds	r25, 0x0165
     384:	80 91 66 01 	lds	r24, 0x0166
     388:	98 13       	cpse	r25, r24
     38a:	04 c0       	rjmp	.+8      	; 0x394 <WifiDisconnectCheck+0x14>
		{
			//Esp_Commands_a[Connection_Wait].MatchCounter=0;
			Esp_Commands_a[Disconnect_Command].MatchCounter=0;
     38c:	10 92 65 01 	sts	0x0165, r1
			return ESP_CmdSndOK;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret
		}
	return ESP_CmdSNDFailed;
     394:	82 e0       	ldi	r24, 0x02	; 2
}
     396:	08 95       	ret

00000398 <EspGlobalCounter>:
return FuncRet;
}
uint16_t EspGlobalCounter(uint8_t state)
{
	
	if(state==1)
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	29 f4       	brne	.+10     	; 0x3a6 <EspGlobalCounter+0xe>
	{
	  	counter1=0;
     39c:	10 92 83 03 	sts	0x0383, r1
     3a0:	10 92 82 03 	sts	0x0382, r1
     3a4:	0b c0       	rjmp	.+22     	; 0x3bc <EspGlobalCounter+0x24>
	}
	else if(state==2)
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	49 f4       	brne	.+18     	; 0x3bc <EspGlobalCounter+0x24>
	{
		counter1++;
     3aa:	80 91 82 03 	lds	r24, 0x0382
     3ae:	90 91 83 03 	lds	r25, 0x0383
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	90 93 83 03 	sts	0x0383, r25
     3b8:	80 93 82 03 	sts	0x0382, r24
	}

return	counter1;
}
     3bc:	80 91 82 03 	lds	r24, 0x0382
     3c0:	90 91 83 03 	lds	r25, 0x0383
     3c4:	08 95       	ret

000003c6 <CommandSend>:
	}
	return 0;
}

ESPRetVal CommandSend(ESP_CommandIndex Index)
{
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	18 2f       	mov	r17, r24
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
	if(ConnectionFlag==0)
     3ce:	80 91 81 03 	lds	r24, 0x0381
     3d2:	81 11       	cpse	r24, r1
     3d4:	26 c0       	rjmp	.+76     	; 0x422 <CommandSend+0x5c>
	{
		RTE_WriteBufferUart(Esp_Commands_a[Index].ustring);//uart_string(Esp_Commands_a[Index].ustring);
     3d6:	c1 2f       	mov	r28, r17
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
     3da:	fe 01       	movw	r30, r28
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	ee 0f       	add	r30, r30
     3e2:	ff 1f       	adc	r31, r31
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	ec 0f       	add	r30, r28
     3ea:	fd 1f       	adc	r31, r29
     3ec:	ea 5f       	subi	r30, 0xFA	; 250
     3ee:	fe 4f       	sbci	r31, 0xFE	; 254
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
		if(Index==Send_Command)
     3f8:	17 30       	cpi	r17, 0x07	; 7
     3fa:	11 f4       	brne	.+4      	; 0x400 <CommandSend+0x3a>
		{
			(void)CipSend();
     3fc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CipSend>
		}
		Esp_Commands_a[Index].state=1;
     400:	9e 01       	movw	r18, r28
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	22 0f       	add	r18, r18
     408:	33 1f       	adc	r19, r19
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	c2 0f       	add	r28, r18
     410:	d3 1f       	adc	r29, r19
     412:	ca 5f       	subi	r28, 0xFA	; 250
     414:	de 4f       	sbci	r29, 0xFE	; 254
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	8c 83       	std	Y+4, r24	; 0x04
		ConnectionFlag=1;
     41a:	80 93 81 03 	sts	0x0381, r24
		EspGlobalCounter(1);
     41e:	0e 94 cc 01 	call	0x398	; 0x398 <EspGlobalCounter>
	}
	if((Esp_Commands_a[Index].MatchCounter)==Esp_Commands_a[Index].ResposeLength)
     422:	c1 2f       	mov	r28, r17
     424:	d0 e0       	ldi	r29, 0x00	; 0
     426:	fe 01       	movw	r30, r28
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	ec 0f       	add	r30, r28
     436:	fd 1f       	adc	r31, r29
     438:	ea 5f       	subi	r30, 0xFA	; 250
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	95 81       	ldd	r25, Z+5	; 0x05
     43e:	86 81       	ldd	r24, Z+6	; 0x06
     440:	98 13       	cpse	r25, r24
     442:	13 c0       	rjmp	.+38     	; 0x46a <CommandSend+0xa4>
	{
		if(Index!=Wait_Command)
     444:	16 30       	cpi	r17, 0x06	; 6
     446:	69 f0       	breq	.+26     	; 0x462 <CommandSend+0x9c>
		{
			Esp_Commands_a[Index].state=0;
     448:	fe 01       	movw	r30, r28
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	ec 0f       	add	r30, r28
     458:	fd 1f       	adc	r31, r29
     45a:	ea 5f       	subi	r30, 0xFA	; 250
     45c:	fe 4f       	sbci	r31, 0xFE	; 254
     45e:	14 82       	std	Z+4, r1	; 0x04
		    Esp_Commands_a[Index].MatchCounter=0;
     460:	15 82       	std	Z+5, r1	; 0x05
		}
		ConnectionFlag=0;
     462:	10 92 81 03 	sts	0x0381, r1
		ReturnValue=ESP_CmdSndOK;
     466:	10 e0       	ldi	r17, 0x00	; 0
     468:	01 c0       	rjmp	.+2      	; 0x46c <CommandSend+0xa6>
ESPRetVal CommandSend(ESP_CommandIndex Index)
{
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
     46a:	11 e0       	ldi	r17, 0x01	; 1
		    Esp_Commands_a[Index].MatchCounter=0;
		}
		ConnectionFlag=0;
		ReturnValue=ESP_CmdSndOK;
	}
	counter=EspGlobalCounter(2);
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	0e 94 cc 01 	call	0x398	; 0x398 <EspGlobalCounter>
	
	if(counter>Esp_Commands_a[Index].WaitTime)
     472:	fe 01       	movw	r30, r28
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	ec 0f       	add	r30, r28
     482:	fd 1f       	adc	r31, r29
     484:	ea 5f       	subi	r30, 0xFA	; 250
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	27 81       	ldd	r18, Z+7	; 0x07
     48a:	30 85       	ldd	r19, Z+8	; 0x08
     48c:	28 17       	cp	r18, r24
     48e:	39 07       	cpc	r19, r25
     490:	60 f4       	brcc	.+24     	; 0x4aa <CommandSend+0xe4>
	{
	  Esp_Commands_a[Index].state=0;
     492:	14 82       	std	Z+4, r1	; 0x04
	  Esp_Commands_a[Index].MatchCounter=0;
     494:	15 82       	std	Z+5, r1	; 0x05
	  counter1=0;
     496:	10 92 83 03 	sts	0x0383, r1
     49a:	10 92 82 03 	sts	0x0382, r1
	  ConnectionFlag=0;
     49e:	10 92 81 03 	sts	0x0381, r1
	  EspGlobalCounter(1);
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 cc 01 	call	0x398	; 0x398 <EspGlobalCounter>
	  ReturnValue=ESP_CmdSNDFailed;
     4a8:	12 e0       	ldi	r17, 0x02	; 2
	  
	}
	
    
	return ReturnValue;
}
     4aa:	81 2f       	mov	r24, r17
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	08 95       	ret

000004b4 <ESPAsServer>:
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
  if(flag==0)
     4b4:	80 91 87 03 	lds	r24, 0x0387
     4b8:	81 11       	cpse	r24, r1
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <ESPAsServer+0x14>
  {
	index=Server_Command;
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	80 93 88 03 	sts	0x0388, r24
	flag=1;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 87 03 	sts	0x0387, r24
  }
  
	  ReturnValue=CommandSend(index);
     4c8:	80 91 88 03 	lds	r24, 0x0388
     4cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CommandSend>
	  if(ReturnValue==ESP_CmdSndOK)
     4d0:	81 11       	cpse	r24, r1
     4d2:	0b c0       	rjmp	.+22     	; 0x4ea <ESPAsServer+0x36>
	  {
		  index=index+1;
     4d4:	80 91 88 03 	lds	r24, 0x0388
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 88 03 	sts	0x0388, r24
		    if(index==Wait_Command)
     4de:	86 30       	cpi	r24, 0x06	; 6
     4e0:	89 f5       	brne	.+98     	; 0x544 <ESPAsServer+0x90>
		    {
			    FuncRet= ESP_CmdSndOK;
				flag=0;
     4e2:	10 92 87 03 	sts	0x0387, r1
	  if(ReturnValue==ESP_CmdSndOK)
	  {
		  index=index+1;
		    if(index==Wait_Command)
		    {
			    FuncRet= ESP_CmdSndOK;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret
				flag=0;
		    }
	  }
	 else if(ReturnValue==ESP_CmdSNDFailed)
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	69 f5       	brne	.+90     	; 0x548 <ESPAsServer+0x94>
	  {
		   if(RetryCounts>4)
     4ee:	80 91 89 03 	lds	r24, 0x0389
     4f2:	85 30       	cpi	r24, 0x05	; 5
     4f4:	00 f1       	brcs	.+64     	; 0x536 <ESPAsServer+0x82>
		   {
			   if(index==Mode_Command)
     4f6:	20 91 88 03 	lds	r18, 0x0388
     4fa:	22 30       	cpi	r18, 0x02	; 2
     4fc:	31 f4       	brne	.+12     	; 0x50a <ESPAsServer+0x56>
			   {
				   RetryCounts=0;
     4fe:	10 92 89 03 	sts	0x0389, r1
				   FuncRet= ESP_CmdSNDFailed;
				   flag=0;
     502:	10 92 87 03 	sts	0x0387, r1
		   if(RetryCounts>4)
		   {
			   if(index==Mode_Command)
			   {
				   RetryCounts=0;
				   FuncRet= ESP_CmdSNDFailed;
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	17 c0       	rjmp	.+46     	; 0x538 <ESPAsServer+0x84>
				   flag=0;
			   }
			   else
			   {
				   
				   Esp_Commands_a[index].state=0;
     50a:	e2 2f       	mov	r30, r18
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	cf 01       	movw	r24, r30
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	e8 0f       	add	r30, r24
     51e:	f9 1f       	adc	r31, r25
     520:	ea 5f       	subi	r30, 0xFA	; 250
     522:	fe 4f       	sbci	r31, 0xFE	; 254
     524:	14 82       	std	Z+4, r1	; 0x04
				   Esp_Commands_a[index].MatchCounter=0;
     526:	15 82       	std	Z+5, r1	; 0x05
				   index=index-1;
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	20 93 88 03 	sts	0x0388, r18
				   RetryCounts=0;
     52e:	10 92 89 03 	sts	0x0389, r1
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <ESPAsServer+0x84>
     536:	81 e0       	ldi	r24, 0x01	; 1
				   Esp_Commands_a[index].MatchCounter=0;
				   index=index-1;
				   RetryCounts=0;
			   }
		   }
		  RetryCounts++;
     538:	90 91 89 03 	lds	r25, 0x0389
     53c:	9f 5f       	subi	r25, 0xFF	; 255
     53e:	90 93 89 03 	sts	0x0389, r25
     542:	08 95       	ret
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
     548:	81 e0       	ldi	r24, 0x01	; 1
	  



  return FuncRet;
}
     54a:	08 95       	ret

0000054c <findpos>:
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     54c:	fc 01       	movw	r30, r24
     54e:	e6 0f       	add	r30, r22
     550:	f1 1d       	adc	r31, r1
     552:	20 81       	ld	r18, Z
     554:	22 23       	and	r18, r18
     556:	89 f0       	breq	.+34     	; 0x57a <findpos+0x2e>
	{
		if(ustring[pos]==sub)
     558:	24 13       	cpse	r18, r20
     55a:	06 c0       	rjmp	.+12     	; 0x568 <findpos+0x1c>
     55c:	02 c0       	rjmp	.+4      	; 0x562 <findpos+0x16>
     55e:	24 13       	cpse	r18, r20
     560:	03 c0       	rjmp	.+6      	; 0x568 <findpos+0x1c>
		{
			return pos+1;
     562:	86 2f       	mov	r24, r22
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	08 95       	ret
		}
		pos++;
     568:	6f 5f       	subi	r22, 0xFF	; 255
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     56a:	fc 01       	movw	r30, r24
     56c:	e6 0f       	add	r30, r22
     56e:	f1 1d       	adc	r31, r1
     570:	20 81       	ld	r18, Z
     572:	21 11       	cpse	r18, r1
     574:	f4 cf       	rjmp	.-24     	; 0x55e <findpos+0x12>
		{
			return pos+1;
		}
		pos++;
	}
	return 0;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	08 95       	ret
     57a:	80 e0       	ldi	r24, 0x00	; 0
}
     57c:	08 95       	ret

0000057e <PortCopy>:

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     57e:	42 17       	cp	r20, r18
     580:	70 f4       	brcc	.+28     	; 0x59e <PortCopy+0x20>
     582:	fb 01       	movw	r30, r22
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     584:	30 e0       	ldi	r19, 0x00	; 0
	while(start<end && pos<4 )
	{
		copy[pos]=ustring[start];
     586:	dc 01       	movw	r26, r24
     588:	a4 0f       	add	r26, r20
     58a:	b1 1d       	adc	r27, r1
     58c:	5c 91       	ld	r21, X
     58e:	51 93       	st	Z+, r21
		pos++;
     590:	3f 5f       	subi	r19, 0xFF	; 255
		start++;
     592:	4f 5f       	subi	r20, 0xFF	; 255
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     594:	42 17       	cp	r20, r18
     596:	20 f4       	brcc	.+8      	; 0x5a0 <PortCopy+0x22>
     598:	34 30       	cpi	r19, 0x04	; 4
     59a:	a9 f7       	brne	.-22     	; 0x586 <PortCopy+0x8>
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <PortCopy+0x22>
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     59e:	30 e0       	ldi	r19, 0x00	; 0
	{
		copy[pos]=ustring[start];
		pos++;
		start++;
	}
	copy[pos]=ustring[start];
     5a0:	fc 01       	movw	r30, r24
     5a2:	e4 0f       	add	r30, r20
     5a4:	f1 1d       	adc	r31, r1
     5a6:	80 81       	ld	r24, Z
     5a8:	fb 01       	movw	r30, r22
     5aa:	e3 0f       	add	r30, r19
     5ac:	f1 1d       	adc	r31, r1
     5ae:	80 83       	st	Z, r24
	PortLen=pos;
     5b0:	30 93 9c 03 	sts	0x039C, r19
     5b4:	08 95       	ret

000005b6 <SendData>:
	
}

ESPRetVal SendData(uint8_t count)
{
	EspDataCount=count;
     5b6:	80 93 85 03 	sts	0x0385, r24
     5ba:	10 92 86 03 	sts	0x0386, r1
	return CommandSend(Send_Command);
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CommandSend>
}
     5c4:	08 95       	ret

000005c6 <ConnectCommand>:


ESPRetVal ConnectCommand()
{
	//uart_num(Esp_Commands_a[Connection_Wait].MatchCounter);
	if(Esp_Commands_a[Connection_Wait].MatchCounter==Esp_Commands_a[Connection_Wait].ResposeLength)
     5c6:	90 91 14 01 	lds	r25, 0x0114
     5ca:	80 91 15 01 	lds	r24, 0x0115
     5ce:	98 13       	cpse	r25, r24
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <ConnectCommand+0x14>
	{
		//uart_string("wifi connected");
		Esp_Commands_a[Connection_Wait].MatchCounter=0;
     5d2:	10 92 14 01 	sts	0x0114, r1
		//Esp_Commands_a[Disconnect_Command].MatchCounter=0;
		return ESP_CmdSndOK;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
	}
	return ESP_CmdSNDFailed;
     5da:	82 e0       	ldi	r24, 0x02	; 2
}
     5dc:	08 95       	ret

000005de <CheckInput>:
uint8_t CheckInput()
{
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	//uart_string(EspDataBuffer);
	if(datagot==1)
     5e6:	80 91 80 03 	lds	r24, 0x0380
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <CheckInput+0x12>
     5ee:	4f c0       	rjmp	.+158    	; 0x68e <CheckInput+0xb0>
	{
		if(Esp_Commands_a[Wait_Command].MatchCounter==Esp_Commands_a[Wait_Command].ResposeLength)
     5f0:	90 91 41 01 	lds	r25, 0x0141
     5f4:	80 91 42 01 	lds	r24, 0x0142
     5f8:	98 13       	cpse	r25, r24
     5fa:	47 c0       	rjmp	.+142    	; 0x68a <CheckInput+0xac>
		{ 
			Esp_Commands_a[Wait_Command].state=1;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 40 01 	sts	0x0140, r24
			Esp_Commands_a[Wait_Command].MatchCounter=0;	
     602:	10 92 41 01 	sts	0x0141, r1
			PortStart=findpos(EspDataBuffer,0,',');
     606:	4c e2       	ldi	r20, 0x2C	; 44
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	81 e6       	ldi	r24, 0x61	; 97
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 a6 02 	call	0x54c	; 0x54c <findpos>
     612:	c8 2f       	mov	r28, r24
			PortEnd=findpos(EspDataBuffer,PortStart,',');
     614:	4c e2       	ldi	r20, 0x2C	; 44
     616:	68 2f       	mov	r22, r24
     618:	81 e6       	ldi	r24, 0x61	; 97
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 a6 02 	call	0x54c	; 0x54c <findpos>
     620:	08 2f       	mov	r16, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortStart,PortEnd);
     622:	28 2f       	mov	r18, r24
     624:	4c 2f       	mov	r20, r28
     626:	6d e8       	ldi	r22, 0x8D	; 141
     628:	73 e0       	ldi	r23, 0x03	; 3
     62a:	81 e6       	ldi	r24, 0x61	; 97
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 bf 02 	call	0x57e	; 0x57e <PortCopy>
			PortSel=EspPortBuffer[0];
     632:	cd e8       	ldi	r28, 0x8D	; 141
     634:	d3 e0       	ldi	r29, 0x03	; 3
     636:	88 81       	ld	r24, Y
     638:	80 93 84 03 	sts	0x0384, r24
			PortStart=findpos(EspDataBuffer,PortEnd,':');
     63c:	4a e3       	ldi	r20, 0x3A	; 58
     63e:	60 2f       	mov	r22, r16
     640:	81 e6       	ldi	r24, 0x61	; 97
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	0e 94 a6 02 	call	0x54c	; 0x54c <findpos>
     648:	18 2f       	mov	r17, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     64a:	28 2f       	mov	r18, r24
     64c:	40 2f       	mov	r20, r16
     64e:	be 01       	movw	r22, r28
     650:	81 e6       	ldi	r24, 0x61	; 97
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 bf 02 	call	0x57e	; 0x57e <PortCopy>
			Recieved[0]=EspPortBuffer[0];
     658:	c8 81       	ld	r28, Y
     65a:	c0 93 9f 03 	sts	0x039F, r28
			Recieved[1]=EspPortBuffer[1];
     65e:	80 91 8e 03 	lds	r24, 0x038E
     662:	80 93 a0 03 	sts	0x03A0, r24
			uint8_t initial ;
			initial=(uint8_t )EspPortBuffer[0];
			PortEnd=PortStart;
     666:	10 93 9e 03 	sts	0x039E, r17
			PortStart=PortStart+(uint8_t )EspPortBuffer[0];
     66a:	c1 0f       	add	r28, r17
     66c:	c0 93 9d 03 	sts	0x039D, r28
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     670:	2c 2f       	mov	r18, r28
     672:	41 2f       	mov	r20, r17
     674:	6d e8       	ldi	r22, 0x8D	; 141
     676:	73 e0       	ldi	r23, 0x03	; 3
     678:	81 e6       	ldi	r24, 0x61	; 97
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 bf 02 	call	0x57e	; 0x57e <PortCopy>
			for( posi=PortEnd;posi<PortStart;posi++)
			{
				Recieved[posi]=EspDataBuffer[posi];
				
			}*/
			EspPortBuffer[PortStart-2]='\0';
     680:	ec 2f       	mov	r30, r28
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e5 57       	subi	r30, 0x75	; 117
     686:	fc 4f       	sbci	r31, 0xFC	; 252
     688:	10 82       	st	Z, r1
			//RTE_WriteBufferUart(EspPortBuffer);//uart_string(EspPortBuffer);
			//RTE_WriteBufferUart(EspDataBuffer);
			
		}
		//uart_string(EspDataBuffer);
		datagot=0;
     68a:	10 92 80 03 	sts	0x0380, r1
	}
	if(Esp_Commands_a[Uart_command].MatchCounter==Esp_Commands_a[Uart_command].ResposeLength)
     68e:	90 91 6e 01 	lds	r25, 0x016E
     692:	80 91 6f 01 	lds	r24, 0x016F
     696:	98 13       	cpse	r25, r24
     698:	03 c0       	rjmp	.+6      	; 0x6a0 <CheckInput+0xc2>
	{
		//uart_string("uart debug mode enabled");
		UartEvents=0x01;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 a7 04 	sts	0x04A7, r24
	}
	
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <RequestWait>:
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
	  static ESPRetVal ReturnValue=ESP_CmdSndBusy;
	  if(FlagReq==0)
     6aa:	80 91 8a 03 	lds	r24, 0x038A
     6ae:	81 11       	cpse	r24, r1
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <RequestWait+0x18>
	  {
		    indexReq=Wait_Command;
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	80 93 8b 03 	sts	0x038B, r24
		    FlagReq=1;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 8a 03 	sts	0x038A, r24
	        BUFFEREnable=1;
     6be:	80 93 8c 03 	sts	0x038C, r24
			 
			
	  }

 
	  	  if(ReturnValue!=ESP_CmdSndOK )
     6c2:	80 91 1d 02 	lds	r24, 0x021D
     6c6:	88 23       	and	r24, r24
     6c8:	39 f0       	breq	.+14     	; 0x6d8 <RequestWait+0x2e>
	  	  { 
				ReturnValue=CommandSend(Wait_Command);
     6ca:	86 e0       	ldi	r24, 0x06	; 6
     6cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <CommandSend>
     6d0:	80 93 1d 02 	sts	0x021D, r24
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	08 95       	ret
				ReturnValue=CommandSend(Wait_Command);

		  }
		  else
		  {
					if(datagot==1)
     6d8:	80 91 80 03 	lds	r24, 0x0380
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	59 f4       	brne	.+22     	; 0x6f6 <RequestWait+0x4c>
					{
						FlagReq=0;
     6e0:	10 92 8a 03 	sts	0x038A, r1
						BUFFEREnable=0;
     6e4:	10 92 8c 03 	sts	0x038C, r1
						CheckInput();
     6e8:	0e 94 ef 02 	call	0x5de	; 0x5de <CheckInput>
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
						ReturnValue=ESP_CmdSndBusy;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 1d 02 	sts	0x021D, r24
						FlagReq=0;
						BUFFEREnable=0;
						CheckInput();
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	08 95       	ret
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
					}		   
		  }

	  	  
return FuncRet;
}
     6f8:	08 95       	ret

000006fa <enable>:

uint8_t enable()
{
	
   return ESP_DataRead_a[0].Purpose;
}
     6fa:	80 91 74 01 	lds	r24, 0x0174
     6fe:	08 95       	ret

00000700 <checkRecievedData>:

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     700:	60 91 72 01 	lds	r22, 0x0172
     704:	70 91 73 01 	lds	r23, 0x0173
     708:	8d e8       	ldi	r24, 0x8D	; 141
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <strcmp>
     710:	28 2f       	mov	r18, r24
     712:	39 2f       	mov	r19, r25
     714:	23 2b       	or	r18, r19
     716:	21 f4       	brne	.+8      	; 0x720 <checkRecievedData+0x20>
			{
				ESP_DataRead_a[i].Purpose=0;
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 74 01 	sts	0x0174, r24
     71e:	02 c0       	rjmp	.+4      	; 0x724 <checkRecievedData+0x24>
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
			{
				ESP_DataRead_a[i].Purpose=0;
     720:	10 92 74 01 	sts	0x0174, r1

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     724:	60 91 75 01 	lds	r22, 0x0175
     728:	70 91 76 01 	lds	r23, 0x0176
     72c:	8d e8       	ldi	r24, 0x8D	; 141
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <strcmp>
     734:	28 2f       	mov	r18, r24
     736:	39 2f       	mov	r19, r25
     738:	23 2b       	or	r18, r19
     73a:	19 f0       	breq	.+6      	; 0x742 <checkRecievedData+0x42>
			{
				ESP_DataRead_a[i].Purpose=0;
     73c:	10 92 77 01 	sts	0x0177, r1
     740:	08 95       	ret
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 77 01 	sts	0x0177, r24
     748:	08 95       	ret

0000074a <ESPpop>:
}

uint8_t ESPpop(char *Bytex)
{
	static uint8_t PosByte;
	EspDataBuffer[30]='!';
     74a:	21 e2       	ldi	r18, 0x21	; 33
     74c:	20 93 7f 03 	sts	0x037F, r18
	*Bytex=EspDataBuffer[PosByte+7];
     750:	20 91 a9 03 	lds	r18, 0x03A9
     754:	e2 2f       	mov	r30, r18
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ef 59       	subi	r30, 0x9F	; 159
     75a:	fc 4f       	sbci	r31, 0xFC	; 252
     75c:	37 81       	ldd	r19, Z+7	; 0x07
     75e:	fc 01       	movw	r30, r24
     760:	30 83       	st	Z, r19
	if(PosByte==23)
     762:	27 31       	cpi	r18, 0x17	; 23
     764:	21 f4       	brne	.+8      	; 0x76e <ESPpop+0x24>
	{
		PosByte=0;
     766:	10 92 a9 03 	sts	0x03A9, r1
		return 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	08 95       	ret
	}
	else
	{
		PosByte++;
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	20 93 a9 03 	sts	0x03A9, r18
	}
	return 0;
     774:	80 e0       	ldi	r24, 0x00	; 0
}
     776:	08 95       	ret

00000778 <ESPCallBack>:

void ESPCallBack(void *fillcallback)
{
	char* mediator;
	mediator=(char*)fillcallback;
	EspDataBuffer[28]=mediator[0];
     778:	fc 01       	movw	r30, r24
     77a:	20 81       	ld	r18, Z
     77c:	20 93 7d 03 	sts	0x037D, r18
	EspDataBuffer[29]=mediator[1];
     780:	81 81       	ldd	r24, Z+1	; 0x01
     782:	80 93 7e 03 	sts	0x037E, r24
     786:	08 95       	ret

00000788 <UartHandlerInit>:
	
}


void UartHandlerInit()
{
     788:	08 95       	ret

0000078a <adc_init>:
 */ 
#include "ADC.h"
#include "..\BaseLayer\UART.h"
void adc_init(void){

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHzjkh
     78a:	ea e7       	ldi	r30, 0x7A	; 122
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	87 60       	ori	r24, 0x07	; 7
     792:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0)|(1 << REFS1); // Set ADC reference to 2.56 internal
     794:	ac e7       	ldi	r26, 0x7C	; 124
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	8c 91       	ld	r24, X
     79a:	80 6c       	ori	r24, 0xC0	; 192
     79c:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     79e:	8c 91       	ld	r24, X
     7a0:	80 62       	ori	r24, 0x20	; 32
     7a2:	8c 93       	st	X, r24

	// No MUX values needed to be changed to use ADC0

	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	ADCSRA |= (1 << ADIE);	
     7a4:	80 81       	ld	r24, Z
     7a6:	88 60       	ori	r24, 0x08	; 8
     7a8:	80 83       	st	Z, r24
     7aa:	08 95       	ret

000007ac <adc_read>:
    //ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
}

void adc_read(unsigned char ch){
    ADCSRA |= (1 << ADEN);
     7ac:	ea e7       	ldi	r30, 0x7A	; 122
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	90 81       	ld	r25, Z
     7b2:	90 68       	ori	r25, 0x80	; 128
     7b4:	90 83       	st	Z, r25
	ADMUX &= 0xF8; // clear bottom 3 bits
     7b6:	ac e7       	ldi	r26, 0x7C	; 124
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	9c 91       	ld	r25, X
     7bc:	98 7f       	andi	r25, 0xF8	; 248
     7be:	9c 93       	st	X, r25
	ADMUX |= ch; // then set bottom 3 bits to channel n
     7c0:	9c 91       	ld	r25, X
     7c2:	89 2b       	or	r24, r25
     7c4:	8c 93       	st	X, r24

	//uart_num(ch);
	ADCSRA |= (1 << ADSC);//|(1<<ADEN);  // Start A2D Conversions
     7c6:	80 81       	ld	r24, Z
     7c8:	80 64       	ori	r24, 0x40	; 64
     7ca:	80 83       	st	Z, r24
     7cc:	08 95       	ret

000007ce <ADC_State>:
	
}

uint8_t ADC_State()
{	
	return bit_is_set(ADCSRA,ADSC);
     7ce:	80 91 7a 00 	lds	r24, 0x007A
}
     7d2:	80 74       	andi	r24, 0x40	; 64
     7d4:	08 95       	ret

000007d6 <ADCValue>:
uint16_t ADCValue()
{
		uint8_t thelow=ADCL;
     7d6:	80 91 78 00 	lds	r24, 0x0078
		uint16_t tenbit=ADCH<<2|thelow>>6;
     7da:	20 91 79 00 	lds	r18, 0x0079
     7de:	82 95       	swap	r24
     7e0:	86 95       	lsr	r24
     7e2:	86 95       	lsr	r24
     7e4:	83 70       	andi	r24, 0x03	; 3
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	28 2b       	or	r18, r24
		//PORTD=tenbit;
		//uart_num(thelow);
		//uart_num(ADMUX&0x07);
		return(tenbit);

}
     7f2:	82 2f       	mov	r24, r18
     7f4:	93 2f       	mov	r25, r19
     7f6:	08 95       	ret

000007f8 <__vector_21>:

ISR(ADC_vect)
{
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	8f 93       	push	r24
	uint8_t thelow=ADCL;
     804:	80 91 78 00 	lds	r24, 0x0078
	uint16_t tenbit=ADCH<<2|thelow>>6;
     808:	80 91 79 00 	lds	r24, 0x0079
	//PORTD=tenbit;
	
	
     80c:	8f 91       	pop	r24
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <PushIntoCircularBuffer>:
 *  Author: Nikhil
 */ 
#include "CircularQueue.h"
#include "UART.h"
CbuffState_t PushIntoCircularBuffer(Cbuff_t* CircularBuffer,unsigned char data)
{
     818:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
     81a:	92 81       	ldd	r25, Z+2	; 0x02
     81c:	89 2f       	mov	r24, r25
     81e:	8f 5f       	subi	r24, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
     820:	24 81       	ldd	r18, Z+4	; 0x04
     822:	82 17       	cp	r24, r18
     824:	08 f0       	brcs	.+2      	; 0x828 <PushIntoCircularBuffer+0x10>
	{
		next=0;
     826:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
     828:	23 81       	ldd	r18, Z+3	; 0x03
     82a:	28 17       	cp	r18, r24
     82c:	41 f0       	breq	.+16     	; 0x83e <PushIntoCircularBuffer+0x26>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
     82e:	a0 81       	ld	r26, Z
     830:	b1 81       	ldd	r27, Z+1	; 0x01
     832:	a9 0f       	add	r26, r25
     834:	b1 1d       	adc	r27, r1
     836:	6c 93       	st	X, r22
		CircularBuffer->head=next;
     838:	82 83       	std	Z+2, r24	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
     83e:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
     840:	08 95       	ret

00000842 <PopFromCircularBuffer>:

CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
     842:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
     844:	83 81       	ldd	r24, Z+3	; 0x03
     846:	98 2f       	mov	r25, r24
     848:	9f 5f       	subi	r25, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
     84a:	22 81       	ldd	r18, Z+2	; 0x02
     84c:	82 17       	cp	r24, r18
     84e:	71 f0       	breq	.+28     	; 0x86c <PopFromCircularBuffer+0x2a>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
     850:	24 81       	ldd	r18, Z+4	; 0x04
     852:	92 17       	cp	r25, r18
     854:	08 f0       	brcs	.+2      	; 0x858 <PopFromCircularBuffer+0x16>
	{
		next=0;
     856:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
     858:	a0 81       	ld	r26, Z
     85a:	b1 81       	ldd	r27, Z+1	; 0x01
     85c:	a8 0f       	add	r26, r24
     85e:	b1 1d       	adc	r27, r1
     860:	8c 91       	ld	r24, X
     862:	db 01       	movw	r26, r22
     864:	8c 93       	st	X, r24
	 CircularBuffer->tail=next;
     866:	93 83       	std	Z+3, r25	; 0x03
	 
  return BuffOk;
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret
CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
     86c:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	 CircularBuffer->tail=next;
	 
  return BuffOk;
}
     86e:	08 95       	ret

00000870 <IsBuffempty>:

CbuffState_t IsBuffempty(Cbuff_t  *CircularBuffer)
{
     870:	fc 01       	movw	r30, r24
		if(CircularBuffer->tail==CircularBuffer->head)
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	23 81       	ldd	r18, Z+3	; 0x03
     876:	92 81       	ldd	r25, Z+2	; 0x02
     878:	29 13       	cpse	r18, r25
     87a:	80 e0       	ldi	r24, 0x00	; 0
		{
			return BuffEmpty;
		}
	return BuffOk;
}
     87c:	08 95       	ret

0000087e <HeadTailDiff>:

uint8_t HeadTailDiff(Cbuff_t  *CircularBuffer,uint8_t dat)
{
     87e:	fc 01       	movw	r30, r24
	if(CircularBuffer->tail>CircularBuffer->head)
     880:	93 81       	ldd	r25, Z+3	; 0x03
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	89 17       	cp	r24, r25
     886:	20 f4       	brcc	.+8      	; 0x890 <HeadTailDiff+0x12>
	{
		return ((CircularBuffer->MaxLen-CircularBuffer->tail)+CircularBuffer->head);
     888:	24 81       	ldd	r18, Z+4	; 0x04
     88a:	82 0f       	add	r24, r18
     88c:	89 1b       	sub	r24, r25
     88e:	08 95       	ret
	}
	else
	{
		return (CircularBuffer->head-CircularBuffer->tail);
     890:	89 1b       	sub	r24, r25
	}
     892:	08 95       	ret

00000894 <TriggerUltraSonic>:
	
}

static void TriggerUltraSonic(void)
{
	PinOutput(0,PIN_OUT8,D);
     894:	42 e0       	ldi	r20, 0x02	; 2
     896:	67 e0       	ldi	r22, 0x07	; 7
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <TriggerUltraSonic+0xc>
	_delay_us(2);
	PinOutput(1,PIN_OUT8,D);
     8a0:	42 e0       	ldi	r20, 0x02	; 2
     8a2:	67 e0       	ldi	r22, 0x07	; 7
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <TriggerUltraSonic+0x18>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <TriggerUltraSonic+0x1a>
     8ae:	00 00       	nop
	_delay_us(5);
	PinOutput(0,PIN_OUT8,D);
     8b0:	42 e0       	ldi	r20, 0x02	; 2
     8b2:	67 e0       	ldi	r22, 0x07	; 7
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
     8ba:	08 95       	ret

000008bc <changeIntLogic>:
}

void changeIntLogic(uint8_t logic)
{
	 
	if(logic==1)
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	31 f4       	brne	.+12     	; 0x8cc <changeIntLogic+0x10>
	{
		//EICRA  |= (1 << ISC00)| (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     8c0:	e9 e6       	ldi	r30, 0x69	; 105
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	80 83       	st	Z, r24
     8ca:	08 95       	ret
	}
	else
	{
		//EICRA  &=~(1<<ISC00);
		//EICRA  |= (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     8cc:	e9 e6       	ldi	r30, 0x69	; 105
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	81 60       	ori	r24, 0x01	; 1
     8d4:	80 83       	st	Z, r24
     8d6:	08 95       	ret

000008d8 <__vector_1>:
	Start=0;
	Status=1;
}

ISR (INT0_vect)
{   
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	2f 93       	push	r18
     8e4:	3f 93       	push	r19
     8e6:	4f 93       	push	r20
     8e8:	5f 93       	push	r21
     8ea:	6f 93       	push	r22
     8ec:	7f 93       	push	r23
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	af 93       	push	r26
     8f4:	bf 93       	push	r27
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
	//uart_string("nIKHIL");
	if(Start==0)
     8fa:	80 91 aa 03 	lds	r24, 0x03AA
     8fe:	81 11       	cpse	r24, r1
     900:	0a c0       	rjmp	.+20     	; 0x916 <__stack+0x17>
	{
		Timer2Enable();
     902:	0e 94 f6 06 	call	0xdec	; 0xdec <Timer2Enable>
		changeIntLogic(0);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <changeIntLogic>
		Start=1; 
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 aa 03 	sts	0x03AA, r24
     914:	0b c0       	rjmp	.+22     	; 0x92c <__stack+0x2d>
		      
	}/* interrupt code here */
	else
	{   	
		Timer2Count();
     916:	0e 94 11 07 	call	0xe22	; 0xe22 <Timer2Count>
		changeIntLogic(1);
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <changeIntLogic>
		Start=0;
     922:	10 92 aa 03 	sts	0x03AA, r1
		Status=1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 ab 03 	sts	0x03AB, r24
		  
	}
	
}
     92c:	ff 91       	pop	r31
     92e:	ef 91       	pop	r30
     930:	bf 91       	pop	r27
     932:	af 91       	pop	r26
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	7f 91       	pop	r23
     93a:	6f 91       	pop	r22
     93c:	5f 91       	pop	r21
     93e:	4f 91       	pop	r20
     940:	3f 91       	pop	r19
     942:	2f 91       	pop	r18
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <ExtIntInit>:
#include "pinout.h"
#include "UART.h"
void ExtIntInit()
{
	
	changeIntLogic(1);//MCUCR |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 5e 04 	call	0x8bc	; 0x8bc <changeIntLogic>
	EIMSK  |= (1 << INT0);      // Turns on INT0
     956:	e8 9a       	sbi	0x1d, 0	; 29
	Start=0;
     958:	10 92 aa 03 	sts	0x03AA, r1
	Status=1;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 ab 03 	sts	0x03AB, r24
     962:	08 95       	ret

00000964 <InterfacePulse>:
		EICRA  |= (1 << ISC00);
	}
}

uint16_t InterfacePulse(uint16_t Pulse)
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
	static uint8_t timeout=0;
	uint8_t *Data=&Pulse;
    
	if(timeout>1)
     96a:	80 91 ac 03 	lds	r24, 0x03AC
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	60 f0       	brcs	.+24     	; 0x98a <InterfacePulse+0x26>
	{
		changeIntLogic(1);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0e 94 5e 04 	call	0x8bc	; 0x8bc <changeIntLogic>
		TriggerUltraSonic();
     978:	0e 94 4a 04 	call	0x894	; 0x894 <TriggerUltraSonic>
		Status=0;
     97c:	10 92 ab 03 	sts	0x03AB, r1
		Start=0;
     980:	10 92 aa 03 	sts	0x03AA, r1
		timeout=0;
     984:	10 92 ac 03 	sts	0x03AC, r1
     988:	3b c0       	rjmp	.+118    	; 0xa00 <InterfacePulse+0x9c>
		//uart_num(timeout);
	}
	else
	{
		
			if(Status==1)
     98a:	90 91 ab 03 	lds	r25, 0x03AB
     98e:	91 30       	cpi	r25, 0x01	; 1
     990:	99 f5       	brne	.+102    	; 0x9f8 <InterfacePulse+0x94>
			{
				//TriggerUltraSonic();
				TimerValue=TimerValue+(overflowfag*255);
     992:	20 91 c0 04 	lds	r18, 0x04C0
     996:	80 91 be 04 	lds	r24, 0x04BE
     99a:	90 91 bf 04 	lds	r25, 0x04BF
     99e:	3f ef       	ldi	r19, 0xFF	; 255
     9a0:	23 9f       	mul	r18, r19
     9a2:	80 0d       	add	r24, r0
     9a4:	91 1d       	adc	r25, r1
     9a6:	11 24       	eor	r1, r1
     9a8:	90 93 bf 04 	sts	0x04BF, r25
     9ac:	80 93 be 04 	sts	0x04BE, r24
				TimerValue=(16*TimerValue)/58;// PRESCALER IS 256 so 1 count is 16us
     9b0:	20 91 be 04 	lds	r18, 0x04BE
     9b4:	30 91 bf 04 	lds	r19, 0x04BF
     9b8:	22 95       	swap	r18
     9ba:	32 95       	swap	r19
     9bc:	30 7f       	andi	r19, 0xF0	; 240
     9be:	32 27       	eor	r19, r18
     9c0:	20 7f       	andi	r18, 0xF0	; 240
     9c2:	32 27       	eor	r19, r18
     9c4:	af e9       	ldi	r26, 0x9F	; 159
     9c6:	b6 e4       	ldi	r27, 0x46	; 70
     9c8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
     9cc:	92 95       	swap	r25
     9ce:	82 95       	swap	r24
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	89 27       	eor	r24, r25
     9d4:	9f 70       	andi	r25, 0x0F	; 15
     9d6:	89 27       	eor	r24, r25
     9d8:	90 93 bf 04 	sts	0x04BF, r25
     9dc:	80 93 be 04 	sts	0x04BE, r24
				Pulse=TimerValue;
     9e0:	c0 91 be 04 	lds	r28, 0x04BE
     9e4:	d0 91 bf 04 	lds	r29, 0x04BF
				Pulse|=0X8000;
     9e8:	d0 68       	ori	r29, 0x80	; 128
				timeout=0;
     9ea:	10 92 ac 03 	sts	0x03AC, r1
				Status=0;
     9ee:	10 92 ab 03 	sts	0x03AB, r1
				TriggerUltraSonic();
     9f2:	0e 94 4a 04 	call	0x894	; 0x894 <TriggerUltraSonic>
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <InterfacePulse+0x9c>
			}
			else
			{
				Pulse|=0x1000;
     9f8:	d0 61       	ori	r29, 0x10	; 16
				timeout++;
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	80 93 ac 03 	sts	0x03AC, r24
			}

	}
	return Pulse;
}
     a00:	8c 2f       	mov	r24, r28
     a02:	9d 2f       	mov	r25, r29
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     a0a:	ec eb       	ldi	r30, 0xBC	; 188
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     a10:	94 ea       	ldi	r25, 0xA4	; 164
     a12:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a14:	90 81       	ld	r25, Z
     a16:	99 23       	and	r25, r25
     a18:	ec f7       	brge	.-6      	; 0xa14 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     a1a:	90 91 b9 00 	lds	r25, 0x00B9
     a1e:	98 7f       	andi	r25, 0xF8	; 248
     a20:	98 30       	cpi	r25, 0x08	; 8
     a22:	a1 f4       	brne	.+40     	; 0xa4c <i2c_start+0x42>
	//uart_string("hrrr");
	// load slave address into data register
	TWDR = address;
     a24:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     a28:	84 e8       	ldi	r24, 0x84	; 132
     a2a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a2e:	ec eb       	ldi	r30, 0xBC	; 188
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	88 23       	and	r24, r24
     a36:	ec f7       	brge	.-6      	; 0xa32 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     a38:	90 91 b9 00 	lds	r25, 0x00B9
     a3c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     a3e:	98 31       	cpi	r25, 0x18	; 24
     a40:	39 f0       	breq	.+14     	; 0xa50 <i2c_start+0x46>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 34       	cpi	r25, 0x40	; 64
     a46:	29 f4       	brne	.+10     	; 0xa52 <i2c_start+0x48>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     a50:	80 e0       	ldi	r24, 0x00	; 0
}
     a52:	08 95       	ret

00000a54 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     a54:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     a58:	84 e8       	ldi	r24, 0x84	; 132
     a5a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     a5e:	ec eb       	ldi	r30, 0xBC	; 188
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	88 23       	and	r24, r24
     a66:	ec f7       	brge	.-6      	; 0xa62 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     a68:	90 91 b9 00 	lds	r25, 0x00B9
     a6c:	98 7f       	andi	r25, 0xF8	; 248
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	98 32       	cpi	r25, 0x28	; 40
     a72:	09 f4       	brne	.+2      	; 0xa76 <i2c_write+0x22>
     a74:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     a76:	08 95       	ret

00000a78 <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a78:	84 e9       	ldi	r24, 0x94	; 148
     a7a:	80 93 bc 00 	sts	0x00BC, r24
     a7e:	08 95       	ret

00000a80 <ssd1306_char_font6x8>:
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	c8 2f       	mov	r28, r24
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
     a88:	88 e7       	ldi	r24, 0x78	; 120
     a8a:	0e 94 05 05 	call	0xa0a	; 0xa0a <i2c_start>
     a8e:	81 11       	cpse	r24, r1
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <ssd1306_char_font6x8+0x48>
	i2c_write(0x40);
     a92:	80 e4       	ldi	r24, 0x40	; 64
     a94:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
     a98:	c0 52       	subi	r28, 0x20	; 32
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     a9a:	8c 2f       	mov	r24, r28
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	ec 01       	movw	r28, r24
     aa0:	cc 0f       	add	r28, r28
     aa2:	dd 1f       	adc	r29, r29
     aa4:	8c 0f       	add	r24, r28
     aa6:	9d 1f       	adc	r25, r29
     aa8:	ec 01       	movw	r28, r24
     aaa:	cc 0f       	add	r28, r28
     aac:	dd 1f       	adc	r29, r29
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
     aae:	c7 51       	subi	r28, 0x17	; 23
     ab0:	dd 4f       	sbci	r29, 0xFD	; 253
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
     ab2:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
     ab4:	89 91       	ld	r24, Y+
     ab6:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
     aba:	81 11       	cpse	r24, r1
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <ssd1306_char_font6x8+0x48>

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
     abe:	1f 5f       	subi	r17, 0xFF	; 255
     ac0:	16 30       	cpi	r17, 0x06	; 6
     ac2:	c1 f7       	brne	.-16     	; 0xab4 <ssd1306_char_font6x8+0x34>
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
     ac4:	0e 94 3c 05 	call	0xa78	; 0xa78 <i2c_stop>
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	08 95       	ret

00000ad0 <ssd1306_setpos>:
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
void ssd1306_setpos(uint8_t x, uint8_t y)
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	c8 2f       	mov	r28, r24
     ad6:	d6 2f       	mov	r29, r22
	if (i2c_start(0x78 | 0x00)) return 1;
     ad8:	88 e7       	ldi	r24, 0x78	; 120
     ada:	0e 94 05 05 	call	0xa0a	; 0xa0a <i2c_start>
     ade:	81 11       	cpse	r24, r1
     ae0:	12 c0       	rjmp	.+36     	; 0xb06 <ssd1306_setpos+0x36>
	i2c_write(0x00);
     ae2:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
	i2c_write(0xb0 + y);
     ae6:	8d 2f       	mov	r24, r29
     ae8:	80 55       	subi	r24, 0x50	; 80
     aea:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
	i2c_write((x & 0x0f));
     aee:	8c 2f       	mov	r24, r28
     af0:	8f 70       	andi	r24, 0x0F	; 15
     af2:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
	i2c_write(((x & 0xf0) >> 4) | 0x10); // | 0x10
     af6:	8c 2f       	mov	r24, r28
     af8:	82 95       	swap	r24
     afa:	8f 70       	andi	r24, 0x0F	; 15
     afc:	80 61       	ori	r24, 0x10	; 16
     afe:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
	/* TODO: Verify correctness */	 // | 0x01
	i2c_stop();
     b02:	0e 94 3c 05 	call	0xa78	; 0xa78 <i2c_stop>
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <ssd1306_String_font6x8>:
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	86 2f       	mov	r24, r22
	ssd1306_setpos(x,y);
     b14:	64 2f       	mov	r22, r20
     b16:	0e 94 68 05 	call	0xad0	; 0xad0 <ssd1306_setpos>
	while ( *SSDstring)
     b1a:	88 81       	ld	r24, Y
     b1c:	88 23       	and	r24, r24
     b1e:	31 f0       	breq	.+12     	; 0xb2c <ssd1306_String_font6x8+0x20>
	{
		if (i2c_write(ssd1306xled_font6x8[c * 6 + i])) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
     b20:	21 96       	adiw	r28, 0x01	; 1
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
	{
     ssd1306_char_font6x8(*SSDstring++);
     b22:	0e 94 40 05 	call	0xa80	; 0xa80 <ssd1306_char_font6x8>
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
     b26:	89 91       	ld	r24, Y+
     b28:	81 11       	cpse	r24, r1
     b2a:	fb cf       	rjmp	.-10     	; 0xb22 <ssd1306_String_font6x8+0x16>
	{
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <ssd1306_Fill_Rectangle>:
		i2c_write(0x01);
	}
	i2c_stop();
}
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	d4 2f       	mov	r29, r20
		ssd1306_setpos(x,y);
     b38:	0e 94 68 05 	call	0xad0	; 0xad0 <ssd1306_setpos>
		if (i2c_start(0x78 | 0x00)) return 1;
     b3c:	88 e7       	ldi	r24, 0x78	; 120
     b3e:	0e 94 05 05 	call	0xa0a	; 0xa0a <i2c_start>
     b42:	81 11       	cpse	r24, r1
     b44:	19 c0       	rjmp	.+50     	; 0xb78 <ssd1306_Fill_Rectangle+0x46>
		i2c_write(0x40);
     b46:	80 e4       	ldi	r24, 0x40	; 64
     b48:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
		for(uint8_t i=0;i<data;i++)
     b4c:	d1 11       	cpse	r29, r1
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <ssd1306_Fill_Rectangle+0x22>
     b50:	cd 2f       	mov	r28, r29
     b52:	0a c0       	rjmp	.+20     	; 0xb68 <ssd1306_Fill_Rectangle+0x36>
     b54:	c0 e0       	ldi	r28, 0x00	; 0
		{
			i2c_write(0xff);
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
		ssd1306_setpos(x,y);
		if (i2c_start(0x78 | 0x00)) return 1;
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
     b5c:	cf 5f       	subi	r28, 0xFF	; 255
     b5e:	cd 13       	cpse	r28, r29
     b60:	fa cf       	rjmp	.-12     	; 0xb56 <ssd1306_Fill_Rectangle+0x24>
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     b62:	df 37       	cpi	r29, 0x7F	; 127
     b64:	a8 f3       	brcs	.-22     	; 0xb50 <ssd1306_Fill_Rectangle+0x1e>
     b66:	06 c0       	rjmp	.+12     	; 0xb74 <ssd1306_Fill_Rectangle+0x42>
		{
		  i2c_write(0x01);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 2a 05 	call	0xa54	; 0xa54 <i2c_write>
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
     b6e:	cf 5f       	subi	r28, 0xFF	; 255
     b70:	cf 37       	cpi	r28, 0x7F	; 127
     b72:	d0 f3       	brcs	.-12     	; 0xb68 <ssd1306_Fill_Rectangle+0x36>
		{
		  i2c_write(0x01);
		}
		i2c_stop();
     b74:	0e 94 3c 05 	call	0xa78	; 0xa78 <i2c_stop>
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <SwitchNvmOff>:
	NVMState=0;
}

static void SwitchNvmOff()
{
	EECR &= ~(1<<EERIE);
     b7e:	fb 98       	cbi	0x1f, 3	; 31
	NVMState=2;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 1e 02 	sts	0x021E, r24
     b86:	08 95       	ret

00000b88 <__vector_22>:
uint8_t *message;
//EEPROM writing ISR
volatile uint8_t WriteSize;
static void SwitchNvmOff();
ISR(EE_READY_vect)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	/*check if not end of string and address
	didn't reach end of EEPROM*/
	
	if(WriteorRead==0)
     baa:	80 91 c6 04 	lds	r24, 0x04C6
     bae:	81 11       	cpse	r24, r1
     bb0:	27 c0       	rjmp	.+78     	; 0xc00 <__vector_22+0x78>
	{
		//uart_num(eepromaddress);
		//uart_string("\n");
	if (WriteSize!=0)
     bb2:	80 91 c9 04 	lds	r24, 0x04C9
     bb6:	88 23       	and	r24, r24
     bb8:	01 f1       	breq	.+64     	; 0xbfa <__vector_22+0x72>
	{
		//loads address and increments for next load
		NVMState=1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
     bc0:	80 91 c4 04 	lds	r24, 0x04C4
     bc4:	90 91 c5 04 	lds	r25, 0x04C5
     bc8:	92 bd       	out	0x22, r25	; 34
     bca:	81 bd       	out	0x21, r24	; 33
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	90 93 c5 04 	sts	0x04C5, r25
     bd2:	80 93 c4 04 	sts	0x04C4, r24
		//loads current byte and increments index for next load
		WriteSize--;
     bd6:	80 91 c9 04 	lds	r24, 0x04C9
     bda:	81 50       	subi	r24, 0x01	; 1
     bdc:	80 93 c9 04 	sts	0x04C9, r24
		EEDR=message[WriteSize];
     be0:	80 91 c9 04 	lds	r24, 0x04C9
     be4:	e0 91 c2 04 	lds	r30, 0x04C2
     be8:	f0 91 c3 04 	lds	r31, 0x04C3
     bec:	e8 0f       	add	r30, r24
     bee:	f1 1d       	adc	r31, r1
     bf0:	80 81       	ld	r24, Z
     bf2:	80 bd       	out	0x20, r24	; 32
		//uart_num(message[WriteSize]);
		//master write enable
		EECR|=(1<<EEMPE);
     bf4:	fa 9a       	sbi	0x1f, 2	; 31
		//strobe eeprom write
		EECR|=(1<<EEPE);
     bf6:	f9 9a       	sbi	0x1f, 1	; 31
     bf8:	44 c0       	rjmp	.+136    	; 0xc82 <__vector_22+0xfa>
	}
	else
	{
		//disable eeprom ready interrupt
		//uart_string("switch off");
		SwitchNvmOff();
     bfa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SwitchNvmOff>
     bfe:	41 c0       	rjmp	.+130    	; 0xc82 <__vector_22+0xfa>
    }
	}
	else
	{
	
	if(eepromaddress<=(eepromaddressCopy))
     c00:	20 91 c4 04 	lds	r18, 0x04C4
     c04:	30 91 c5 04 	lds	r19, 0x04C5
     c08:	80 91 c7 04 	lds	r24, 0x04C7
     c0c:	90 91 c8 04 	lds	r25, 0x04C8
     c10:	82 17       	cp	r24, r18
     c12:	93 07       	cpc	r25, r19
     c14:	50 f1       	brcs	.+84     	; 0xc6a <__vector_22+0xe2>
	{
		NVMState=1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
     c1c:	80 91 c4 04 	lds	r24, 0x04C4
     c20:	90 91 c5 04 	lds	r25, 0x04C5
     c24:	92 bd       	out	0x22, r25	; 34
     c26:	81 bd       	out	0x21, r24	; 33
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	90 93 c5 04 	sts	0x04C5, r25
     c2e:	80 93 c4 04 	sts	0x04C4, r24
		EECR|=(1<<EERE);
     c32:	f8 9a       	sbi	0x1f, 0	; 31
		message[IndexNvmCount]=EEDR;
     c34:	90 91 c1 04 	lds	r25, 0x04C1
     c38:	80 b5       	in	r24, 0x20	; 32
     c3a:	e0 91 c2 04 	lds	r30, 0x04C2
     c3e:	f0 91 c3 04 	lds	r31, 0x04C3
     c42:	e9 0f       	add	r30, r25
     c44:	f1 1d       	adc	r31, r1
     c46:	80 83       	st	Z, r24
		uart_num(message[IndexNvmCount]);
     c48:	80 91 c1 04 	lds	r24, 0x04C1
     c4c:	e0 91 c2 04 	lds	r30, 0x04C2
     c50:	f0 91 c3 04 	lds	r31, 0x04C3
     c54:	e8 0f       	add	r30, r24
     c56:	f1 1d       	adc	r31, r1
     c58:	80 81       	ld	r24, Z
     c5a:	0e 94 c0 07 	call	0xf80	; 0xf80 <uart_num>
		IndexNvmCount--;
     c5e:	80 91 c1 04 	lds	r24, 0x04C1
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	80 93 c1 04 	sts	0x04C1, r24
     c68:	0c c0       	rjmp	.+24     	; 0xc82 <__vector_22+0xfa>
	}
		else
		{
			//disable eeprom ready interrupt
			uart_string("switch read");
     c6a:	8f ee       	ldi	r24, 0xEF	; 239
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_string>
			SwitchNvmOff();
     c72:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SwitchNvmOff>
			IndexNvmCount=0;
     c76:	10 92 c1 04 	sts	0x04C1, r1
			eepromaddressCopy=0;
     c7a:	10 92 c8 04 	sts	0x04C8, r1
     c7e:	10 92 c7 04 	sts	0x04C7, r1
			
		}
	}
}
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <PinOutConfig>:
//static Port PORTB_OUT;

void PinOutConfig(uint8_t State,Pin Pin_s,Ports Port_s)
{
   volatile uint8_t *Reg;
   Reg=portModeRegister(Port_s);
     ca4:	e4 2f       	mov	r30, r20
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	e2 59       	subi	r30, 0x92	; 146
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	25 91       	lpm	r18, Z+
     cb2:	34 91       	lpm	r19, Z
     cb4:	e2 2f       	mov	r30, r18
     cb6:	f3 2f       	mov	r31, r19
  if(State==1)
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	69 f4       	brne	.+26     	; 0xcd6 <PinOutConfig+0x32>
  {
	  
	  *Reg|=1<<Pin_s;
     cbc:	20 81       	ld	r18, Z
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	ac 01       	movw	r20, r24
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <PinOutConfig+0x26>
     cc6:	44 0f       	add	r20, r20
     cc8:	55 1f       	adc	r21, r21
     cca:	6a 95       	dec	r22
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <PinOutConfig+0x22>
     cce:	ba 01       	movw	r22, r20
     cd0:	62 2b       	or	r22, r18
     cd2:	60 83       	st	Z, r22
     cd4:	08 95       	ret
  }
  else 
  {
	  *Reg&=~(1<<Pin_s);
     cd6:	20 81       	ld	r18, Z
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	ac 01       	movw	r20, r24
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <PinOutConfig+0x40>
     ce0:	44 0f       	add	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <PinOutConfig+0x3c>
     ce8:	ba 01       	movw	r22, r20
     cea:	60 95       	com	r22
     cec:	62 23       	and	r22, r18
     cee:	60 83       	st	Z, r22
     cf0:	08 95       	ret

00000cf2 <PinOutput>:
  } 
}
void PinOutput(uint8_t Out,Pin Pin_s,Ports Port_s )
{
    volatile uint8_t *out;
	out=portOutRegister(Port_s);
     cf2:	e4 2f       	mov	r30, r20
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ec 58       	subi	r30, 0x8C	; 140
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	25 91       	lpm	r18, Z+
     d00:	34 91       	lpm	r19, Z
     d02:	e2 2f       	mov	r30, r18
     d04:	f3 2f       	mov	r31, r19
	    if(Out==ON)
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	69 f4       	brne	.+26     	; 0xd24 <PinOutput+0x32>
		{
			*out=*out|(1<<Pin_s);
     d0a:	20 81       	ld	r18, Z
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	ac 01       	movw	r20, r24
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <PinOutput+0x26>
     d14:	44 0f       	add	r20, r20
     d16:	55 1f       	adc	r21, r21
     d18:	6a 95       	dec	r22
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <PinOutput+0x22>
     d1c:	ba 01       	movw	r22, r20
     d1e:	62 2b       	or	r22, r18
     d20:	60 83       	st	Z, r22
     d22:	08 95       	ret
		}
		else
		{
			*out&=~(1<<Pin_s);
     d24:	20 81       	ld	r18, Z
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	ac 01       	movw	r20, r24
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <PinOutput+0x40>
     d2e:	44 0f       	add	r20, r20
     d30:	55 1f       	adc	r21, r21
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <PinOutput+0x3c>
     d36:	ba 01       	movw	r22, r20
     d38:	60 95       	com	r22
     d3a:	62 23       	and	r22, r18
     d3c:	60 83       	st	Z, r22
     d3e:	08 95       	ret

00000d40 <PinValue>:


void PinValue(uint8_t *Value,Pin Pin_s,Ports Port_s)
{
	    volatile uint8_t *out;
	    out=portInputRegister(Port_s);
     d40:	e4 2f       	mov	r30, r20
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	e8 59       	subi	r30, 0x98	; 152
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	25 91       	lpm	r18, Z+
     d4e:	34 91       	lpm	r19, Z
     d50:	e2 2f       	mov	r30, r18
     d52:	f3 2f       	mov	r31, r19
		
		//*Value=bit_is_clear(*out,Pin_s);
		*Value=bit_is_set(*out,Pin_s);
     d54:	40 81       	ld	r20, Z
     d56:	21 e0       	ldi	r18, 0x01	; 1
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	f9 01       	movw	r30, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <PinValue+0x22>
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	6a 95       	dec	r22
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <PinValue+0x1e>
     d66:	bf 01       	movw	r22, r30
     d68:	64 23       	and	r22, r20
     d6a:	fc 01       	movw	r30, r24
     d6c:	60 83       	st	Z, r22
     d6e:	08 95       	ret

00000d70 <spi_init_master>:
uint8_t ClockSpeed1[Endoflist]={0,1,2,3,0,1,2,3};
	
void spi_init_master (void)
{
	// Set MOSI, SCK as Output
	DDRB = DDRB|(1<<5)|(1<<3)|(1<<2);
     d70:	84 b1       	in	r24, 0x04	; 4
     d72:	8c 62       	ori	r24, 0x2C	; 44
     d74:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master
	//Prescaler: Fosc/16, Enable Interrupts
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     d76:	81 e5       	ldi	r24, 0x51	; 81
     d78:	8c bd       	out	0x2c, r24	; 44
     d7a:	08 95       	ret

00000d7c <spi_dataorder>:
}

void spi_dataorder(uint8_t data )
{
	
	SPCR |=(data<<DORD);//1 lsb first
     d7c:	2c b5       	in	r18, 0x2c	; 44
     d7e:	30 e2       	ldi	r19, 0x20	; 32
     d80:	83 9f       	mul	r24, r19
     d82:	c0 01       	movw	r24, r0
     d84:	11 24       	eor	r1, r1
     d86:	82 2b       	or	r24, r18
     d88:	8c bd       	out	0x2c, r24	; 44
     d8a:	08 95       	ret

00000d8c <spi_clockspeed>:
}

void spi_clockspeed(SPI_CLK_Divider clock)
{
	
	if(clock==2||clock==8||clock==32||clock==64)
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	31 f0       	breq	.+12     	; 0xd9c <spi_clockspeed+0x10>
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	21 f0       	breq	.+8      	; 0xd9c <spi_clockspeed+0x10>
     d94:	80 32       	cpi	r24, 0x20	; 32
     d96:	11 f0       	breq	.+4      	; 0xd9c <spi_clockspeed+0x10>
     d98:	80 34       	cpi	r24, 0x40	; 64
     d9a:	a1 f4       	brne	.+40     	; 0xdc4 <spi_clockspeed+0x38>
	{
		
		SPCR =SPCR|1<<ClockSpeed1[clock];//ClockSpeed1[clock];//1 for fosc/4,rest till 4
     d9c:	4c b5       	in	r20, 0x2c	; 44
     d9e:	e8 2f       	mov	r30, r24
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	e1 5e       	subi	r30, 0xE1	; 225
     da4:	fd 4f       	sbci	r31, 0xFD	; 253
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	c9 01       	movw	r24, r18
     dac:	00 80       	ld	r0, Z
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <spi_clockspeed+0x28>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <spi_clockspeed+0x24>
     db8:	84 2b       	or	r24, r20
     dba:	8c bd       	out	0x2c, r24	; 44
		SPSR=SPSR|0x01;
     dbc:	8d b5       	in	r24, 0x2d	; 45
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	8d bd       	out	0x2d, r24	; 45
     dc2:	08 95       	ret
	}
	else if(clock==4||clock==16||clock==64||clock==128)
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <spi_clockspeed+0x44>
     dc8:	80 31       	cpi	r24, 0x10	; 16
     dca:	11 f0       	breq	.+4      	; 0xdd0 <spi_clockspeed+0x44>
     dcc:	80 38       	cpi	r24, 0x80	; 128
     dce:	19 f4       	brne	.+6      	; 0xdd6 <spi_clockspeed+0x4a>
	{
		
		SPCR =SPCR|clock;	
     dd0:	ec b5       	in	r30, 0x2c	; 44
     dd2:	8e 2b       	or	r24, r30
     dd4:	8c bd       	out	0x2c, r24	; 44
     dd6:	08 95       	ret

00000dd8 <spi_clockphase>:

void spi_clockphase(uint8_t data)
{
	
	
	SPCR|=1<<CPOL;//1 to 4
     dd8:	8c b5       	in	r24, 0x2c	; 44
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	8c bd       	out	0x2c, r24	; 44
     dde:	08 95       	ret

00000de0 <spi_tranceiver>:
	
}
unsigned char spi_tranceiver (unsigned char data)
{
	// Load data into the buffer
	SPDR = data;
     de0:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
     de2:	0d b4       	in	r0, 0x2d	; 45
     de4:	07 fe       	sbrs	r0, 7
     de6:	fd cf       	rjmp	.-6      	; 0xde2 <spi_tranceiver+0x2>
	
	// Return received data
	return(SPDR);
     de8:	8e b5       	in	r24, 0x2e	; 46
     dea:	08 95       	ret

00000dec <Timer2Enable>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "UART.h"
void Timer2Enable()
{
	overflowfag=0;
     dec:	10 92 c0 04 	sts	0x04C0, r1
	TimeReady=0;
     df0:	10 92 bd 04 	sts	0x04BD, r1
	TCCR2B|=1<<CS21|1<<CS22;
     df4:	e1 eb       	ldi	r30, 0xB1	; 177
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	86 60       	ori	r24, 0x06	; 6
     dfc:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);
     dfe:	e0 e7       	ldi	r30, 0x70	; 112
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 83       	st	Z, r24
	TCNT2 = 0;
     e08:	10 92 b2 00 	sts	0x00B2, r1
	TimerValue=0;
     e0c:	10 92 bf 04 	sts	0x04BF, r1
     e10:	10 92 be 04 	sts	0x04BE, r1
     e14:	08 95       	ret

00000e16 <Timer2Disable>:
	TCNT2=0;
	return TCNT2;
}
void Timer2Disable()
{
	TCCR2B=0;
     e16:	10 92 b1 00 	sts	0x00B1, r1
	TimeReady=1;	
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 bd 04 	sts	0x04BD, r24
     e20:	08 95       	ret

00000e22 <Timer2Count>:
	//TCNT1L = 0;
	//TCNT1H=0;
}

uint8_t Timer2Count()
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
    TimerValue=TCNT2;//((TCNT1L)*16)/58;//;	
     e26:	c2 eb       	ldi	r28, 0xB2	; 178
     e28:	d0 e0       	ldi	r29, 0x00	; 0
     e2a:	88 81       	ld	r24, Y
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	90 93 bf 04 	sts	0x04BF, r25
     e32:	80 93 be 04 	sts	0x04BE, r24
	Timer2Disable();
     e36:	0e 94 0b 07 	call	0xe16	; 0xe16 <Timer2Disable>
	TCNT2=0;
     e3a:	18 82       	st	Y, r1
	return TCNT2;
     e3c:	88 81       	ld	r24, Y
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <__vector_9>:
{
	TCCR2B=0;
	TimeReady=1;	
}
ISR(TIMER2_OVF_vect)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	8f 93       	push	r24
	overflowfag=overflowfag+1;
     e50:	80 91 c0 04 	lds	r24, 0x04C0
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	80 93 c0 04 	sts	0x04C0, r24
	//uart_num(overflowfag);
	//TIMSK2|=(1<<TOIE2);
	//TimerValue+=255;
     e5a:	8f 91       	pop	r24
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <ConfigureCallBack>:
	UDR0=dat;
}

void ConfigureCallBack(uint16_t  (*callbackarg)(void))
{
	callbackFunction= callbackarg;
     e66:	90 93 b0 04 	sts	0x04B0, r25
     e6a:	80 93 af 04 	sts	0x04AF, r24
     e6e:	08 95       	ret

00000e70 <Callhandler>:
}

//updated code
 uint16_t Callhandler(void *fptr)
{
	PushEventInterface(200,DebugHandlerFunc,PopInterface,0);
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	41 e4       	ldi	r20, 0x41	; 65
     e74:	57 e0       	ldi	r21, 0x07	; 7
     e76:	6e ee       	ldi	r22, 0xEE	; 238
     e78:	7a e0       	ldi	r23, 0x0A	; 10
     e7a:	88 ec       	ldi	r24, 0xC8	; 200
     e7c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
     e80:	08 95       	ret

00000e82 <PopInterface>:
	}
	
}

uint8_t PopInterface(unsigned char *dataval)
{
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	1f 92       	push	r1
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	8c 01       	movw	r16, r24
	unsigned char data;
	
	if(PopFromCircularBuffer(&CircularBuffer,&data)==BuffOk)
     e92:	be 01       	movw	r22, r28
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	87 e2       	ldi	r24, 0x27	; 39
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	0e 94 21 04 	call	0x842	; 0x842 <PopFromCircularBuffer>
     ea0:	81 11       	cpse	r24, r1
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <PopInterface+0x2c>
	{
		*dataval=data;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	f8 01       	movw	r30, r16
     ea8:	80 83       	st	Z, r24
		return 0;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <PopInterface+0x2e>
	}
	return 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
}
     eb0:	0f 90       	pop	r0
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <uart_init>:
	y                      \
};                          \


void uart_init()
{   Data_Count=0;
     ebc:	10 92 b1 04 	sts	0x04B1, r1
	UBRR0L=0x0C;//0x0C;//--> FOR BAUD esp;0x9b-->for 9800
	Data_Count=0;	
	//UCSRB|=(1<7);
	//uart_delay(100);*/
		//UCSR0A=0x02;//for esp baud 0x02
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);//UCSR0B=0x98;
     ec0:	88 e9       	ldi	r24, 0x98	; 152
     ec2:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);//UCSR0C=0x86;
     ec6:	8e e0       	ldi	r24, 0x0E	; 14
     ec8:	80 93 c2 00 	sts	0x00C2, r24
		UBRR0H=0x00;
     ecc:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L=0x08;//--> FOR BAUD esp;0x9b-->for 9800//0x69
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	80 93 c4 00 	sts	0x00C4, r24
		//UDR0='B';
		//Data_Count=0;
		callbackFunction=0;
     ed6:	10 92 b0 04 	sts	0x04B0, r1
     eda:	10 92 af 04 	sts	0x04AF, r1
		callbackSetFunction(0,ConfigureCallBack);
     ede:	63 e3       	ldi	r22, 0x33	; 51
     ee0:	77 e0       	ldi	r23, 0x07	; 7
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <callbackSetFunction>
     ee8:	08 95       	ret

00000eea <uart_delay>:
}

void uart_delay(unsigned int delaytime)
{
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
	...
     f0a:	2f 5f       	subi	r18, 0xFF	; 255
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	82 17       	cp	r24, r18
     f10:	93 07       	cpc	r25, r19
     f12:	68 f7       	brcc	.-38     	; 0xeee <uart_delay+0x4>
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
	}
	
}
     f14:	08 95       	ret

00000f16 <uart_string>:
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
{
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29

	while ( *ustring)
     f22:	fc 01       	movw	r30, r24
     f24:	20 81       	ld	r18, Z
     f26:	22 23       	and	r18, r18
     f28:	c1 f0       	breq	.+48     	; 0xf5a <uart_string+0x44>
		//UDR=*ustring++;
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
     f2a:	8c 01       	movw	r16, r24
     f2c:	0f 5f       	subi	r16, 0xFF	; 255
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
{

	while ( *ustring)
	{
		UDR0=*ustring++;
     f30:	0f 2e       	mov	r0, r31
     f32:	f6 ec       	ldi	r31, 0xC6	; 198
     f34:	ef 2e       	mov	r14, r31
     f36:	f1 2c       	mov	r15, r1
     f38:	f0 2d       	mov	r31, r0
		while((UCSR0A&0x40)==0x00);
     f3a:	c0 ec       	ldi	r28, 0xC0	; 192
     f3c:	d0 e0       	ldi	r29, 0x00	; 0
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
	{
		UDR0=*ustring++;
     f3e:	f7 01       	movw	r30, r14
     f40:	20 83       	st	Z, r18
		while((UCSR0A&0x40)==0x00);
     f42:	88 81       	ld	r24, Y
     f44:	86 ff       	sbrs	r24, 6
     f46:	fd cf       	rjmp	.-6      	; 0xf42 <uart_string+0x2c>
		uart_delay(1000);
     f48:	88 ee       	ldi	r24, 0xE8	; 232
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 75 07 	call	0xeea	; 0xeea <uart_delay>
	}	
}
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
     f50:	f8 01       	movw	r30, r16
     f52:	21 91       	ld	r18, Z+
     f54:	8f 01       	movw	r16, r30
     f56:	21 11       	cpse	r18, r1
     f58:	f2 cf       	rjmp	.-28     	; 0xf3e <uart_string+0x28>
	{
		UDR0=*ustring++;
		while((UCSR0A&0x40)==0x00);
		uart_delay(1000);
	}
}
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	08 95       	ret

00000f68 <uart_char>:
		callbackSetFunction(0,ConfigureCallBack);
}

void uart_char(unsigned char uchar)
{
	UDR0=uchar;
     f68:	80 93 c6 00 	sts	0x00C6, r24
	while((UCSR0A&0x40)==0x00);
     f6c:	e0 ec       	ldi	r30, 0xC0	; 192
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	86 ff       	sbrs	r24, 6
     f74:	fd cf       	rjmp	.-6      	; 0xf70 <uart_char+0x8>
	uart_delay(1000);
     f76:	88 ee       	ldi	r24, 0xE8	; 232
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 75 07 	call	0xeea	; 0xeea <uart_delay>
     f7e:	08 95       	ret

00000f80 <uart_num>:
		uart_delay(1000);
	}
}

void uart_num(unsigned char num)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	c8 2f       	mov	r28, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
     f8a:	19 e2       	ldi	r17, 0x29	; 41
     f8c:	81 9f       	mul	r24, r17
     f8e:	11 2d       	mov	r17, r1
     f90:	11 24       	eor	r1, r1
     f92:	12 95       	swap	r17
     f94:	1f 70       	andi	r17, 0x0F	; 15
	T=(num - (H*100))/10;
     f96:	0c e9       	ldi	r16, 0x9C	; 156
     f98:	01 03       	mulsu	r16, r17
     f9a:	90 01       	movw	r18, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	c9 01       	movw	r24, r18
     fa0:	8c 0f       	add	r24, r28
     fa2:	91 1d       	adc	r25, r1
     fa4:	6a e0       	ldi	r22, 0x0A	; 10
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__divmodhi4>
     fac:	d6 2f       	mov	r29, r22
	O=(num - (H*100) - (T*10));

	uart_char(H+48);
     fae:	81 2f       	mov	r24, r17
     fb0:	80 5d       	subi	r24, 0xD0	; 208
     fb2:	0e 94 b4 07 	call	0xf68	; 0xf68 <uart_char>
	uart_char(T+48);
     fb6:	8d 2f       	mov	r24, r29
     fb8:	80 5d       	subi	r24, 0xD0	; 208
     fba:	0e 94 b4 07 	call	0xf68	; 0xf68 <uart_char>
void uart_num(unsigned char num)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
     fbe:	c0 5d       	subi	r28, 0xD0	; 208
     fc0:	8c 2f       	mov	r24, r28
     fc2:	10 9f       	mul	r17, r16
     fc4:	80 0d       	add	r24, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	dd 0f       	add	r29, r29
     fca:	9d 2f       	mov	r25, r29
     fcc:	99 0f       	add	r25, r25
     fce:	99 0f       	add	r25, r25
     fd0:	d9 0f       	add	r29, r25

	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);
     fd2:	8d 1b       	sub	r24, r29
     fd4:	0e 94 b4 07 	call	0xf68	; 0xf68 <uart_char>
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <__vector_18>:
	}
	
}
circularbuff(CircularBuffer,100);
ISR(USART_RX_vect)
{
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	1f 92       	push	r1
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    
    static uint8_t flag=0;
	static UartBuffer BufferData;
	r=UDR0;
    100e:	80 91 c6 00 	lds	r24, 0x00C6
    1012:	80 93 ad 04 	sts	0x04AD, r24
	uint8_t i;
	char data;
	//cli();
	PushIntoCircularBuffer(&CircularBuffer,r);
    1016:	60 91 ad 04 	lds	r22, 0x04AD
    101a:	87 e2       	ldi	r24, 0x27	; 39
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 0c 04 	call	0x818	; 0x818 <PushIntoCircularBuffer>
	//sei();
	if(r=='d')
    1022:	80 91 ad 04 	lds	r24, 0x04AD
    1026:	84 36       	cpi	r24, 0x64	; 100
    1028:	11 f4       	brne	.+4      	; 0x102e <__vector_18+0x4c>
	{
		Data_Count=0;
    102a:	10 92 b1 04 	sts	0x04B1, r1
		
	}
	data_in[Data_Count]=r;
    102e:	e0 91 b1 04 	lds	r30, 0x04B1
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 91 ad 04 	lds	r24, 0x04AD
    1038:	e8 55       	subi	r30, 0x58	; 88
    103a:	fb 4f       	sbci	r31, 0xFB	; 251
    103c:	80 83       	st	Z, r24
	Data_Count++;
    103e:	80 91 b1 04 	lds	r24, 0x04B1
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 93 b1 04 	sts	0x04B1, r24
	if(Data_Count==5)
    1048:	80 91 b1 04 	lds	r24, 0x04B1
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	31 f5       	brne	.+76     	; 0x109c <__vector_18+0xba>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
    1050:	80 91 a8 04 	lds	r24, 0x04A8
    1054:	84 36       	cpi	r24, 0x64	; 100
    1056:	01 f5       	brne	.+64     	; 0x1098 <__vector_18+0xb6>
    1058:	80 91 a9 04 	lds	r24, 0x04A9
    105c:	85 36       	cpi	r24, 0x65	; 101
    105e:	e1 f4       	brne	.+56     	; 0x1098 <__vector_18+0xb6>
    1060:	80 91 aa 04 	lds	r24, 0x04AA
    1064:	82 36       	cpi	r24, 0x62	; 98
    1066:	c1 f4       	brne	.+48     	; 0x1098 <__vector_18+0xb6>
    1068:	80 91 ab 04 	lds	r24, 0x04AB
    106c:	85 37       	cpi	r24, 0x75	; 117
    106e:	a1 f4       	brne	.+40     	; 0x1098 <__vector_18+0xb6>
    1070:	80 91 ac 04 	lds	r24, 0x04AC
    1074:	87 36       	cpi	r24, 0x67	; 103
    1076:	81 f4       	brne	.+32     	; 0x1098 <__vector_18+0xb6>
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <__vector_18+0x9e>
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
			{
				uart_char(data);
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	0e 94 b4 07 	call	0xf68	; 0xf68 <uart_char>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	87 e2       	ldi	r24, 0x27	; 39
    1088:	92 e0       	ldi	r25, 0x02	; 2
    108a:	0e 94 21 04 	call	0x842	; 0x842 <PopFromCircularBuffer>
    108e:	88 23       	and	r24, r24
    1090:	a1 f3       	breq	.-24     	; 0x107a <__vector_18+0x98>
			{
				uart_char(data);
			}
			flag=1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 ad 03 	sts	0x03AD, r24
		}
		Data_Count=0;
    1098:	10 92 b1 04 	sts	0x04B1, r1
	}
	if(callbackFunction!=0&&flag==0)
    109c:	60 91 af 04 	lds	r22, 0x04AF
    10a0:	70 91 b0 04 	lds	r23, 0x04B0
    10a4:	61 15       	cp	r22, r1
    10a6:	71 05       	cpc	r23, r1
    10a8:	59 f0       	breq	.+22     	; 0x10c0 <__vector_18+0xde>
    10aa:	80 91 ad 03 	lds	r24, 0x03AD
    10ae:	81 11       	cpse	r24, r1
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <__vector_18+0xde>
	{
		PushEventInterface(200,callbackFunction,PopInterface,0);
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	41 e4       	ldi	r20, 0x41	; 65
    10b6:	57 e0       	ldi	r21, 0x07	; 7
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
    10be:	20 c0       	rjmp	.+64     	; 0x1100 <__vector_18+0x11e>
	}
	else if(flag==2)
    10c0:	80 91 ad 03 	lds	r24, 0x03AD
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	81 f4       	brne	.+32     	; 0x10e8 <__vector_18+0x106>
	{
		if(HeadTailDiff(&CircularBuffer,20)>=20)
    10c8:	64 e1       	ldi	r22, 0x14	; 20
    10ca:	87 e2       	ldi	r24, 0x27	; 39
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	0e 94 3f 04 	call	0x87e	; 0x87e <HeadTailDiff>
    10d2:	84 31       	cpi	r24, 0x14	; 20
    10d4:	a8 f0       	brcs	.+42     	; 0x1100 <__vector_18+0x11e>
		{
			PushEventInterface(200,Callhandler,PopInterface,0);
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	41 e4       	ldi	r20, 0x41	; 65
    10da:	57 e0       	ldi	r21, 0x07	; 7
    10dc:	68 e3       	ldi	r22, 0x38	; 56
    10de:	77 e0       	ldi	r23, 0x07	; 7
    10e0:	88 ec       	ldi	r24, 0xC8	; 200
    10e2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <__vector_18+0x11e>
		}
	}
	else if(flag==1)
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	51 f4       	brne	.+20     	; 0x1100 <__vector_18+0x11e>
	{
		flag=2;
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	80 93 ad 03 	sts	0x03AD, r24
		PopFromCircularBuffer(&CircularBuffer,&data);
    10f2:	be 01       	movw	r22, r28
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	87 e2       	ldi	r24, 0x27	; 39
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 21 04 	call	0x842	; 0x842 <PopFromCircularBuffer>
	}
	
}
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <CheckUartReadyToSend>:
{
	PushIntoCircularBuffer(&CircularBuffer,dataval);
}
uint8_t CheckUartReadyToSend()
{ 
	return (!(UCSR0A&(1<<UDRE0)));
    1128:	80 91 c0 00 	lds	r24, 0x00C0
    112c:	85 fb       	bst	r24, 5
    112e:	88 27       	eor	r24, r24
    1130:	80 f9       	bld	r24, 0
}
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	89 27       	eor	r24, r25
    1136:	08 95       	ret

00001138 <SendByte>:

void SendByte(unsigned char dat)
{
	UDR0=dat;
    1138:	80 93 c6 00 	sts	0x00C6, r24
    113c:	08 95       	ret

0000113e <ReadEveryValueADC>:
static ChannelBuffer channelBuffer_s[6]={{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0}};
static uint8_t BufferLength;
static volatile uint16_t ADC_Array[10];
static uint8_t checkAlreadyThere(ChannelBuffer *Channel);
uint16_t ReadEveryValueADC(void)
{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
	uint16_t Channel=0,status;
	static uint8_t position,conversionFlag;
	uint16_t Value;
	  if(conversionFlag==0)
    1142:	80 91 c3 03 	lds	r24, 0x03C3
    1146:	81 11       	cpse	r24, r1
    1148:	37 c0       	rjmp	.+110    	; 0x11b8 <ReadEveryValueADC+0x7a>
	  { 
		  
		 if(channelBuffer_s[position].filled==1&&channelBuffer_s[position].State==start)
    114a:	20 91 c4 03 	lds	r18, 0x03C4
    114e:	82 2f       	mov	r24, r18
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	fc 01       	movw	r30, r24
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e8 0f       	add	r30, r24
    115a:	f9 1f       	adc	r31, r25
    115c:	e4 5d       	subi	r30, 0xD4	; 212
    115e:	fd 4f       	sbci	r31, 0xFD	; 253
    1160:	32 81       	ldd	r19, Z+2	; 0x02
    1162:	31 30       	cpi	r19, 0x01	; 1
    1164:	29 f5       	brne	.+74     	; 0x11b0 <ReadEveryValueADC+0x72>
    1166:	fc 01       	movw	r30, r24
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e8 0f       	add	r30, r24
    116e:	f9 1f       	adc	r31, r25
    1170:	e4 5d       	subi	r30, 0xD4	; 212
    1172:	fd 4f       	sbci	r31, 0xFD	; 253
    1174:	31 81       	ldd	r19, Z+1	; 0x01
    1176:	31 11       	cpse	r19, r1
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <ReadEveryValueADC+0x72>
		 {
			 //uart_num(channelBuffer_s[position].channel);
			 adc_read(channelBuffer_s[position].channel);
    117a:	fc 01       	movw	r30, r24
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	8e 0f       	add	r24, r30
    1182:	9f 1f       	adc	r25, r31
    1184:	fc 01       	movw	r30, r24
    1186:	e4 5d       	subi	r30, 0xD4	; 212
    1188:	fd 4f       	sbci	r31, 0xFD	; 253
    118a:	80 81       	ld	r24, Z
    118c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <adc_read>
			 channelBuffer_s[position].State=busy;
    1190:	80 91 c4 03 	lds	r24, 0x03C4
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	fc 01       	movw	r30, r24
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	8e 0f       	add	r24, r30
    119e:	9f 1f       	adc	r25, r31
    11a0:	fc 01       	movw	r30, r24
    11a2:	e4 5d       	subi	r30, 0xD4	; 212
    11a4:	fd 4f       	sbci	r31, 0xFD	; 253
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	81 83       	std	Z+1, r24	; 0x01
			 conversionFlag=1;
    11aa:	80 93 c3 03 	sts	0x03C3, r24
    11ae:	3a c0       	rjmp	.+116    	; 0x1224 <ReadEveryValueADC+0xe6>
		 } 	
		 else
		 {
			 position++;
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	20 93 c4 03 	sts	0x03C4, r18
    11b6:	36 c0       	rjmp	.+108    	; 0x1224 <ReadEveryValueADC+0xe6>
		 }
	  }
	  else if(ADC_State()==0)
    11b8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <ADC_State>
    11bc:	81 11       	cpse	r24, r1
    11be:	32 c0       	rjmp	.+100    	; 0x1224 <ReadEveryValueADC+0xe6>
	  {   
		  if(channelBuffer_s[position].State==busy)
    11c0:	80 91 c4 03 	lds	r24, 0x03C4
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fc 01       	movw	r30, r24
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	e8 0f       	add	r30, r24
    11ce:	f9 1f       	adc	r31, r25
    11d0:	e4 5d       	subi	r30, 0xD4	; 212
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	21 81       	ldd	r18, Z+1	; 0x01
    11d6:	21 30       	cpi	r18, 0x01	; 1
    11d8:	29 f5       	brne	.+74     	; 0x1224 <ReadEveryValueADC+0xe6>
		  {  
			 //uart_string("in Second");
			 ADC_Array[channelBuffer_s[position].channel]=ADCValue();
    11da:	fc 01       	movw	r30, r24
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	8e 0f       	add	r24, r30
    11e2:	9f 1f       	adc	r25, r31
    11e4:	fc 01       	movw	r30, r24
    11e6:	e4 5d       	subi	r30, 0xD4	; 212
    11e8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ea:	c0 81       	ld	r28, Z
    11ec:	d0 e0       	ldi	r29, 0x00	; 0
    11ee:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <ADCValue>
    11f2:	cc 0f       	add	r28, r28
    11f4:	dd 1f       	adc	r29, r29
    11f6:	c2 55       	subi	r28, 0x52	; 82
    11f8:	dc 4f       	sbci	r29, 0xFC	; 252
    11fa:	99 83       	std	Y+1, r25	; 0x01
    11fc:	88 83       	st	Y, r24
			 channelBuffer_s[position].State=done;
    11fe:	20 91 c4 03 	lds	r18, 0x03C4
    1202:	82 2f       	mov	r24, r18
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	fc 01       	movw	r30, r24
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	8e 0f       	add	r24, r30
    120e:	9f 1f       	adc	r25, r31
    1210:	fc 01       	movw	r30, r24
    1212:	e4 5d       	subi	r30, 0xD4	; 212
    1214:	fd 4f       	sbci	r31, 0xFD	; 253
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	81 83       	std	Z+1, r24	; 0x01
			 position++;
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	20 93 c4 03 	sts	0x03C4, r18
			 conversionFlag=0;
    1220:	10 92 c3 03 	sts	0x03C3, r1
		  }
	  }
	  if(position==6)
    1224:	80 91 c4 03 	lds	r24, 0x03C4
    1228:	86 30       	cpi	r24, 0x06	; 6
    122a:	11 f4       	brne	.+4      	; 0x1230 <ReadEveryValueADC+0xf2>
	  {
		  position=0;
    122c:	10 92 c4 03 	sts	0x03C4, r1
	  }

	
	return 0;
}
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <GetADC_Value>:

uint16_t GetADC_Value(uint16_t ADC_ChannelAndValue)
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 d0       	rcall	.+0      	; 0x1240 <GetADC_Value+0x6>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
	uint16_t returnValue=0;
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	86 95       	lsr	r24
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	87 70       	andi	r24, 0x07	; 7
    1252:	80 93 c2 03 	sts	0x03C2, r24
	channelProp.channel=ChannelSelect;
    1256:	30 91 c2 03 	lds	r19, 0x03C2
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    125a:	80 91 2c 02 	lds	r24, 0x022C
    125e:	38 17       	cp	r19, r24
    1260:	41 f0       	breq	.+16     	; 0x1272 <GetADC_Value+0x38>
    1262:	ef e2       	ldi	r30, 0x2F	; 47
    1264:	f2 e0       	ldi	r31, 0x02	; 2

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    126a:	20 81       	ld	r18, Z
    126c:	32 13       	cpse	r19, r18
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <GetADC_Value+0x5c>
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GetADC_Value+0x3c>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
		{
          Channel->State=channelBuffer_s[index].State;
    1276:	dc 01       	movw	r26, r24
    1278:	aa 0f       	add	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	a8 0f       	add	r26, r24
    127e:	b9 1f       	adc	r27, r25
    1280:	a4 5d       	subi	r26, 0xD4	; 212
    1282:	bd 4f       	sbci	r27, 0xFD	; 253
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	2c 91       	ld	r18, X
		  Channel->filled=1;
		  buffpos=index;
    1288:	80 93 c5 03 	sts	0x03C5, r24
			BufferLength++;
			//uart_num(BufferLength);
		}
		
	}
	if(channelProp.State==done)
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	99 f1       	breq	.+102    	; 0x12f6 <GetADC_Value+0xbc>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	48 c0       	rjmp	.+144    	; 0x1326 <GetADC_Value+0xec>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	33 96       	adiw	r30, 0x03	; 3
    129a:	86 30       	cpi	r24, 0x06	; 6
    129c:	91 05       	cpc	r25, r1
    129e:	29 f7       	brne	.-54     	; 0x126a <GetADC_Value+0x30>
    12a0:	45 c0       	rjmp	.+138    	; 0x132c <GetADC_Value+0xf2>
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
		{
			if(channelBuffer_s[Buffer_empty].filled=Buffer_empty)
    12a2:	10 92 2e 02 	sts	0x022E, r1
    12a6:	11 c0       	rjmp	.+34     	; 0x12ca <GetADC_Value+0x90>
						BufferLength=0;
				}
		}
		else
		{
			if(channelBuffer_s[BufferLength].filled!=Buffer_empty)
    12a8:	82 2f       	mov	r24, r18
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	fc 01       	movw	r30, r24
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	8e 0f       	add	r24, r30
    12b4:	9f 1f       	adc	r25, r31
    12b6:	fc 01       	movw	r30, r24
    12b8:	e4 5d       	subi	r30, 0xD4	; 212
    12ba:	fd 4f       	sbci	r31, 0xFD	; 253
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	88 23       	and	r24, r24
    12c0:	21 f0       	breq	.+8      	; 0x12ca <GetADC_Value+0x90>
			{
				FreeBuffer=1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 c7 03 	sts	0x03C7, r24
    12c8:	39 c0       	rjmp	.+114    	; 0x133c <GetADC_Value+0x102>
			}
		}
		if(FreeBuffer==Buffer_empty)
    12ca:	80 91 c7 03 	lds	r24, 0x03C7
    12ce:	81 11       	cpse	r24, r1
    12d0:	35 c0       	rjmp	.+106    	; 0x133c <GetADC_Value+0x102>
		{
			channelBuffer_s[BufferLength].channel=ChannelSelect;
    12d2:	82 2f       	mov	r24, r18
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	30 91 c2 03 	lds	r19, 0x03C2
    12da:	fc 01       	movw	r30, r24
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	e4 5d       	subi	r30, 0xD4	; 212
    12e6:	fd 4f       	sbci	r31, 0xFD	; 253
    12e8:	30 83       	st	Z, r19
			channelBuffer_s[BufferLength].filled=1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	82 83       	std	Z+2, r24	; 0x02
			BufferLength++;
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	20 93 c6 03 	sts	0x03C6, r18
    12f4:	23 c0       	rjmp	.+70     	; 0x133c <GetADC_Value+0x102>
		}
		
	}
	if(channelProp.State==done)
	{
		returnValue=ADC_Array[channelProp.channel];
    12f6:	e3 2f       	mov	r30, r19
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	e2 55       	subi	r30, 0x52	; 82
    1300:	fc 4f       	sbci	r31, 0xFC	; 252
    1302:	20 81       	ld	r18, Z
    1304:	31 81       	ldd	r19, Z+1	; 0x01
		returnValue|=0x8000;
    1306:	30 68       	ori	r19, 0x80	; 128
		channelBuffer_s[bufferpos].channel=ChannelSelect;	
    1308:	99 27       	eor	r25, r25
    130a:	40 91 c2 03 	lds	r20, 0x03C2
    130e:	fc 01       	movw	r30, r24
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	8e 0f       	add	r24, r30
    1316:	9f 1f       	adc	r25, r31
    1318:	fc 01       	movw	r30, r24
    131a:	e4 5d       	subi	r30, 0xD4	; 212
    131c:	fd 4f       	sbci	r31, 0xFD	; 253
    131e:	40 83       	st	Z, r20
		channelBuffer_s[bufferpos].State=0;
    1320:	11 82       	std	Z+1, r1	; 0x01
		channelBuffer_s[bufferpos].filled=1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	82 83       	std	Z+2, r24	; 0x02
	else
	{
		returnValue|=0x0000;
	}
    //returnValue|=0x8000;
	return returnValue;
    1326:	82 2f       	mov	r24, r18
    1328:	93 2f       	mov	r25, r19
    132a:	0b c0       	rjmp	.+22     	; 0x1342 <GetADC_Value+0x108>
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
	channelProp.channel=ChannelSelect;
    bufferpos=checkAlreadyThere(&channelProp);
    132c:	10 92 c5 03 	sts	0x03C5, r1
	
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
    1330:	20 91 c6 03 	lds	r18, 0x03C6
    1334:	26 30       	cpi	r18, 0x06	; 6
    1336:	09 f0       	breq	.+2      	; 0x133a <GetADC_Value+0x100>
    1338:	b7 cf       	rjmp	.-146    	; 0x12a8 <GetADC_Value+0x6e>
    133a:	b3 cf       	rjmp	.-154    	; 0x12a2 <GetADC_Value+0x68>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	f2 cf       	rjmp	.-28     	; 0x1326 <GetADC_Value+0xec>
	}
    //returnValue|=0x8000;
	return returnValue;
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <BaseTask1>:
 */ 
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\BaseLayer\UART.h"
#include "..\BaseLayer\pinout.h"
uint16_t BaseTask1(void)
{
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	00 d0       	rcall	.+0      	; 0x1352 <BaseTask1+0x6>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	uint16_t PulseData=0;
	static uint8_t CountTaskTime;
   // uart_string("start\n");
	PulseData=InterfacePulse(PulseData);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 b2 04 	call	0x964	; 0x964 <InterfacePulse>
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
	//uart_num(((uint8_t*)(&PulseData))[1]);
	if(((uint8_t*)(&PulseData))[1]==0x80 || ((uint8_t*)(&PulseData))[1]==0x00 )
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 38       	cpi	r24, 0x80	; 128
    1366:	11 f0       	breq	.+4      	; 0x136c <BaseTask1+0x20>
    1368:	81 11       	cpse	r24, r1
    136a:	08 c0       	rjmp	.+16     	; 0x137c <BaseTask1+0x30>
	{
		((uint8_t*)(&PulseData))[0]=CountTaskTime++;
    136c:	80 91 c8 03 	lds	r24, 0x03C8
    1370:	98 2f       	mov	r25, r24
    1372:	9f 5f       	subi	r25, 0xFF	; 255
    1374:	90 93 c8 03 	sts	0x03C8, r25
		return PulseData;
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <BaseTask1+0x34>
	}
    else
	{
		((uint8_t*)(&PulseData))[1]=0x01;
	}
	return PulseData;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	91 e0       	ldi	r25, 0x01	; 1
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <BaseTask1Open>:
uint16_t BaseTask1Open(void)
{
	return 0;
}
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	08 95       	ret

00001390 <BaseTask2>:

uint16_t BaseTask2(void)
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	00 d0       	rcall	.+0      	; 0x1396 <BaseTask2+0x6>
    1396:	1f 92       	push	r1
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
	uint16_t RetVal;
	static uint8_t ButtonCount,previousButtonVal,currenButtonvalue,SuccessCount;
	PinValue(&value,PIN_OUT3,B );
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	62 e0       	ldi	r22, 0x02	; 2
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	0e 94 a0 06 	call	0xd40	; 0xd40 <PinValue>
	//uart_num(value);
	if(value==previousButtonVal)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	90 91 c9 03 	lds	r25, 0x03C9
    13ae:	89 13       	cpse	r24, r25
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <BaseTask2+0x32>
	{
		ButtonCount++;
    13b2:	90 91 ca 03 	lds	r25, 0x03CA
    13b6:	9f 5f       	subi	r25, 0xFF	; 255
    13b8:	90 93 ca 03 	sts	0x03CA, r25
		previousButtonVal=value;
    13bc:	80 93 c9 03 	sts	0x03C9, r24
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <BaseTask2+0x3a>
	}
	else
	{
		ButtonCount=0;
    13c2:	10 92 ca 03 	sts	0x03CA, r1
		previousButtonVal=value;
    13c6:	80 93 c9 03 	sts	0x03C9, r24
	}
	if(ButtonCount>=10)
    13ca:	80 91 ca 03 	lds	r24, 0x03CA
    13ce:	8a 30       	cpi	r24, 0x0A	; 10
    13d0:	28 f0       	brcs	.+10     	; 0x13dc <BaseTask2+0x4c>
	{
		currenButtonvalue=value;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	80 93 cb 03 	sts	0x03CB, r24
		ButtonCount=0;
    13d8:	10 92 ca 03 	sts	0x03CA, r1
	}
	SuccessCount++;
    13dc:	80 91 cc 03 	lds	r24, 0x03CC
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	80 93 cc 03 	sts	0x03CC, r24
	if(SuccessCount>200)
    13e6:	89 3c       	cpi	r24, 0xC9	; 201
    13e8:	28 f0       	brcs	.+10     	; 0x13f4 <BaseTask2+0x64>
	{
	  	
	  	((uint8_t *)&RetVal)[1]=0x02;
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		SuccessCount=0;	
    13ee:	10 92 cc 03 	sts	0x03CC, r1
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <BaseTask2+0x68>
	}
	else
	{
		((uint8_t *)&RetVal)[1]=0x03;
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	8b 83       	std	Y+3, r24	; 0x03
	}
    ((uint8_t *)&RetVal)[0]=currenButtonvalue;
	
	//uart_string("\n");
	return RetVal;
}
    13f8:	80 91 cb 03 	lds	r24, 0x03CB
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <BaseTask2Open>:

uint16_t BaseTask2Open(void)
{
	return 0;
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	08 95       	ret

00001410 <chartohex>:
	return 0;
}

static uint8_t chartohex(char arg)
{
	if(arg>='0' && arg<='9' )
    1410:	98 2f       	mov	r25, r24
    1412:	90 53       	subi	r25, 0x30	; 48
    1414:	9a 30       	cpi	r25, 0x0A	; 10
    1416:	30 f4       	brcc	.+12     	; 0x1424 <chartohex+0x14>
	{
		return charHex[arg-'0'];
    1418:	e8 2f       	mov	r30, r24
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	e2 5e       	subi	r30, 0xE2	; 226
    141e:	fd 4f       	sbci	r31, 0xFD	; 253
    1420:	80 81       	ld	r24, Z
    1422:	08 95       	ret
	}
	else if(arg>='A' && arg<='F')
    1424:	98 2f       	mov	r25, r24
    1426:	91 54       	subi	r25, 0x41	; 65
    1428:	96 30       	cpi	r25, 0x06	; 6
    142a:	30 f4       	brcc	.+12     	; 0x1438 <chartohex+0x28>
	{
		return charHex[arg-'A'+10];
    142c:	e8 2f       	mov	r30, r24
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	e9 5e       	subi	r30, 0xE9	; 233
    1432:	fd 4f       	sbci	r31, 0xFD	; 253
    1434:	80 81       	ld	r24, Z
    1436:	08 95       	ret
	}
	return 0;	
    1438:	80 e0       	ldi	r24, 0x00	; 0
}
    143a:	08 95       	ret

0000143c <ReadRambytesNonCnt>:
//-->EXAMPLE ROUTINE :-FD01ED01EE01EF01F004
//01ED --> one address
//everything is in hex
//04-->length
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	7c 01       	movw	r14, r24
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
    144c:	8a e0       	ldi	r24, 0x0A	; 10
    144e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1452:	d7 01       	movw	r26, r14
    1454:	1c 96       	adiw	r26, 0x0c	; 12
    1456:	8c 91       	ld	r24, X
    1458:	88 23       	and	r24, r24
    145a:	69 f1       	breq	.+90     	; 0x14b6 <ReadRambytesNonCnt+0x7a>
    145c:	d1 2c       	mov	r13, r1
	{
		address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[i+1+4]<<8)|((uint8_t*)Ptr)[i+4]));
    145e:	f7 01       	movw	r30, r14
    1460:	ed 0d       	add	r30, r13
    1462:	f1 1d       	adc	r31, r1
    1464:	b5 81       	ldd	r27, Z+5	; 0x05
    1466:	db 2f       	mov	r29, r27
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	c8 2f       	mov	r28, r24
    146c:	84 81       	ldd	r24, Z+4	; 0x04
    146e:	8e 01       	movw	r16, r28
    1470:	08 2b       	or	r16, r24
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1472:	d8 01       	movw	r26, r16
    1474:	ec 91       	ld	r30, X
    1476:	e2 95       	swap	r30
    1478:	ef 70       	andi	r30, 0x0F	; 15
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	e2 5c       	subi	r30, 0xC2	; 194
    147e:	fd 4f       	sbci	r31, 0xFD	; 253
    1480:	80 81       	ld	r24, Z
    1482:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1486:	d8 01       	movw	r26, r16
    1488:	ec 91       	ld	r30, X
    148a:	ef 70       	andi	r30, 0x0F	; 15
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	e2 5c       	subi	r30, 0xC2	; 194
    1490:	fd 4f       	sbci	r31, 0xFD	; 253
    1492:	80 81       	ld	r24, Z
    1494:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    149e:	d3 94       	inc	r13
    14a0:	d3 94       	inc	r13
    14a2:	2d 2d       	mov	r18, r13
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	f7 01       	movw	r30, r14
    14a8:	84 85       	ldd	r24, Z+12	; 0x0c
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	28 17       	cp	r18, r24
    14b2:	39 07       	cpc	r19, r25
    14b4:	a4 f2       	brlt	.-88     	; 0x145e <ReadRambytesNonCnt+0x22>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
	}
	
	return 0;	
}
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	08 95       	ret

000014ca <ReadRambyte>:
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
{
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    14d8:	fc 01       	movw	r30, r24
    14da:	f5 80       	ldd	r15, Z+5	; 0x05
    14dc:	e1 2c       	mov	r14, r1
    14de:	84 81       	ldd	r24, Z+4	; 0x04
    14e0:	e8 2a       	or	r14, r24
    14e2:	e7 01       	movw	r28, r14
	FillUartBufferSiglechar('\n');
    14e4:	8a e0       	ldi	r24, 0x0A	; 10
    14e6:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    14ea:	f8 01       	movw	r30, r16
    14ec:	86 81       	ldd	r24, Z+6	; 0x06
    14ee:	88 23       	and	r24, r24
    14f0:	d1 f0       	breq	.+52     	; 0x1526 <ReadRambyte+0x5c>
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    14f2:	e8 81       	ld	r30, Y
    14f4:	e2 95       	swap	r30
    14f6:	ef 70       	andi	r30, 0x0F	; 15
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e2 5c       	subi	r30, 0xC2	; 194
    14fc:	fd 4f       	sbci	r31, 0xFD	; 253
    14fe:	80 81       	ld	r24, Z
    1500:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1504:	e9 91       	ld	r30, Y+
    1506:	ef 70       	andi	r30, 0x0F	; 15
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	e2 5c       	subi	r30, 0xC2	; 194
    150c:	fd 4f       	sbci	r31, 0xFD	; 253
    150e:	80 81       	ld	r24, Z
    1510:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1514:	80 e2       	ldi	r24, 0x20	; 32
    1516:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		return charHex[arg-'A'+10];
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
    151a:	9c 2f       	mov	r25, r28
    151c:	9e 19       	sub	r25, r14
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    151e:	f8 01       	movw	r30, r16
    1520:	86 81       	ldd	r24, Z+6	; 0x06
    1522:	98 17       	cp	r25, r24
    1524:	30 f3       	brcs	.-52     	; 0x14f2 <ReadRambyte+0x28>
		FillUartBufferSiglechar(' ');
		address++;
	}
	
	return 0;
}
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	08 95       	ret

00001538 <WriteRambyte>:

uint16_t WriteRambyte(void *Ptr)
{
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1548:	fc 01       	movw	r30, r24
    154a:	f5 81       	ldd	r31, Z+5	; 0x05
    154c:	df 2f       	mov	r29, r31
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	c8 2f       	mov	r28, r24
    1552:	f8 01       	movw	r30, r16
    1554:	84 81       	ldd	r24, Z+4	; 0x04
    1556:	c8 2b       	or	r28, r24
	FillUartBufferSiglechar('\n');
    1558:	8a e0       	ldi	r24, 0x0A	; 10
    155a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    155e:	f8 01       	movw	r30, r16
    1560:	84 85       	ldd	r24, Z+12	; 0x0c
    1562:	88 23       	and	r24, r24
    1564:	39 f1       	breq	.+78     	; 0x15b4 <WriteRambyte+0x7c>
    1566:	d1 2c       	mov	r13, r1
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
    1568:	0f 2e       	mov	r0, r31
    156a:	ff e2       	ldi	r31, 0x2F	; 47
    156c:	ef 2e       	mov	r14, r31
    156e:	f5 e0       	ldi	r31, 0x05	; 5
    1570:	ff 2e       	mov	r15, r31
    1572:	f0 2d       	mov	r31, r0
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1574:	e8 81       	ld	r30, Y
    1576:	e2 95       	swap	r30
    1578:	ef 70       	andi	r30, 0x0F	; 15
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	e2 5c       	subi	r30, 0xC2	; 194
    157e:	fd 4f       	sbci	r31, 0xFD	; 253
    1580:	80 81       	ld	r24, Z
    1582:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1586:	e8 81       	ld	r30, Y
    1588:	ef 70       	andi	r30, 0x0F	; 15
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	e2 5c       	subi	r30, 0xC2	; 194
    158e:	fd 4f       	sbci	r31, 0xFD	; 253
    1590:	80 81       	ld	r24, Z
    1592:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <FillUartBufferSiglechar>
		*address=((uint8_t*)Ptr)[i+6];
    159c:	f8 01       	movw	r30, r16
    159e:	ed 0d       	add	r30, r13
    15a0:	f1 1d       	adc	r31, r1
    15a2:	86 81       	ldd	r24, Z+6	; 0x06
    15a4:	89 93       	st	Y+, r24
		address++;
		Datastore[1]=0;
    15a6:	f7 01       	movw	r30, r14
    15a8:	10 82       	st	Z, r1
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    15aa:	d3 94       	inc	r13
    15ac:	f8 01       	movw	r30, r16
    15ae:	84 85       	ldd	r24, Z+12	; 0x0c
    15b0:	d8 16       	cp	r13, r24
    15b2:	00 f3       	brcs	.-64     	; 0x1574 <WriteRambyte+0x3c>
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
	}

	PushEventInterface(52,1,Datastore,0);	
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4e e2       	ldi	r20, 0x2E	; 46
    15ba:	55 e0       	ldi	r21, 0x05	; 5
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	84 e3       	ldi	r24, 0x34	; 52
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
	return 0;
}
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	08 95       	ret

000015dc <DebugHandlerFunc>:
VariableManager VariableManager_t[5];
static	uint8_t chartohex(char arg);
typedef uint16_t (*argp)(void *);
argp argp1;
uint16_t DebugHandlerFunc(void *fptr)
{
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <DebugHandlerFunc+0x12>
    15ee:	1f 92       	push	r1
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	8c 01       	movw	r16, r24
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
    15f6:	85 e6       	ldi	r24, 0x65	; 101
    15f8:	9a e0       	ldi	r25, 0x0A	; 10
    15fa:	9b 83       	std	Y+3, r25	; 0x03
    15fc:	8a 83       	std	Y+2, r24	; 0x02
uint16_t DebugHandlerFunc(void *fptr)
{
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
    15fe:	d1 2c       	mov	r13, r1
    1600:	f1 2c       	mov	r15, r1
		}
		k++;
		if(k==2)
		{
		  i++;
		  k=0;	
    1602:	e1 2c       	mov	r14, r1
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1604:	31 c0       	rjmp	.+98     	; 0x1668 <DebugHandlerFunc+0x8c>
	{
		
		if(i<10)
    1606:	29 e0       	ldi	r18, 0x09	; 9
    1608:	2f 15       	cp	r18, r15
    160a:	38 f1       	brcs	.+78     	; 0x165a <DebugHandlerFunc+0x7e>
	{
		if(k==0)
    160c:	d1 10       	cpse	r13, r1
    160e:	0e c0       	rjmp	.+28     	; 0x162c <DebugHandlerFunc+0x50>
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	0e 94 08 0a 	call	0x1410	; 0x1410 <chartohex>
    1616:	ef 2d       	mov	r30, r15
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	e3 53       	subi	r30, 0x33	; 51
    161c:	fc 4f       	sbci	r31, 0xFC	; 252
    161e:	20 e1       	ldi	r18, 0x10	; 16
    1620:	82 9f       	mul	r24, r18
    1622:	c0 01       	movw	r24, r0
    1624:	11 24       	eor	r1, r1
    1626:	80 83       	st	Z, r24
		}
		if(k==1)
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
		}
		k++;
    1628:	d3 94       	inc	r13
    162a:	1e c0       	rjmp	.+60     	; 0x1668 <DebugHandlerFunc+0x8c>
	{
		if(k==0)
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
		}
		if(k==1)
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	d8 12       	cpse	r13, r24
    1630:	0d c0       	rjmp	.+26     	; 0x164c <DebugHandlerFunc+0x70>
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
    1632:	cf 2c       	mov	r12, r15
    1634:	d1 2c       	mov	r13, r1
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	0e 94 08 0a 	call	0x1410	; 0x1410 <chartohex>
    163c:	f6 01       	movw	r30, r12
    163e:	e3 53       	subi	r30, 0x33	; 51
    1640:	fc 4f       	sbci	r31, 0xFC	; 252
    1642:	8f 70       	andi	r24, 0x0F	; 15
    1644:	90 81       	ld	r25, Z
    1646:	89 2b       	or	r24, r25
    1648:	80 83       	st	Z, r24
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <DebugHandlerFunc+0x78>
		}
		k++;
    164c:	d3 94       	inc	r13
		if(k==2)
    164e:	e2 e0       	ldi	r30, 0x02	; 2
    1650:	de 12       	cpse	r13, r30
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <DebugHandlerFunc+0x8c>
		{
		  i++;
    1654:	f3 94       	inc	r15
		  k=0;	
    1656:	de 2c       	mov	r13, r14
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <DebugHandlerFunc+0x8c>
		}
	}
	else
	{
	  Pos[i]=data;
    165a:	ef 2d       	mov	r30, r15
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	e3 53       	subi	r30, 0x33	; 51
    1660:	fc 4f       	sbci	r31, 0xFC	; 252
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	80 83       	st	Z, r24
	  i++;
    1666:	f3 94       	inc	r15
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	f8 01       	movw	r30, r16
    166e:	09 95       	icall
    1670:	88 23       	and	r24, r24
    1672:	49 f2       	breq	.-110    	; 0x1606 <DebugHandlerFunc+0x2a>
	  i++;
	}
			
	}

	if(Pos[0]==0xab)
    1674:	80 91 cd 03 	lds	r24, 0x03CD
    1678:	8b 3a       	cpi	r24, 0xAB	; 171
    167a:	71 f5       	brne	.+92     	; 0x16d8 <DebugHandlerFunc+0xfc>
	{
	   
        TEMP=ReadRambyte;
		if(Pos[3]==0)
    167c:	80 91 d0 03 	lds	r24, 0x03D0
    1680:	81 11       	cpse	r24, r1
    1682:	1a c0       	rjmp	.+52     	; 0x16b8 <DebugHandlerFunc+0xdc>
		{
		  //uart_string((char*)0x01ed/*(char*)((uint16_t)(Pos[1]<<8)|Pos[2])*/);	
          Datastore[0]=0;
    1684:	10 92 2e 05 	sts	0x052E, r1
          Datastore[1]=1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 2f 05 	sts	0x052F, r24
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 93 30 05 	sts	0x0530, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	80 93 31 05 	sts	0x0531, r24
          Datastore[4]=Pos[2];
    169a:	80 91 cf 03 	lds	r24, 0x03CF
    169e:	80 93 32 05 	sts	0x0532, r24
          Datastore[5]=Pos[1];
    16a2:	80 91 ce 03 	lds	r24, 0x03CE
    16a6:	80 93 33 05 	sts	0x0533, r24
          Datastore[6]=Pos[4];
    16aa:	80 91 d1 03 	lds	r24, 0x03D1
    16ae:	80 93 34 05 	sts	0x0534, r24
		  Datastore[12]=Pos[4];
    16b2:	80 93 3a 05 	sts	0x053A, r24
    16b6:	9b c0       	rjmp	.+310    	; 0x17ee <DebugHandlerFunc+0x212>
		 //ReadRambyte(Datastore);;
		 //PushEventInterface(52,1,Datastore,0);
		}
		else if(Pos[3]==1)
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	09 f0       	breq	.+2      	; 0x16be <DebugHandlerFunc+0xe2>
    16bc:	98 c0       	rjmp	.+304    	; 0x17ee <DebugHandlerFunc+0x212>
		{
		  //
		  Datastore[1]=0;
    16be:	10 92 2f 05 	sts	0x052F, r1
		  PushEventInterface(52,1,Datastore,0);
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4e e2       	ldi	r20, 0x2E	; 46
    16c8:	55 e0       	ldi	r21, 0x05	; 5
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	84 e3       	ldi	r24, 0x34	; 52
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
    16d6:	8b c0       	rjmp	.+278    	; 0x17ee <DebugHandlerFunc+0x212>
		} else if(Pos[3]==2)
		{
			
		}
	}
	else if(Pos[0]==0xac)
    16d8:	8c 3a       	cpi	r24, 0xAC	; 172
    16da:	99 f5       	brne	.+102    	; 0x1742 <DebugHandlerFunc+0x166>
	{
		 TEMP=WriteRambyte;
    16dc:	8c e9       	ldi	r24, 0x9C	; 156
    16de:	9a e0       	ldi	r25, 0x0A	; 10
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	8a 83       	std	Y+2, r24	; 0x02
          Datastore[0]=0;
    16e4:	10 92 2e 05 	sts	0x052E, r1
          Datastore[1]=1;
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	90 93 2f 05 	sts	0x052F, r25
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    16ee:	80 93 30 05 	sts	0x0530, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	80 93 31 05 	sts	0x0531, r24
          Datastore[4]=Pos[2];
    16f8:	80 91 cf 03 	lds	r24, 0x03CF
    16fc:	80 93 32 05 	sts	0x0532, r24
          Datastore[5]=Pos[1];
    1700:	80 91 ce 03 	lds	r24, 0x03CE
    1704:	80 93 33 05 	sts	0x0533, r24
          Datastore[6]=Pos[3];
    1708:	80 91 d0 03 	lds	r24, 0x03D0
    170c:	80 93 34 05 	sts	0x0534, r24
		  Datastore[7]=Pos[4];
    1710:	80 91 d1 03 	lds	r24, 0x03D1
    1714:	80 93 35 05 	sts	0x0535, r24
		  Datastore[8]=Pos[5];
    1718:	80 91 d2 03 	lds	r24, 0x03D2
    171c:	80 93 36 05 	sts	0x0536, r24
		  Datastore[9]=Pos[6];
    1720:	80 91 d3 03 	lds	r24, 0x03D3
    1724:	80 93 37 05 	sts	0x0537, r24
	      Datastore[10]=Pos[7];
    1728:	80 91 d4 03 	lds	r24, 0x03D4
    172c:	80 93 38 05 	sts	0x0538, r24
		  Datastore[11]=Pos[8];
    1730:	80 91 d5 03 	lds	r24, 0x03D5
    1734:	80 93 39 05 	sts	0x0539, r24
		  Datastore[12]=Pos[9];
    1738:	80 91 d6 03 	lds	r24, 0x03D6
    173c:	80 93 3a 05 	sts	0x053A, r24
    1740:	56 c0       	rjmp	.+172    	; 0x17ee <DebugHandlerFunc+0x212>
		  //PushEventInterface(52,1,Datastore,0);	
	}
	else if(Pos[0]==0xfd)
    1742:	8d 3f       	cpi	r24, 0xFD	; 253
    1744:	99 f5       	brne	.+102    	; 0x17ac <DebugHandlerFunc+0x1d0>
	{
		TEMP=ReadRambytesNonCnt;
    1746:	8e e1       	ldi	r24, 0x1E	; 30
    1748:	9a e0       	ldi	r25, 0x0A	; 10
    174a:	9b 83       	std	Y+3, r25	; 0x03
    174c:	8a 83       	std	Y+2, r24	; 0x02
		Datastore[0]=0;
    174e:	10 92 2e 05 	sts	0x052E, r1
		Datastore[1]=1;
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	90 93 2f 05 	sts	0x052F, r25
		Datastore[2]=((uint8_t*)(&TEMP))[0];
    1758:	80 93 30 05 	sts	0x0530, r24
		Datastore[3]=((uint8_t*)(&TEMP))[1];
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	80 93 31 05 	sts	0x0531, r24
		Datastore[4]=Pos[2];
    1762:	80 91 cf 03 	lds	r24, 0x03CF
    1766:	80 93 32 05 	sts	0x0532, r24
		Datastore[5]=Pos[1];
    176a:	80 91 ce 03 	lds	r24, 0x03CE
    176e:	80 93 33 05 	sts	0x0533, r24
		Datastore[6]=Pos[4];
    1772:	80 91 d1 03 	lds	r24, 0x03D1
    1776:	80 93 34 05 	sts	0x0534, r24
		Datastore[7]=Pos[3];
    177a:	80 91 d0 03 	lds	r24, 0x03D0
    177e:	80 93 35 05 	sts	0x0535, r24
		Datastore[8]=Pos[6];
    1782:	80 91 d3 03 	lds	r24, 0x03D3
    1786:	80 93 36 05 	sts	0x0536, r24
		Datastore[9]=Pos[5];
    178a:	80 91 d2 03 	lds	r24, 0x03D2
    178e:	80 93 37 05 	sts	0x0537, r24
	    Datastore[10]=Pos[8];
    1792:	80 91 d5 03 	lds	r24, 0x03D5
    1796:	80 93 38 05 	sts	0x0538, r24
	    Datastore[11]=Pos[7];
    179a:	80 91 d4 03 	lds	r24, 0x03D4
    179e:	80 93 39 05 	sts	0x0539, r24
	    Datastore[12]=Pos[9];
    17a2:	80 91 d6 03 	lds	r24, 0x03D6
    17a6:	80 93 3a 05 	sts	0x053A, r24
    17aa:	21 c0       	rjmp	.+66     	; 0x17ee <DebugHandlerFunc+0x212>
		
	}
	else if(Pos[0]==0xbd)
    17ac:	8d 3b       	cpi	r24, 0xBD	; 189
    17ae:	f9 f4       	brne	.+62     	; 0x17ee <DebugHandlerFunc+0x212>
	{
		TEMP=ReadRambyte;
        Datastore[0]=0;
    17b0:	10 92 2e 05 	sts	0x052E, r1
        Datastore[1]=1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 2f 05 	sts	0x052F, r24
        Datastore[2]=((uint8_t*)(&TEMP))[0];
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 93 30 05 	sts	0x0530, r24
        Datastore[3]=((uint8_t*)(&TEMP))[1];
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	80 93 31 05 	sts	0x0531, r24
        Datastore[4]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[0];
    17c6:	e0 91 ce 03 	lds	r30, 0x03CE
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	ee 0f       	add	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	ec 5b       	subi	r30, 0xBC	; 188
    17d6:	fa 4f       	sbci	r31, 0xFA	; 250
    17d8:	80 81       	ld	r24, Z
    17da:	80 93 32 05 	sts	0x0532, r24
        Datastore[5]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[1];
    17de:	81 81       	ldd	r24, Z+1	; 0x01
    17e0:	80 93 33 05 	sts	0x0533, r24
        Datastore[6]=VariableManager_t[Pos[1]].VariableSize;
    17e4:	83 81       	ldd	r24, Z+3	; 0x03
    17e6:	80 93 34 05 	sts	0x0534, r24
        Datastore[12]=VariableManager_t[Pos[1]].VariableSize;
    17ea:	80 93 3a 05 	sts	0x053A, r24
	}
	if(data=='!')
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	81 32       	cpi	r24, 0x21	; 33
    17f2:	89 f4       	brne	.+34     	; 0x1816 <DebugHandlerFunc+0x23a>
	{
	  argp1=(argp *)(((uint16_t*)(Pos+11))[0]);
    17f4:	60 91 d8 03 	lds	r22, 0x03D8
    17f8:	70 91 d9 03 	lds	r23, 0x03D9
    17fc:	70 93 43 05 	sts	0x0543, r23
    1800:	60 93 42 05 	sts	0x0542, r22
	  PushEventInterface(201,argp1,Datastore,0);
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4e e2       	ldi	r20, 0x2E	; 46
    180a:	55 e0       	ldi	r21, 0x05	; 5
    180c:	89 ec       	ldi	r24, 0xC9	; 201
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
    1814:	0a c0       	rjmp	.+20     	; 0x182a <DebugHandlerFunc+0x24e>
	}
	else
	{
	  PushEventInterface(52,1,Datastore,0);
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4e e2       	ldi	r20, 0x2E	; 46
    181c:	55 e0       	ldi	r21, 0x05	; 5
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	84 e3       	ldi	r24, 0x34	; 52
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
	}
	return 0;
}
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	08 95       	ret

00001846 <OutPutVariableRegister>:
	return 0;	
}

uint8_t OutPutVariableRegister(uint16_t Outadd,uint8_t Varsize,uint8_t Varid)
{
	VariableManager_t[Varid].VariableAdd=Outadd;
    1846:	e4 2f       	mov	r30, r20
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	ee 0f       	add	r30, r30
    184c:	ff 1f       	adc	r31, r31
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	ec 5b       	subi	r30, 0xBC	; 188
    1854:	fa 4f       	sbci	r31, 0xFA	; 250
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
	VariableManager_t[Varid].VariableId=Varid;
    185a:	42 83       	std	Z+2, r20	; 0x02
	VariableManager_t[Varid].VariableSize=Varsize;
    185c:	63 83       	std	Z+3, r22	; 0x03
    185e:	08 95       	ret

00001860 <Nvm_TableInit>:
 *  Author: Nikhil
 */ 
#include "EepromStructure.h"
void Nvm_TableInit()
{
	Nvm_Table_t[0].Id=0;
    1860:	10 92 b6 04 	sts	0x04B6, r1
	Nvm_Table_t[0].Nvm_Size=sizeof(Nvm_T_Ping);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 b7 04 	sts	0x04B7, r24
	Nvm_Table_t[1].Id=1;
    186a:	80 93 b8 04 	sts	0x04B8, r24
	Nvm_Table_t[1].Nvm_Size=sizeof(Nvm_T_OH);
    186e:	94 e0       	ldi	r25, 0x04	; 4
    1870:	90 93 b9 04 	sts	0x04B9, r25
	Nvm_Table_t[2].Id=5;
    1874:	95 e0       	ldi	r25, 0x05	; 5
    1876:	90 93 ba 04 	sts	0x04BA, r25
	Nvm_Table_t[2].Nvm_Size=sizeof(Nvm_T_TankOverflow);
    187a:	80 93 bb 04 	sts	0x04BB, r24
    187e:	08 95       	ret

00001880 <WriteMax>:
 */ 
#include "MaxDisp.h"
#include "..\BaseLayer\SPI.h"
#include "..\BaseLayer\pinout.h"
void WriteMax(uint8_t address,uint8_t data)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	d8 2f       	mov	r29, r24
    1886:	c6 2f       	mov	r28, r22
	PinOutput(OFF,PIN_OUT2,B);
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	spi_tranceiver(address);
    1892:	8d 2f       	mov	r24, r29
    1894:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	spi_tranceiver(data);
    1898:	8c 2f       	mov	r24, r28
    189a:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	PinOutput(ON,PIN_OUT2,B);
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <InitMax>:
void InitMax()
{
	 PinOutput(OFF,PIN_OUT2,B);
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 spi_init_master();
    18b8:	0e 94 b8 06 	call	0xd70	; 0xd70 <spi_init_master>
	 spi_dataorder(0);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 be 06 	call	0xd7c	; 0xd7c <spi_dataorder>
	 spi_clockspeed(Divby0);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <spi_clockspeed>
	 spi_clockphase(2);
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <spi_clockphase>
	 PinOutput(OFF,PIN_OUT2,B);
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 spi_tranceiver(DECODEMODE);
    18d8:	89 e0       	ldi	r24, 0x09	; 9
    18da:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 spi_tranceiver(0xFF);
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 spi_tranceiver(SCANLIMIT);
    18f8:	8b e0       	ldi	r24, 0x0B	; 11
    18fa:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 spi_tranceiver(0x01);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 spi_tranceiver(POWERON);
    1918:	8c e0       	ldi	r24, 0x0C	; 12
    191a:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 spi_tranceiver(0x01);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 spi_tranceiver(INTENSITY);
    1938:	8a e0       	ldi	r24, 0x0A	; 10
    193a:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 spi_tranceiver(0x03);
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 spi_tranceiver(0x07);
    1958:	87 e0       	ldi	r24, 0x07	; 7
    195a:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 spi_tranceiver(0x03);
    195e:	83 e0       	ldi	r24, 0x03	; 3
    1960:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	 PinOutput(ON,PIN_OUT2,B);
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	 PinOutput(OFF,PIN_OUT2,B);
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
    1978:	08 95       	ret

0000197a <ScanlimitExpand>:
}

void ScanlimitExpand(uint8_t num)
{
    197a:	cf 93       	push	r28
    197c:	c8 2f       	mov	r28, r24

	PinOutput(OFF,PIN_OUT2,B);
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	spi_tranceiver(SCANLIMIT);
    1988:	8b e0       	ldi	r24, 0x0B	; 11
    198a:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	spi_tranceiver(num);
    198e:	8c 2f       	mov	r24, r28
    1990:	0e 94 f0 06 	call	0xde0	; 0xde0 <spi_tranceiver>
	PinOutput(ON,PIN_OUT2,B);	
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
}
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <DispDigits>:

void DispDigits(uint16_t num)
{
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	ec 01       	movw	r28, r24
		WriteMax(Digit5,0x0f);
    19ae:	6f e0       	ldi	r22, 0x0F	; 15
    19b0:	85 e0       	ldi	r24, 0x05	; 5
    19b2:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		WriteMax(Digit4,0x0f);
    19b6:	6f e0       	ldi	r22, 0x0F	; 15
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		WriteMax(Digit3,0x0f);
    19be:	6f e0       	ldi	r22, 0x0F	; 15
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		WriteMax(Digit2,0x0f);
    19c6:	6f e0       	ldi	r22, 0x0F	; 15
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		uint8_t count=0,digit=0;
		while (num)
    19ce:	20 97       	sbiw	r28, 0x00	; 0
    19d0:	19 f1       	breq	.+70     	; 0x1a18 <DispDigits+0x76>
{
		WriteMax(Digit5,0x0f);
		WriteMax(Digit4,0x0f);
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
    19d2:	f1 2c       	mov	r15, r1
		while (num)
		{
			digit=num%10;
			WriteMax(count+1,digit);
    19d4:	f3 94       	inc	r15
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
		while (num)
		{
			digit=num%10;
    19d6:	9e 01       	movw	r18, r28
    19d8:	ad ec       	ldi	r26, 0xCD	; 205
    19da:	bc ec       	ldi	r27, 0xCC	; 204
    19dc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    19e0:	8c 01       	movw	r16, r24
    19e2:	16 95       	lsr	r17
    19e4:	07 95       	ror	r16
    19e6:	16 95       	lsr	r17
    19e8:	07 95       	ror	r16
    19ea:	16 95       	lsr	r17
    19ec:	07 95       	ror	r16
    19ee:	a8 01       	movw	r20, r16
    19f0:	44 0f       	add	r20, r20
    19f2:	55 1f       	adc	r21, r21
    19f4:	98 01       	movw	r18, r16
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	24 0f       	add	r18, r20
    1a04:	35 1f       	adc	r19, r21
    1a06:	be 01       	movw	r22, r28
    1a08:	62 1b       	sub	r22, r18
    1a0a:	73 0b       	sbc	r23, r19
			WriteMax(count+1,digit);
    1a0c:	8f 2d       	mov	r24, r15
    1a0e:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
			num=num/10;
    1a12:	e8 01       	movw	r28, r16
		WriteMax(Digit5,0x0f);
		WriteMax(Digit4,0x0f);
		WriteMax(Digit3,0x0f);
		WriteMax(Digit2,0x0f);
		uint8_t count=0,digit=0;
		while (num)
    1a14:	20 97       	sbiw	r28, 0x00	; 0
    1a16:	f1 f6       	brne	.-68     	; 0x19d4 <DispDigits+0x32>
		{
			count=count-1;
		}
		
	//ScanlimitExpand(count);
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	08 95       	ret

00001a24 <DispChar>:

void DispChar(uint16_t num,uint8_t MaxDispPos)
{
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	d8 2f       	mov	r29, r24
    1a2a:	c6 2f       	mov	r28, r22
	static uint8_t count,DigitScrollPos,Digitpos;
	static Digits d[4]={Digit8,Digit7,Digit6,Digit5};
	//static uint8_t Dispval dis[4]={13,num,5,8};
	count++;
    1a2c:	90 91 d9 03 	lds	r25, 0x03D9
    1a30:	9f 5f       	subi	r25, 0xFF	; 255
    1a32:	90 93 d9 03 	sts	0x03D9, r25
	if(count>100)
    1a36:	95 36       	cpi	r25, 0x65	; 101
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <DispChar+0x18>
    1a3a:	5d c0       	rjmp	.+186    	; 0x1af6 <DispChar+0xd2>
	{
		if(DigitScrollPos<4)
    1a3c:	90 91 da 03 	lds	r25, 0x03DA
    1a40:	94 30       	cpi	r25, 0x04	; 4
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <DispChar+0x22>
    1a44:	54 c0       	rjmp	.+168    	; 0x1aee <DispChar+0xca>
		{
        if(DigitScrollPos==3)
    1a46:	93 30       	cpi	r25, 0x03	; 3
    1a48:	81 f4       	brne	.+32     	; 0x1a6a <DispChar+0x46>
		{
	 	WriteMax(d[0],num);
    1a4a:	68 2f       	mov	r22, r24
    1a4c:	88 e0       	ldi	r24, 0x08	; 8
    1a4e:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
	 	WriteMax(d[1],5);		
    1a52:	65 e0       	ldi	r22, 0x05	; 5
    1a54:	87 e0       	ldi	r24, 0x07	; 7
    1a56:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
	 	WriteMax(d[2],8);
    1a5a:	68 e0       	ldi	r22, 0x08	; 8
    1a5c:	86 e0       	ldi	r24, 0x06	; 6
    1a5e:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		WriteMax(d[3],0x0f);
    1a62:	6f e0       	ldi	r22, 0x0F	; 15
    1a64:	85 e0       	ldi	r24, 0x05	; 5
    1a66:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		}
		        if(DigitScrollPos==0)
    1a6a:	80 91 da 03 	lds	r24, 0x03DA
    1a6e:	81 11       	cpse	r24, r1
    1a70:	10 c0       	rjmp	.+32     	; 0x1a92 <DispChar+0x6e>
		        {
			        WriteMax(d[1],num);
    1a72:	6d 2f       	mov	r22, r29
    1a74:	87 e0       	ldi	r24, 0x07	; 7
    1a76:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
			        WriteMax(d[2],5);
    1a7a:	65 e0       	ldi	r22, 0x05	; 5
    1a7c:	86 e0       	ldi	r24, 0x06	; 6
    1a7e:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
			        WriteMax(d[3],8);
    1a82:	68 e0       	ldi	r22, 0x08	; 8
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
			        WriteMax(d[0],0x0f);
    1a8a:	6f e0       	ldi	r22, 0x0F	; 15
    1a8c:	88 e0       	ldi	r24, 0x08	; 8
    1a8e:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
		        }
				        if(DigitScrollPos==1)
    1a92:	80 91 da 03 	lds	r24, 0x03DA
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	81 f4       	brne	.+32     	; 0x1aba <DispChar+0x96>
				        {
					        WriteMax(d[2],num);
    1a9a:	6d 2f       	mov	r22, r29
    1a9c:	86 e0       	ldi	r24, 0x06	; 6
    1a9e:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
					        WriteMax(d[3],5);
    1aa2:	65 e0       	ldi	r22, 0x05	; 5
    1aa4:	85 e0       	ldi	r24, 0x05	; 5
    1aa6:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
					        WriteMax(d[0],8);
    1aaa:	68 e0       	ldi	r22, 0x08	; 8
    1aac:	88 e0       	ldi	r24, 0x08	; 8
    1aae:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
					        WriteMax(d[1],0x0f);
    1ab2:	6f e0       	ldi	r22, 0x0F	; 15
    1ab4:	87 e0       	ldi	r24, 0x07	; 7
    1ab6:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
				        }
						        if(DigitScrollPos==2)
    1aba:	80 91 da 03 	lds	r24, 0x03DA
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	81 f4       	brne	.+32     	; 0x1ae2 <DispChar+0xbe>
						        {
							        WriteMax(d[3],num);
    1ac2:	6d 2f       	mov	r22, r29
    1ac4:	85 e0       	ldi	r24, 0x05	; 5
    1ac6:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
							        WriteMax(d[0],5);
    1aca:	65 e0       	ldi	r22, 0x05	; 5
    1acc:	88 e0       	ldi	r24, 0x08	; 8
    1ace:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
							        WriteMax(d[1],8);
    1ad2:	68 e0       	ldi	r22, 0x08	; 8
    1ad4:	87 e0       	ldi	r24, 0x07	; 7
    1ad6:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
							        WriteMax(d[2],0x0f);
    1ada:	6f e0       	ldi	r22, 0x0F	; 15
    1adc:	86 e0       	ldi	r24, 0x06	; 6
    1ade:	0e 94 40 0c 	call	0x1880	; 0x1880 <WriteMax>
						        }
		 DigitScrollPos++;
    1ae2:	80 91 da 03 	lds	r24, 0x03DA
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	80 93 da 03 	sts	0x03DA, r24
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DispChar+0xce>
		}
		else
		{
			DigitScrollPos=0;
    1aee:	10 92 da 03 	sts	0x03DA, r1
		}
		count=0;
    1af2:	10 92 d9 03 	sts	0x03D9, r1
	}


	ScanlimitExpand(MaxDispPos);
    1af6:	8c 2f       	mov	r24, r28
    1af8:	0e 94 bd 0c 	call	0x197a	; 0x197a <ScanlimitExpand>
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <SignalHandlerFunc>:
 *  Author: Nikhil
 */ 
#include "..\OS\EventQ.h"
static uint16_t SignalData[5];
uint16_t SignalHandlerFunc(void *data)
{
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
	uint8_t *ptr=(uint8_t*)data;
	uint16_t reval;
	if(ptr[0]==0)
    1b08:	28 81       	ld	r18, Y
    1b0a:	21 11       	cpse	r18, r1
    1b0c:	21 c0       	rjmp	.+66     	; 0x1b50 <SignalHandlerFunc+0x4e>
	{
		
		if(((uint8_t*)&SignalData[ptr[1]])[1]==2)
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	e5 52       	subi	r30, 0x25	; 37
    1b1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b1c:	21 81       	ldd	r18, Z+1	; 0x01
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <SignalHandlerFunc+0x28>
		{
			reval= SignalData[ptr[1]];
    1b22:	40 81       	ld	r20, Z
    1b24:	32 2f       	mov	r19, r18
			((uint8_t*)&SignalData[ptr[1]])[1]=0;
    1b26:	11 82       	std	Z+1, r1	; 0x01
    1b28:	25 c0       	rjmp	.+74     	; 0x1b74 <SignalHandlerFunc+0x72>
		}
		else 
		{
			PushEventInterface(50,SignalHandlerFunc,0,ptr[2]);
    1b2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	61 e8       	ldi	r22, 0x81	; 129
    1b32:	7d e0       	ldi	r23, 0x0D	; 13
    1b34:	82 e3       	ldi	r24, 0x32	; 50
    1b36:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
			reval= SignalData[ptr[1]];
    1b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	e5 52       	subi	r30, 0x25	; 37
    1b44:	fc 4f       	sbci	r31, 0xFC	; 252
    1b46:	40 81       	ld	r20, Z
    1b48:	31 81       	ldd	r19, Z+1	; 0x01
			((uint8_t*)&SignalData[ptr[1]])[1]=1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	81 83       	std	Z+1, r24	; 0x01
    1b4e:	12 c0       	rjmp	.+36     	; 0x1b74 <SignalHandlerFunc+0x72>
		}
	}
	else if(ptr[0]==1)
    1b50:	21 30       	cpi	r18, 0x01	; 1
    1b52:	81 f4       	brne	.+32     	; 0x1b74 <SignalHandlerFunc+0x72>
	{
		((uint8_t*)&SignalData[ptr[1]])[0]=ptr[2];
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	e9 81       	ldd	r30, Y+1	; 0x01
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	e5 52       	subi	r30, 0x25	; 37
    1b60:	fc 4f       	sbci	r31, 0xFC	; 252
    1b62:	80 83       	st	Z, r24
		((uint8_t*)&SignalData[ptr[1]])[1]=2;
    1b64:	e9 81       	ldd	r30, Y+1	; 0x01
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	e5 52       	subi	r30, 0x25	; 37
    1b6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	81 83       	std	Z+1, r24	; 0x01
		//uart_string("here");
	}
	
	return reval;
    1b74:	84 2f       	mov	r24, r20
    1b76:	93 2f       	mov	r25, r19
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <DataTransmit>:

circularbuffOut(CircularBufferOut,100);
void DataTransmit()
{
	static unsigned char data='&';
	if(CheckUartReadyToSend()==0 && PopFromCircularBuffer(&CircularBufferOut,&data)==BuffOk)
    1b7e:	0e 94 94 08 	call	0x1128	; 0x1128 <CheckUartReadyToSend>
    1b82:	81 11       	cpse	r24, r1
    1b84:	0c c0       	rjmp	.+24     	; 0x1b9e <DataTransmit+0x20>
    1b86:	63 e6       	ldi	r22, 0x63	; 99
    1b88:	72 e0       	ldi	r23, 0x02	; 2
    1b8a:	8e e5       	ldi	r24, 0x5E	; 94
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	0e 94 21 04 	call	0x842	; 0x842 <PopFromCircularBuffer>
    1b92:	81 11       	cpse	r24, r1
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <DataTransmit+0x20>
	{    

			//UDR=data;
		SendByte(data);
    1b96:	80 91 63 02 	lds	r24, 0x0263
    1b9a:	0e 94 9c 08 	call	0x1138	; 0x1138 <SendByte>
    1b9e:	08 95       	ret

00001ba0 <FillUartBuffer>:
	}

}

void FillUartBuffer(unsigned char *Uchar)
{
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
	
	while(*Uchar)
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	60 81       	ld	r22, Z
    1ba8:	66 23       	and	r22, r22
    1baa:	49 f0       	breq	.+18     	; 0x1bbe <FillUartBuffer+0x1e>

	}

}

void FillUartBuffer(unsigned char *Uchar)
    1bac:	ec 01       	movw	r28, r24
    1bae:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*Uchar)
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
    1bb0:	8e e5       	ldi	r24, 0x5E	; 94
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	0e 94 0c 04 	call	0x818	; 0x818 <PushIntoCircularBuffer>
}

void FillUartBuffer(unsigned char *Uchar)
{
	
	while(*Uchar)
    1bb8:	69 91       	ld	r22, Y+
    1bba:	61 11       	cpse	r22, r1
    1bbc:	f9 cf       	rjmp	.-14     	; 0x1bb0 <FillUartBuffer+0x10>
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
	}
	
}
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	08 95       	ret

00001bc4 <FillUartBufferSiglechar>:
void FillUartBufferSiglechar(char Uchar)
{
	PushIntoCircularBuffer(&CircularBufferOut,Uchar);	
    1bc4:	68 2f       	mov	r22, r24
    1bc6:	8e e5       	ldi	r24, 0x5E	; 94
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 0c 04 	call	0x818	; 0x818 <PushIntoCircularBuffer>
    1bce:	08 95       	ret

00001bd0 <TransmitBufferEmpty>:
}
void TransmitBufferEmpty()
{
	if(IsBuffempty(&CircularBufferOut)==BuffOk)
    1bd0:	8e e5       	ldi	r24, 0x5E	; 94
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	0e 94 38 04 	call	0x870	; 0x870 <IsBuffempty>
    1bd8:	81 11       	cpse	r24, r1
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <TransmitBufferEmpty+0x1c>
	{

		PushEventInterface(3,DataTransmit,0,0);
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	6f eb       	ldi	r22, 0xBF	; 191
    1be4:	7d e0       	ldi	r23, 0x0D	; 13
    1be6:	83 e0       	ldi	r24, 0x03	; 3
    1be8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
    1bec:	08 95       	ret

00001bee <create>:
circularbuffevent(CircularBufferEvent,15);
//
/* Create an empty queue */
void create()
{
front = rear = NULL;
    1bee:	10 92 4a 04 	sts	0x044A, r1
    1bf2:	10 92 49 04 	sts	0x0449, r1
    1bf6:	10 92 4c 04 	sts	0x044C, r1
    1bfa:	10 92 4b 04 	sts	0x044B, r1
    1bfe:	08 95       	ret

00001c00 <countSize>:
}

uint8_t countSize()
{
	return count;
}
    1c00:	80 91 4d 04 	lds	r24, 0x044D
    1c04:	08 95       	ret

00001c06 <PushIntoCircularEventBuffer>:

ebuffState_t PushIntoCircularEventBuffer(ebuff_t* CircularBuffer,struct EventQ data)
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <PushIntoCircularEventBuffer+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <PushIntoCircularEventBuffer+0x8>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <PushIntoCircularEventBuffer+0xa>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	29 83       	std	Y+1, r18	; 0x01
    1c16:	3a 83       	std	Y+2, r19	; 0x02
    1c18:	4b 83       	std	Y+3, r20	; 0x03
    1c1a:	5c 83       	std	Y+4, r21	; 0x04
    1c1c:	6d 83       	std	Y+5, r22	; 0x05
    1c1e:	7e 83       	std	Y+6, r23	; 0x06
	uint8_t next=CircularBuffer->head+1;
    1c20:	fc 01       	movw	r30, r24
    1c22:	22 81       	ldd	r18, Z+2	; 0x02
    1c24:	42 2f       	mov	r20, r18
    1c26:	4f 5f       	subi	r20, 0xFF	; 255
	ebuffState_t ReturnVal=eBuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    1c28:	34 81       	ldd	r19, Z+4	; 0x04
    1c2a:	43 17       	cp	r20, r19
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <PushIntoCircularEventBuffer+0x2a>
	{
		next=0;
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    1c30:	fc 01       	movw	r30, r24
    1c32:	33 81       	ldd	r19, Z+3	; 0x03
    1c34:	34 17       	cp	r19, r20
    1c36:	b9 f0       	breq	.+46     	; 0x1c66 <PushIntoCircularEventBuffer+0x60>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	d9 01       	movw	r26, r18
    1c3c:	aa 0f       	add	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	2a 0f       	add	r18, r26
    1c42:	3b 1f       	adc	r19, r27
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	a0 81       	ld	r26, Z
    1c4a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c4c:	a2 0f       	add	r26, r18
    1c4e:	b3 1f       	adc	r27, r19
    1c50:	26 e0       	ldi	r18, 0x06	; 6
    1c52:	fe 01       	movw	r30, r28
    1c54:	31 96       	adiw	r30, 0x01	; 1
    1c56:	01 90       	ld	r0, Z+
    1c58:	0d 92       	st	X+, r0
    1c5a:	2a 95       	dec	r18
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <PushIntoCircularEventBuffer+0x50>
		CircularBuffer->head=next;
    1c5e:	fc 01       	movw	r30, r24
    1c60:	42 83       	std	Z+2, r20	; 0x02
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <PushIntoCircularEventBuffer+0x62>
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return eBuffFull;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
}
    1c68:	26 96       	adiw	r28, 0x06	; 6
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	08 95       	ret

00001c7a <PopFromCircularEventBuffer>:

ebuffState_t PopFromCircularEventBuffer(ebuff_t  *CircularBuffer,struct EventQ *data)
{
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	ec 01       	movw	r28, r24
	//cli();
	uint8_t next=CircularBuffer->tail+1;
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	89 17       	cp	r24, r25
    1c8a:	c9 f0       	breq	.+50     	; 0x1cbe <PopFromCircularEventBuffer+0x44>
	{
		return eBuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	29 17       	cp	r18, r25
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <PopFromCircularEventBuffer+0x1a>
	{
		next=0;
    1c92:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	fc 01       	movw	r30, r24
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	8e 0f       	add	r24, r30
    1c9e:	9f 1f       	adc	r25, r31
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	e8 81       	ld	r30, Y
    1ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca8:	e8 0f       	add	r30, r24
    1caa:	f9 1f       	adc	r31, r25
    1cac:	86 e0       	ldi	r24, 0x06	; 6
    1cae:	db 01       	movw	r26, r22
    1cb0:	01 90       	ld	r0, Z+
    1cb2:	0d 92       	st	X+, r0
    1cb4:	8a 95       	dec	r24
    1cb6:	e1 f7       	brne	.-8      	; 0x1cb0 <PopFromCircularEventBuffer+0x36>
	CircularBuffer->tail=next;
    1cb8:	2b 83       	std	Y+3, r18	; 0x03
	//sei();
	return eBuffOk;
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <PopFromCircularEventBuffer+0x46>
{
	//cli();
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return eBuffEmpty;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	//sei();
	return eBuffOk;
}
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <PushEventInterface>:
	return eBuffOk;
}


void PushEventInterface(uint8_t eventid,uint16_t  (*EventFuncarg)(void),void *func,uint8_t dataid)
{
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <PushEventInterface+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <PushEventInterface+0x8>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <PushEventInterface+0xa>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	92 2f       	mov	r25, r18
	cli();
    1cd6:	f8 94       	cli
	struct EventQ data;
	data.EventFunction=EventFuncarg;
    1cd8:	26 2f       	mov	r18, r22
    1cda:	69 83       	std	Y+1, r22	; 0x01
    1cdc:	7a 83       	std	Y+2, r23	; 0x02
	data.EventId=eventid;
    1cde:	8c 83       	std	Y+4, r24	; 0x04
	data.ptr=func;
    1ce0:	64 2f       	mov	r22, r20
    1ce2:	4d 83       	std	Y+5, r20	; 0x05
    1ce4:	5e 83       	std	Y+6, r21	; 0x06
	data.State=dataid;
    1ce6:	9b 83       	std	Y+3, r25	; 0x03
	PushIntoCircularEventBuffer(&CircularBufferEvent,data);
    1ce8:	37 2f       	mov	r19, r23
    1cea:	49 2f       	mov	r20, r25
    1cec:	58 2f       	mov	r21, r24
    1cee:	7e 81       	ldd	r23, Y+6	; 0x06
    1cf0:	84 e6       	ldi	r24, 0x64	; 100
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <PushIntoCircularEventBuffer>
	sei();
    1cf8:	78 94       	sei
}
    1cfa:	26 96       	adiw	r28, 0x06	; 6
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <PopEventInterface>:

ebuffState_t PopEventInterface(struct EventQ *e)
{
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <PopEventInterface+0xa>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <PopEventInterface+0xc>
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <PopEventInterface+0xe>
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	8c 01       	movw	r16, r24
    struct EventQ data;
	if(PopFromCircularEventBuffer(&CircularBufferEvent,&data)==eBuffOk)
    1d20:	be 01       	movw	r22, r28
    1d22:	6f 5f       	subi	r22, 0xFF	; 255
    1d24:	7f 4f       	sbci	r23, 0xFF	; 255
    1d26:	84 e6       	ldi	r24, 0x64	; 100
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <PopFromCircularEventBuffer>
    1d2e:	81 11       	cpse	r24, r1
    1d30:	0a c0       	rjmp	.+20     	; 0x1d46 <PopEventInterface+0x3a>
	{
		*e=data;
    1d32:	86 e0       	ldi	r24, 0x06	; 6
    1d34:	fe 01       	movw	r30, r28
    1d36:	31 96       	adiw	r30, 0x01	; 1
    1d38:	d8 01       	movw	r26, r16
    1d3a:	01 90       	ld	r0, Z+
    1d3c:	0d 92       	st	X+, r0
    1d3e:	8a 95       	dec	r24
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <PopEventInterface+0x2e>
		return eBuffOk;
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <PopEventInterface+0x3c>
	}
	return eBuffEmpty;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	26 96       	adiw	r28, 0x06	; 6
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <__vector_16>:


//ISR(TIMER0_COMP_vect) {
static volatile uint8_t pin_timeout=1;
static volatile uint8_t TimeCount;
ISR(TIMER0_OVF_vect){
    1d5e:	1f 92       	push	r1
    1d60:	0f 92       	push	r0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	0f 92       	push	r0
    1d66:	11 24       	eor	r1, r1
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	af 93       	push	r26
    1d6e:	bf 93       	push	r27
	static uint32_t counter5ms=0;
	if(counter5ms==1)
    1d70:	80 91 4f 04 	lds	r24, 0x044F
    1d74:	90 91 50 04 	lds	r25, 0x0450
    1d78:	a0 91 51 04 	lds	r26, 0x0451
    1d7c:	b0 91 52 04 	lds	r27, 0x0452
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	a1 05       	cpc	r26, r1
    1d84:	b1 05       	cpc	r27, r1
    1d86:	69 f4       	brne	.+26     	; 0x1da2 <__vector_16+0x44>
	{   
		TimeCount++;
    1d88:	80 91 4e 04 	lds	r24, 0x044E
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	80 93 4e 04 	sts	0x044E, r24
		counter5ms=0;
    1d92:	10 92 4f 04 	sts	0x044F, r1
    1d96:	10 92 50 04 	sts	0x0450, r1
    1d9a:	10 92 51 04 	sts	0x0451, r1
    1d9e:	10 92 52 04 	sts	0x0452, r1
		

	}
	//TCNT0=70;
	TCNT0=0;
    1da2:	16 bc       	out	0x26, r1	; 38
	counter5ms++;
    1da4:	80 91 4f 04 	lds	r24, 0x044F
    1da8:	90 91 50 04 	lds	r25, 0x0450
    1dac:	a0 91 51 04 	lds	r26, 0x0451
    1db0:	b0 91 52 04 	lds	r27, 0x0452
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	a1 1d       	adc	r26, r1
    1db8:	b1 1d       	adc	r27, r1
    1dba:	80 93 4f 04 	sts	0x044F, r24
    1dbe:	90 93 50 04 	sts	0x0450, r25
    1dc2:	a0 93 51 04 	sts	0x0451, r26
    1dc6:	b0 93 52 04 	sts	0x0452, r27
}
    1dca:	bf 91       	pop	r27
    1dcc:	af 91       	pop	r26
    1dce:	9f 91       	pop	r25
    1dd0:	8f 91       	pop	r24
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <set_timer>:
void set_timer(uint16_t enable)
{
	//PORTB|=x;
	if(enable==1)
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	29 f4       	brne	.+10     	; 0x1dea <set_timer+0xe>
	{
		TIMSK0|=(1<<TOIE0);
    1de0:	ee e6       	ldi	r30, 0x6E	; 110
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	81 60       	ori	r24, 0x01	; 1
    1de8:	80 83       	st	Z, r24
    1dea:	08 95       	ret

00001dec <main>:
   // event=0;
	uint16_t tmp;
	uint16_t Limitflag=0;
	//
    
	ExtIntInit();
    1dec:	0e 94 a7 04 	call	0x94e	; 0x94e <ExtIntInit>
	//
	//
	DDRC=0x00;
    1df0:	17 b8       	out	0x07, r1	; 7
	//PinOutConfig(PIN_OUT1);
	DDRD=0b11111011;					// set pd2 as input for int
    1df2:	8b ef       	ldi	r24, 0xFB	; 251
    1df4:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PIND2);	
    1df6:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PIND3);				// Port C lower nibble initialization as high (Pull-up mode)
    1df8:	5b 9a       	sbi	0x0b, 3	; 11
	//uart_string("I am working.");
	sei();
    1dfa:	78 94       	sei
	// enable timer overflow interrupt for Timer0
	TIMSK0|=(1<<TOIE0);
    1dfc:	ee e6       	ldi	r30, 0x6E	; 110
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	81 60       	ori	r24, 0x01	; 1
    1e04:	80 83       	st	Z, r24
	// set timer0 counter initial value to 0
	TCNT0=70;//255-(clock_freq/1000000);
    1e06:	86 e4       	ldi	r24, 0x46	; 70
    1e08:	86 bd       	out	0x26, r24	; 38
	// start timer0 with / prescaler 78 Hz
	TCCR0B = (1<<CS01)|(1<<CS00);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	85 bd       	out	0x25, r24	; 37

uart_init();
    1e0e:	0e 94 5e 07 	call	0xebc	; 0xebc <uart_init>
	adc_init();				//initialization of UART
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <adc_init>
	create();
    1e16:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <create>
    uart_string("working");
    1e1a:	8b ef       	ldi	r24, 0xFB	; 251
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_string>
	// enable interrupts
	//sei();
	//pin
	set_timer(1);
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <set_timer>
	//uart_string(testev2->ptr);
	//AddEvent((uint8_t *)str,0);
	//AddEvent((uint8_t *)str,1);
	//AddEvent((uint8_t *)str1,2);
	//PrintEvents();
								e.EventId=1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 93 c9 05 	sts	0x05C9, r24
								e.EventFunction=tasks;
    1e30:	87 e1       	ldi	r24, 0x17	; 23
    1e32:	95 e1       	ldi	r25, 0x15	; 21
    1e34:	90 93 c7 05 	sts	0x05C7, r25
    1e38:	80 93 c6 05 	sts	0x05C6, r24
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
	   {
		   if(e.EventFunction!=0)
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    1e3c:	c9 ec       	ldi	r28, 0xC9	; 201
    1e3e:	d5 e0       	ldi	r29, 0x05	; 5
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
				  if(e.EventId==52)
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    1e40:	0a ec       	ldi	r16, 0xCA	; 202
    1e42:	15 e0       	ldi	r17, 0x05	; 5
	//PrintEvents();
								e.EventId=1;
								e.EventFunction=tasks;
	while(1)
	{
		if(TimeCount==1)
    1e44:	80 91 4e 04 	lds	r24, 0x044E
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	b9 f4       	brne	.+46     	; 0x1e7a <main+0x8e>
		{
			static uint8_t odd=1;
			odd++;
    1e4c:	80 91 69 02 	lds	r24, 0x0269
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	80 93 69 02 	sts	0x0269, r24
		   PushEventInterface(1,tasks,0,0);
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	67 e1       	ldi	r22, 0x17	; 23
    1e5e:	75 e1       	ldi	r23, 0x15	; 21
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
		   PushEventInterface(2,NonPeriodicTaskFuncCall,0,0);
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	63 e7       	ldi	r22, 0x73	; 115
    1e6e:	75 e1       	ldi	r23, 0x15	; 21
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
           TimeCount=0;
    1e76:	10 92 4e 04 	sts	0x044E, r1
		}
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
    1e7a:	86 ec       	ldi	r24, 0xC6	; 198
    1e7c:	95 e0       	ldi	r25, 0x05	; 5
    1e7e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <PopEventInterface>
    1e82:	81 11       	cpse	r24, r1
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <main+0x118>
	   {
		   if(e.EventFunction!=0)
    1e86:	60 91 c6 05 	lds	r22, 0x05C6
    1e8a:	70 91 c7 05 	lds	r23, 0x05C7
    1e8e:	61 15       	cp	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	c1 f1       	breq	.+112    	; 0x1f04 <main+0x118>
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    1e94:	98 81       	ld	r25, Y
    1e96:	89 2f       	mov	r24, r25
    1e98:	8d 57       	subi	r24, 0x7D	; 125
    1e9a:	8b 34       	cpi	r24, 0x4B	; 75
    1e9c:	80 f4       	brcc	.+32     	; 0x1ebe <main+0xd2>
		   {
			   if(e.EventId<175)
    1e9e:	9f 3a       	cpi	r25, 0xAF	; 175
    1ea0:	48 f4       	brcc	.+18     	; 0x1eb4 <main+0xc8>
			   {
			   callbackgetFunction(e.EventId-125)(e.EventFunction);		
    1ea2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <callbackgetFunction>
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	80 91 c6 05 	lds	r24, 0x05C6
    1eac:	90 91 c7 05 	lds	r25, 0x05C7
    1eb0:	09 95       	icall
    1eb2:	28 c0       	rjmp	.+80     	; 0x1f04 <main+0x118>
			   }
			   else
			   {
				 callbackSetFunction(e.EventId-173,e.EventFunction);  
    1eb4:	89 2f       	mov	r24, r25
    1eb6:	8d 5a       	subi	r24, 0xAD	; 173
    1eb8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <callbackSetFunction>
    1ebc:	23 c0       	rjmp	.+70     	; 0x1f04 <main+0x118>
			   }
		   }
		   else
		   {
			   if(e.EventId>=200)
    1ebe:	98 3c       	cpi	r25, 0xC8	; 200
    1ec0:	30 f0       	brcs	.+12     	; 0x1ece <main+0xe2>
			   {
				  e.EventFunction(e.ptr); 
    1ec2:	d8 01       	movw	r26, r16
    1ec4:	8d 91       	ld	r24, X+
    1ec6:	9c 91       	ld	r25, X
    1ec8:	fb 01       	movw	r30, r22
    1eca:	09 95       	icall
    1ecc:	1b c0       	rjmp	.+54     	; 0x1f04 <main+0x118>
			   }
			   else if(e.EventId>=50 && e.EventId<125)
    1ece:	89 2f       	mov	r24, r25
    1ed0:	82 53       	subi	r24, 0x32	; 50
    1ed2:	8b 34       	cpi	r24, 0x4B	; 75
    1ed4:	98 f4       	brcc	.+38     	; 0x1efc <main+0x110>
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <callbackgetFunction>
    1edc:	fc 01       	movw	r30, r24
    1ede:	88 ec       	ldi	r24, 0xC8	; 200
    1ee0:	95 e0       	ldi	r25, 0x05	; 5
    1ee2:	09 95       	icall
				  if(e.EventId==52)
    1ee4:	88 81       	ld	r24, Y
    1ee6:	84 33       	cpi	r24, 0x34	; 52
    1ee8:	69 f4       	brne	.+26     	; 0x1f04 <main+0x118>
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <callbackgetFunction>
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	d8 01       	movw	r26, r16
    1ef4:	8d 91       	ld	r24, X+
    1ef6:	9c 91       	ld	r25, X
    1ef8:	09 95       	icall
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <main+0x118>
				  }
				  //callbackSetFunction(e.EventId-48,e.EventFunction);
			   }
			   else
			   {
				  e.EventFunction(0); 
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	fb 01       	movw	r30, r22
    1f02:	09 95       	icall
			   }
			   
		   }
		   }
	   }
		  if(countSize()>1)
    1f04:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <countSize>
		  {
			  
			//OSRR_Events();  
		 }
	if(event ==1 || event ==0)
    1f08:	80 91 b2 04 	lds	r24, 0x04B2
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <main+0x12c>
    1f10:	80 91 b2 04 	lds	r24, 0x04B2
    1f14:	81 11       	cpse	r24, r1
    1f16:	96 cf       	rjmp	.-212    	; 0x1e44 <main+0x58>
	{
		ApplicationHookUP(&event);
    1f18:	82 eb       	ldi	r24, 0xB2	; 178
    1f1a:	94 e0       	ldi	r25, 0x04	; 4
    1f1c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <ApplicationHookUP>
    1f20:	91 cf       	rjmp	.-222    	; 0x1e44 <main+0x58>

00001f22 <callbackSetFunction>:
 */ 
#include "OSRR.h"
callbackarrayfuc callbackarray[10];
void callbackSetFunction(uint8_t pos,callbackarrayfuc arg)
{
	callbackarray[pos]=arg;
    1f22:	e8 2f       	mov	r30, r24
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	e4 53       	subi	r30, 0x34	; 52
    1f2c:	fa 4f       	sbci	r31, 0xFA	; 250
    1f2e:	71 83       	std	Z+1, r23	; 0x01
    1f30:	60 83       	st	Z, r22
    1f32:	08 95       	ret

00001f34 <callbackgetFunction>:
}
callbackarrayfuc callbackgetFunction(uint8_t pos)
{
	return callbackarray[pos];
    1f34:	e8 2f       	mov	r30, r24
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	e4 53       	subi	r30, 0x34	; 52
    1f3e:	fa 4f       	sbci	r31, 0xFA	; 250
}
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	08 95       	ret

00001f46 <num2CharArray>:
	//}
	
}

static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	c8 2f       	mov	r28, r24
    1f4c:	fb 01       	movw	r30, r22
	unsigned char H=0,T=0,O=0;
	H=num/100;
    1f4e:	49 e2       	ldi	r20, 0x29	; 41
    1f50:	84 9f       	mul	r24, r20
    1f52:	41 2d       	mov	r20, r1
    1f54:	11 24       	eor	r1, r1
    1f56:	42 95       	swap	r20
    1f58:	4f 70       	andi	r20, 0x0F	; 15
	T=(num - (H*100))/10;
    1f5a:	1c e9       	ldi	r17, 0x9C	; 156
    1f5c:	14 03       	mulsu	r17, r20
    1f5e:	90 01       	movw	r18, r0
    1f60:	11 24       	eor	r1, r1
    1f62:	c9 01       	movw	r24, r18
    1f64:	8c 0f       	add	r24, r28
    1f66:	91 1d       	adc	r25, r1
    1f68:	6a e0       	ldi	r22, 0x0A	; 10
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__divmodhi4>
	O=(num - (H*100) - (T*10));

	Ustring[0]=(H+48);
    1f70:	84 2f       	mov	r24, r20
    1f72:	80 5d       	subi	r24, 0xD0	; 208
    1f74:	80 83       	st	Z, r24
	Ustring[1]=(T+48);
    1f76:	86 2f       	mov	r24, r22
    1f78:	80 5d       	subi	r24, 0xD0	; 208
    1f7a:	81 83       	std	Z+1, r24	; 0x01
static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
    1f7c:	c0 5d       	subi	r28, 0xD0	; 208
    1f7e:	41 9f       	mul	r20, r17
    1f80:	c0 0d       	add	r28, r0
    1f82:	11 24       	eor	r1, r1
    1f84:	66 0f       	add	r22, r22
    1f86:	86 2f       	mov	r24, r22
    1f88:	88 0f       	add	r24, r24
    1f8a:	88 0f       	add	r24, r24
    1f8c:	68 0f       	add	r22, r24

	Ustring[0]=(H+48);
	Ustring[1]=(T+48);
	Ustring[2]=(O+48);
    1f8e:	c6 1b       	sub	r28, r22
    1f90:	c2 83       	std	Z+2, r28	; 0x02
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	08 95       	ret

00001f98 <task6>:
{
	static uint8_t CommunicationStates;
    static funPtrDebug fp;
	static uint16_t pointersave;
				uint8_t *length;
	if(EspConnected==1)
    1f98:	20 91 7f 04 	lds	r18, 0x047F
    1f9c:	21 30       	cpi	r18, 0x01	; 1
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <task6+0xa>
    1fa0:	4b c0       	rjmp	.+150    	; 0x2038 <task6+0xa0>
	{
		switch (CommunicationStates)
    1fa2:	20 91 80 04 	lds	r18, 0x0480
    1fa6:	21 30       	cpi	r18, 0x01	; 1
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <task6+0x30>
    1faa:	30 f0       	brcs	.+12     	; 0x1fb8 <task6+0x20>
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	d1 f0       	breq	.+52     	; 0x1fe4 <task6+0x4c>
    1fb0:	23 30       	cpi	r18, 0x03	; 3
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <task6+0x1e>
    1fb4:	41 c0       	rjmp	.+130    	; 0x2038 <task6+0xa0>
    1fb6:	28 c0       	rjmp	.+80     	; 0x2008 <task6+0x70>
		{
			case 0:
			if(RequestWait()==ESP_CmdSndOK)
    1fb8:	0e 94 55 03 	call	0x6aa	; 0x6aa <RequestWait>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	3c c0       	rjmp	.+120    	; 0x2038 <task6+0xa0>
			{
				CommunicationStates=1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 80 04 	sts	0x0480, r24
    1fc6:	38 c0       	rjmp	.+112    	; 0x2038 <task6+0xa0>
			}
			break;
			case 1:
			  CheckInput();
    1fc8:	0e 94 ef 02 	call	0x5de	; 0x5de <CheckInput>
			  PushEventInterface(200,DebugHandlerFunc,ESPpop,0);
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	45 ea       	ldi	r20, 0xA5	; 165
    1fd0:	53 e0       	ldi	r21, 0x03	; 3
    1fd2:	6e ee       	ldi	r22, 0xEE	; 238
    1fd4:	7a e0       	ldi	r23, 0x0A	; 10
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
			  //DebugHandlerFunc(ESPpop);
			   CommunicationStates=2;
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	80 93 80 04 	sts	0x0480, r24
			  break;
    1fe2:	2a c0       	rjmp	.+84     	; 0x2038 <task6+0xa0>
			case 2:
			 if(((uint8_t*)callback)[1]==1)
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	21 81       	ldd	r18, Z+1	; 0x01
    1fe8:	21 30       	cpi	r18, 0x01	; 1
    1fea:	31 f5       	brne	.+76     	; 0x2038 <task6+0xa0>
			 {
                 pointersave=callback;
    1fec:	90 93 82 04 	sts	0x0482, r25
    1ff0:	80 93 81 04 	sts	0x0481, r24
				 fp=(funPtrDebug*)(((uint16_t*)(callback+2))[0]);
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	90 93 84 04 	sts	0x0484, r25
    1ffc:	80 93 83 04 	sts	0x0483, r24
				 CommunicationStates=3;
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	80 93 80 04 	sts	0x0480, r24
    2006:	18 c0       	rjmp	.+48     	; 0x2038 <task6+0xa0>
			 }
			break;
			case 3:
			length=pointersave;
			if(ESP_CmdSndOK==SendData(((length[6]*3))))
    2008:	e0 91 81 04 	lds	r30, 0x0481
    200c:	f0 91 82 04 	lds	r31, 0x0482
    2010:	86 81       	ldd	r24, Z+6	; 0x06
    2012:	98 2f       	mov	r25, r24
    2014:	99 0f       	add	r25, r25
    2016:	89 0f       	add	r24, r25
    2018:	0e 94 db 02 	call	0x5b6	; 0x5b6 <SendData>
    201c:	81 11       	cpse	r24, r1
    201e:	0c c0       	rjmp	.+24     	; 0x2038 <task6+0xa0>
			{
				CommunicationStates=1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	80 93 80 04 	sts	0x0480, r24
				char val2[4]="255\0";
                fp(pointersave);
    2026:	e0 91 83 04 	lds	r30, 0x0483
    202a:	f0 91 84 04 	lds	r31, 0x0484
    202e:	80 91 81 04 	lds	r24, 0x0481
    2032:	90 91 82 04 	lds	r25, 0x0482
    2036:	09 95       	icall
			
			
		}
	}
	return 0;
}
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	08 95       	ret

0000203e <task1>:
typedef uint16_t  (*funPtrDebug)(void *);
//Esp_Index=Mode_Command;
//Site[36]=name;
//background-color:#757575;height;100%;position:absolute;line-height:inherit;width:62%" ><center><span style="color:white">62</span></center></div></body></html>";
uint16_t task1(void)
{
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	28 97       	sbiw	r28, 0x08	; 8
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
	//PinOutput(1,PIN_OUT2,B);
   //uart_char('a');
  // uart_string(str1);
  uint16_t Out;
  //RTE_WriteBufferUart(str1);
	time1=time1+1;
    2056:	80 91 55 04 	lds	r24, 0x0455
    205a:	90 91 56 04 	lds	r25, 0x0456
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	90 93 56 04 	sts	0x0456, r25
    2064:	80 93 55 04 	sts	0x0455, r24
	if(Init_Flag==0)
    2068:	20 91 57 04 	lds	r18, 0x0457
    206c:	30 91 58 04 	lds	r19, 0x0458
    2070:	23 2b       	or	r18, r19
    2072:	71 f4       	brne	.+28     	; 0x2090 <task1+0x52>
	{
		InitMax();
    2074:	0e 94 57 0c 	call	0x18ae	; 0x18ae <InitMax>
		Init_Flag=1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	90 93 58 04 	sts	0x0458, r25
    2080:	80 93 57 04 	sts	0x0457, r24
		TankSize=10000/124;
    2084:	80 e5       	ldi	r24, 0x50	; 80
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	90 93 5a 04 	sts	0x045A, r25
    208c:	80 93 59 04 	sts	0x0459, r24
	}
	DispChar(0x0d,7);
    2090:	67 e0       	ldi	r22, 0x07	; 7
    2092:	8d e0       	ldi	r24, 0x0D	; 13
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DispChar>
	if(time1==10)
    209a:	20 91 55 04 	lds	r18, 0x0455
    209e:	30 91 56 04 	lds	r19, 0x0456
    20a2:	2a 30       	cpi	r18, 0x0A	; 10
    20a4:	31 05       	cpc	r19, r1
    20a6:	09 f0       	breq	.+2      	; 0x20aa <task1+0x6c>
    20a8:	8a c0       	rjmp	.+276    	; 0x21be <task1+0x180>
	{  //ssd1036_chumma();
        
        uint16_t percnt;
		Out=(10000-(SensorValue*TankSize))/100;
    20aa:	40 91 5b 04 	lds	r20, 0x045B
    20ae:	20 91 59 04 	lds	r18, 0x0459
    20b2:	30 91 5a 04 	lds	r19, 0x045A
    20b6:	42 9f       	mul	r20, r18
    20b8:	c0 01       	movw	r24, r0
    20ba:	43 9f       	mul	r20, r19
    20bc:	90 0d       	add	r25, r0
    20be:	11 24       	eor	r1, r1
    20c0:	20 e1       	ldi	r18, 0x10	; 16
    20c2:	37 e2       	ldi	r19, 0x27	; 39
    20c4:	28 1b       	sub	r18, r24
    20c6:	39 0b       	sbc	r19, r25
    20c8:	36 95       	lsr	r19
    20ca:	27 95       	ror	r18
    20cc:	36 95       	lsr	r19
    20ce:	27 95       	ror	r18
    20d0:	ab e7       	ldi	r26, 0x7B	; 123
    20d2:	b4 e1       	ldi	r27, 0x14	; 20
    20d4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    20d8:	ac 01       	movw	r20, r24
    20da:	56 95       	lsr	r21
    20dc:	47 95       	ror	r20
		                        percnt=Out;
								SSDNUM[3]='\0';	
    20de:	1c 82       	std	Y+4, r1	; 0x04
								Out=Out*127;
    20e0:	9a 01       	movw	r18, r20
    20e2:	36 95       	lsr	r19
    20e4:	32 2f       	mov	r19, r18
    20e6:	22 27       	eor	r18, r18
    20e8:	37 95       	ror	r19
    20ea:	27 95       	ror	r18
    20ec:	24 1b       	sub	r18, r20
    20ee:	35 0b       	sbc	r19, r21
								Out=Out/100;														//ssdcount=one;
    20f0:	36 95       	lsr	r19
    20f2:	27 95       	ror	r18
    20f4:	36 95       	lsr	r19
    20f6:	27 95       	ror	r18
    20f8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    20fc:	8c 01       	movw	r16, r24
    20fe:	16 95       	lsr	r17
    2100:	07 95       	ror	r16
								num2CharArray(percnt,SSDNUM);
    2102:	be 01       	movw	r22, r28
    2104:	6f 5f       	subi	r22, 0xFF	; 255
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	84 2f       	mov	r24, r20
    210a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <num2CharArray>
								ssd1306_String_font6x8(SSDNUM,74,3);
    210e:	43 e0       	ldi	r20, 0x03	; 3
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	6a e4       	ldi	r22, 0x4A	; 74
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	0e 94 86 05 	call	0xb0c	; 0xb0c <ssd1306_String_font6x8>
								ssd1306_String_font6x8("'/.",96,3);
    211e:	43 e0       	ldi	r20, 0x03	; 3
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	60 e6       	ldi	r22, 0x60	; 96
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	0e 94 86 05 	call	0xb0c	; 0xb0c <ssd1306_String_font6x8>
		if(SensorValue<20 && Upcounter<40)
    212e:	20 91 5b 04 	lds	r18, 0x045B
    2132:	24 31       	cpi	r18, 0x14	; 20
    2134:	88 f4       	brcc	.+34     	; 0x2158 <task1+0x11a>
    2136:	80 91 5c 04 	lds	r24, 0x045C
    213a:	90 91 5d 04 	lds	r25, 0x045D
    213e:	88 32       	cpi	r24, 0x28	; 40
    2140:	91 05       	cpc	r25, r1
    2142:	50 f4       	brcc	.+20     	; 0x2158 <task1+0x11a>
		{
		  Upcounter++; 
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	90 93 5d 04 	sts	0x045D, r25
    214a:	80 93 5c 04 	sts	0x045C, r24
		  DownCounter=0;
    214e:	10 92 5f 04 	sts	0x045F, r1
    2152:	10 92 5e 04 	sts	0x045E, r1
    2156:	26 c0       	rjmp	.+76     	; 0x21a4 <task1+0x166>
		}
		else if(SensorValue>122 && DownCounter<40 && SensorValue<255)
    2158:	2b 37       	cpi	r18, 0x7B	; 123
    215a:	98 f0       	brcs	.+38     	; 0x2182 <task1+0x144>
    215c:	80 91 5e 04 	lds	r24, 0x045E
    2160:	90 91 5f 04 	lds	r25, 0x045F
    2164:	88 32       	cpi	r24, 0x28	; 40
    2166:	91 05       	cpc	r25, r1
    2168:	60 f4       	brcc	.+24     	; 0x2182 <task1+0x144>
    216a:	2f 3f       	cpi	r18, 0xFF	; 255
    216c:	51 f0       	breq	.+20     	; 0x2182 <task1+0x144>
		{
			Upcounter=0;
    216e:	10 92 5d 04 	sts	0x045D, r1
    2172:	10 92 5c 04 	sts	0x045C, r1
			DownCounter++;
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	90 93 5f 04 	sts	0x045F, r25
    217c:	80 93 5e 04 	sts	0x045E, r24
    2180:	11 c0       	rjmp	.+34     	; 0x21a4 <task1+0x166>
		}
        else
		{
			Upcounter=0;
    2182:	10 92 5d 04 	sts	0x045D, r1
    2186:	10 92 5c 04 	sts	0x045C, r1
			DownCounter=0;	
    218a:	10 92 5f 04 	sts	0x045F, r1
    218e:	10 92 5e 04 	sts	0x045E, r1
			COUNT=0;
    2192:	10 92 61 04 	sts	0x0461, r1
    2196:	10 92 60 04 	sts	0x0460, r1
			PinOutput(0,PIN_OUT7,D);
    219a:	42 e0       	ldi	r20, 0x02	; 2
    219c:	66 e0       	ldi	r22, 0x06	; 6
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
		}
		DispDigits(Out);
    21a4:	c8 01       	movw	r24, r16
    21a6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DispDigits>
            
			//PinOutput(Toggle,PIN_OUT1,B);
		//
		//COUNT=COUNT+1;
		
		Toggle1=Toggle1^1;
    21aa:	90 91 6a 02 	lds	r25, 0x026A
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 27       	eor	r24, r25
    21b2:	80 93 6a 02 	sts	0x026A, r24

		//
		time1=0;
    21b6:	10 92 56 04 	sts	0x0456, r1
    21ba:	10 92 55 04 	sts	0x0455, r1
					//}
				 


	}
    if(Upcounter!=0||DownCounter!=0 )
    21be:	20 91 5c 04 	lds	r18, 0x045C
    21c2:	30 91 5d 04 	lds	r19, 0x045D
    21c6:	23 2b       	or	r18, r19
    21c8:	31 f4       	brne	.+12     	; 0x21d6 <task1+0x198>
    21ca:	80 91 5e 04 	lds	r24, 0x045E
    21ce:	90 91 5f 04 	lds	r25, 0x045F
    21d2:	89 2b       	or	r24, r25
    21d4:	f1 f0       	breq	.+60     	; 0x2212 <task1+0x1d4>
	{
		
	if (COUNT>100)
    21d6:	80 91 60 04 	lds	r24, 0x0460
    21da:	90 91 61 04 	lds	r25, 0x0461
    21de:	85 36       	cpi	r24, 0x65	; 101
    21e0:	91 05       	cpc	r25, r1
    21e2:	70 f0       	brcs	.+28     	; 0x2200 <task1+0x1c2>
	{
		COUNT=0;
    21e4:	10 92 61 04 	sts	0x0461, r1
    21e8:	10 92 60 04 	sts	0x0460, r1
		Toggle=Toggle^1;
    21ec:	90 91 62 04 	lds	r25, 0x0462
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	89 27       	eor	r24, r25
    21f4:	80 93 62 04 	sts	0x0462, r24
       PinOutput(Toggle,PIN_OUT7,D);
    21f8:	42 e0       	ldi	r20, 0x02	; 2
    21fa:	66 e0       	ldi	r22, 0x06	; 6
    21fc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	}
	COUNT++;
    2200:	80 91 60 04 	lds	r24, 0x0460
    2204:	90 91 61 04 	lds	r25, 0x0461
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	90 93 61 04 	sts	0x0461, r25
    220e:	80 93 60 04 	sts	0x0460, r24
	}
		
    if(time2>1)
    2212:	20 91 63 04 	lds	r18, 0x0463
    2216:	30 91 64 04 	lds	r19, 0x0464
    221a:	22 30       	cpi	r18, 0x02	; 2
    221c:	31 05       	cpc	r19, r1
    221e:	08 f4       	brcc	.+2      	; 0x2222 <task1+0x1e4>
    2220:	57 c0       	rjmp	.+174    	; 0x22d0 <task1+0x292>
	{
				    uint16_t a=0x0000,c;
    2222:	18 86       	std	Y+8, r1	; 0x08
    2224:	1f 82       	std	Y+7, r1	; 0x07
				    uint8_t *array=&c,*Val=&a;
				    RTEReadFirstCh(&a);
    2226:	ce 01       	movw	r24, r28
    2228:	07 96       	adiw	r24, 0x07	; 7
    222a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <RTEModuleFirstCh>
				    //uart_num(array[1]);
				    //if(a&0x8000==0x8000)
				    //{
				    //uart_string("in 1");
				    c=(a>>15)&0x0001;
    222e:	8f 81       	ldd	r24, Y+7	; 0x07
    2230:	98 85       	ldd	r25, Y+8	; 0x08
    2232:	29 2f       	mov	r18, r25
    2234:	22 1f       	adc	r18, r18
    2236:	22 27       	eor	r18, r18
    2238:	22 1f       	adc	r18, r18
    223a:	2d 83       	std	Y+5, r18	; 0x05
    223c:	1e 82       	std	Y+6, r1	; 0x06
				    if(array[0]==0x01)
    223e:	21 30       	cpi	r18, 0x01	; 1
    2240:	d9 f4       	brne	.+54     	; 0x2278 <task1+0x23a>
				    {
						//a=(a&0x03ff);
						//a=a*(4882);
						//a=a/1000;
						a=a&0x03ff;
    2242:	93 70       	andi	r25, 0x03	; 3
    2244:	98 87       	std	Y+8, r25	; 0x08
    2246:	8f 83       	std	Y+7, r24	; 0x07
						one=(110*a);
						one=one/1024;
						one=(one);
						
						SSDNUM[3]='\0';															//ssdcount=one;
    2248:	1c 82       	std	Y+4, r1	; 0x04
						num2CharArray(SensorValue,SSDNUM);
    224a:	be 01       	movw	r22, r28
    224c:	6f 5f       	subi	r22, 0xFF	; 255
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	80 91 5b 04 	lds	r24, 0x045B
    2254:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <num2CharArray>
						ssd1306_String_font6x8(SSDNUM,92,0);
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	6c e5       	ldi	r22, 0x5C	; 92
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	ce 01       	movw	r24, r28
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	0e 94 86 05 	call	0xb0c	; 0xb0c <ssd1306_String_font6x8>
						ssd1306_String_font6x8("cm",112,0);
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	60 e7       	ldi	r22, 0x70	; 112
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	87 e0       	ldi	r24, 0x07	; 7
    2272:	93 e0       	ldi	r25, 0x03	; 3
    2274:	0e 94 86 05 	call	0xb0c	; 0xb0c <ssd1306_String_font6x8>
						}
						//uart_num(one);
						//uart_string("#1#");
					   // uart_num(Val[0]);
				    }	
					a=0x0800;			   		          
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	98 e0       	ldi	r25, 0x08	; 8
    227c:	98 87       	std	Y+8, r25	; 0x08
    227e:	8f 83       	std	Y+7, r24	; 0x07
				    RTEReadFirstCh(&a);
    2280:	ce 01       	movw	r24, r28
    2282:	07 96       	adiw	r24, 0x07	; 7
    2284:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <RTEModuleFirstCh>
						two=(5*a)*10/1024;
						//uart_string("#2#");
						//uart_num(two);
						//uart_string("#2#");					   // uart_num(Val[0]);
				    }
					a=0x1000;
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e1       	ldi	r25, 0x10	; 16
    228c:	98 87       	std	Y+8, r25	; 0x08
    228e:	8f 83       	std	Y+7, r24	; 0x07
					RTEReadFirstCh(&a);
    2290:	ce 01       	movw	r24, r28
    2292:	07 96       	adiw	r24, 0x07	; 7
    2294:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <RTEModuleFirstCh>
					//uart_num(array[1]);
					//if(a&0x8000==0x8000)
					//{
					//uart_string("in 1");
					c=(a>>15)&0x0001;
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	98 85       	ldd	r25, Y+8	; 0x08
    229c:	29 2f       	mov	r18, r25
    229e:	22 1f       	adc	r18, r18
    22a0:	22 27       	eor	r18, r18
    22a2:	22 1f       	adc	r18, r18
    22a4:	2d 83       	std	Y+5, r18	; 0x05
    22a6:	1e 82       	std	Y+6, r1	; 0x06
					if(array[0]==0x01)
    22a8:	21 30       	cpi	r18, 0x01	; 1
    22aa:	19 f4       	brne	.+6      	; 0x22b2 <task1+0x274>
					{
						a=a&0x03ff;
    22ac:	93 70       	andi	r25, 0x03	; 3
    22ae:	98 87       	std	Y+8, r25	; 0x08
    22b0:	8f 83       	std	Y+7, r24	; 0x07
						three=(5*a)*10/1024;
						//uart_string("#3#");
						//uart_16Uint(a);
						//uart_string("#3#");						//uart_num(Val[0]);
					}
					time2=0;
    22b2:	10 92 64 04 	sts	0x0464, r1
    22b6:	10 92 63 04 	sts	0x0463, r1
		 if(ssdcount<127)
    22ba:	80 91 65 04 	lds	r24, 0x0465
    22be:	8f 37       	cpi	r24, 0x7F	; 127
    22c0:	20 f4       	brcc	.+8      	; 0x22ca <task1+0x28c>
		 {
			 ssdcount++;
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	80 93 65 04 	sts	0x0465, r24
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <task1+0x292>
		 }
		 else
		 {
			 ssdcount=ssdcount-55;		 
    22ca:	87 53       	subi	r24, 0x37	; 55
    22cc:	80 93 65 04 	sts	0x0465, r24
		 }
         
		}


if(Out<127)
    22d0:	0f 37       	cpi	r16, 0x7F	; 127
    22d2:	11 05       	cpc	r17, r1
    22d4:	38 f4       	brcc	.+14     	; 0x22e4 <task1+0x2a6>
{
  ssd1306_Fill_Rectangle(0,5,Out);	
    22d6:	a8 01       	movw	r20, r16
    22d8:	65 e0       	ldi	r22, 0x05	; 5
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 99 05 	call	0xb32	; 0xb32 <ssd1306_Fill_Rectangle>
}

					time2++;
    22e4:	80 91 63 04 	lds	r24, 0x0463
    22e8:	90 91 64 04 	lds	r25, 0x0464
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	90 93 64 04 	sts	0x0464, r25
    22f2:	80 93 63 04 	sts	0x0463, r24
   //a=4;
   uart_string("nine\n");
    22f6:	8a e0       	ldi	r24, 0x0A	; 10
    22f8:	93 e0       	ldi	r25, 0x03	; 3
    22fa:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_string>
	return 0;
}
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	28 96       	adiw	r28, 0x08	; 8
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	08 95       	ret

00002318 <task2>:
uint16_t task2(void)
{
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	00 d0       	rcall	.+0      	; 0x2320 <task2+0x8>
    2320:	1f 92       	push	r1
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	
	//enq(e);
	//enq(e);
  //RTE_WriteBufferUart("count\n");
  //RTE_WriteBufferUart(countSize());
	time1=time1+1;
    2326:	80 91 66 04 	lds	r24, 0x0466
    232a:	90 91 67 04 	lds	r25, 0x0467
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	90 93 67 04 	sts	0x0467, r25
    2334:	80 93 66 04 	sts	0x0466, r24
	uint16_t Pulse=0;
	uint8_t *check=&Pulse;
	//uart_string("Here");
	//RTE_ReadPulse(&Pulse);
	
	if(time1==500)
    2338:	84 3f       	cpi	r24, 0xF4	; 244
    233a:	91 40       	sbci	r25, 0x01	; 1
    233c:	09 f0       	breq	.+2      	; 0x2340 <task2+0x28>
    233e:	d9 c0       	rjmp	.+434    	; 0x24f2 <task2+0x1da>
	{
		//enq(e);
        	signal=0;
    2340:	10 92 54 04 	sts	0x0454, r1
	
			time1=0;
    2344:	10 92 67 04 	sts	0x0467, r1
    2348:	10 92 66 04 	sts	0x0466, r1
                //PushEventInterface(50,1,0,1);
			    //RTE_ReadPulse(&Pulse);
									uint8_t arr[3];
									arr[0]=0;
    234c:	19 82       	std	Y+1, r1	; 0x01
									arr[1]=0;
    234e:	1a 82       	std	Y+2, r1	; 0x02
									arr[2]=1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	8b 83       	std	Y+3, r24	; 0x03
									((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2354:	ce 01       	movw	r24, r28
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <SignalHandlerFunc>
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
									
               if(arr[1]==0x02)
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	09 f0       	breq	.+2      	; 0x2368 <task2+0x50>
    2366:	af c0       	rjmp	.+350    	; 0x24c6 <task2+0x1ae>
				//uart_num(arr[0]);
		    	//SendEsp=(uint8_t)TimerValue;
		    	//uart_num(check[0]);
		    	//uart_string("\n");
				//uart_num(check[0]);
				FilterUltrasonic(arr[0]);
    2368:	e9 81       	ldd	r30, Y+1	; 0x01

static void FilterUltrasonic(uint8_t Distance)
{
	static uint16_t value, previousvalue=0,offset,onebyk;
	uint16_t multiplier;
	onebyk=181;
    236a:	85 eb       	ldi	r24, 0xB5	; 181
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	90 93 6a 04 	sts	0x046A, r25
    2372:	80 93 69 04 	sts	0x0469, r24
	//value=(Distance+previousvalue);
	if(Distance>value)
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	40 91 6b 04 	lds	r20, 0x046B
    237c:	50 91 6c 04 	lds	r21, 0x046C
    2380:	4e 17       	cp	r20, r30
    2382:	5f 07       	cpc	r21, r31
    2384:	08 f0       	brcs	.+2      	; 0x2388 <task2+0x70>
    2386:	42 c0       	rjmp	.+132    	; 0x240c <task2+0xf4>
	{
		multiplier=(Distance-value)*100;
    2388:	cf 01       	movw	r24, r30
    238a:	84 1b       	sub	r24, r20
    238c:	95 0b       	sbc	r25, r21
    238e:	64 e6       	ldi	r22, 0x64	; 100
    2390:	68 9f       	mul	r22, r24
    2392:	90 01       	movw	r18, r0
    2394:	69 9f       	mul	r22, r25
    2396:	30 0d       	add	r19, r0
    2398:	11 24       	eor	r1, r1
        if(multiplier<1804)
    239a:	2c 30       	cpi	r18, 0x0C	; 12
    239c:	87 e0       	ldi	r24, 0x07	; 7
    239e:	38 07       	cpc	r19, r24
    23a0:	90 f4       	brcc	.+36     	; 0x23c6 <task2+0xae>
		{
			offset=((Distance-value)*100)/onebyk;
    23a2:	a5 e8       	ldi	r26, 0x85	; 133
    23a4:	ba e5       	ldi	r27, 0x5A	; 90
    23a6:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    23aa:	00 24       	eor	r0, r0
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	00 1c       	adc	r0, r0
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	00 1c       	adc	r0, r0
    23b8:	89 2f       	mov	r24, r25
    23ba:	90 2d       	mov	r25, r0
    23bc:	90 93 6e 04 	sts	0x046E, r25
    23c0:	80 93 6d 04 	sts	0x046D, r24
    23c4:	11 c0       	rjmp	.+34     	; 0x23e8 <task2+0xd0>
		}
		else
		{
			offset=((Distance-value)*100)/1804;
    23c6:	36 95       	lsr	r19
    23c8:	27 95       	ror	r18
    23ca:	36 95       	lsr	r19
    23cc:	27 95       	ror	r18
    23ce:	a9 ea       	ldi	r26, 0xA9	; 169
    23d0:	b8 e4       	ldi	r27, 0x48	; 72
    23d2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    23d6:	88 0f       	add	r24, r24
    23d8:	89 2f       	mov	r24, r25
    23da:	88 1f       	adc	r24, r24
    23dc:	99 0b       	sbc	r25, r25
    23de:	91 95       	neg	r25
    23e0:	90 93 6e 04 	sts	0x046E, r25
    23e4:	80 93 6d 04 	sts	0x046D, r24
		}
		if(offset==0)
    23e8:	80 91 6d 04 	lds	r24, 0x046D
    23ec:	90 91 6e 04 	lds	r25, 0x046E
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	29 f4       	brne	.+10     	; 0x23fe <task2+0xe6>
		{
			value=Distance;
    23f4:	f0 93 6c 04 	sts	0x046C, r31
    23f8:	e0 93 6b 04 	sts	0x046B, r30
    23fc:	48 c0       	rjmp	.+144    	; 0x248e <task2+0x176>
		}
		else
		{
			value=value+offset;
    23fe:	84 0f       	add	r24, r20
    2400:	95 1f       	adc	r25, r21
    2402:	90 93 6c 04 	sts	0x046C, r25
    2406:	80 93 6b 04 	sts	0x046B, r24
    240a:	41 c0       	rjmp	.+130    	; 0x248e <task2+0x176>
		
		
	}
	else
	{
		multiplier=(value-Distance)*100;
    240c:	ca 01       	movw	r24, r20
    240e:	8e 1b       	sub	r24, r30
    2410:	9f 0b       	sbc	r25, r31
    2412:	64 e6       	ldi	r22, 0x64	; 100
    2414:	68 9f       	mul	r22, r24
    2416:	90 01       	movw	r18, r0
    2418:	69 9f       	mul	r22, r25
    241a:	30 0d       	add	r19, r0
    241c:	11 24       	eor	r1, r1
        if(multiplier<1804)
    241e:	2c 30       	cpi	r18, 0x0C	; 12
    2420:	87 e0       	ldi	r24, 0x07	; 7
    2422:	38 07       	cpc	r19, r24
    2424:	90 f4       	brcc	.+36     	; 0x244a <task2+0x132>
		{
			offset=((value-Distance)*100)/onebyk;
    2426:	a5 e8       	ldi	r26, 0x85	; 133
    2428:	ba e5       	ldi	r27, 0x5A	; 90
    242a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    242e:	00 24       	eor	r0, r0
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	00 1c       	adc	r0, r0
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	00 1c       	adc	r0, r0
    243c:	89 2f       	mov	r24, r25
    243e:	90 2d       	mov	r25, r0
    2440:	90 93 6e 04 	sts	0x046E, r25
    2444:	80 93 6d 04 	sts	0x046D, r24
    2448:	11 c0       	rjmp	.+34     	; 0x246c <task2+0x154>
		}
		else
		{
			offset=((value-Distance)*100)/1804;
    244a:	36 95       	lsr	r19
    244c:	27 95       	ror	r18
    244e:	36 95       	lsr	r19
    2450:	27 95       	ror	r18
    2452:	a9 ea       	ldi	r26, 0xA9	; 169
    2454:	b8 e4       	ldi	r27, 0x48	; 72
    2456:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__umulhisi3>
    245a:	88 0f       	add	r24, r24
    245c:	89 2f       	mov	r24, r25
    245e:	88 1f       	adc	r24, r24
    2460:	99 0b       	sbc	r25, r25
    2462:	91 95       	neg	r25
    2464:	90 93 6e 04 	sts	0x046E, r25
    2468:	80 93 6d 04 	sts	0x046D, r24
		}
			

		if(offset==0)
    246c:	80 91 6d 04 	lds	r24, 0x046D
    2470:	90 91 6e 04 	lds	r25, 0x046E
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	29 f4       	brne	.+10     	; 0x2482 <task2+0x16a>
		{
			value=Distance;
    2478:	f0 93 6c 04 	sts	0x046C, r31
    247c:	e0 93 6b 04 	sts	0x046B, r30
    2480:	06 c0       	rjmp	.+12     	; 0x248e <task2+0x176>
		}
		else
		{
			value=value-offset;
    2482:	48 1b       	sub	r20, r24
    2484:	59 0b       	sbc	r21, r25
    2486:	50 93 6c 04 	sts	0x046C, r21
    248a:	40 93 6b 04 	sts	0x046B, r20
		}		
	}
	previousvalue=value;
    248e:	80 91 6b 04 	lds	r24, 0x046B
    2492:	90 91 6c 04 	lds	r25, 0x046C
    2496:	80 93 6f 04 	sts	0x046F, r24
    249a:	90 93 70 04 	sts	0x0470, r25
	Sigout=(uint8_t)previousvalue;
    249e:	80 93 e0 05 	sts	0x05E0, r24
	SensorValue=(uint8_t)previousvalue;
    24a2:	80 93 5b 04 	sts	0x045B, r24
	//uart_num(Sigout);
	quality=100;
    24a6:	14 e6       	ldi	r17, 0x64	; 100
    24a8:	10 93 53 04 	sts	0x0453, r17
		    	//SendEsp=(uint8_t)TimerValue;
		    	//uart_num(check[0]);
		    	//uart_string("\n");
				//uart_num(check[0]);
				FilterUltrasonic(arr[0]);
				SetBlink(PIN_OUT1,0x1000,B);
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	70 e1       	ldi	r23, 0x10	; 16
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
			    Errorcount=0;
    24bc:	10 92 68 04 	sts	0x0468, r1
				quality=100;
    24c0:	10 93 53 04 	sts	0x0453, r17
    24c4:	16 c0       	rjmp	.+44     	; 0x24f2 <task2+0x1da>
				
				}
				else
				{
					Errorcount++;
    24c6:	80 91 68 04 	lds	r24, 0x0468
    24ca:	8f 5f       	subi	r24, 0xFF	; 255
    24cc:	80 93 68 04 	sts	0x0468, r24
					if(Errorcount>=10)
    24d0:	8a 30       	cpi	r24, 0x0A	; 10
    24d2:	78 f0       	brcs	.+30     	; 0x24f2 <task2+0x1da>
					{
						//uart_string("Connection error");
						//uart_string("\n");
					    SetBlink(PIN_OUT1,0x1002,B);
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	62 e0       	ldi	r22, 0x02	; 2
    24da:	70 e1       	ldi	r23, 0x10	; 16
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
						Sigout=0xff;
    24e4:	8f ef       	ldi	r24, 0xFF	; 255
    24e6:	80 93 e0 05 	sts	0x05E0, r24
						SensorValue=0xff;
    24ea:	80 93 5b 04 	sts	0x045B, r24
						quality=0;
    24ee:	10 92 53 04 	sts	0x0453, r1
		    	

	}

	return 0;
}
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	08 95       	ret

00002504 <task3>:
uint16_t task3(void)
{   
   Blink();
    2504:	0e 94 7f 00 	call	0xfe	; 0xfe <Blink>
	return 0;
}
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	08 95       	ret

0000250e <task4>:
uint16_t task4(void)
{	
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	00 d0       	rcall	.+0      	; 0x2514 <task4+0x6>
    2514:	1f 92       	push	r1
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
	static uint16_t countTask4;
	static uint8_t PreviousState,SWITCHCOUNT;
	uint8_t arr[3];
	arr[0]=0;
    251a:	19 82       	std	Y+1, r1	; 0x01
	arr[1]=1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	8a 83       	std	Y+2, r24	; 0x02
	arr[2]=2;
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	8b 83       	std	Y+3, r24	; 0x03
	((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <SignalHandlerFunc>
	char val[4]	;
	if(arr[0])
    252c:	88 23       	and	r24, r24
    252e:	29 f0       	breq	.+10     	; 0x253a <task4+0x2c>
	{
	  	//RTE_WriteBufferUart("data1");
    // uart_string("ON\n");
	 SWITCHCOUNT++;
    2530:	80 91 71 04 	lds	r24, 0x0471
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	80 93 71 04 	sts	0x0471, r24
	}
    if(SWITCHCOUNT>200)
    253a:	80 91 71 04 	lds	r24, 0x0471
    253e:	89 3c       	cpi	r24, 0xC9	; 201
    2540:	10 f0       	brcs	.+4      	; 0x2546 <task4+0x38>
	{
		//uart_string("data1:\n");
		 //uart_num(arr[0]);
		 SWITCHCOUNT=0;
    2542:	10 92 71 04 	sts	0x0471, r1
   {
	   PinOutput(0,PIN_OUT5,D);
	    SetBlink(PIN_OUT1,0x2000,B);
   }*/

	countTask4++;
    2546:	80 91 72 04 	lds	r24, 0x0472
    254a:	90 91 73 04 	lds	r25, 0x0473
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	90 93 73 04 	sts	0x0473, r25
    2554:	80 93 72 04 	sts	0x0472, r24
	if(countTask4>=100)
    2558:	84 36       	cpi	r24, 0x64	; 100
    255a:	91 05       	cpc	r25, r1
    255c:	b8 f0       	brcs	.+46     	; 0x258c <task4+0x7e>
	{
		hours.OperatingHours++;
    255e:	80 91 74 04 	lds	r24, 0x0474
    2562:	90 91 75 04 	lds	r25, 0x0475
    2566:	a0 91 76 04 	lds	r26, 0x0476
    256a:	b0 91 77 04 	lds	r27, 0x0477
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	a1 1d       	adc	r26, r1
    2572:	b1 1d       	adc	r27, r1
    2574:	80 93 74 04 	sts	0x0474, r24
    2578:	90 93 75 04 	sts	0x0475, r25
    257c:	a0 93 76 04 	sts	0x0476, r26
    2580:	b0 93 77 04 	sts	0x0477, r27
		//StoreNVM(Nvm_OH,(uint8_t*)&hours,0);;
		countTask4=0;
    2584:	10 92 73 04 	sts	0x0473, r1
    2588:	10 92 72 04 	sts	0x0472, r1
		//uart_num(countSize());
		//uart_num(deq().EventId);
	}
	//SetDataESP(&count);
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	08 95       	ret

00002598 <task5>:
uint16_t task5(void)
{ f.LargestValue++;
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	00 d0       	rcall	.+0      	; 0x259e <task5+0x6>
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <task5+0x8>
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	80 91 78 04 	lds	r24, 0x0478
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	80 93 78 04 	sts	0x0478, r24
	if(f.LargestValue==201)
    25ae:	89 3c       	cpi	r24, 0xC9	; 201
    25b0:	99 f4       	brne	.+38     	; 0x25d8 <task5+0x40>
	{
		//StoreNVM(Nvm_Ping,&f,1);
		hours.OperatingHours++;
    25b2:	80 91 74 04 	lds	r24, 0x0474
    25b6:	90 91 75 04 	lds	r25, 0x0475
    25ba:	a0 91 76 04 	lds	r26, 0x0476
    25be:	b0 91 77 04 	lds	r27, 0x0477
    25c2:	01 96       	adiw	r24, 0x01	; 1
    25c4:	a1 1d       	adc	r26, r1
    25c6:	b1 1d       	adc	r27, r1
    25c8:	80 93 74 04 	sts	0x0474, r24
    25cc:	90 93 75 04 	sts	0x0475, r25
    25d0:	a0 93 76 04 	sts	0x0476, r26
    25d4:	b0 93 77 04 	sts	0x0477, r27
	    ESP_flags.Connection_flag=1;
	    done=1;  
	  }
  }
  else*/ 
 if(ConnectionLost==0)
    25d8:	80 91 79 04 	lds	r24, 0x0479
    25dc:	81 11       	cpse	r24, r1
    25de:	9e c0       	rjmp	.+316    	; 0x271c <task5+0x184>
 {   
	 if(ESP_flags.Server_flag==0 && done==0)
    25e0:	80 91 7a 04 	lds	r24, 0x047A
    25e4:	82 fd       	sbrc	r24, 2
    25e6:	11 c0       	rjmp	.+34     	; 0x260a <task5+0x72>
    25e8:	90 91 7b 04 	lds	r25, 0x047B
    25ec:	91 11       	cpse	r25, r1
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <task5+0x72>
  {
	  
	      RetVal=ESPAsServer();
    25f0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ESPAsServer>
	  
		if(RetVal==ESP_CmdSndOK)
    25f4:	81 11       	cpse	r24, r1
    25f6:	77 c0       	rjmp	.+238    	; 0x26e6 <task5+0x14e>
		{
			ESP_flags.Server_flag=1;
    25f8:	80 91 7a 04 	lds	r24, 0x047A
    25fc:	84 60       	ori	r24, 0x04	; 4
    25fe:	80 93 7a 04 	sts	0x047A, r24
			 done=1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	80 93 7b 04 	sts	0x047B, r24
    2608:	76 c0       	rjmp	.+236    	; 0x26f6 <task5+0x15e>
		}
	 
  }
  else if(ESP_flags.Request_Flag==0 && done ==1)
    260a:	83 fd       	sbrc	r24, 3
    260c:	12 c0       	rjmp	.+36     	; 0x2632 <task5+0x9a>
    260e:	80 91 7b 04 	lds	r24, 0x047B
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	09 f0       	breq	.+2      	; 0x2618 <task5+0x80>
    2616:	67 c0       	rjmp	.+206    	; 0x26e6 <task5+0x14e>
  {
	  //uart_string("DONE");
	  if(RetVal==RequestWait())
    2618:	0e 94 55 03 	call	0x6aa	; 0x6aa <RequestWait>
    261c:	81 11       	cpse	r24, r1
    261e:	63 c0       	rjmp	.+198    	; 0x26e6 <task5+0x14e>
	  {
		  ESP_flags.Request_Flag=1;
    2620:	80 91 7a 04 	lds	r24, 0x047A
    2624:	88 60       	ori	r24, 0x08	; 8
    2626:	80 93 7a 04 	sts	0x047A, r24
		  done =2;
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	80 93 7b 04 	sts	0x047B, r24
    2630:	62 c0       	rjmp	.+196    	; 0x26f6 <task5+0x15e>
	  }
  }
   
  else if(ESP_flags.Request_Flag==1&& done ==2)
    2632:	80 91 7b 04 	lds	r24, 0x047B
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	09 f0       	breq	.+2      	; 0x263c <task5+0xa4>
    263a:	55 c0       	rjmp	.+170    	; 0x26e6 <task5+0x14e>
  {
	  
      CheckInput();
    263c:	0e 94 ef 02 	call	0x5de	; 0x5de <CheckInput>
	 if(enable()==1)
    2640:	0e 94 7d 03 	call	0x6fa	; 0x6fa <enable>
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	09 f0       	breq	.+2      	; 0x264a <task5+0xb2>
    2648:	4e c0       	rjmp	.+156    	; 0x26e6 <task5+0x14e>
	 {
//RTE_WriteBufferUart("HERE");
	 Tc++;
    264a:	80 91 7c 04 	lds	r24, 0x047C
    264e:	90 91 7d 04 	lds	r25, 0x047D
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	90 93 7d 04 	sts	0x047D, r25
    2658:	80 93 7c 04 	sts	0x047C, r24
	 if(send==0)
	 {
	   
	 }
	 
	  if(Tc>400)
    265c:	81 39       	cpi	r24, 0x91	; 145
    265e:	91 40       	sbci	r25, 0x01	; 1
    2660:	08 f4       	brcc	.+2      	; 0x2664 <task5+0xcc>
    2662:	41 c0       	rjmp	.+130    	; 0x26e6 <task5+0x14e>
	 {  
		RetVal=SendData(35);
    2664:	83 e2       	ldi	r24, 0x23	; 35
    2666:	0e 94 db 02 	call	0x5b6	; 0x5b6 <SendData>
		if(/* &&*/ ESP_CmdSndOK==RetVal)
    266a:	81 11       	cpse	r24, r1
    266c:	3c c0       	rjmp	.+120    	; 0x26e6 <task5+0x14e>
		{
			send=0;
    266e:	10 92 7e 04 	sts	0x047E, r1
			Tc=0;
    2672:	10 92 7d 04 	sts	0x047D, r1
    2676:	10 92 7c 04 	sts	0x047C, r1
			char val[4]="255";
    267a:	82 e3       	ldi	r24, 0x32	; 50
    267c:	95 e3       	ldi	r25, 0x35	; 53
    267e:	a5 e3       	ldi	r26, 0x35	; 53
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	9a 83       	std	Y+2, r25	; 0x02
    2686:	ab 83       	std	Y+3, r26	; 0x03
    2688:	bc 83       	std	Y+4, r27	; 0x04
			val[3]='\0';
			if(quality==100)
    268a:	80 91 53 04 	lds	r24, 0x0453
    268e:	84 36       	cpi	r24, 0x64	; 100
    2690:	11 f5       	brne	.+68     	; 0x26d6 <task5+0x13e>
			{
			
			val[3]='\0';
			num2CharArray(SensorValue,val);
    2692:	be 01       	movw	r22, r28
    2694:	6f 5f       	subi	r22, 0xFF	; 255
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	80 91 5b 04 	lds	r24, 0x045B
    269c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <num2CharArray>
			RTE_WriteBufferUart("Water Level Monitor");	
    26a0:	80 e1       	ldi	r24, 0x10	; 16
    26a2:	93 e0       	ldi	r25, 0x03	; 3
    26a4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
            RTE_WriteBufferUart("\n");
    26a8:	8d ea       	ldi	r24, 0xAD	; 173
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
			RTE_WriteBufferUart("1.Level");	
    26b0:	84 e2       	ldi	r24, 0x24	; 36
    26b2:	93 e0       	ldi	r25, 0x03	; 3
    26b4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
			RTE_WriteBufferUart("2.Debug");
    26b8:	8c e2       	ldi	r24, 0x2C	; 44
    26ba:	93 e0       	ldi	r25, 0x03	; 3
    26bc:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
			RTE_WriteBufferUart("\n");
    26c0:	8d ea       	ldi	r24, 0xAD	; 173
    26c2:	92 e0       	ldi	r25, 0x02	; 2
    26c4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
			done=3;
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	80 93 7b 04 	sts	0x047B, r24
			EspConnected=1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 7f 04 	sts	0x047F, r24
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <task5+0x14e>
			//printBuffer();
			}
			else
			{
			RTE_WriteBufferUart(val);
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
			RTE_WriteBufferUart("\n");	
    26de:	8d ea       	ldi	r24, 0xAD	; 173
    26e0:	92 e0       	ldi	r25, 0x02	; 2
    26e2:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>

	 }
	 }

  }
	 if(done==3)
    26e6:	80 91 7b 04 	lds	r24, 0x047B
    26ea:	83 30       	cpi	r24, 0x03	; 3
    26ec:	21 f4       	brne	.+8      	; 0x26f6 <task5+0x15e>
	 {
		 task6(0);
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <task6>
	 }
  if(ESP_CmdSndOK==WifiDisconnectCheck())
    26f6:	0e 94 c0 01 	call	0x380	; 0x380 <WifiDisconnectCheck>
    26fa:	81 11       	cpse	r24, r1
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <task5+0x184>
  {
	  ConnectionLost=1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 79 04 	sts	0x0479, r24
	  SetBlink(PIN_OUT1,0x3028,B);
    2704:	40 e0       	ldi	r20, 0x00	; 0
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	68 e2       	ldi	r22, 0x28	; 40
    270a:	70 e3       	ldi	r23, 0x30	; 48
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
	  RTE_WriteBufferUart("HEREOff\n");
    2714:	84 e3       	ldi	r24, 0x34	; 52
    2716:	93 e0       	ldi	r25, 0x03	; 3
    2718:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
  }
 }
   	 if(ESP_CmdSndOK==ConnectCommand())
    271c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ConnectCommand>
    2720:	81 11       	cpse	r24, r1
    2722:	16 c0       	rjmp	.+44     	; 0x2750 <task5+0x1b8>
   	 {
	   	 RTE_WriteBufferUart("HEREON\n");
    2724:	8d e3       	ldi	r24, 0x3D	; 61
    2726:	93 e0       	ldi	r25, 0x03	; 3
    2728:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
	   	 ConnectionLost=0;
    272c:	10 92 79 04 	sts	0x0479, r1
	   	 ESP_flags.Server_flag=0;
    2730:	80 91 7a 04 	lds	r24, 0x047A
	   	 ESP_flags.Request_Flag=0;
    2734:	8b 7f       	andi	r24, 0xFB	; 251
    2736:	87 7f       	andi	r24, 0xF7	; 247
    2738:	80 93 7a 04 	sts	0x047A, r24
	   	 done=0;
    273c:	10 92 7b 04 	sts	0x047B, r1
	   	 SetBlink(PIN_OUT1,0x3000,B);
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	70 e3       	ldi	r23, 0x30	; 48
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 5c 00 	call	0xb8	; 0xb8 <SetBlink>
   	 }
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

0000275e <task1Open>:
	return 0;
}
uint16_t task1Open(void)
{

	PinOutConfig(0,PIN_OUT2,C);
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	PinOutConfig(0,PIN_OUT3,C);
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	62 e0       	ldi	r22, 0x02	; 2
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	PinOutConfig(1,PIN_OUT1,B);
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	//uart_string("In open 1");

	return 0;
}
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	08 95       	ret

00002782 <task2Open>:
uint16_t task2Open(void)
{

	//uart_string("In open 2");
	PinOutConfig(1,PIN_OUT2,B);
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	PinOutConfig(1,PIN_OUT1,B);
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	PinOutConfig(1,PIN_OUT8,D);
    2796:	42 e0       	ldi	r20, 0x02	; 2
    2798:	67 e0       	ldi	r22, 0x07	; 7
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	
	return 0;
}
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	08 95       	ret

000027a6 <task3Open>:
uint16_t task3Open(void)
{
	uart_string("In open 3");
    27a6:	85 e4       	ldi	r24, 0x45	; 69
    27a8:	93 e0       	ldi	r25, 0x03	; 3
    27aa:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_string>
	uart_num(countSize());
    27ae:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <countSize>
    27b2:	0e 94 c0 07 	call	0xf80	; 0xf80 <uart_num>
	return 0;
}
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	08 95       	ret

000027bc <task4Open>:
uint16_t task4Open(void)
{
	static uint16_t tracker;
	tracker++;
    27bc:	80 91 85 04 	lds	r24, 0x0485
    27c0:	90 91 86 04 	lds	r25, 0x0486
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	90 93 86 04 	sts	0x0486, r25
    27ca:	80 93 85 04 	sts	0x0485, r24
	if(tracker>500)
    27ce:	85 3f       	cpi	r24, 0xF5	; 245
    27d0:	91 40       	sbci	r25, 0x01	; 1
    27d2:	40 f0       	brcs	.+16     	; 0x27e4 <task4Open+0x28>
	{
	  RTE_WriteBufferUart("open4");	
    27d4:	8f e4       	ldi	r24, 0x4F	; 79
    27d6:	93 e0       	ldi	r25, 0x03	; 3
    27d8:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Rte_Uart_WriteBuffer>
	  //uart_string("open4c");
	  tracker=0;
    27dc:	10 92 86 04 	sts	0x0486, r1
    27e0:	10 92 85 04 	sts	0x0485, r1
	}
	
	PinOutConfig(0,PIN_OUT3,B);
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	62 e0       	ldi	r22, 0x02	; 2
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	PinOutConfig(1,PIN_OUT7,D);
    27ee:	42 e0       	ldi	r20, 0x02	; 2
    27f0:	66 e0       	ldi	r22, 0x06	; 6
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	0e 94 52 06 	call	0xca4	; 0xca4 <PinOutConfig>
	PinOutput(1,PIN_OUT3,B);
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	PinOutput(0,PIN_OUT7,D);
    2802:	42 e0       	ldi	r20, 0x02	; 2
    2804:	66 e0       	ldi	r22, 0x06	; 6
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	0e 94 79 06 	call	0xcf2	; 0xcf2 <PinOutput>
	return 0;
}
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	08 95       	ret

00002812 <task5Open>:

uint16_t task5Open(void)
{
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	00 d0       	rcall	.+0      	; 0x2818 <task5Open+0x6>
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    281c:	2f e7       	ldi	r18, 0x7F	; 127
    281e:	8a e1       	ldi	r24, 0x1A	; 26
    2820:	96 e0       	ldi	r25, 0x06	; 6
    2822:	21 50       	subi	r18, 0x01	; 1
    2824:	80 40       	sbci	r24, 0x00	; 0
    2826:	90 40       	sbci	r25, 0x00	; 0
    2828:	e1 f7       	brne	.-8      	; 0x2822 <task5Open+0x10>
    282a:	00 c0       	rjmp	.+0      	; 0x282c <task5Open+0x1a>
    282c:	00 00       	nop
	_delay_ms(2000);
	uart_init();
    282e:	0e 94 5e 07 	call	0xebc	; 0xebc <uart_init>
	PushEventInterface(125,ESPreadvalue,0,0);
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	61 eb       	ldi	r22, 0xB1	; 177
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	8d e7       	ldi	r24, 0x7D	; 125
    283e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
	PushEventInterface(175,SignalHandlerFunc,0,0);
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	61 e8       	ldi	r22, 0x81	; 129
    284a:	7d e0       	ldi	r23, 0x0D	; 13
    284c:	8f ea       	ldi	r24, 0xAF	; 175
    284e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <PushEventInterface>
	uint16_t Address;
	Address=task6;
    2852:	8c ec       	ldi	r24, 0xCC	; 204
    2854:	9f e0       	ldi	r25, 0x0F	; 15
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
	ESPCallBack(&Address);
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	0e 94 bc 03 	call	0x778	; 0x778 <ESPCallBack>
	OutPutVariableRegister(&SensorValue,1,0);
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	8b e5       	ldi	r24, 0x5B	; 91
    2868:	94 e0       	ldi	r25, 0x04	; 4
    286a:	0e 94 23 0c 	call	0x1846	; 0x1846 <OutPutVariableRegister>
	uart_num(point[0]);
	uart_num(point[1]);
	uart_num(point[2]);
	uart_num(point[3]);*/
	static Nvm_T_TankOverflow Tankov;
	ESP_Init();
    286e:	0e 94 4a 01 	call	0x294	; 0x294 <ESP_Init>
	static uint8_t testnvm=9;
	//Tankov.Tank=2;
	a.LargestValue=52;
    2872:	84 e3       	ldi	r24, 0x34	; 52
    2874:	80 93 87 04 	sts	0x0487, r24
	f.LargestValue=48;
    2878:	80 e3       	ldi	r24, 0x30	; 48
    287a:	80 93 78 04 	sts	0x0478, r24
	c.LargestValue=54;
    287e:	86 e3       	ldi	r24, 0x36	; 54
    2880:	80 93 88 04 	sts	0x0488, r24
	uart_num(GetCurrentEvent()->ptr[0]);*/
	//uart_string("here\n");
	//PrintEvents();
	//uart_string("\n");
	return 0;
}
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <HookupTasks>:
	//uart_num(event);
	//uart_string("\n");
	//if(event==0x01)
	//{

		if(UartEvents==0x01)
    2892:	80 91 a7 04 	lds	r24, 0x04A7
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	11 f0       	breq	.+4      	; 0x289e <HookupTasks+0xc>
			//DebugMode();
		}
		else
		{
		   // ESPreadvalue(PopInterface);
		    checkRecievedData();	
    289a:	0e 94 80 03 	call	0x700	; 0x700 <checkRecievedData>
    289e:	08 95       	ret

000028a0 <NonPeriodicTaskFuncSet>:
			}
		}
		return 0;
}
uint16_t NonPeriodicTaskFuncSet(void *ptr)
{
    28a0:	fc 01       	movw	r30, r24
	uint8_t *data;
	uint8_t funcpoint[2];
	data=(uint8_t*)ptr;
	NonPeriodictaskArr[data[0]].taskfucntion=(funPtrBase*)(((uint16_t*)(data+2))[0]);
    28a2:	80 81       	ld	r24, Z
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	dc 01       	movw	r26, r24
    28a8:	aa 0f       	add	r26, r26
    28aa:	bb 1f       	adc	r27, r27
    28ac:	aa 0f       	add	r26, r26
    28ae:	bb 1f       	adc	r27, r27
    28b0:	8a 0f       	add	r24, r26
    28b2:	9b 1f       	adc	r25, r27
    28b4:	dc 01       	movw	r26, r24
    28b6:	a7 57       	subi	r26, 0x77	; 119
    28b8:	bb 4f       	sbci	r27, 0xFB	; 251
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	8d 93       	st	X+, r24
    28c0:	9c 93       	st	X, r25
	NonPeriodictaskArr[data[0]].On=data[1];
    28c2:	21 81       	ldd	r18, Z+1	; 0x01
    28c4:	80 81       	ld	r24, Z
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	dc 01       	movw	r26, r24
    28ca:	aa 0f       	add	r26, r26
    28cc:	bb 1f       	adc	r27, r27
    28ce:	aa 0f       	add	r26, r26
    28d0:	bb 1f       	adc	r27, r27
    28d2:	8a 0f       	add	r24, r26
    28d4:	9b 1f       	adc	r25, r27
    28d6:	dc 01       	movw	r26, r24
    28d8:	a7 57       	subi	r26, 0x77	; 119
    28da:	bb 4f       	sbci	r27, 0xFB	; 251
    28dc:	12 96       	adiw	r26, 0x02	; 2
    28de:	2c 93       	st	X, r18
	NonPeriodictaskArr[data[0]].ptr=ptr;	
    28e0:	80 81       	ld	r24, Z
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	dc 01       	movw	r26, r24
    28e6:	aa 0f       	add	r26, r26
    28e8:	bb 1f       	adc	r27, r27
    28ea:	aa 0f       	add	r26, r26
    28ec:	bb 1f       	adc	r27, r27
    28ee:	8a 0f       	add	r24, r26
    28f0:	9b 1f       	adc	r25, r27
    28f2:	dc 01       	movw	r26, r24
    28f4:	a7 57       	subi	r26, 0x77	; 119
    28f6:	bb 4f       	sbci	r27, 0xFB	; 251
    28f8:	14 96       	adiw	r26, 0x04	; 4
    28fa:	fc 93       	st	X, r31
    28fc:	ee 93       	st	-X, r30
    28fe:	13 97       	sbiw	r26, 0x03	; 3
}
    2900:	08 95       	ret

00002902 <BaseHandler>:
uint16_t BaseHandler(void *ptr)
{
	uint8_t *data;
	data=(uint8_t*)ptr;
    taskfuncbase[*data-1].On=1;
    2902:	fc 01       	movw	r30, r24
    2904:	80 81       	ld	r24, Z
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	fc 01       	movw	r30, r24
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	e8 1b       	sub	r30, r24
    291a:	f9 0b       	sbc	r31, r25
    291c:	e5 59       	subi	r30, 0x95	; 149
    291e:	fd 4f       	sbci	r31, 0xFD	; 253
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	85 83       	std	Z+5, r24	; 0x05
	//uart_string("bhandler\n");
}
    2924:	08 95       	ret

00002926 <tasksBase>:
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
{
    2926:	7f 92       	push	r7
    2928:	8f 92       	push	r8
    292a:	9f 92       	push	r9
    292c:	af 92       	push	r10
    292e:	bf 92       	push	r11
    2930:	cf 92       	push	r12
    2932:	df 92       	push	r13
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	00 d0       	rcall	.+0      	; 0x2942 <tasksBase+0x1c>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <tasksBase+0x1e>
    2944:	1f 92       	push	r1
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
    294a:	80 91 a4 04 	lds	r24, 0x04A4
    294e:	81 11       	cpse	r24, r1
    2950:	48 c0       	rjmp	.+144    	; 0x29e2 <tasksBase+0xbc>
	{
		for(int i=0;i<2;i++)
		{
			if(taskfuncbase[i].On==dON)
    2952:	80 91 70 02 	lds	r24, 0x0270
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	29 f4       	brne	.+10     	; 0x2964 <tasksBase+0x3e>
			{
				
				taskfuncbase[i].Openfucntion();
    295a:	e0 91 6d 02 	lds	r30, 0x026D
    295e:	f0 91 6e 02 	lds	r31, 0x026E
    2962:	09 95       	icall
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<2;i++)
		{
			if(taskfuncbase[i].On==dON)
    2964:	80 91 77 02 	lds	r24, 0x0277
    2968:	81 30       	cpi	r24, 0x01	; 1
    296a:	29 f4       	brne	.+10     	; 0x2976 <tasksBase+0x50>
			{
				
				taskfuncbase[i].Openfucntion();
    296c:	e0 91 74 02 	lds	r30, 0x0274
    2970:	f0 91 75 02 	lds	r31, 0x0275
    2974:	09 95       	icall
			}
		}
		opentaskbase=1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 a4 04 	sts	0x04A4, r24
    297c:	32 c0       	rjmp	.+100    	; 0x29e2 <tasksBase+0xbc>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    297e:	58 01       	movw	r10, r16
		
	}
	
	for(int i=0;i<2;i++)
	{
		taskfuncbase[i].counter++;
    2980:	f8 01       	movw	r30, r16
    2982:	80 81       	ld	r24, Z
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	80 83       	st	Z, r24
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    2988:	f7 01       	movw	r30, r14
    298a:	90 81       	ld	r25, Z
    298c:	91 30       	cpi	r25, 0x01	; 1
    298e:	01 f5       	brne	.+64     	; 0x29d0 <tasksBase+0xaa>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    2990:	f8 01       	movw	r30, r16
    2992:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<2;i++)
	{
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    2994:	90 81       	ld	r25, Z
    2996:	89 17       	cp	r24, r25
    2998:	d8 f0       	brcs	.+54     	; 0x29d0 <tasksBase+0xaa>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    299a:	f8 01       	movw	r30, r16
    299c:	36 97       	sbiw	r30, 0x06	; 6
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
		{
			uint16_t Temp;
			uint8_t arr[3];
			Temp=taskfuncbase[i].taskfucntion();
    299e:	01 90       	ld	r0, Z+
    29a0:	f0 81       	ld	r31, Z
    29a2:	e0 2d       	mov	r30, r0
    29a4:	09 95       	icall
    29a6:	9d 83       	std	Y+5, r25	; 0x05
    29a8:	8c 83       	std	Y+4, r24	; 0x04
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	80 fd       	sbrc	r24, 0
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <tasksBase+0xa6>
			{
				//uart_string("done");
				arr[0]=1;
    29b0:	79 82       	std	Y+1, r7	; 0x01
				arr[1]=(((uint8_t*)&Temp)[1]>>1)&0x7f;
    29b2:	86 95       	lsr	r24
    29b4:	8a 83       	std	Y+2, r24	; 0x02
				arr[2]=((uint8_t*)&Temp)[0];
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	8b 83       	std	Y+3, r24	; 0x03
				callbackarrayfuc func;
				func=callbackgetFunction(2);
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <callbackgetFunction>
    29c0:	fc 01       	movw	r30, r24
				func(arr);
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	09 95       	icall
				taskfuncbase[i].On=0;
    29c8:	f7 01       	movw	r30, r14
    29ca:	10 82       	st	Z, r1
			}
			taskfuncbase[i].counter=0;
    29cc:	f5 01       	movw	r30, r10
    29ce:	10 82       	st	Z, r1
    29d0:	09 5f       	subi	r16, 0xF9	; 249
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	f7 e0       	ldi	r31, 0x07	; 7
    29d6:	ef 0e       	add	r14, r31
    29d8:	f1 1c       	adc	r15, r1
		}
		opentaskbase=1;
		
	}
	
	for(int i=0;i<2;i++)
    29da:	0c 15       	cp	r16, r12
    29dc:	1d 05       	cpc	r17, r13
    29de:	79 f6       	brne	.-98     	; 0x297e <tasksBase+0x58>
    29e0:	11 c0       	rjmp	.+34     	; 0x2a04 <tasksBase+0xde>
    29e2:	01 e7       	ldi	r16, 0x71	; 113
    29e4:	12 e0       	ldi	r17, 0x02	; 2
    29e6:	0f 2e       	mov	r0, r31
    29e8:	f0 e7       	ldi	r31, 0x70	; 112
    29ea:	ef 2e       	mov	r14, r31
    29ec:	f2 e0       	ldi	r31, 0x02	; 2
    29ee:	ff 2e       	mov	r15, r31
    29f0:	f0 2d       	mov	r31, r0
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    29f2:	0f 2e       	mov	r0, r31
    29f4:	ff e7       	ldi	r31, 0x7F	; 127
    29f6:	cf 2e       	mov	r12, r31
    29f8:	f2 e0       	ldi	r31, 0x02	; 2
    29fa:	df 2e       	mov	r13, r31
    29fc:	f0 2d       	mov	r31, r0
			Temp=taskfuncbase[i].taskfucntion();
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
			{
				//uart_string("done");
				arr[0]=1;
    29fe:	77 24       	eor	r7, r7
    2a00:	73 94       	inc	r7
    2a02:	bd cf       	rjmp	.-134    	; 0x297e <tasksBase+0x58>
			//UartHandlerMain();
		}
	}
	
	return 0;
}
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	bf 90       	pop	r11
    2a24:	af 90       	pop	r10
    2a26:	9f 90       	pop	r9
    2a28:	8f 90       	pop	r8
    2a2a:	7f 90       	pop	r7
    2a2c:	08 95       	ret

00002a2e <tasks>:
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
{
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
	static uint8_t opentask=0;
	if(opentask==0)
    2a3a:	80 91 a2 04 	lds	r24, 0x04A2
    2a3e:	81 11       	cpse	r24, r1
    2a40:	3e c0       	rjmp	.+124    	; 0x2abe <tasks+0x90>
	{
		callbackSetFunction(1,BaseHandler);
    2a42:	61 e8       	ldi	r22, 0x81	; 129
    2a44:	74 e1       	ldi	r23, 0x14	; 20
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <callbackSetFunction>
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
    2a4c:	60 e5       	ldi	r22, 0x50	; 80
    2a4e:	74 e1       	ldi	r23, 0x14	; 20
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <callbackSetFunction>
		Nvm_TableInit();
    2a56:	0e 94 30 0c 	call	0x1860	; 0x1860 <Nvm_TableInit>
    2a5a:	ce e7       	ldi	r28, 0x7E	; 126
    2a5c:	d2 e0       	ldi	r29, 0x02	; 2
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a5e:	0f ea       	ldi	r16, 0xAF	; 175
    2a60:	12 e0       	ldi	r17, 0x02	; 2
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
    2a62:	88 81       	ld	r24, Y
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	31 f4       	brne	.+12     	; 0x2a74 <tasks+0x46>
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a68:	fe 01       	movw	r30, r28
    2a6a:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
			{
				
				taskfunc[i].Openfucntion();
    2a6c:	01 90       	ld	r0, Z+
    2a6e:	f0 81       	ld	r31, Z
    2a70:	e0 2d       	mov	r30, r0
    2a72:	09 95       	icall
    2a74:	27 96       	adiw	r28, 0x07	; 7
	if(opentask==0)
	{
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
    2a76:	c0 17       	cp	r28, r16
    2a78:	d1 07       	cpc	r29, r17
    2a7a:	99 f7       	brne	.-26     	; 0x2a62 <tasks+0x34>
			{
				
				taskfunc[i].Openfucntion();
			}
		}
		opentask=1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	80 93 a2 04 	sts	0x04A2, r24
		openDone=1;
    2a82:	80 93 a3 04 	sts	0x04A3, r24
		UartHandlerInit();
    2a86:	0e 94 c4 03 	call	0x788	; 0x788 <UartHandlerInit>
    2a8a:	19 c0       	rjmp	.+50     	; 0x2abe <tasks+0x90>
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
    2a8c:	88 81       	ld	r24, Y
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	88 83       	st	Y, r24
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a92:	fe 01       	movw	r30, r28
    2a94:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    2a96:	90 81       	ld	r25, Z
    2a98:	91 30       	cpi	r25, 0x01	; 1
    2a9a:	61 f4       	brne	.+24     	; 0x2ab4 <tasks+0x86>
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    2aa0:	90 81       	ld	r25, Z
    2aa2:	89 17       	cp	r24, r25
    2aa4:	38 f0       	brcs	.+14     	; 0x2ab4 <tasks+0x86>
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	36 97       	sbiw	r30, 0x06	; 6
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
		{
			taskfunc[i].taskfucntion();
    2aaa:	01 90       	ld	r0, Z+
    2aac:	f0 81       	ld	r31, Z
    2aae:	e0 2d       	mov	r30, r0
    2ab0:	09 95       	icall
			taskfunc[i].counter=0;
    2ab2:	18 82       	st	Y, r1
    2ab4:	27 96       	adiw	r28, 0x07	; 7
		openDone=1;
		UartHandlerInit();
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
    2ab6:	ce 15       	cp	r28, r14
    2ab8:	df 05       	cpc	r29, r15
    2aba:	41 f7       	brne	.-48     	; 0x2a8c <tasks+0x5e>
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <tasks+0xa2>
    2abe:	cf e7       	ldi	r28, 0x7F	; 127
    2ac0:	d2 e0       	ldi	r29, 0x02	; 2
	                    {BaseTask2,BaseTask2Open,1,dOFF,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    2ac2:	0f 2e       	mov	r0, r31
    2ac4:	f0 eb       	ldi	r31, 0xB0	; 176
    2ac6:	ef 2e       	mov	r14, r31
    2ac8:	f2 e0       	ldi	r31, 0x02	; 2
    2aca:	ff 2e       	mov	r15, r31
    2acc:	f0 2d       	mov	r31, r0
    2ace:	de cf       	rjmp	.-68     	; 0x2a8c <tasks+0x5e>
			taskfunc[i].counter=0;
			
			//UartHandlerMain();
		}
	}
    ReadEveryValueADC();
    2ad0:	0e 94 9f 08 	call	0x113e	; 0x113e <ReadEveryValueADC>
	
	return 0;
}
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <NonPeriodicTaskFuncCall>:
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	cb e8       	ldi	r28, 0x8B	; 139
    2af0:	d4 e0       	ldi	r29, 0x04	; 4
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    2af2:	04 ea       	ldi	r16, 0xA4	; 164
    2af4:	14 e0       	ldi	r17, 0x04	; 4
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
		{
			tasktime++;
    2af6:	80 91 a5 04 	lds	r24, 0x04A5
    2afa:	90 91 a6 04 	lds	r25, 0x04A6
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	90 93 a6 04 	sts	0x04A6, r25
    2b04:	80 93 a5 04 	sts	0x04A5, r24
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
    2b08:	28 81       	ld	r18, Y
    2b0a:	21 30       	cpi	r18, 0x01	; 1
    2b0c:	79 f4       	brne	.+30     	; 0x2b2c <NonPeriodicTaskFuncCall+0x46>
    2b0e:	85 38       	cpi	r24, 0x85	; 133
    2b10:	93 40       	sbci	r25, 0x03	; 3
    2b12:	60 f0       	brcs	.+24     	; 0x2b2c <NonPeriodicTaskFuncCall+0x46>
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    2b14:	fe 01       	movw	r30, r28
    2b16:	32 97       	sbiw	r30, 0x02	; 2
		for(int i=0;i<5;i++)
		{
			tasktime++;
			if(NonPeriodictaskArr[i].On==dON&&tasktime>900  )
			{
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
    2b18:	01 90       	ld	r0, Z+
    2b1a:	f0 81       	ld	r31, Z
    2b1c:	e0 2d       	mov	r30, r0
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	09 95       	icall
				tasktime=0;			
    2b24:	10 92 a6 04 	sts	0x04A6, r1
    2b28:	10 92 a5 04 	sts	0x04A5, r1
    2b2c:	25 96       	adiw	r28, 0x05	; 5
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
    2b2e:	c0 17       	cp	r28, r16
    2b30:	d1 07       	cpc	r29, r17
    2b32:	09 f7       	brne	.-62     	; 0x2af6 <NonPeriodicTaskFuncCall+0x10>
				//UartHandlerMain();
				//uart_string("NPT call\n");
			}
		}
		return 0;
}
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	08 95       	ret

00002b42 <ApplicationHookUP>:
    }
	}
}
void ApplicationHookUP(uint8_t * event)
{
	if(openDone==1)
    2b42:	20 91 a3 04 	lds	r18, 0x04A3
    2b46:	21 30       	cpi	r18, 0x01	; 1
    2b48:	11 f4       	brne	.+4      	; 0x2b4e <ApplicationHookUP+0xc>
	{
		HookupTasks(event);
    2b4a:	0e 94 49 14 	call	0x2892	; 0x2892 <HookupTasks>
		//DataTransmit();
	}
	if(UartEvents==1)
    2b4e:	80 91 a7 04 	lds	r24, 0x04A7
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	11 f4       	brne	.+4      	; 0x2b5a <ApplicationHookUP+0x18>
	{
		taskfunc[5].On=1;
    2b56:	80 93 a1 02 	sts	0x02A1, r24
    2b5a:	08 95       	ret

00002b5c <RTEModuleFirstCh>:
#ifndef RTE_ASW_H_
#define RTE_ASW_H_
#include <avr/io.h>
extern void RTEModuleFirstCh(uint16_t *ChannelValue)
{
    Rte_Base2AswLAYERADCReadConnector(ChannelValue)	;
    2b5c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <Rte_Base2AswLAYERADCReadConnector>
    2b60:	08 95       	ret

00002b62 <Rte_Uart_WriteBuffer>:
{
	Rte_recievebuffer0.ustring=ustring;
}*/
void Rte_Uart_WriteBuffer(unsigned char *ustring)
{
	Rte_Base2AswLayerUartWriteBuffer(ustring);	
    2b62:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <Rte_Base2AswLayerUartWriteBuffer>
    2b66:	08 95       	ret

00002b68 <RTE_BaseWriteCh1Data>:
#include "..\MddleLayer\ADCread.h"
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\MddleLayer\UartTransmit.h"

extern void RTE_BaseWriteCh1Data(uint16_t *ChannelValue)
{
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	ec 01       	movw	r28, r24
	//uart_num(*ChannelValue);
	//*ChannelValue=2;
	uint16_t val=*ChannelValue;
	*ChannelValue=GetADC_Value(val);
    2b6e:	88 81       	ld	r24, Y
    2b70:	99 81       	ldd	r25, Y+1	; 0x01
    2b72:	0e 94 1d 09 	call	0x123a	; 0x123a <GetADC_Value>
    2b76:	99 83       	std	Y+1, r25	; 0x01
    2b78:	88 83       	st	Y, r24
}
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	08 95       	ret

00002b80 <Rte_BaseWriteUartData>:
	*PingEcho=InterfacePulse(val);
}

void Rte_BaseWriteUartData(unsigned char *Ustring)
{
	FillUartBuffer(Ustring);
    2b80:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <FillUartBuffer>
    2b84:	08 95       	ret

00002b86 <Rte_Base2AswLAYERADCReadConnector>:
 *  Author: Nikhil
 */ 
#include <avr/io.h>
void Rte_Base2AswLAYERADCReadConnector(uint16_t *DATA)
{
	RTE_BaseWriteCh1Data(DATA);
    2b86:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <RTE_BaseWriteCh1Data>
    2b8a:	08 95       	ret

00002b8c <Rte_Base2AswLayerUartWriteBuffer>:
	Rte_BaseWritePingEchoData(DATA);
}

Rte_Base2AswLayerUartWriteBuffer(unsigned char *ustring)
{
	Rte_BaseWriteUartData(ustring);
    2b8c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <Rte_BaseWriteUartData>
    2b90:	08 95       	ret

00002b92 <__divmodhi4>:
    2b92:	97 fb       	bst	r25, 7
    2b94:	07 2e       	mov	r0, r23
    2b96:	16 f4       	brtc	.+4      	; 0x2b9c <__divmodhi4+0xa>
    2b98:	00 94       	com	r0
    2b9a:	07 d0       	rcall	.+14     	; 0x2baa <__divmodhi4_neg1>
    2b9c:	77 fd       	sbrc	r23, 7
    2b9e:	09 d0       	rcall	.+18     	; 0x2bb2 <__divmodhi4_neg2>
    2ba0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <__udivmodhi4>
    2ba4:	07 fc       	sbrc	r0, 7
    2ba6:	05 d0       	rcall	.+10     	; 0x2bb2 <__divmodhi4_neg2>
    2ba8:	3e f4       	brtc	.+14     	; 0x2bb8 <__divmodhi4_exit>

00002baa <__divmodhi4_neg1>:
    2baa:	90 95       	com	r25
    2bac:	81 95       	neg	r24
    2bae:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb0:	08 95       	ret

00002bb2 <__divmodhi4_neg2>:
    2bb2:	70 95       	com	r23
    2bb4:	61 95       	neg	r22
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00002bb8 <__divmodhi4_exit>:
    2bb8:	08 95       	ret

00002bba <__umulhisi3>:
    2bba:	a2 9f       	mul	r26, r18
    2bbc:	b0 01       	movw	r22, r0
    2bbe:	b3 9f       	mul	r27, r19
    2bc0:	c0 01       	movw	r24, r0
    2bc2:	a3 9f       	mul	r26, r19
    2bc4:	01 d0       	rcall	.+2      	; 0x2bc8 <__umulhisi3+0xe>
    2bc6:	b2 9f       	mul	r27, r18
    2bc8:	70 0d       	add	r23, r0
    2bca:	81 1d       	adc	r24, r1
    2bcc:	11 24       	eor	r1, r1
    2bce:	91 1d       	adc	r25, r1
    2bd0:	08 95       	ret

00002bd2 <__udivmodhi4>:
    2bd2:	aa 1b       	sub	r26, r26
    2bd4:	bb 1b       	sub	r27, r27
    2bd6:	51 e1       	ldi	r21, 0x11	; 17
    2bd8:	07 c0       	rjmp	.+14     	; 0x2be8 <__udivmodhi4_ep>

00002bda <__udivmodhi4_loop>:
    2bda:	aa 1f       	adc	r26, r26
    2bdc:	bb 1f       	adc	r27, r27
    2bde:	a6 17       	cp	r26, r22
    2be0:	b7 07       	cpc	r27, r23
    2be2:	10 f0       	brcs	.+4      	; 0x2be8 <__udivmodhi4_ep>
    2be4:	a6 1b       	sub	r26, r22
    2be6:	b7 0b       	sbc	r27, r23

00002be8 <__udivmodhi4_ep>:
    2be8:	88 1f       	adc	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	5a 95       	dec	r21
    2bee:	a9 f7       	brne	.-22     	; 0x2bda <__udivmodhi4_loop>
    2bf0:	80 95       	com	r24
    2bf2:	90 95       	com	r25
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	08 95       	ret

00002bfa <strcmp>:
    2bfa:	fb 01       	movw	r30, r22
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	8d 91       	ld	r24, X+
    2c00:	01 90       	ld	r0, Z+
    2c02:	80 19       	sub	r24, r0
    2c04:	01 10       	cpse	r0, r1
    2c06:	d9 f3       	breq	.-10     	; 0x2bfe <strcmp+0x4>
    2c08:	99 0b       	sbc	r25, r25
    2c0a:	08 95       	ret

00002c0c <_exit>:
    2c0c:	f8 94       	cli

00002c0e <__stop_program>:
    2c0e:	ff cf       	rjmp	.-2      	; 0x2c0e <__stop_program>
