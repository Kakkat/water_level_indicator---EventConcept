
water_level_indicator_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027c  00800100  00004072  00004106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f9  0080037c  0080037c  00004382  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00004384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00004b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004cc3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000009b0  00000000  00000000  00004cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b5d3  00000000  00000000  000056a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a78  00000000  00000000  00010c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000040bc  00000000  00000000  000146ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001728  00000000  00000000  000187ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021c2  00000000  00000000  00019ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005471  00000000  00000000  0001c096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008c8  00000000  00000000  00021507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static uint8_t DebugStates;
static uint8_t DebugArrayindex;
static uint8_t populateArray();
static void  DebugBufferCheck();
void DebugMode()
{
       0:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__ctors_end>
       4:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_1>
       8:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>

   switch(DebugStates)
       c:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__vector_3>
      10:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      14:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      18:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
   {   
	   unsigned char data='&';
	   case 0:
	       PopInterface(&data);
      1c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      20:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
		   if(data=='#')
      24:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_9>
      28:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
		   {
			  DebugStates++; 
      2c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      30:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
			  uart_string("IAM0");
      34:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      38:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      3c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
   
}

static uint8_t populateArray()
{
	unsigned char data='&';
      40:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__vector_16>
	uint8_t ret=1;
	PopInterface(&data);
      44:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      48:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_18>
	if(DebugArrayindex<10 && data!='&' )
      4c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      50:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      54:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_21>
	{
	   DebugArray[DebugArrayindex]=data;
      58:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__vector_22>
      5c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
      60:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>
	   DebugArrayindex++;
      64:	0c 94 96 02 	jmp	0x52c	; 0x52c <__bad_interrupt>

00000068 <ssd1306_init_sequence>:
	   uart_char(data);
      68:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
		   }
		   break;
	   case 1:
	      if(populateArray()==0)
		  {
			DebugStates++;
      78:	00 d5 f0 d9 22 da 12 db 20 8d 14 af                 ...."... ...

00000084 <ssd1306xled_font6x8>:
	...
{ 
   static uint8_t debugdat=10;
   switch(DebugArray[0])
   {
	   case '2':
	       if(DebugArray[1]=='E')
      8c:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
		  }
		  break;
	   case 2:
	      DebugBufferCheck();
		  DebugStates=0;
		  DebugArrayindex=0;
      9c:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
					        WriteMax(d[1],0x0f);
				        }
						        if(DigitScrollPos==2)
						        {
							        WriteMax(d[3],num);
							        WriteMax(d[0],5);
      ac:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
							        WriteMax(d[1],8);
							        WriteMax(d[2],0x0f);
      bc:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
						        }
		 DigitScrollPos++;
		}
		else
		{
			DigitScrollPos=0;
      cc:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
		count=0;
	}


	ScanlimitExpand(MaxDispPos);
      dc:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      ec:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      fc:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     10c:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     11c:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     12c:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     13c:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     14c:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     15c:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     16c:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     17c:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     18c:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     19c:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     1ac:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     1bc:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1cc:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     1dc:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1ec:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1fc:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     20c:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     21c:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     22c:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     23c:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     24c:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     25c:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     26c:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     27c:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     28c:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     29c:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

000002ac <PIN>:
     2ac:	23 00 26 00 29 00                                   #.&.).

000002b2 <DDR>:
     2b2:	24 00 27 00 2a 00                                   $.'.*.

000002b8 <Port>:
     2b8:	25 00 28 00 2b 00                                   %.(.+.

000002be <Frames>:
     2be:	08 03 f8 02 e8 02 d8 02 c8 02                       ..........

000002c8 <Frame5>:
     2c8:	5a 03 e6 04 44 03 2e 03 e6 04 e6 04 e6 04 18 03     Z...D...........

000002d8 <Frame4>:
     2d8:	b2 03 e6 04 9c 03 86 03 e6 04 e6 04 e6 04 70 03     ..............p.

000002e8 <Frame3>:
     2e8:	20 04 e6 04 0a 04 f4 03 de 03 e6 04 e6 04 c8 03      ...............

000002f8 <Frame2>:
     2f8:	8e 04 e6 04 78 04 62 04 4c 04 e6 04 e6 04 36 04     ....x.b.L.....6.

00000308 <Frame1>:
     308:	d0 04 e6 04 ba 04 e6 04 e6 04 e6 04 e6 04 a4 04     ................

00000318 <F5ROW8>:
     318:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     328:	20 20 20 20 20 00                                        .

0000032e <F5ROW4>:
     32e:	32 2e 46 75 6c 6c 20 54 61 6e 6b 20 43 6e 74 20     2.Full Tank Cnt 
     33e:	20 20 20 20 20 00                                        .

00000344 <F5ROW3>:
     344:	31 2e 4f 70 72 20 48 72 20 20 20 20 20 20 20 20     1.Opr Hr        
     354:	20 20 20 20 20 00                                        .

0000035a <F5ROW1>:
     35a:	20 20 20 20 20 20 20 20 44 61 69 67 20 20 20 20             Daig    
     36a:	20 20 20 20 20 00                                        .

00000370 <F4ROW8>:
     370:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     380:	20 20 20 20 20 00                                        .

00000386 <F4ROW4>:
     386:	32 2e 54 6f 70 20 6c 65 76 65 6c 20 20 20 20 20     2.Top level     
     396:	20 20 20 20 20 00                                        .

0000039c <F4ROW3>:
     39c:	31 2e 54 61 6e 6b 20 73 69 7a 65 20 20 20 20 20     1.Tank size     
     3ac:	20 20 20 20 20 00                                        .

000003b2 <F4ROW1>:
     3b2:	20 20 20 20 20 20 20 20 4d 6f 74 6f 72 20 20 20             Motor   
     3c2:	20 20 20 20 20 00                                        .

000003c8 <F3ROW8>:
     3c8:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     3d8:	20 20 20 20 20 00                                        .

000003de <F3ROW5>:
     3de:	33 2e 53 65 6d 69 20 20 20 20 20 20 20 20 20 20     3.Semi          
     3ee:	20 20 20 20 20 00                                        .

000003f4 <F3ROW4>:
     3f4:	32 2e 41 75 74 6f 20 20 20 20 20 20 20 20 20 20     2.Auto          
     404:	20 20 20 20 20 00                                        .

0000040a <F3ROW3>:
     40a:	31 2e 4d 61 6e 75 61 6c 20 20 20 20 20 20 20 20     1.Manual        
     41a:	20 20 20 20 20 00                                        .

00000420 <F3ROW1>:
     420:	20 20 20 20 20 20 20 20 4d 6f 64 65 20 20 20 20             Mode    
     430:	20 20 20 20 20 00                                        .

00000436 <F2ROW8>:
     436:	20 20 20 20 20 20 20 20 42 41 43 4b 20 20 20 20             BACK    
     446:	20 20 20 20 20 00                                        .

0000044c <F2ROW5>:
     44c:	33 2e 44 69 61 67 20 20 20 20 20 20 20 20 20 20     3.Diag          
     45c:	20 20 20 20 20 00                                        .

00000462 <F2ROW4>:
     462:	32 2e 53 65 74 74 69 6e 67 73 20 20 20 20 20 20     2.Settings      
     472:	20 20 20 20 20 00                                        .

00000478 <F2ROW3>:
     478:	31 2e 4d 6f 64 65 20 20 20 20 20 20 20 20 20 20     1.Mode          
     488:	20 20 20 20 20 00                                        .

0000048e <F2ROW1>:
     48e:	20 20 20 20 20 20 20 20 4d 45 4e 55 20 20 20 20             MENU    
     49e:	20 20 20 20 20 00                                        .

000004a4 <F1ROW8>:
     4a4:	20 20 20 20 20 20 20 20 4d 45 4e 55 20 20 20 20             MENU    
     4b4:	20 20 20 20 20 00                                        .

000004ba <F1ROW3>:
     4ba:	54 61 6e 6b 20 4c 65 76 65 6c 20 3a 20 20 20 20     Tank Level :    
     4ca:	20 20 20 20 20 00                                        .

000004d0 <F1ROW1>:
     4d0:	20 20 20 20 20 20 20 20 57 4c 43 20 20 20 20 20             WLC     
     4e0:	20 20 20 20 20 00                                        .

000004e6 <FrameBlank>:
     4e6:	20 20 20 20 20 20 20 20 20 20 00 00                           ..

000004f2 <__ctors_end>:
     4f2:	11 24       	eor	r1, r1
     4f4:	1f be       	out	0x3f, r1	; 63
     4f6:	cf ef       	ldi	r28, 0xFF	; 255
     4f8:	d8 e0       	ldi	r29, 0x08	; 8
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	cd bf       	out	0x3d, r28	; 61

000004fe <__do_copy_data>:
     4fe:	13 e0       	ldi	r17, 0x03	; 3
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	e2 e7       	ldi	r30, 0x72	; 114
     506:	f0 e4       	ldi	r31, 0x40	; 64
     508:	02 c0       	rjmp	.+4      	; 0x50e <__do_copy_data+0x10>
     50a:	05 90       	lpm	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	ac 37       	cpi	r26, 0x7C	; 124
     510:	b1 07       	cpc	r27, r17
     512:	d9 f7       	brne	.-10     	; 0x50a <__do_copy_data+0xc>

00000514 <__do_clear_bss>:
     514:	26 e0       	ldi	r18, 0x06	; 6
     516:	ac e7       	ldi	r26, 0x7C	; 124
     518:	b3 e0       	ldi	r27, 0x03	; 3
     51a:	01 c0       	rjmp	.+2      	; 0x51e <.do_clear_bss_start>

0000051c <.do_clear_bss_loop>:
     51c:	1d 92       	st	X+, r1

0000051e <.do_clear_bss_start>:
     51e:	a5 37       	cpi	r26, 0x75	; 117
     520:	b2 07       	cpc	r27, r18
     522:	e1 f7       	brne	.-8      	; 0x51c <.do_clear_bss_loop>
     524:	0e 94 b7 13 	call	0x276e	; 0x276e <main>
     528:	0c 94 37 20 	jmp	0x406e	; 0x406e <_exit>

0000052c <__bad_interrupt>:
     52c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000530 <SetBlink>:

static Ports Prt;
void SetBlink(Pin p,uint16_t Duration /*higher for the id and lower nibble for number of blinks in a second*/,Ports port)
{   
	
	if((Duration&0x00ff)>DurationTime)
     530:	9b 01       	movw	r18, r22
     532:	33 27       	eor	r19, r19
     534:	e0 91 7c 03 	lds	r30, 0x037C
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	e2 17       	cp	r30, r18
     53c:	f3 07       	cpc	r31, r19
     53e:	68 f4       	brcc	.+26     	; 0x55a <SetBlink+0x2a>
	{
			BlinkPin=p;
     540:	80 93 7d 03 	sts	0x037D, r24
			DurationTime=Duration&0x00FF;
     544:	60 93 7c 03 	sts	0x037C, r22
			CurrentBlink=Duration&0xf000;
     548:	66 27       	eor	r22, r22
     54a:	70 7f       	andi	r23, 0xF0	; 240
     54c:	70 93 7f 03 	sts	0x037F, r23
     550:	60 93 7e 03 	sts	0x037E, r22
			Prt=port;
     554:	40 93 80 03 	sts	0x0380, r20
     558:	08 95       	ret
	}
    else if((Duration&0x00ff)==0)
     55a:	23 2b       	or	r18, r19
     55c:	59 f4       	brne	.+22     	; 0x574 <SetBlink+0x44>
	{
		if((Duration&0xf000)==CurrentBlink)
     55e:	66 27       	eor	r22, r22
     560:	70 7f       	andi	r23, 0xF0	; 240
     562:	80 91 7e 03 	lds	r24, 0x037E
     566:	90 91 7f 03 	lds	r25, 0x037F
     56a:	68 17       	cp	r22, r24
     56c:	79 07       	cpc	r23, r25
     56e:	11 f4       	brne	.+4      	; 0x574 <SetBlink+0x44>
		{
			
			DurationTime=0;
     570:	10 92 7c 03 	sts	0x037C, r1
     574:	08 95       	ret

00000576 <Blink>:

void Blink()
{
	static uint16_t countBlink;
	static uint8_t BlinkOut;
	if(DurationTime)
     576:	60 91 7c 03 	lds	r22, 0x037C
     57a:	66 23       	and	r22, r22
     57c:	31 f1       	breq	.+76     	; 0x5ca <Blink+0x54>
	{ 
		
	if(countBlink>=((5000/Timeslice)/DurationTime))
     57e:	20 91 81 03 	lds	r18, 0x0381
     582:	30 91 82 03 	lds	r19, 0x0382
     586:	88 ee       	ldi	r24, 0xE8	; 232
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__divmodhi4>
     590:	26 17       	cp	r18, r22
     592:	37 07       	cpc	r19, r23
     594:	98 f0       	brcs	.+38     	; 0x5bc <Blink+0x46>
	{
		BlinkOut=BlinkOut^1;
     596:	90 91 83 03 	lds	r25, 0x0383
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	89 27       	eor	r24, r25
     59e:	80 93 83 03 	sts	0x0383, r24
		PinOutput(BlinkOut,BlinkPin,Prt);
     5a2:	40 91 80 03 	lds	r20, 0x0380
     5a6:	60 91 7d 03 	lds	r22, 0x037D
     5aa:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
		countBlink=0;
		countBlink++;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 82 03 	sts	0x0382, r25
     5b6:	80 93 81 03 	sts	0x0381, r24
     5ba:	08 95       	ret
	}
	else
	{
		countBlink++;		
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	30 93 82 03 	sts	0x0382, r19
     5c4:	20 93 81 03 	sts	0x0381, r18
     5c8:	08 95       	ret
	}
	}
	else
	{
		PinOutput(0,BlinkPin,Prt);
     5ca:	40 91 80 03 	lds	r20, 0x0380
     5ce:	60 91 7d 03 	lds	r22, 0x037D
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
     5d8:	08 95       	ret

000005da <ESPreadvalue>:
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
{
     5da:	4f 92       	push	r4
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	1f 92       	push	r1
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	7c 01       	movw	r14, r24
	 unsigned char data='&';
     602:	86 e2       	ldi	r24, 0x26	; 38
     604:	89 83       	std	Y+1, r24	; 0x01
     606:	0f 2e       	mov	r0, r31
     608:	fc e0       	ldi	r31, 0x0C	; 12
     60a:	af 2e       	mov	r10, r31
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	bf 2e       	mov	r11, r31
     610:	f0 2d       	mov	r31, r0
     612:	0f 2e       	mov	r0, r31
     614:	fb e0       	ldi	r31, 0x0B	; 11
     616:	cf 2e       	mov	r12, r31
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	df 2e       	mov	r13, r31
     61c:	f0 2d       	mov	r31, r0
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     61e:	08 e7       	ldi	r16, 0x78	; 120
     620:	11 e0       	ldi	r17, 0x01	; 1
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
					  k=0;
     622:	51 2c       	mov	r5, r1
     624:	75 2c       	mov	r7, r5
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     626:	99 24       	eor	r9, r9
     628:	93 94       	inc	r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     62a:	4a c0       	rjmp	.+148    	; 0x6c0 <ESPreadvalue+0xe6>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     62c:	c9 01       	movw	r24, r18
     62e:	d9 01       	movw	r26, r18
     630:	12 97       	sbiw	r26, 0x02	; 2
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     632:	4c 91       	ld	r20, X
     634:	41 30       	cpi	r20, 0x01	; 1
     636:	11 f5       	brne	.+68     	; 0x67c <ESPreadvalue+0xa2>
     638:	66 32       	cpi	r22, 0x26	; 38
     63a:	01 f1       	breq	.+64     	; 0x67c <ESPreadvalue+0xa2>
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     63c:	af 01       	movw	r20, r30
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     63e:	60 80       	ld	r6, Z
	{Close_Channel,Response1,0,0,0,1000},
	{Wait,DisConnection_Response1,0,0,0,1000},
	{Wait,uartDebug,0,0,0,1000}                                       
};

uint16_t ESPreadvalue(void *fptr)
     640:	d9 01       	movw	r26, r18
     642:	14 97       	sbiw	r26, 0x04	; 4
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
		{  

			if(data==Esp_Commands_a[i].Response[Esp_Commands_a[i].MatchCounter]) 
     644:	0d 90       	ld	r0, X+
     646:	bc 91       	ld	r27, X
     648:	a0 2d       	mov	r26, r0
     64a:	a6 0d       	add	r26, r6
     64c:	b1 1d       	adc	r27, r1
     64e:	ac 91       	ld	r26, X
     650:	6a 13       	cpse	r22, r26
     652:	0f c0       	rjmp	.+30     	; 0x672 <ESPreadvalue+0x98>
			{
			  if(Esp_Commands_a[i].MatchCounter<Esp_Commands_a[i].ResposeLength )
     654:	d9 01       	movw	r26, r18
     656:	4c 90       	ld	r4, X
     658:	64 14       	cp	r6, r4
     65a:	10 f4       	brcc	.+4      	; 0x660 <ESPreadvalue+0x86>
			  {
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
     65c:	63 94       	inc	r6
     65e:	60 82       	st	Z, r6
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
     660:	da 01       	movw	r26, r20
     662:	4c 91       	ld	r20, X
     664:	dc 01       	movw	r26, r24
     666:	8c 91       	ld	r24, X
     668:	48 13       	cpse	r20, r24
     66a:	08 c0       	rjmp	.+16     	; 0x67c <ESPreadvalue+0xa2>
			  {

					  Datalog=1;
					  k=0;
     66c:	87 2c       	mov	r8, r7
				  Esp_Commands_a[i].MatchCounter=Esp_Commands_a[i].MatchCounter+1;
			  }
			  if(Esp_Commands_a[i].MatchCounter==(Esp_Commands_a[i].ResposeLength))
			  {

					  Datalog=1;
     66e:	79 2d       	mov	r23, r9
     670:	05 c0       	rjmp	.+10     	; 0x67c <ESPreadvalue+0xa2>
					  k=0;
			  }
			}
			else if(Esp_Commands_a[i].MatchCounter<(Esp_Commands_a[i].ResposeLength))
     672:	d9 01       	movw	r26, r18
     674:	8c 91       	ld	r24, X
     676:	68 16       	cp	r6, r24
     678:	08 f4       	brcc	.+2      	; 0x67c <ESPreadvalue+0xa2>
			{
				Esp_Commands_a[i].MatchCounter=0;
     67a:	10 82       	st	Z, r1
     67c:	27 5f       	subi	r18, 0xF7	; 247
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	39 96       	adiw	r30, 0x09	; 9
	{
		unsigned char *reg;
		uint8_t i;
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     682:	20 17       	cp	r18, r16
     684:	31 07       	cpc	r19, r17
     686:	91 f6       	brne	.-92     	; 0x62c <ESPreadvalue+0x52>
     688:	70 93 85 03 	sts	0x0385, r23
     68c:	80 92 86 03 	sts	0x0386, r8
				//k=0;
			}
			
		}
	}
	if(Datalog==1)
     690:	71 30       	cpi	r23, 0x01	; 1
     692:	b1 f4       	brne	.+44     	; 0x6c0 <ESPreadvalue+0xe6>
	{
		if(data!='&'){
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	86 32       	cpi	r24, 0x26	; 38
     698:	09 f1       	breq	.+66     	; 0x6dc <ESPreadvalue+0x102>
		EspDataBuffer[k]=data;
     69a:	e8 2d       	mov	r30, r8
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	e9 57       	subi	r30, 0x79	; 121
     6a0:	fc 4f       	sbci	r31, 0xFC	; 252
     6a2:	80 83       	st	Z, r24
		k++;
     6a4:	98 2d       	mov	r25, r8
     6a6:	9f 5f       	subi	r25, 0xFF	; 255
     6a8:	90 93 86 03 	sts	0x0386, r25
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     6ac:	9c 31       	cpi	r25, 0x1C	; 28
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <ESPreadvalue+0xda>
     6b0:	8a 30       	cpi	r24, 0x0A	; 10
     6b2:	31 f4       	brne	.+12     	; 0x6c0 <ESPreadvalue+0xe6>
		{
			Datalog=0;
     6b4:	50 92 85 03 	sts	0x0385, r5
			k=0;
     6b8:	50 92 86 03 	sts	0x0386, r5
			datagot=1;
     6bc:	90 92 a6 03 	sts	0x03A6, r9
};

uint16_t ESPreadvalue(void *fptr)
{
	 unsigned char data='&';
	while((*((PopFuncPointer)fptr))(&data)==0)
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	f7 01       	movw	r30, r14
     6c6:	09 95       	icall
     6c8:	81 11       	cpse	r24, r1
     6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <ESPreadvalue+0x10a>
	}
	static uint8_t Datalog,k=0;
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		
		if(Esp_Commands_a[i].state==1 && data!='&' )
     6cc:	69 81       	ldd	r22, Y+1	; 0x01
     6ce:	70 91 85 03 	lds	r23, 0x0385
     6d2:	80 90 86 03 	lds	r8, 0x0386
     6d6:	95 01       	movw	r18, r10
     6d8:	f6 01       	movw	r30, r12
     6da:	a8 cf       	rjmp	.-176    	; 0x62c <ESPreadvalue+0x52>
		if(data!='&'){
		EspDataBuffer[k]=data;
		k++;
		//uart_char(data);
		}
		if(k==28 || data=='\n')
     6dc:	fc e1       	ldi	r31, 0x1C	; 28
     6de:	8f 12       	cpse	r8, r31
     6e0:	ef cf       	rjmp	.-34     	; 0x6c0 <ESPreadvalue+0xe6>
     6e2:	e8 cf       	rjmp	.-48     	; 0x6b4 <ESPreadvalue+0xda>
			//Esp_Commands_a[Wait_Command].MatchCounter=0;
		}
	}
	}
	return 0;
}
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0f 90       	pop	r0
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	08 95       	ret

0000070c <ESP_Init>:
    
	return ReturnValue;
}

void ESP_Init()
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec e0       	ldi	r30, 0x0C	; 12
     712:	f1 e0       	ldi	r31, 0x01	; 1
	
    
	return ReturnValue;
}

void ESP_Init()
     714:	88 e7       	ldi	r24, 0x78	; 120
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	ef 01       	movw	r28, r30
     71a:	24 97       	sbiw	r28, 0x04	; 4
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
     71c:	a8 81       	ld	r26, Y
     71e:	b9 81       	ldd	r27, Y+1	; 0x01
     720:	ed 01       	movw	r28, r26
     722:	09 90       	ld	r0, Y+
     724:	00 20       	and	r0, r0
     726:	e9 f7       	brne	.-6      	; 0x722 <ESP_Init+0x16>
     728:	21 97       	sbiw	r28, 0x01	; 1
     72a:	ca 1b       	sub	r28, r26
     72c:	db 0b       	sbc	r29, r27
     72e:	c0 83       	st	Z, r28
     730:	39 96       	adiw	r30, 0x09	; 9
	return ReturnValue;
}

void ESP_Init()
{
	for(int i=Wifi_Command;i<Cmd_EndofList;i++)
     732:	e8 17       	cp	r30, r24
     734:	f9 07       	cpc	r31, r25
     736:	81 f7       	brne	.-32     	; 0x718 <ESP_Init+0xc>
	{
		Esp_Commands_a[i].ResposeLength=strlen(Esp_Commands_a[i].Response);
        
	}
	
	Esp_Commands_a[Disconnect_Command].state=1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 64 01 	sts	0x0164, r24
    Esp_Commands_a[Connection_Wait].state=1;
     73e:	80 93 13 01 	sts	0x0113, r24
	Esp_Commands_a[Uart_command].state=1;
     742:	80 93 6d 01 	sts	0x016D, r24
	
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <CipSend>:

ESPRetVal CipSend(void)
{
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <CipSend+0x8>
     754:	00 d0       	rcall	.+0      	; 0x756 <CipSend+0xa>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
  ESPRetVal ReturnValue=ESP_CmdSndBusy;
      char Val[4];
	  Val[0]=(char)PortSel;
     75a:	80 91 aa 03 	lds	r24, 0x03AA
     75e:	89 83       	std	Y+1, r24	; 0x01
	  Val[1]='\0';
     760:	1a 82       	std	Y+2, r1	; 0x02
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
	  RTE_WriteBufferUart(",");
     76a:	8f eb       	ldi	r24, 0xBF	; 191
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
     772:	20 91 ab 03 	lds	r18, 0x03AB
     776:	30 91 ac 03 	lds	r19, 0x03AC
     77a:	e2 2f       	mov	r30, r18
	EspDataBuffer[10]='1';
}
static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
     77c:	49 e2       	ldi	r20, 0x29	; 41
     77e:	24 9f       	mul	r18, r20
     780:	41 2d       	mov	r20, r1
     782:	11 24       	eor	r1, r1
     784:	42 95       	swap	r20
     786:	4f 70       	andi	r20, 0x0F	; 15
	T=(num - (H*100))/10;
     788:	1c e9       	ldi	r17, 0x9C	; 156
     78a:	14 03       	mulsu	r17, r20
     78c:	c0 01       	movw	r24, r0
     78e:	11 24       	eor	r1, r1
     790:	82 0f       	add	r24, r18
     792:	91 1d       	adc	r25, r1
     794:	6a e0       	ldi	r22, 0x0A	; 10
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__divmodhi4>
	O=(num - (H*100) - (T*10));

	Ustring[0]=(H+48);
     79c:	84 2f       	mov	r24, r20
     79e:	80 5d       	subi	r24, 0xD0	; 208
     7a0:	89 83       	std	Y+1, r24	; 0x01
	Ustring[1]=(T+48);
     7a2:	86 2f       	mov	r24, r22
     7a4:	80 5d       	subi	r24, 0xD0	; 208
     7a6:	8a 83       	std	Y+2, r24	; 0x02
static void num2CharArrayESP(unsigned char num,unsigned char *Ustring)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
     7a8:	e0 5d       	subi	r30, 0xD0	; 208
     7aa:	41 9f       	mul	r20, r17
     7ac:	e0 0d       	add	r30, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	66 0f       	add	r22, r22
     7b2:	96 2f       	mov	r25, r22
     7b4:	99 0f       	add	r25, r25
     7b6:	99 0f       	add	r25, r25
     7b8:	69 0f       	add	r22, r25

	Ustring[0]=(H+48);
	Ustring[1]=(T+48);
	Ustring[2]=(O+48);
     7ba:	e6 1b       	sub	r30, r22
     7bc:	eb 83       	std	Y+3, r30	; 0x03
	  Val[1]='\0';
	  RTE_WriteBufferUart(Val);//uart_char(PortSel);
	  RTE_WriteBufferUart(",");
	  //Val[0]=(char)(EspDataCount+48);
	  num2CharArrayESP(EspDataCount,Val);
	  Val[3]='\0';
     7be:	1c 82       	std	Y+4, r1	; 0x04
	  if(EspDataCount<10)
     7c0:	2a 30       	cpi	r18, 0x0A	; 10
     7c2:	31 05       	cpc	r19, r1
     7c4:	1c f4       	brge	.+6      	; 0x7cc <CipSend+0x80>
	  {
		  Val[0]=Val[2];
     7c6:	e9 83       	std	Y+1, r30	; 0x01
		  Val[1]='\0';		  
     7c8:	1a 82       	std	Y+2, r1	; 0x02
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <CipSend+0x8c>
	  }
	  else if(EspDataCount<100)
     7cc:	24 36       	cpi	r18, 0x64	; 100
     7ce:	31 05       	cpc	r19, r1
     7d0:	1c f4       	brge	.+6      	; 0x7d8 <CipSend+0x8c>
	  {
		  Val[0]=Val[1]; 
     7d2:	89 83       	std	Y+1, r24	; 0x01
		  Val[1]=Val[2]; 
     7d4:	ea 83       	std	Y+2, r30	; 0x02
		  Val[2]='\0'; 
     7d6:	1b 82       	std	Y+3, r1	; 0x03
	  }
	  RTE_WriteBufferUart(Val);//uart_char(Recieved[0]);
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
	  //uart_char(Recieved[1]); 
	  RTE_WriteBufferUart("\r\n");//uart_string("\r\n");
     7e0:	81 ec       	ldi	r24, 0xC1	; 193
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>

}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	08 95       	ret

000007f8 <WifiDisconnectCheck>:

ESPRetVal WifiDisconnectCheck()
{
		if(Esp_Commands_a[Disconnect_Command].MatchCounter==Esp_Commands_a[Disconnect_Command].ResposeLength)
     7f8:	90 91 65 01 	lds	r25, 0x0165
     7fc:	80 91 66 01 	lds	r24, 0x0166
     800:	98 13       	cpse	r25, r24
     802:	04 c0       	rjmp	.+8      	; 0x80c <WifiDisconnectCheck+0x14>
		{
			//Esp_Commands_a[Connection_Wait].MatchCounter=0;
			Esp_Commands_a[Disconnect_Command].MatchCounter=0;
     804:	10 92 65 01 	sts	0x0165, r1
			return ESP_CmdSndOK;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	08 95       	ret
		}
	return ESP_CmdSNDFailed;
     80c:	82 e0       	ldi	r24, 0x02	; 2
}
     80e:	08 95       	ret

00000810 <EspGlobalCounter>:
return FuncRet;
}
uint16_t EspGlobalCounter(uint8_t state)
{
	
	if(state==1)
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	29 f4       	brne	.+10     	; 0x81e <EspGlobalCounter+0xe>
	{
	  	counter1=0;
     814:	10 92 a9 03 	sts	0x03A9, r1
     818:	10 92 a8 03 	sts	0x03A8, r1
     81c:	0b c0       	rjmp	.+22     	; 0x834 <EspGlobalCounter+0x24>
	}
	else if(state==2)
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	49 f4       	brne	.+18     	; 0x834 <EspGlobalCounter+0x24>
	{
		counter1++;
     822:	80 91 a8 03 	lds	r24, 0x03A8
     826:	90 91 a9 03 	lds	r25, 0x03A9
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	90 93 a9 03 	sts	0x03A9, r25
     830:	80 93 a8 03 	sts	0x03A8, r24
	}

return	counter1;
}
     834:	80 91 a8 03 	lds	r24, 0x03A8
     838:	90 91 a9 03 	lds	r25, 0x03A9
     83c:	08 95       	ret

0000083e <CommandSend>:
	}
	return 0;
}

ESPRetVal CommandSend(ESP_CommandIndex Index)
{
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	18 2f       	mov	r17, r24
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
	if(ConnectionFlag==0)
     846:	80 91 a7 03 	lds	r24, 0x03A7
     84a:	81 11       	cpse	r24, r1
     84c:	26 c0       	rjmp	.+76     	; 0x89a <CommandSend+0x5c>
	{
		RTE_WriteBufferUart(Esp_Commands_a[Index].ustring);//uart_string(Esp_Commands_a[Index].ustring);
     84e:	c1 2f       	mov	r28, r17
     850:	d0 e0       	ldi	r29, 0x00	; 0
     852:	fe 01       	movw	r30, r28
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ec 0f       	add	r30, r28
     862:	fd 1f       	adc	r31, r29
     864:	ea 5f       	subi	r30, 0xFA	; 250
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
		if(Index==Send_Command)
     870:	17 30       	cpi	r17, 0x07	; 7
     872:	11 f4       	brne	.+4      	; 0x878 <CommandSend+0x3a>
		{
			(void)CipSend();
     874:	0e 94 a6 03 	call	0x74c	; 0x74c <CipSend>
		}
		Esp_Commands_a[Index].state=1;
     878:	9e 01       	movw	r18, r28
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	c2 0f       	add	r28, r18
     888:	d3 1f       	adc	r29, r19
     88a:	ca 5f       	subi	r28, 0xFA	; 250
     88c:	de 4f       	sbci	r29, 0xFE	; 254
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	8c 83       	std	Y+4, r24	; 0x04
		ConnectionFlag=1;
     892:	80 93 a7 03 	sts	0x03A7, r24
		EspGlobalCounter(1);
     896:	0e 94 08 04 	call	0x810	; 0x810 <EspGlobalCounter>
	}
	if((Esp_Commands_a[Index].MatchCounter)==Esp_Commands_a[Index].ResposeLength)
     89a:	c1 2f       	mov	r28, r17
     89c:	d0 e0       	ldi	r29, 0x00	; 0
     89e:	fe 01       	movw	r30, r28
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	ec 0f       	add	r30, r28
     8ae:	fd 1f       	adc	r31, r29
     8b0:	ea 5f       	subi	r30, 0xFA	; 250
     8b2:	fe 4f       	sbci	r31, 0xFE	; 254
     8b4:	95 81       	ldd	r25, Z+5	; 0x05
     8b6:	86 81       	ldd	r24, Z+6	; 0x06
     8b8:	98 13       	cpse	r25, r24
     8ba:	13 c0       	rjmp	.+38     	; 0x8e2 <CommandSend+0xa4>
	{
		if(Index!=Wait_Command)
     8bc:	16 30       	cpi	r17, 0x06	; 6
     8be:	69 f0       	breq	.+26     	; 0x8da <CommandSend+0x9c>
		{
			Esp_Commands_a[Index].state=0;
     8c0:	fe 01       	movw	r30, r28
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ec 0f       	add	r30, r28
     8d0:	fd 1f       	adc	r31, r29
     8d2:	ea 5f       	subi	r30, 0xFA	; 250
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	14 82       	std	Z+4, r1	; 0x04
		    Esp_Commands_a[Index].MatchCounter=0;
     8d8:	15 82       	std	Z+5, r1	; 0x05
		}
		ConnectionFlag=0;
     8da:	10 92 a7 03 	sts	0x03A7, r1
		ReturnValue=ESP_CmdSndOK;
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <CommandSend+0xa6>
ESPRetVal CommandSend(ESP_CommandIndex Index)
{
	static uint8_t ConnectionFlag;
	uint16_t counter=0;
	//static ESP_CommandIndex Index=Wifi_Command;
	ESPRetVal ReturnValue=ESP_CmdSndBusy;
     8e2:	11 e0       	ldi	r17, 0x01	; 1
		    Esp_Commands_a[Index].MatchCounter=0;
		}
		ConnectionFlag=0;
		ReturnValue=ESP_CmdSndOK;
	}
	counter=EspGlobalCounter(2);
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	0e 94 08 04 	call	0x810	; 0x810 <EspGlobalCounter>
	
	if(counter>Esp_Commands_a[Index].WaitTime)
     8ea:	fe 01       	movw	r30, r28
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ec 0f       	add	r30, r28
     8fa:	fd 1f       	adc	r31, r29
     8fc:	ea 5f       	subi	r30, 0xFA	; 250
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254
     900:	27 81       	ldd	r18, Z+7	; 0x07
     902:	30 85       	ldd	r19, Z+8	; 0x08
     904:	28 17       	cp	r18, r24
     906:	39 07       	cpc	r19, r25
     908:	60 f4       	brcc	.+24     	; 0x922 <__stack+0x23>
	{
	  Esp_Commands_a[Index].state=0;
     90a:	14 82       	std	Z+4, r1	; 0x04
	  Esp_Commands_a[Index].MatchCounter=0;
     90c:	15 82       	std	Z+5, r1	; 0x05
	  counter1=0;
     90e:	10 92 a9 03 	sts	0x03A9, r1
     912:	10 92 a8 03 	sts	0x03A8, r1
	  ConnectionFlag=0;
     916:	10 92 a7 03 	sts	0x03A7, r1
	  EspGlobalCounter(1);
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	0e 94 08 04 	call	0x810	; 0x810 <EspGlobalCounter>
	  ReturnValue=ESP_CmdSNDFailed;
     920:	12 e0       	ldi	r17, 0x02	; 2
	  
	}
	
    
	return ReturnValue;
}
     922:	81 2f       	mov	r24, r17
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	08 95       	ret

0000092c <ESPAsServer>:
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
  if(flag==0)
     92c:	80 91 ad 03 	lds	r24, 0x03AD
     930:	81 11       	cpse	r24, r1
     932:	06 c0       	rjmp	.+12     	; 0x940 <ESPAsServer+0x14>
  {
	index=Server_Command;
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	80 93 ae 03 	sts	0x03AE, r24
	flag=1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 ad 03 	sts	0x03AD, r24
  }
  
	  ReturnValue=CommandSend(index);
     940:	80 91 ae 03 	lds	r24, 0x03AE
     944:	0e 94 1f 04 	call	0x83e	; 0x83e <CommandSend>
	  if(ReturnValue==ESP_CmdSndOK)
     948:	81 11       	cpse	r24, r1
     94a:	0b c0       	rjmp	.+22     	; 0x962 <ESPAsServer+0x36>
	  {
		  index=index+1;
     94c:	80 91 ae 03 	lds	r24, 0x03AE
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	80 93 ae 03 	sts	0x03AE, r24
		    if(index==Wait_Command)
     956:	86 30       	cpi	r24, 0x06	; 6
     958:	89 f5       	brne	.+98     	; 0x9bc <ESPAsServer+0x90>
		    {
			    FuncRet= ESP_CmdSndOK;
				flag=0;
     95a:	10 92 ad 03 	sts	0x03AD, r1
	  if(ReturnValue==ESP_CmdSndOK)
	  {
		  index=index+1;
		    if(index==Wait_Command)
		    {
			    FuncRet= ESP_CmdSndOK;
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 95       	ret
				flag=0;
		    }
	  }
	 else if(ReturnValue==ESP_CmdSNDFailed)
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	69 f5       	brne	.+90     	; 0x9c0 <ESPAsServer+0x94>
	  {
		   if(RetryCounts>4)
     966:	80 91 af 03 	lds	r24, 0x03AF
     96a:	85 30       	cpi	r24, 0x05	; 5
     96c:	00 f1       	brcs	.+64     	; 0x9ae <ESPAsServer+0x82>
		   {
			   if(index==Mode_Command)
     96e:	20 91 ae 03 	lds	r18, 0x03AE
     972:	22 30       	cpi	r18, 0x02	; 2
     974:	31 f4       	brne	.+12     	; 0x982 <ESPAsServer+0x56>
			   {
				   RetryCounts=0;
     976:	10 92 af 03 	sts	0x03AF, r1
				   FuncRet= ESP_CmdSNDFailed;
				   flag=0;
     97a:	10 92 ad 03 	sts	0x03AD, r1
		   if(RetryCounts>4)
		   {
			   if(index==Mode_Command)
			   {
				   RetryCounts=0;
				   FuncRet= ESP_CmdSNDFailed;
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <ESPAsServer+0x84>
				   flag=0;
			   }
			   else
			   {
				   
				   Esp_Commands_a[index].state=0;
     982:	e2 2f       	mov	r30, r18
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	cf 01       	movw	r24, r30
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	ea 5f       	subi	r30, 0xFA	; 250
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	14 82       	std	Z+4, r1	; 0x04
				   Esp_Commands_a[index].MatchCounter=0;
     99e:	15 82       	std	Z+5, r1	; 0x05
				   index=index-1;
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	20 93 ae 03 	sts	0x03AE, r18
				   RetryCounts=0;
     9a6:	10 92 af 03 	sts	0x03AF, r1
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <ESPAsServer+0x84>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
				   Esp_Commands_a[index].MatchCounter=0;
				   index=index-1;
				   RetryCounts=0;
			   }
		   }
		  RetryCounts++;
     9b0:	90 91 af 03 	lds	r25, 0x03AF
     9b4:	9f 5f       	subi	r25, 0xFF	; 255
     9b6:	90 93 af 03 	sts	0x03AF, r25
     9ba:	08 95       	ret
ESPRetVal ESPAsServer()
{
  static uint8_t index;
  static uint8_t flag=0;
  static uint8_t RetryCounts;
  ESPRetVal ReturnValue,FuncRet=ESP_CmdSndBusy;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 95       	ret
     9c0:	81 e0       	ldi	r24, 0x01	; 1
	  



  return FuncRet;
}
     9c2:	08 95       	ret

000009c4 <findpos>:
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     9c4:	fc 01       	movw	r30, r24
     9c6:	e6 0f       	add	r30, r22
     9c8:	f1 1d       	adc	r31, r1
     9ca:	20 81       	ld	r18, Z
     9cc:	22 23       	and	r18, r18
     9ce:	89 f0       	breq	.+34     	; 0x9f2 <findpos+0x2e>
	{
		if(ustring[pos]==sub)
     9d0:	24 13       	cpse	r18, r20
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <findpos+0x1c>
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <findpos+0x16>
     9d6:	24 13       	cpse	r18, r20
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <findpos+0x1c>
		{
			return pos+1;
     9da:	86 2f       	mov	r24, r22
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	08 95       	ret
		}
		pos++;
     9e0:	6f 5f       	subi	r22, 0xFF	; 255
{
	RTE_WriteBufferUart("test2");
}
uint8_t findpos(const unsigned char *ustring,uint8_t pos,char sub)
{
	while(ustring[pos]!='\0')
     9e2:	fc 01       	movw	r30, r24
     9e4:	e6 0f       	add	r30, r22
     9e6:	f1 1d       	adc	r31, r1
     9e8:	20 81       	ld	r18, Z
     9ea:	21 11       	cpse	r18, r1
     9ec:	f4 cf       	rjmp	.-24     	; 0x9d6 <findpos+0x12>
		{
			return pos+1;
		}
		pos++;
	}
	return 0;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
     9f2:	80 e0       	ldi	r24, 0x00	; 0
}
     9f4:	08 95       	ret

000009f6 <PortCopy>:

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     9f6:	42 17       	cp	r20, r18
     9f8:	70 f4       	brcc	.+28     	; 0xa16 <PortCopy+0x20>
     9fa:	fb 01       	movw	r30, r22
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     9fc:	30 e0       	ldi	r19, 0x00	; 0
	while(start<end && pos<4 )
	{
		copy[pos]=ustring[start];
     9fe:	dc 01       	movw	r26, r24
     a00:	a4 0f       	add	r26, r20
     a02:	b1 1d       	adc	r27, r1
     a04:	5c 91       	ld	r21, X
     a06:	51 93       	st	Z+, r21
		pos++;
     a08:	3f 5f       	subi	r19, 0xFF	; 255
		start++;
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
	while(start<end && pos<4 )
     a0c:	42 17       	cp	r20, r18
     a0e:	20 f4       	brcc	.+8      	; 0xa18 <PortCopy+0x22>
     a10:	34 30       	cpi	r19, 0x04	; 4
     a12:	a9 f7       	brne	.-22     	; 0x9fe <PortCopy+0x8>
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <PortCopy+0x22>
	return 0;
}

void PortCopy(const unsigned char *ustring,unsigned char *copy,uint8_t start,uint8_t end)
{
	uint8_t pos=0;
     a16:	30 e0       	ldi	r19, 0x00	; 0
	{
		copy[pos]=ustring[start];
		pos++;
		start++;
	}
	copy[pos]=ustring[start];
     a18:	fc 01       	movw	r30, r24
     a1a:	e4 0f       	add	r30, r20
     a1c:	f1 1d       	adc	r31, r1
     a1e:	80 81       	ld	r24, Z
     a20:	fb 01       	movw	r30, r22
     a22:	e3 0f       	add	r30, r19
     a24:	f1 1d       	adc	r31, r1
     a26:	80 83       	st	Z, r24
	PortLen=pos;
     a28:	30 93 c2 03 	sts	0x03C2, r19
     a2c:	08 95       	ret

00000a2e <SendData>:
	
}

ESPRetVal SendData(uint8_t count)
{
	EspDataCount=count;
     a2e:	80 93 ab 03 	sts	0x03AB, r24
     a32:	10 92 ac 03 	sts	0x03AC, r1
	return CommandSend(Send_Command);
     a36:	87 e0       	ldi	r24, 0x07	; 7
     a38:	0e 94 1f 04 	call	0x83e	; 0x83e <CommandSend>
}
     a3c:	08 95       	ret

00000a3e <ConnectCommand>:


ESPRetVal ConnectCommand()
{
	//uart_num(Esp_Commands_a[Connection_Wait].MatchCounter);
	if(Esp_Commands_a[Connection_Wait].MatchCounter==Esp_Commands_a[Connection_Wait].ResposeLength)
     a3e:	90 91 14 01 	lds	r25, 0x0114
     a42:	80 91 15 01 	lds	r24, 0x0115
     a46:	98 13       	cpse	r25, r24
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <ConnectCommand+0x14>
	{
		//uart_string("wifi connected");
		Esp_Commands_a[Connection_Wait].MatchCounter=0;
     a4a:	10 92 14 01 	sts	0x0114, r1
		//Esp_Commands_a[Disconnect_Command].MatchCounter=0;
		return ESP_CmdSndOK;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	08 95       	ret
	}
	return ESP_CmdSNDFailed;
     a52:	82 e0       	ldi	r24, 0x02	; 2
}
     a54:	08 95       	ret

00000a56 <CheckInput>:
uint8_t CheckInput()
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
	//uart_string(EspDataBuffer);
	if(datagot==1)
     a5e:	80 91 a6 03 	lds	r24, 0x03A6
     a62:	81 30       	cpi	r24, 0x01	; 1
     a64:	09 f0       	breq	.+2      	; 0xa68 <CheckInput+0x12>
     a66:	4f c0       	rjmp	.+158    	; 0xb06 <CheckInput+0xb0>
	{
		if(Esp_Commands_a[Wait_Command].MatchCounter==Esp_Commands_a[Wait_Command].ResposeLength)
     a68:	90 91 41 01 	lds	r25, 0x0141
     a6c:	80 91 42 01 	lds	r24, 0x0142
     a70:	98 13       	cpse	r25, r24
     a72:	47 c0       	rjmp	.+142    	; 0xb02 <CheckInput+0xac>
		{ 
			Esp_Commands_a[Wait_Command].state=1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	80 93 40 01 	sts	0x0140, r24
			Esp_Commands_a[Wait_Command].MatchCounter=0;	
     a7a:	10 92 41 01 	sts	0x0141, r1
			PortStart=findpos(EspDataBuffer,0,',');
     a7e:	4c e2       	ldi	r20, 0x2C	; 44
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	87 e8       	ldi	r24, 0x87	; 135
     a84:	93 e0       	ldi	r25, 0x03	; 3
     a86:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <findpos>
     a8a:	c8 2f       	mov	r28, r24
			PortEnd=findpos(EspDataBuffer,PortStart,',');
     a8c:	4c e2       	ldi	r20, 0x2C	; 44
     a8e:	68 2f       	mov	r22, r24
     a90:	87 e8       	ldi	r24, 0x87	; 135
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <findpos>
     a98:	08 2f       	mov	r16, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortStart,PortEnd);
     a9a:	28 2f       	mov	r18, r24
     a9c:	4c 2f       	mov	r20, r28
     a9e:	63 eb       	ldi	r22, 0xB3	; 179
     aa0:	73 e0       	ldi	r23, 0x03	; 3
     aa2:	87 e8       	ldi	r24, 0x87	; 135
     aa4:	93 e0       	ldi	r25, 0x03	; 3
     aa6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <PortCopy>
			PortSel=EspPortBuffer[0];
     aaa:	c3 eb       	ldi	r28, 0xB3	; 179
     aac:	d3 e0       	ldi	r29, 0x03	; 3
     aae:	88 81       	ld	r24, Y
     ab0:	80 93 aa 03 	sts	0x03AA, r24
			PortStart=findpos(EspDataBuffer,PortEnd,':');
     ab4:	4a e3       	ldi	r20, 0x3A	; 58
     ab6:	60 2f       	mov	r22, r16
     ab8:	87 e8       	ldi	r24, 0x87	; 135
     aba:	93 e0       	ldi	r25, 0x03	; 3
     abc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <findpos>
     ac0:	18 2f       	mov	r17, r24
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     ac2:	28 2f       	mov	r18, r24
     ac4:	40 2f       	mov	r20, r16
     ac6:	be 01       	movw	r22, r28
     ac8:	87 e8       	ldi	r24, 0x87	; 135
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <PortCopy>
			Recieved[0]=EspPortBuffer[0];
     ad0:	c8 81       	ld	r28, Y
     ad2:	c0 93 c5 03 	sts	0x03C5, r28
			Recieved[1]=EspPortBuffer[1];
     ad6:	80 91 b4 03 	lds	r24, 0x03B4
     ada:	80 93 c6 03 	sts	0x03C6, r24
			uint8_t initial ;
			initial=(uint8_t )EspPortBuffer[0];
			PortEnd=PortStart;
     ade:	10 93 c4 03 	sts	0x03C4, r17
			PortStart=PortStart+(uint8_t )EspPortBuffer[0];
     ae2:	c1 0f       	add	r28, r17
     ae4:	c0 93 c3 03 	sts	0x03C3, r28
			PortCopy(EspDataBuffer,EspPortBuffer,PortEnd,PortStart);
     ae8:	2c 2f       	mov	r18, r28
     aea:	41 2f       	mov	r20, r17
     aec:	63 eb       	ldi	r22, 0xB3	; 179
     aee:	73 e0       	ldi	r23, 0x03	; 3
     af0:	87 e8       	ldi	r24, 0x87	; 135
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <PortCopy>
			for( posi=PortEnd;posi<PortStart;posi++)
			{
				Recieved[posi]=EspDataBuffer[posi];
				
			}*/
			EspPortBuffer[PortStart-2]='\0';
     af8:	ec 2f       	mov	r30, r28
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ef 54       	subi	r30, 0x4F	; 79
     afe:	fc 4f       	sbci	r31, 0xFC	; 252
     b00:	10 82       	st	Z, r1
			//RTE_WriteBufferUart(EspPortBuffer);//uart_string(EspPortBuffer);
			//RTE_WriteBufferUart(EspDataBuffer);
			
		}
		//uart_string(EspDataBuffer);
		datagot=0;
     b02:	10 92 a6 03 	sts	0x03A6, r1
	}
	if(Esp_Commands_a[Uart_command].MatchCounter==Esp_Commands_a[Uart_command].ResposeLength)
     b06:	90 91 6e 01 	lds	r25, 0x016E
     b0a:	80 91 6f 01 	lds	r24, 0x016F
     b0e:	98 13       	cpse	r25, r24
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <CheckInput+0xc2>
	{
		//uart_string("uart debug mode enabled");
		UartEvents=0x01;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 f6 04 	sts	0x04F6, r24
	}
	
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	08 95       	ret

00000b22 <RequestWait>:
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
	  static ESPRetVal ReturnValue=ESP_CmdSndBusy;
	  if(FlagReq==0)
     b22:	80 91 b0 03 	lds	r24, 0x03B0
     b26:	81 11       	cpse	r24, r1
     b28:	08 c0       	rjmp	.+16     	; 0xb3a <RequestWait+0x18>
	  {
		    indexReq=Wait_Command;
     b2a:	86 e0       	ldi	r24, 0x06	; 6
     b2c:	80 93 b1 03 	sts	0x03B1, r24
		    FlagReq=1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 b0 03 	sts	0x03B0, r24
	        BUFFEREnable=1;
     b36:	80 93 b2 03 	sts	0x03B2, r24
			 
			
	  }

 
	  	  if(ReturnValue!=ESP_CmdSndOK )
     b3a:	80 91 1d 02 	lds	r24, 0x021D
     b3e:	88 23       	and	r24, r24
     b40:	39 f0       	breq	.+14     	; 0xb50 <RequestWait+0x2e>
	  	  { 
				ReturnValue=CommandSend(Wait_Command);
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	0e 94 1f 04 	call	0x83e	; 0x83e <CommandSend>
     b48:	80 93 1d 02 	sts	0x021D, r24
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret
				ReturnValue=CommandSend(Wait_Command);

		  }
		  else
		  {
					if(datagot==1)
     b50:	80 91 a6 03 	lds	r24, 0x03A6
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	59 f4       	brne	.+22     	; 0xb6e <RequestWait+0x4c>
					{
						FlagReq=0;
     b58:	10 92 b0 03 	sts	0x03B0, r1
						BUFFEREnable=0;
     b5c:	10 92 b2 03 	sts	0x03B2, r1
						CheckInput();
     b60:	0e 94 2b 05 	call	0xa56	; 0xa56 <CheckInput>
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
						ReturnValue=ESP_CmdSndBusy;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 1d 02 	sts	0x021D, r24
						FlagReq=0;
						BUFFEREnable=0;
						CheckInput();
						//Esp_Commands_a[Wait_Command].state=1;
						//Esp_Commands_a[Wait_Command].MatchCounter=0;
						FuncRet= ESP_CmdSndOK;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	08 95       	ret
ESPRetVal RequestWait()
{
	  static uint8_t indexReq;
	  static uint8_t FlagReq=0;
	  static uint8_t RetryCountsReq;
	  ESPRetVal FuncRet=ESP_CmdSndBusy;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
					}		   
		  }

	  	  
return FuncRet;
}
     b70:	08 95       	ret

00000b72 <enable>:

uint8_t enable()
{
	
   return ESP_DataRead_a[0].Purpose;
}
     b72:	80 91 74 01 	lds	r24, 0x0174
     b76:	08 95       	ret

00000b78 <checkRecievedData>:

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     b78:	60 91 72 01 	lds	r22, 0x0172
     b7c:	70 91 73 01 	lds	r23, 0x0173
     b80:	83 eb       	ldi	r24, 0xB3	; 179
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	0e 94 2e 20 	call	0x405c	; 0x405c <strcmp>
     b88:	28 2f       	mov	r18, r24
     b8a:	39 2f       	mov	r19, r25
     b8c:	23 2b       	or	r18, r19
     b8e:	21 f4       	brne	.+8      	; 0xb98 <checkRecievedData+0x20>
			{
				ESP_DataRead_a[i].Purpose=0;
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 74 01 	sts	0x0174, r24
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <checkRecievedData+0x24>
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
			{
				ESP_DataRead_a[i].Purpose=0;
     b98:	10 92 74 01 	sts	0x0174, r1

void checkRecievedData()
{
	for(uint8_t i=0;i<2;i++)
	{
			if(strcmp(EspPortBuffer,ESP_DataRead_a[i].strp))
     b9c:	60 91 75 01 	lds	r22, 0x0175
     ba0:	70 91 76 01 	lds	r23, 0x0176
     ba4:	83 eb       	ldi	r24, 0xB3	; 179
     ba6:	93 e0       	ldi	r25, 0x03	; 3
     ba8:	0e 94 2e 20 	call	0x405c	; 0x405c <strcmp>
     bac:	28 2f       	mov	r18, r24
     bae:	39 2f       	mov	r19, r25
     bb0:	23 2b       	or	r18, r19
     bb2:	19 f0       	breq	.+6      	; 0xbba <checkRecievedData+0x42>
			{
				ESP_DataRead_a[i].Purpose=0;
     bb4:	10 92 77 01 	sts	0x0177, r1
     bb8:	08 95       	ret
			}
			else
			{
				ESP_DataRead_a[i].Purpose=1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 77 01 	sts	0x0177, r24
     bc0:	08 95       	ret

00000bc2 <ESPpop>:
}

uint8_t ESPpop(char *Bytex)
{
	static uint8_t PosByte;
    EspDataBuffer[30]='!';
     bc2:	21 e2       	ldi	r18, 0x21	; 33
     bc4:	20 93 a5 03 	sts	0x03A5, r18
	*Bytex=EspDataBuffer[PosByte+7];
     bc8:	20 91 cf 03 	lds	r18, 0x03CF
     bcc:	e2 2f       	mov	r30, r18
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e9 57       	subi	r30, 0x79	; 121
     bd2:	fc 4f       	sbci	r31, 0xFC	; 252
     bd4:	37 81       	ldd	r19, Z+7	; 0x07
     bd6:	fc 01       	movw	r30, r24
     bd8:	30 83       	st	Z, r19
	if(PosByte==23)
     bda:	27 31       	cpi	r18, 0x17	; 23
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <ESPpop+0x24>
	{
		PosByte=0;
     bde:	10 92 cf 03 	sts	0x03CF, r1
		return 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	08 95       	ret
	}
	else
	{
		PosByte++;
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	20 93 cf 03 	sts	0x03CF, r18
	}
	return 0;
     bec:	80 e0       	ldi	r24, 0x00	; 0
}
     bee:	08 95       	ret

00000bf0 <ESPCallBack>:

void ESPCallBack(void *fillcallback)
{
	char* mediator;
	mediator=(char*)fillcallback;
	EspDataBuffer[28]=mediator[0];
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 81       	ld	r18, Z
     bf4:	20 93 a3 03 	sts	0x03A3, r18
	EspDataBuffer[29]=mediator[1];
     bf8:	81 81       	ldd	r24, Z+1	; 0x01
     bfa:	80 93 a4 03 	sts	0x03A4, r24
     bfe:	08 95       	ret

00000c00 <EmulateMessage>:

}
void EmulateMessage()
{
	EspDataBuffer[28]=0;
     c00:	10 92 a3 03 	sts	0x03A3, r1
	EspDataBuffer[29]=0;
     c04:	10 92 a4 03 	sts	0x03A4, r1
	EspDataBuffer[7]='B';
     c08:	82 e4       	ldi	r24, 0x42	; 66
     c0a:	80 93 8e 03 	sts	0x038E, r24
	EspDataBuffer[8]='D';
     c0e:	84 e4       	ldi	r24, 0x44	; 68
     c10:	80 93 8f 03 	sts	0x038F, r24
	EspDataBuffer[9]='0';
     c14:	80 e3       	ldi	r24, 0x30	; 48
     c16:	80 93 90 03 	sts	0x0390, r24
	EspDataBuffer[10]='1';
     c1a:	81 e3       	ldi	r24, 0x31	; 49
     c1c:	80 93 91 03 	sts	0x0391, r24
     c20:	08 95       	ret

00000c22 <UartHandlerInit>:
	
}


void UartHandlerInit()
{
     c22:	08 95       	ret

00000c24 <adc_init>:
 */ 
#include "ADC.h"
#include "..\BaseLayer\UART.h"
void adc_init(void){

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHzjkh
     c24:	ea e7       	ldi	r30, 0x7A	; 122
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	87 60       	ori	r24, 0x07	; 7
     c2c:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0)|(1 << REFS1); // Set ADC reference to 2.56 internal
     c2e:	ac e7       	ldi	r26, 0x7C	; 124
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	8c 91       	ld	r24, X
     c34:	80 6c       	ori	r24, 0xC0	; 192
     c36:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     c38:	8c 91       	ld	r24, X
     c3a:	80 62       	ori	r24, 0x20	; 32
     c3c:	8c 93       	st	X, r24

	// No MUX values needed to be changed to use ADC0

	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	ADCSRA |= (1 << ADIE);	
     c3e:	80 81       	ld	r24, Z
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	80 83       	st	Z, r24
     c44:	08 95       	ret

00000c46 <adc_read>:
    //ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	
}

void adc_read(unsigned char ch){
    ADCSRA |= (1 << ADEN);
     c46:	ea e7       	ldi	r30, 0x7A	; 122
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	90 81       	ld	r25, Z
     c4c:	90 68       	ori	r25, 0x80	; 128
     c4e:	90 83       	st	Z, r25
	ADMUX &= 0xF8; // clear bottom 3 bits
     c50:	ac e7       	ldi	r26, 0x7C	; 124
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	9c 91       	ld	r25, X
     c56:	98 7f       	andi	r25, 0xF8	; 248
     c58:	9c 93       	st	X, r25
	ADMUX |= ch; // then set bottom 3 bits to channel n
     c5a:	9c 91       	ld	r25, X
     c5c:	89 2b       	or	r24, r25
     c5e:	8c 93       	st	X, r24

	//uart_num(ch);
	ADCSRA |= (1 << ADSC);//|(1<<ADEN);  // Start A2D Conversions
     c60:	80 81       	ld	r24, Z
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	80 83       	st	Z, r24
     c66:	08 95       	ret

00000c68 <ADC_State>:
	
}

uint8_t ADC_State()
{	
	return bit_is_set(ADCSRA,ADSC);
     c68:	80 91 7a 00 	lds	r24, 0x007A
}
     c6c:	80 74       	andi	r24, 0x40	; 64
     c6e:	08 95       	ret

00000c70 <ADCValue>:
uint16_t ADCValue()
{
		uint8_t thelow=ADCL;
     c70:	80 91 78 00 	lds	r24, 0x0078
		uint16_t tenbit=ADCH<<2|thelow>>6;
     c74:	20 91 79 00 	lds	r18, 0x0079
     c78:	82 95       	swap	r24
     c7a:	86 95       	lsr	r24
     c7c:	86 95       	lsr	r24
     c7e:	83 70       	andi	r24, 0x03	; 3
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	28 2b       	or	r18, r24
		//PORTD=tenbit;
		//uart_num(thelow);
		//uart_num(ADMUX&0x07);
		return(tenbit);

}
     c8c:	82 2f       	mov	r24, r18
     c8e:	93 2f       	mov	r25, r19
     c90:	08 95       	ret

00000c92 <__vector_21>:

ISR(ADC_vect)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	8f 93       	push	r24
	uint8_t thelow=ADCL;
     c9e:	80 91 78 00 	lds	r24, 0x0078
	uint16_t tenbit=ADCH<<2|thelow>>6;
     ca2:	80 91 79 00 	lds	r24, 0x0079
	//PORTD=tenbit;
	
	
     ca6:	8f 91       	pop	r24
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <PushIntoCircularBuffer>:
 *  Author: Nikhil
 */ 
#include "CircularQueue.h"
#include "UART.h"
CbuffState_t PushIntoCircularBuffer(Cbuff_t* CircularBuffer,unsigned char data)
{
     cb2:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
     cb4:	92 81       	ldd	r25, Z+2	; 0x02
     cb6:	89 2f       	mov	r24, r25
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
     cba:	24 81       	ldd	r18, Z+4	; 0x04
     cbc:	82 17       	cp	r24, r18
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <PushIntoCircularBuffer+0x10>
	{
		next=0;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
     cc2:	23 81       	ldd	r18, Z+3	; 0x03
     cc4:	28 17       	cp	r18, r24
     cc6:	41 f0       	breq	.+16     	; 0xcd8 <PushIntoCircularBuffer+0x26>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
     cc8:	a0 81       	ld	r26, Z
     cca:	b1 81       	ldd	r27, Z+1	; 0x01
     ccc:	a9 0f       	add	r26, r25
     cce:	b1 1d       	adc	r27, r1
     cd0:	6c 93       	st	X, r22
		CircularBuffer->head=next;
     cd2:	82 83       	std	Z+2, r24	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
     cda:	08 95       	ret

00000cdc <PopFromCircularBuffer>:

CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
     cdc:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
     cde:	83 81       	ldd	r24, Z+3	; 0x03
     ce0:	98 2f       	mov	r25, r24
     ce2:	9f 5f       	subi	r25, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
     ce4:	22 81       	ldd	r18, Z+2	; 0x02
     ce6:	82 17       	cp	r24, r18
     ce8:	71 f0       	breq	.+28     	; 0xd06 <PopFromCircularBuffer+0x2a>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
     cea:	24 81       	ldd	r18, Z+4	; 0x04
     cec:	92 17       	cp	r25, r18
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <PopFromCircularBuffer+0x16>
	{
		next=0;
     cf0:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
     cf2:	a0 81       	ld	r26, Z
     cf4:	b1 81       	ldd	r27, Z+1	; 0x01
     cf6:	a8 0f       	add	r26, r24
     cf8:	b1 1d       	adc	r27, r1
     cfa:	8c 91       	ld	r24, X
     cfc:	db 01       	movw	r26, r22
     cfe:	8c 93       	st	X, r24
	 CircularBuffer->tail=next;
     d00:	93 83       	std	Z+3, r25	; 0x03
	 
  return BuffOk;
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	08 95       	ret
CbuffState_t PopFromCircularBuffer(Cbuff_t  *CircularBuffer,unsigned char *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
     d06:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	 CircularBuffer->tail=next;
	 
  return BuffOk;
}
     d08:	08 95       	ret

00000d0a <IsBuffempty>:

CbuffState_t IsBuffempty(Cbuff_t  *CircularBuffer)
{
     d0a:	fc 01       	movw	r30, r24
		if(CircularBuffer->tail==CircularBuffer->head)
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	23 81       	ldd	r18, Z+3	; 0x03
     d10:	92 81       	ldd	r25, Z+2	; 0x02
     d12:	29 13       	cpse	r18, r25
     d14:	80 e0       	ldi	r24, 0x00	; 0
		{
			return BuffEmpty;
		}
	return BuffOk;
}
     d16:	08 95       	ret

00000d18 <HeadTailDiff>:

uint8_t HeadTailDiff(Cbuff_t  *CircularBuffer,uint8_t dat)
{
     d18:	fc 01       	movw	r30, r24
	if(CircularBuffer->tail>CircularBuffer->head)
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	89 17       	cp	r24, r25
     d20:	20 f4       	brcc	.+8      	; 0xd2a <HeadTailDiff+0x12>
	{
		return ((CircularBuffer->MaxLen-CircularBuffer->tail)+CircularBuffer->head);
     d22:	24 81       	ldd	r18, Z+4	; 0x04
     d24:	82 0f       	add	r24, r18
     d26:	89 1b       	sub	r24, r25
     d28:	08 95       	ret
	}
	else
	{
		return (CircularBuffer->head-CircularBuffer->tail);
     d2a:	89 1b       	sub	r24, r25
	}
     d2c:	08 95       	ret

00000d2e <TriggerUltraSonic>:
	
}

static void TriggerUltraSonic(void)
{
	PinOutput(0,PIN_OUT8,D);
     d2e:	42 e0       	ldi	r20, 0x02	; 2
     d30:	67 e0       	ldi	r22, 0x07	; 7
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <TriggerUltraSonic+0xc>
	_delay_us(2);
	PinOutput(1,PIN_OUT8,D);
     d3a:	42 e0       	ldi	r20, 0x02	; 2
     d3c:	67 e0       	ldi	r22, 0x07	; 7
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <TriggerUltraSonic+0x18>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <TriggerUltraSonic+0x1a>
     d48:	00 00       	nop
	_delay_us(5);
	PinOutput(0,PIN_OUT8,D);
     d4a:	42 e0       	ldi	r20, 0x02	; 2
     d4c:	67 e0       	ldi	r22, 0x07	; 7
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
     d54:	08 95       	ret

00000d56 <changeIntLogic>:
}

void changeIntLogic(uint8_t logic)
{
	 
	if(logic==1)
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	31 f4       	brne	.+12     	; 0xd66 <changeIntLogic+0x10>
	{
		//EICRA  |= (1 << ISC00)| (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     d5a:	e9 e6       	ldi	r30, 0x69	; 105
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	80 83       	st	Z, r24
     d64:	08 95       	ret
	}
	else
	{
		//EICRA  &=~(1<<ISC00);
		//EICRA  |= (1 << ISC01); 
		EICRA  |= (1 << ISC00);
     d66:	e9 e6       	ldi	r30, 0x69	; 105
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	80 83       	st	Z, r24
     d70:	08 95       	ret

00000d72 <__vector_1>:
	Start=0;
	Status=1;
}

ISR (INT0_vect)
{   
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
	
	if(Start==0)
     d94:	80 91 d0 03 	lds	r24, 0x03D0
     d98:	81 11       	cpse	r24, r1
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <__vector_1+0x3e>
	{
		Timer2Enable();
     d9c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Timer2Enable>
		changeIntLogic(0);
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 ab 06 	call	0xd56	; 0xd56 <changeIntLogic>
		Start=1; 
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 d0 03 	sts	0x03D0, r24
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <__vector_1+0x54>
		      
	}/* interrupt code here */
	else
	{   	
		Timer2Count();
     db0:	0e 94 6d 0b 	call	0x16da	; 0x16da <Timer2Count>
		changeIntLogic(1);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 ab 06 	call	0xd56	; 0xd56 <changeIntLogic>
		Start=0;
     dbc:	10 92 d0 03 	sts	0x03D0, r1
		Status=1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 d1 03 	sts	0x03D1, r24
		  
	}
	
}
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <ExtIntInit>:
#include "pinout.h"
#include "UART.h"
void ExtIntInit()
{
	
	changeIntLogic(1);//MCUCR |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 ab 06 	call	0xd56	; 0xd56 <changeIntLogic>
	EIMSK  |= (1 << INT0);      // Turns on INT0
     df0:	e8 9a       	sbi	0x1d, 0	; 29
	Start=0;
     df2:	10 92 d0 03 	sts	0x03D0, r1
	Status=1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 d1 03 	sts	0x03D1, r24
     dfc:	08 95       	ret

00000dfe <InterfacePulse>:
		EICRA  |= (1 << ISC00);
	}
}

uint16_t InterfacePulse(uint16_t Pulse)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
	static uint8_t timeout=0;
	uint8_t *Data=&Pulse;
    
	if(timeout>2)
     e04:	80 91 d2 03 	lds	r24, 0x03D2
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	60 f0       	brcs	.+24     	; 0xe24 <InterfacePulse+0x26>
	{
		changeIntLogic(1);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	0e 94 ab 06 	call	0xd56	; 0xd56 <changeIntLogic>
		TriggerUltraSonic();
     e12:	0e 94 97 06 	call	0xd2e	; 0xd2e <TriggerUltraSonic>
		Status=0;
     e16:	10 92 d1 03 	sts	0x03D1, r1
		Start=0;
     e1a:	10 92 d0 03 	sts	0x03D0, r1
		timeout=0;
     e1e:	10 92 d2 03 	sts	0x03D2, r1
     e22:	3b c0       	rjmp	.+118    	; 0xe9a <InterfacePulse+0x9c>
		//uart_num(timeout);
	}
	else
	{
		
			if(Status==1)
     e24:	90 91 d1 03 	lds	r25, 0x03D1
     e28:	91 30       	cpi	r25, 0x01	; 1
     e2a:	99 f5       	brne	.+102    	; 0xe92 <InterfacePulse+0x94>
			{
				//TriggerUltraSonic();
				TimerValue=TimerValue+(overflowfag*255);
     e2c:	20 91 13 05 	lds	r18, 0x0513
     e30:	80 91 11 05 	lds	r24, 0x0511
     e34:	90 91 12 05 	lds	r25, 0x0512
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	23 9f       	mul	r18, r19
     e3c:	80 0d       	add	r24, r0
     e3e:	91 1d       	adc	r25, r1
     e40:	11 24       	eor	r1, r1
     e42:	90 93 12 05 	sts	0x0512, r25
     e46:	80 93 11 05 	sts	0x0511, r24
				TimerValue=(16*TimerValue)/58;// PRESCALER IS 256 so 1 count is 16us
     e4a:	20 91 11 05 	lds	r18, 0x0511
     e4e:	30 91 12 05 	lds	r19, 0x0512
     e52:	22 95       	swap	r18
     e54:	32 95       	swap	r19
     e56:	30 7f       	andi	r19, 0xF0	; 240
     e58:	32 27       	eor	r19, r18
     e5a:	20 7f       	andi	r18, 0xF0	; 240
     e5c:	32 27       	eor	r19, r18
     e5e:	af e9       	ldi	r26, 0x9F	; 159
     e60:	b6 e4       	ldi	r27, 0x46	; 70
     e62:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
     e66:	92 95       	swap	r25
     e68:	82 95       	swap	r24
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	89 27       	eor	r24, r25
     e6e:	9f 70       	andi	r25, 0x0F	; 15
     e70:	89 27       	eor	r24, r25
     e72:	90 93 12 05 	sts	0x0512, r25
     e76:	80 93 11 05 	sts	0x0511, r24
				Pulse=TimerValue;
     e7a:	c0 91 11 05 	lds	r28, 0x0511
     e7e:	d0 91 12 05 	lds	r29, 0x0512
				Pulse|=0X8000;
     e82:	d0 68       	ori	r29, 0x80	; 128
				timeout=0;
     e84:	10 92 d2 03 	sts	0x03D2, r1
				Status=0;
     e88:	10 92 d1 03 	sts	0x03D1, r1
				TriggerUltraSonic();
     e8c:	0e 94 97 06 	call	0xd2e	; 0xd2e <TriggerUltraSonic>
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <InterfacePulse+0x9c>
			}
			else
			{
				Pulse|=0x1000;
     e92:	d0 61       	ori	r29, 0x10	; 16
				timeout++;
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 d2 03 	sts	0x03D2, r24
			}

	}
	return Pulse;
}
     e9a:	8c 2f       	mov	r24, r28
     e9c:	9d 2f       	mov	r25, r29
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <i2c_init>:
	
};
void i2c_init(void)
{
	
	TWBR = (uint8_t)TWBR_val;
     ea4:	e8 eb       	ldi	r30, 0xB8	; 184
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	8c e0       	ldi	r24, 0x0C	; 12
     eaa:	80 83       	st	Z, r24
	uart_num(TWBR);
     eac:	80 81       	ld	r24, Z
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
     eb4:	08 95       	ret

00000eb6 <EOTi2c>:
}
uint8_t EOTi2c()
{

	while( !(TWCR & (1<<TWINT)) )
     eb6:	ec eb       	ldi	r30, 0xBC	; 188
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 23       	and	r24, r24
     ebe:	ec f7       	brge	.-6      	; 0xeba <EOTi2c+0x4>
	{
	}

	return 1;
}
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	08 95       	ret

00000ec4 <i2c_start>:


uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
     ec4:	ec eb       	ldi	r30, 0xBC	; 188
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     eca:	94 ea       	ldi	r25, 0xA4	; 164
     ecc:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) )
     ece:	90 81       	ld	r25, Z
     ed0:	99 23       	and	r25, r25
     ed2:	ec f7       	brge	.-6      	; 0xece <i2c_start+0xa>
	{
		
	}
	//uart_num(!(TWCR & (1<<TWINT)));
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     ed4:	90 91 b9 00 	lds	r25, 0x00B9
     ed8:	98 7f       	andi	r25, 0xF8	; 248
     eda:	98 30       	cpi	r25, 0x08	; 8
     edc:	a1 f4       	brne	.+40     	; 0xf06 <i2c_start+0x42>
	//uart_string("hrrr");
	// load slave address into data register
	TWDR = address;
     ede:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     ee2:	84 e8       	ldi	r24, 0x84	; 132
     ee4:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     ee8:	ec eb       	ldi	r30, 0xBC	; 188
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	ec f7       	brge	.-6      	; 0xeec <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     ef2:	90 91 b9 00 	lds	r25, 0x00B9
     ef6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     ef8:	98 31       	cpi	r25, 0x18	; 24
     efa:	39 f0       	breq	.+14     	; 0xf0a <i2c_start+0x46>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 34       	cpi	r25, 0x40	; 64
     f00:	29 f4       	brne	.+10     	; 0xf0c <i2c_start+0x48>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	08 95       	ret
	{
		
	}
	//uart_num(!(TWCR & (1<<TWINT)));
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
}
     f0c:	08 95       	ret

00000f0e <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     f0e:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     f12:	84 e8       	ldi	r24, 0x84	; 132
     f14:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     f18:	ec eb       	ldi	r30, 0xBC	; 188
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	ec f7       	brge	.-6      	; 0xf1c <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     f22:	90 91 b9 00 	lds	r25, 0x00B9
     f26:	98 7f       	andi	r25, 0xF8	; 248
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	98 32       	cpi	r25, 0x28	; 40
     f2c:	09 f4       	brne	.+2      	; 0xf30 <i2c_write+0x22>
     f2e:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     f30:	08 95       	ret

00000f32 <i2c_stop>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f32:	84 e9       	ldi	r24, 0x94	; 148
     f34:	80 93 bc 00 	sts	0x00BC, r24
     f38:	08 95       	ret

00000f3a <i2c_writeRegInit>:
	

	return 0;
}
uint8_t i2c_writeRegInit(uint8_t devaddr, uint8_t regaddr, uint16_t length)
{
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	f8 2e       	mov	r15, r24
     f48:	e6 2e       	mov	r14, r22
     f4a:	8a 01       	movw	r16, r20

	for (uint16_t i = 0; i < length; i++)
     f4c:	41 15       	cp	r20, r1
     f4e:	51 05       	cpc	r21, r1
     f50:	d1 f0       	breq	.+52     	; 0xf86 <i2c_writeRegInit+0x4c>
     f52:	c0 e0       	ldi	r28, 0x00	; 0
     f54:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     f56:	8f 2d       	mov	r24, r15
     f58:	0e 94 62 07 	call	0xec4	; 0xec4 <i2c_start>
     f5c:	81 11       	cpse	r24, r1
     f5e:	15 c0       	rjmp	.+42     	; 0xf8a <i2c_writeRegInit+0x50>
		i2c_write(regaddr);
     f60:	8e 2d       	mov	r24, r14
     f62:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
		if (i2c_write(pgm_read_byte(&ssd1306_init_sequence[i]))) return 1;
     f66:	fe 01       	movw	r30, r28
     f68:	e8 59       	subi	r30, 0x98	; 152
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	84 91       	lpm	r24, Z
     f6e:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
     f72:	81 11       	cpse	r24, r1
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <i2c_writeRegInit+0x54>
		i2c_stop();
     f76:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
	return 0;
}
uint8_t i2c_writeRegInit(uint8_t devaddr, uint8_t regaddr, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
     f7a:	21 96       	adiw	r28, 0x01	; 1
     f7c:	c0 17       	cp	r28, r16
     f7e:	d1 07       	cpc	r29, r17
     f80:	51 f7       	brne	.-44     	; 0xf56 <i2c_writeRegInit+0x1c>
		i2c_stop();
	}

	

	return 0;
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <i2c_writeRegInit+0x56>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <i2c_writeRegInit+0x56>
uint8_t i2c_writeRegInit(uint8_t devaddr, uint8_t regaddr, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <i2c_writeRegInit+0x56>
		i2c_write(regaddr);
		if (i2c_write(pgm_read_byte(&ssd1306_init_sequence[i]))) return 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
	}

	

	return 0;
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	08 95       	ret

00000f9e <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	f8 2e       	mov	r15, r24
     fac:	e6 2e       	mov	r14, r22

	for (uint16_t i = 0; i < length; i++)
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	c9 f0       	breq	.+50     	; 0xfe6 <i2c_writeReg+0x48>
     fb4:	c4 2f       	mov	r28, r20
     fb6:	d5 2f       	mov	r29, r21
	i2c_stop();
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
     fb8:	89 01       	movw	r16, r18
     fba:	0c 0f       	add	r16, r28
     fbc:	1d 1f       	adc	r17, r29
{

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     fbe:	8f 2d       	mov	r24, r15
     fc0:	0e 94 62 07 	call	0xec4	; 0xec4 <i2c_start>
     fc4:	81 11       	cpse	r24, r1
     fc6:	11 c0       	rjmp	.+34     	; 0xfea <i2c_writeReg+0x4c>
        i2c_write(regaddr);
     fc8:	8e 2d       	mov	r24, r14
     fca:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
		if (i2c_write(data[i])) return 1;
     fce:	89 91       	ld	r24, Y+
     fd0:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
     fd4:	81 11       	cpse	r24, r1
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <i2c_writeReg+0x50>
		i2c_stop();
     fd8:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
     fdc:	c0 17       	cp	r28, r16
     fde:	d1 07       	cpc	r29, r17
     fe0:	71 f7       	brne	.-36     	; 0xfbe <i2c_writeReg+0x20>
		i2c_stop();
	}

	

	return 0;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <i2c_writeReg+0x52>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <i2c_writeReg+0x52>
uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_start(devaddr | 0x00)) return 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <i2c_writeReg+0x52>
        i2c_write(regaddr);
		if (i2c_write(data[i])) return 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
	}

	

	return 0;
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret

00000ffe <ssd1036_Init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
}

uint8_t ssd1036_Init()
{
	return i2c_writeRegInit(0x78,0x00,28);
     ffe:	4c e1       	ldi	r20, 0x1C	; 28
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	88 e7       	ldi	r24, 0x78	; 120
    1006:	0e 94 9d 07 	call	0xf3a	; 0xf3a <i2c_writeRegInit>
}
    100a:	08 95       	ret

0000100c <ssd1036_chumma>:
		//chumma[i]=0x00;
	//}
	// i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
    100c:	25 e0       	ldi	r18, 0x05	; 5
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	43 ed       	ldi	r20, 0xD3	; 211
    1012:	53 e0       	ldi	r21, 0x03	; 3
    1014:	60 e4       	ldi	r22, 0x40	; 64
    1016:	88 e7       	ldi	r24, 0x78	; 120
    1018:	0e 94 cf 07 	call	0xf9e	; 0xf9e <i2c_writeReg>
} 
    101c:	08 95       	ret

0000101e <ssd1306_char_font6x8>:

void ssd1306_char_font6x8(char ch) {
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	08 2f       	mov	r16, r24
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
    1028:	88 e7       	ldi	r24, 0x78	; 120
    102a:	0e 94 62 07 	call	0xec4	; 0xec4 <i2c_start>
    102e:	81 11       	cpse	r24, r1
    1030:	20 c0       	rjmp	.+64     	; 0x1072 <ssd1306_char_font6x8+0x54>
	i2c_write(0x40);
    1032:	80 e4       	ldi	r24, 0x40	; 64
    1034:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
    1038:	00 52       	subi	r16, 0x20	; 32
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
    103a:	80 2f       	mov	r24, r16
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	8c 01       	movw	r16, r24
    1040:	00 0f       	add	r16, r16
    1042:	11 1f       	adc	r17, r17
    1044:	80 0f       	add	r24, r16
    1046:	91 1f       	adc	r25, r17
    1048:	8c 01       	movw	r16, r24
    104a:	00 0f       	add	r16, r16
    104c:	11 1f       	adc	r17, r17
    104e:	c0 e0       	ldi	r28, 0x00	; 0
    1050:	d0 e0       	ldi	r29, 0x00	; 0
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 //i2c_writeReg(0x78,0x40,chumma,255);
	 return i2c_writeReg(0x78,0x40,chumma,5);
} 

void ssd1306_char_font6x8(char ch) {
    1052:	fe 01       	movw	r30, r28
    1054:	e0 0f       	add	r30, r16
    1056:	f1 1f       	adc	r31, r17
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
    1058:	ec 57       	subi	r30, 0x7C	; 124
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	84 91       	lpm	r24, Z
    105e:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
    1062:	81 11       	cpse	r24, r1
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <ssd1306_char_font6x8+0x54>
    1066:	21 96       	adiw	r28, 0x01	; 1

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
	if (i2c_start(0x78 | 0x00)) return 1;
	i2c_write(0x40);
	for (uint8_t i = 0; i < 6; i++)
    1068:	c6 30       	cpi	r28, 0x06	; 6
    106a:	d1 05       	cpc	r29, r1
    106c:	91 f7       	brne	.-28     	; 0x1052 <ssd1306_char_font6x8+0x34>
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
    106e:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <ssd1306_setpos>:
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
void ssd1306_setpos(uint8_t x, uint8_t y)
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	c8 2f       	mov	r28, r24
    1082:	d6 2f       	mov	r29, r22
	if (i2c_start(0x78 | 0x00)) return 1;
    1084:	88 e7       	ldi	r24, 0x78	; 120
    1086:	0e 94 62 07 	call	0xec4	; 0xec4 <i2c_start>
    108a:	81 11       	cpse	r24, r1
    108c:	12 c0       	rjmp	.+36     	; 0x10b2 <ssd1306_setpos+0x36>
	i2c_write(0x00);
    108e:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
	i2c_write(0xb0 + y);
    1092:	8d 2f       	mov	r24, r29
    1094:	80 55       	subi	r24, 0x50	; 80
    1096:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
	i2c_write((x & 0x0f));
    109a:	8c 2f       	mov	r24, r28
    109c:	8f 70       	andi	r24, 0x0F	; 15
    109e:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
	i2c_write(((x & 0xf0) >> 4) | 0x10); // | 0x10
    10a2:	8c 2f       	mov	r24, r28
    10a4:	82 95       	swap	r24
    10a6:	8f 70       	andi	r24, 0x0F	; 15
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
	/* TODO: Verify correctness */	 // | 0x01
	i2c_stop();
    10ae:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <ssd1306_String_font6x8>:
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    10be:	86 2f       	mov	r24, r22
	ssd1306_setpos(x,y);
    10c0:	64 2f       	mov	r22, r20
    10c2:	0e 94 3e 08 	call	0x107c	; 0x107c <ssd1306_setpos>
	while ( *SSDstring)
    10c6:	88 81       	ld	r24, Y
    10c8:	88 23       	and	r24, r24
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <ssd1306_String_font6x8+0x20>
	{
		if (i2c_write(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]))) return 1;//ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
    10cc:	21 96       	adiw	r28, 0x01	; 1
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
	{
     ssd1306_char_font6x8(*SSDstring++);
    10ce:	0e 94 0f 08 	call	0x101e	; 0x101e <ssd1306_char_font6x8>
	i2c_stop();
}
void ssd1306_String_font6x8(const unsigned char *SSDstring,uint8_t x, uint8_t y)
{
	ssd1306_setpos(x,y);
	while ( *SSDstring)
    10d2:	89 91       	ld	r24, Y+
    10d4:	81 11       	cpse	r24, r1
    10d6:	fb cf       	rjmp	.-10     	; 0x10ce <ssd1306_String_font6x8+0x16>
	{
     ssd1306_char_font6x8(*SSDstring++);
	 x=x+6;
	}
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <ssd1306_Fill_Rectangle>:
		i2c_write(0x01);
	}
	i2c_stop();
}
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	d4 2f       	mov	r29, r20
		ssd1306_setpos(x,y);
    10e4:	0e 94 3e 08 	call	0x107c	; 0x107c <ssd1306_setpos>
		if (i2c_start(0x78 | 0x00)) return 1;
    10e8:	88 e7       	ldi	r24, 0x78	; 120
    10ea:	0e 94 62 07 	call	0xec4	; 0xec4 <i2c_start>
    10ee:	81 11       	cpse	r24, r1
    10f0:	19 c0       	rjmp	.+50     	; 0x1124 <ssd1306_Fill_Rectangle+0x46>
		i2c_write(0x40);
    10f2:	80 e4       	ldi	r24, 0x40	; 64
    10f4:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
		for(uint8_t i=0;i<data;i++)
    10f8:	d1 11       	cpse	r29, r1
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <ssd1306_Fill_Rectangle+0x22>
    10fc:	cd 2f       	mov	r28, r29
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <ssd1306_Fill_Rectangle+0x36>
    1100:	c0 e0       	ldi	r28, 0x00	; 0
		{
			i2c_write(0xff);
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
void ssd1306_Fill_Rectangle(uint8_t x, uint8_t y,uint8_t data)
{
		ssd1306_setpos(x,y);
		if (i2c_start(0x78 | 0x00)) return 1;
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
    1108:	cf 5f       	subi	r28, 0xFF	; 255
    110a:	cd 13       	cpse	r28, r29
    110c:	fa cf       	rjmp	.-12     	; 0x1102 <ssd1306_Fill_Rectangle+0x24>
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
    110e:	df 37       	cpi	r29, 0x7F	; 127
    1110:	a8 f3       	brcs	.-22     	; 0x10fc <ssd1306_Fill_Rectangle+0x1e>
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <ssd1306_Fill_Rectangle+0x42>
		{
		  i2c_write(0x01);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 87 07 	call	0xf0e	; 0xf0e <i2c_write>
		i2c_write(0x40);
		for(uint8_t i=0;i<data;i++)
		{
			i2c_write(0xff);
		}
		for(uint8_t i=data;i<127;i++)
    111a:	cf 5f       	subi	r28, 0xFF	; 255
    111c:	cf 37       	cpi	r28, 0x7F	; 127
    111e:	d0 f3       	brcs	.-12     	; 0x1114 <ssd1306_Fill_Rectangle+0x36>
		{
		  i2c_write(0x01);
		}
		i2c_stop();
    1120:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <SSDGetByte>:

uint8_t SSDGetByte(char SSDch,uint8_t SSDarrIndex)
{
	uint8_t c = SSDch - 32;
    112a:	80 52       	subi	r24, 0x20	; 32
	return (pgm_read_byte(&ssd1306xled_font6x8[c * 6 + SSDarrIndex]));
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	fc 01       	movw	r30, r24
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	8e 0f       	add	r24, r30
    1136:	9f 1f       	adc	r25, r31
    1138:	fc 01       	movw	r30, r24
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	e6 0f       	add	r30, r22
    1140:	f1 1d       	adc	r31, r1
    1142:	ec 57       	subi	r30, 0x7C	; 124
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	84 91       	lpm	r24, Z
}
    1148:	08 95       	ret

0000114a <SwitchNvmOff>:
	NVMState=0;
}

static void SwitchNvmOff()
{
	EECR &= ~(1<<EERIE);
    114a:	fb 98       	cbi	0x1f, 3	; 31
	NVMState=2;
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	80 93 1e 02 	sts	0x021E, r24
    1152:	08 95       	ret

00001154 <__vector_22>:
uint8_t *message;
//EEPROM writing ISR
volatile uint8_t WriteSize;
static void SwitchNvmOff();
ISR(EE_READY_vect)
{
    1154:	1f 92       	push	r1
    1156:	0f 92       	push	r0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	0f 92       	push	r0
    115c:	11 24       	eor	r1, r1
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
	/*check if not end of string and address
	didn't reach end of EEPROM*/
	static uint8_t deom;
	if(WriteorRead==0)
    1176:	80 91 19 05 	lds	r24, 0x0519
    117a:	81 11       	cpse	r24, r1
    117c:	27 c0       	rjmp	.+78     	; 0x11cc <__vector_22+0x78>
	{
		//uart_num(eepromaddress);
		//uart_string("\n");
	if (WriteSize!=0)
    117e:	80 91 1c 05 	lds	r24, 0x051C
    1182:	88 23       	and	r24, r24
    1184:	01 f1       	breq	.+64     	; 0x11c6 <__vector_22+0x72>
	{
		//loads address and increments for next load
		NVMState=1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
    118c:	80 91 17 05 	lds	r24, 0x0517
    1190:	90 91 18 05 	lds	r25, 0x0518
    1194:	92 bd       	out	0x22, r25	; 34
    1196:	81 bd       	out	0x21, r24	; 33
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	90 93 18 05 	sts	0x0518, r25
    119e:	80 93 17 05 	sts	0x0517, r24
		//loads current byte and increments index for next load
		WriteSize--;
    11a2:	80 91 1c 05 	lds	r24, 0x051C
    11a6:	81 50       	subi	r24, 0x01	; 1
    11a8:	80 93 1c 05 	sts	0x051C, r24
		EEDR=message[WriteSize];
    11ac:	80 91 1c 05 	lds	r24, 0x051C
    11b0:	e0 91 15 05 	lds	r30, 0x0515
    11b4:	f0 91 16 05 	lds	r31, 0x0516
    11b8:	e8 0f       	add	r30, r24
    11ba:	f1 1d       	adc	r31, r1
    11bc:	80 81       	ld	r24, Z
    11be:	80 bd       	out	0x20, r24	; 32
		//master write enable
		EECR|=(1<<EEMPE);
    11c0:	fa 9a       	sbi	0x1f, 2	; 31
		//strobe eeprom write
		EECR|=(1<<EEPE);
    11c2:	f9 9a       	sbi	0x1f, 1	; 31
    11c4:	35 c0       	rjmp	.+106    	; 0x1230 <__vector_22+0xdc>
	}
	else
	{
		//disable eeprom ready interrupt
		//uart_string("switch off");
		SwitchNvmOff();
    11c6:	0e 94 a5 08 	call	0x114a	; 0x114a <SwitchNvmOff>
    11ca:	32 c0       	rjmp	.+100    	; 0x1230 <__vector_22+0xdc>
    }
	}
	else
	{
	
	if(eepromaddress<=(eepromaddressCopy))
    11cc:	20 91 17 05 	lds	r18, 0x0517
    11d0:	30 91 18 05 	lds	r19, 0x0518
    11d4:	80 91 1a 05 	lds	r24, 0x051A
    11d8:	90 91 1b 05 	lds	r25, 0x051B
    11dc:	82 17       	cp	r24, r18
    11de:	93 07       	cpc	r25, r19
    11e0:	f8 f0       	brcs	.+62     	; 0x1220 <__vector_22+0xcc>
	{
		NVMState=1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 1e 02 	sts	0x021E, r24
		EEAR=eepromaddress++;
    11e8:	80 91 17 05 	lds	r24, 0x0517
    11ec:	90 91 18 05 	lds	r25, 0x0518
    11f0:	92 bd       	out	0x22, r25	; 34
    11f2:	81 bd       	out	0x21, r24	; 33
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	90 93 18 05 	sts	0x0518, r25
    11fa:	80 93 17 05 	sts	0x0517, r24
		EECR|=(1<<EERE);
    11fe:	f8 9a       	sbi	0x1f, 0	; 31
		message[IndexNvmCount]=EEDR;
    1200:	90 91 14 05 	lds	r25, 0x0514
    1204:	80 b5       	in	r24, 0x20	; 32
    1206:	e0 91 15 05 	lds	r30, 0x0515
    120a:	f0 91 16 05 	lds	r31, 0x0516
    120e:	e9 0f       	add	r30, r25
    1210:	f1 1d       	adc	r31, r1
    1212:	80 83       	st	Z, r24
		//uart_num(message[IndexNvmCount]);
		IndexNvmCount--;
    1214:	80 91 14 05 	lds	r24, 0x0514
    1218:	81 50       	subi	r24, 0x01	; 1
    121a:	80 93 14 05 	sts	0x0514, r24
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <__vector_22+0xdc>
	}
		else
		{
			//disable eeprom ready interrupt
			//uart_string("switch read");
			SwitchNvmOff();
    1220:	0e 94 a5 08 	call	0x114a	; 0x114a <SwitchNvmOff>
			IndexNvmCount=0;
    1224:	10 92 14 05 	sts	0x0514, r1
			eepromaddressCopy=0;
    1228:	10 92 1b 05 	sts	0x051B, r1
    122c:	10 92 1a 05 	sts	0x051A, r1
			
		}
	}
}
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <NvmPopulateWriteSize>:

void NvmPopulateWriteSize(uint8_t size,uint8_t startadd,uint8_t WriteorRead1,uint8_t *ptr)
{
	WriteSize=size;
    1252:	80 93 1c 05 	sts	0x051C, r24
	eepromaddress=startadd;
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	70 93 18 05 	sts	0x0518, r23
    125c:	60 93 17 05 	sts	0x0517, r22
	WriteorRead=WriteorRead1;
    1260:	40 93 19 05 	sts	0x0519, r20
	message=ptr;
    1264:	30 93 16 05 	sts	0x0516, r19
    1268:	20 93 15 05 	sts	0x0515, r18
	eepromaddressCopy=(eepromaddress+WriteSize)-1;
    126c:	20 91 1c 05 	lds	r18, 0x051C
    1270:	80 91 17 05 	lds	r24, 0x0517
    1274:	90 91 18 05 	lds	r25, 0x0518
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	82 0f       	add	r24, r18
    127c:	91 1d       	adc	r25, r1
    127e:	90 93 1b 05 	sts	0x051B, r25
    1282:	80 93 1a 05 	sts	0x051A, r24
	IndexNvmCount=WriteSize-1;
    1286:	80 91 1c 05 	lds	r24, 0x051C
    128a:	81 50       	subi	r24, 0x01	; 1
    128c:	80 93 14 05 	sts	0x0514, r24
    1290:	08 95       	ret

00001292 <SwitchNvmOn>:
	//uart_num(WriteSize);
}

void SwitchNvmOn()
{
	EECR |= (1<<EERIE);
    1292:	fb 9a       	sbi	0x1f, 3	; 31
	NVMState=0;
    1294:	10 92 1e 02 	sts	0x021E, r1
    1298:	08 95       	ret

0000129a <GetNVMState>:
	//uart_num(NVMState);
}

uint8_t GetNVMState()
{	
	return NVMState;
    129a:	80 91 1e 02 	lds	r24, 0x021E
    129e:	08 95       	ret

000012a0 <PinOutConfig>:
//static Port PORTB_OUT;

void PinOutConfig(uint8_t State,Pin Pin_s,Ports Port_s)
{
   volatile uint8_t *Reg;
   Reg=portModeRegister(Port_s);
    12a0:	e4 2f       	mov	r30, r20
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ee 54       	subi	r30, 0x4E	; 78
    12aa:	fd 4f       	sbci	r31, 0xFD	; 253
    12ac:	25 91       	lpm	r18, Z+
    12ae:	34 91       	lpm	r19, Z
    12b0:	e2 2f       	mov	r30, r18
    12b2:	f3 2f       	mov	r31, r19
  if(State==1)
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	69 f4       	brne	.+26     	; 0x12d2 <PinOutConfig+0x32>
  {
	  
	  *Reg|=1<<Pin_s;
    12b8:	20 81       	ld	r18, Z
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	ac 01       	movw	r20, r24
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <PinOutConfig+0x26>
    12c2:	44 0f       	add	r20, r20
    12c4:	55 1f       	adc	r21, r21
    12c6:	6a 95       	dec	r22
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <PinOutConfig+0x22>
    12ca:	ba 01       	movw	r22, r20
    12cc:	62 2b       	or	r22, r18
    12ce:	60 83       	st	Z, r22
    12d0:	08 95       	ret
  }
  else 
  {
	  *Reg&=~(1<<Pin_s);
    12d2:	20 81       	ld	r18, Z
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	ac 01       	movw	r20, r24
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <PinOutConfig+0x40>
    12dc:	44 0f       	add	r20, r20
    12de:	55 1f       	adc	r21, r21
    12e0:	6a 95       	dec	r22
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <PinOutConfig+0x3c>
    12e4:	ba 01       	movw	r22, r20
    12e6:	60 95       	com	r22
    12e8:	62 23       	and	r22, r18
    12ea:	60 83       	st	Z, r22
    12ec:	08 95       	ret

000012ee <PinOutput>:
  } 
}
void PinOutput(uint8_t Out,Pin Pin_s,Ports Port_s )
{
    volatile uint8_t *out;
	out=portOutRegister(Port_s);
    12ee:	e4 2f       	mov	r30, r20
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	e8 54       	subi	r30, 0x48	; 72
    12f8:	fd 4f       	sbci	r31, 0xFD	; 253
    12fa:	25 91       	lpm	r18, Z+
    12fc:	34 91       	lpm	r19, Z
    12fe:	e2 2f       	mov	r30, r18
    1300:	f3 2f       	mov	r31, r19
	    if(Out==ON)
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	69 f4       	brne	.+26     	; 0x1320 <PinOutput+0x32>
		{
			*out=*out|(1<<Pin_s);
    1306:	20 81       	ld	r18, Z
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	ac 01       	movw	r20, r24
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <PinOutput+0x26>
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21
    1314:	6a 95       	dec	r22
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <PinOutput+0x22>
    1318:	ba 01       	movw	r22, r20
    131a:	62 2b       	or	r22, r18
    131c:	60 83       	st	Z, r22
    131e:	08 95       	ret
		}
		else
		{
			*out&=~(1<<Pin_s);
    1320:	20 81       	ld	r18, Z
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	ac 01       	movw	r20, r24
    1328:	02 c0       	rjmp	.+4      	; 0x132e <PinOutput+0x40>
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	6a 95       	dec	r22
    1330:	e2 f7       	brpl	.-8      	; 0x132a <PinOutput+0x3c>
    1332:	ba 01       	movw	r22, r20
    1334:	60 95       	com	r22
    1336:	62 23       	and	r22, r18
    1338:	60 83       	st	Z, r22
    133a:	08 95       	ret

0000133c <PinValue>:


void PinValue(uint8_t *Value,Pin Pin_s,Ports Port_s)
{
	    volatile uint8_t *out;
	    out=portInputRegister(Port_s);
    133c:	e4 2f       	mov	r30, r20
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	e4 55       	subi	r30, 0x54	; 84
    1346:	fd 4f       	sbci	r31, 0xFD	; 253
    1348:	25 91       	lpm	r18, Z+
    134a:	34 91       	lpm	r19, Z
    134c:	e2 2f       	mov	r30, r18
    134e:	f3 2f       	mov	r31, r19
		
		//*Value=bit_is_clear(*out,Pin_s);
		*Value=bit_is_set(*out,Pin_s);
    1350:	40 81       	ld	r20, Z
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	f9 01       	movw	r30, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <PinValue+0x22>
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	6a 95       	dec	r22
    1360:	e2 f7       	brpl	.-8      	; 0x135a <PinValue+0x1e>
    1362:	bf 01       	movw	r22, r30
    1364:	64 23       	and	r22, r20
    1366:	fc 01       	movw	r30, r24
    1368:	60 83       	st	Z, r22
    136a:	08 95       	ret

0000136c <ssd1306_AsyncStart>:
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
	switch (ssdStartState)
    136c:	90 91 de 03 	lds	r25, 0x03DE
    1370:	91 30       	cpi	r25, 0x01	; 1
    1372:	81 f0       	breq	.+32     	; 0x1394 <ssd1306_AsyncStart+0x28>
    1374:	28 f0       	brcs	.+10     	; 0x1380 <ssd1306_AsyncStart+0x14>
    1376:	92 30       	cpi	r25, 0x02	; 2
    1378:	d1 f0       	breq	.+52     	; 0x13ae <ssd1306_AsyncStart+0x42>
    137a:	93 30       	cpi	r25, 0x03	; 3
    137c:	89 f5       	brne	.+98     	; 0x13e0 <ssd1306_AsyncStart+0x74>
    137e:	21 c0       	rjmp	.+66     	; 0x13c2 <ssd1306_AsyncStart+0x56>
	{
		case 0:
		// reset TWI control register
		TWCR = 0;
    1380:	ec eb       	ldi	r30, 0xBC	; 188
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	10 82       	st	Z, r1
		// transmit START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1386:	84 ea       	ldi	r24, 0xA4	; 164
    1388:	80 83       	st	Z, r24
		ssdStartState=1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 de 03 	sts	0x03DE, r24
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    1390:	82 e0       	ldi	r24, 0x02	; 2
		// reset TWI control register
		TWCR = 0;
		// transmit START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
		ssdStartState=1;
		break;
    1392:	08 95       	ret
		case 1:
		if(EOTi2c()==1)
    1394:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EOTi2c>
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	21 f5       	brne	.+72     	; 0x13e4 <ssd1306_AsyncStart+0x78>
		{
			
			if((TWSR & 0xF8) == TW_START)
    139c:	80 91 b9 00 	lds	r24, 0x00B9
    13a0:	88 7f       	andi	r24, 0xF8	; 248
    13a2:	88 30       	cpi	r24, 0x08	; 8
    13a4:	09 f5       	brne	.+66     	; 0x13e8 <ssd1306_AsyncStart+0x7c>
			{
				ssdStartState=2;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	80 93 de 03 	sts	0x03DE, r24
    13ac:	08 95       	ret
			}
		}
		break;
		case 2:
		// load slave address into data register
		TWDR = address;
    13ae:	80 93 bb 00 	sts	0x00BB, r24
		// start transmission of address
		TWCR = (1<<TWINT) | (1<<TWEN);
    13b2:	84 e8       	ldi	r24, 0x84	; 132
    13b4:	80 93 bc 00 	sts	0x00BC, r24
		ssdStartState=3;
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	80 93 de 03 	sts	0x03DE, r24
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    13be:	82 e0       	ldi	r24, 0x02	; 2
		// load slave address into data register
		TWDR = address;
		// start transmission of address
		TWCR = (1<<TWINT) | (1<<TWEN);
		ssdStartState=3;
		break;
    13c0:	08 95       	ret
		case 3:
		if(EOTi2c())
    13c2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EOTi2c>
    13c6:	88 23       	and	r24, r24
    13c8:	89 f0       	breq	.+34     	; 0x13ec <ssd1306_AsyncStart+0x80>
		{
			uint8_t twst = TW_STATUS & 0xF8;
    13ca:	80 91 b9 00 	lds	r24, 0x00B9
    13ce:	88 7f       	andi	r24, 0xF8	; 248
			if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
    13d0:	88 31       	cpi	r24, 0x18	; 24
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <ssd1306_AsyncStart+0x6c>
    13d4:	80 34       	cpi	r24, 0x40	; 64
    13d6:	61 f4       	brne	.+24     	; 0x13f0 <ssd1306_AsyncStart+0x84>
			{
				RetVal=0;//failed
			}
			else
			{
				ssdStartState=0;
    13d8:	10 92 de 03 	sts	0x03DE, r1
				RetVal=1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	08 95       	ret
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	08 95       	ret
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	08 95       	ret
				ssdStartState=2;
				
			}
			else
			{
				RetVal=0; //failed
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	08 95       	ret
uint8_t SSDsetXY(uint8_t x,uint8_t y);
uint8_t SSDWritechar_font6x8(char ch);
static uint8_t ssd1306_AsyncStart(uint8_t address)
{
	static uint8_t ssdStartState;
	uint8_t RetVal=2;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	08 95       	ret
		if(EOTi2c())
		{
			uint8_t twst = TW_STATUS & 0xF8;
			if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
			{
				RetVal=0;//failed
    13f0:	80 e0       	ldi	r24, 0x00	; 0
		/* Your code here */
		break;
	}
	
	return RetVal;
}
    13f2:	08 95       	ret

000013f4 <ssd1306_AsyncWrite>:
static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
	
	switch (SSDwriteState)
    13f4:	90 91 df 03 	lds	r25, 0x03DF
    13f8:	99 23       	and	r25, r25
    13fa:	19 f0       	breq	.+6      	; 0x1402 <ssd1306_AsyncWrite+0xe>
    13fc:	91 30       	cpi	r25, 0x01	; 1
    13fe:	e1 f4       	brne	.+56     	; 0x1438 <ssd1306_AsyncWrite+0x44>
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <ssd1306_AsyncWrite+0x22>
	{
			case 0:
			// load slave address into data register
			TWDR = SSDbyte;
    1402:	80 93 bb 00 	sts	0x00BB, r24
			// start transmission of address
			TWCR = (1<<TWINT) | (1<<TWEN);
    1406:	84 e8       	ldi	r24, 0x84	; 132
    1408:	80 93 bc 00 	sts	0x00BC, r24
			SSDwriteState=1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 93 df 03 	sts	0x03DF, r24
}

static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
    1412:	82 e0       	ldi	r24, 0x02	; 2
			// load slave address into data register
			TWDR = SSDbyte;
			// start transmission of address
			TWCR = (1<<TWINT) | (1<<TWEN);
			SSDwriteState=1;
			break;
    1414:	08 95       	ret
			case 1:
			//uart_num(SSDbyte);
			if(EOTi2c())
    1416:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EOTi2c>
    141a:	88 23       	and	r24, r24
    141c:	79 f0       	breq	.+30     	; 0x143c <ssd1306_AsyncWrite+0x48>
			{
				
				//uart_string("value:");
				//uart_num((TWSR & 0xF8));
				//uart_string("\n");
				if((TWSR & 0xF8) == TW_MT_DATA_ACK )
    141e:	80 91 b9 00 	lds	r24, 0x00B9
    1422:	88 7f       	andi	r24, 0xF8	; 248
    1424:	88 32       	cpi	r24, 0x28	; 40
    1426:	21 f4       	brne	.+8      	; 0x1430 <ssd1306_AsyncWrite+0x3c>
				{
					SSDwriteState=0;
    1428:	10 92 df 03 	sts	0x03DF, r1
					RetVal=1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	08 95       	ret
				}
				else
				{
					SSDwriteState=0;
    1430:	10 92 df 03 	sts	0x03DF, r1
					RetVal=0; //failed
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret
}

static uint8_t ssd1306_AsyncWrite(uint8_t SSDbyte)
{   
	static uint8_t SSDwriteState;
	uint8_t RetVal=2;
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	08 95       	ret
    143c:	82 e0       	ldi	r24, 0x02	; 2
		default:
		/* Your code here */
		break;
	}
	return RetVal;
}
    143e:	08 95       	ret

00001440 <SSDsetXY>:

uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
	switch (SSDsetXYstates)
    1440:	90 91 dc 03 	lds	r25, 0x03DC
    1444:	91 30       	cpi	r25, 0x01	; 1
    1446:	79 f0       	breq	.+30     	; 0x1466 <SSDsetXY+0x26>
    1448:	20 f0       	brcs	.+8      	; 0x1452 <SSDsetXY+0x12>
    144a:	92 30       	cpi	r25, 0x02	; 2
    144c:	09 f0       	breq	.+2      	; 0x1450 <SSDsetXY+0x10>
    144e:	45 c0       	rjmp	.+138    	; 0x14da <SSDsetXY+0x9a>
    1450:	3e c0       	rjmp	.+124    	; 0x14ce <SSDsetXY+0x8e>
	{
		case 0:
		//uart_string("4\n");
		if(ssd1306_AsyncStart(0x78)==1)
    1452:	88 e7       	ldi	r24, 0x78	; 120
    1454:	0e 94 b6 09 	call	0x136c	; 0x136c <ssd1306_AsyncStart>
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	09 f0       	breq	.+2      	; 0x145e <SSDsetXY+0x1e>
    145c:	40 c0       	rjmp	.+128    	; 0x14de <SSDsetXY+0x9e>
		{
			SSDsetXYstates=1;
    145e:	80 93 dc 03 	sts	0x03DC, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	08 95       	ret
			SSDsetXYstates=1;
		}
		/* Your code here */
		break;
		case 1:
           switch (SSDsetXYWritestates)
    1466:	90 91 dd 03 	lds	r25, 0x03DD
    146a:	91 30       	cpi	r25, 0x01	; 1
    146c:	79 f0       	breq	.+30     	; 0x148c <SSDsetXY+0x4c>
    146e:	28 f0       	brcs	.+10     	; 0x147a <SSDsetXY+0x3a>
    1470:	92 30       	cpi	r25, 0x02	; 2
    1472:	b1 f0       	breq	.+44     	; 0x14a0 <SSDsetXY+0x60>
    1474:	93 30       	cpi	r25, 0x03	; 3
    1476:	a9 f5       	brne	.+106    	; 0x14e2 <SSDsetXY+0xa2>
    1478:	1d c0       	rjmp	.+58     	; 0x14b4 <SSDsetXY+0x74>
           {
	           case 0:
			   if(ssd1306_AsyncWrite(0x00)==1)
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ssd1306_AsyncWrite>
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	89 f5       	brne	.+98     	; 0x14e6 <SSDsetXY+0xa6>
			   {
				   SSDsetXYWritestates=1;
    1484:	80 93 dd 03 	sts	0x03DD, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	08 95       	ret
				   SSDsetXYWritestates=1;
			   }
	           /* Your code here */
	           break;
	           case 1:
	           if(ssd1306_AsyncWrite(0xb0 + y)==1)
    148c:	86 2f       	mov	r24, r22
    148e:	80 55       	subi	r24, 0x50	; 80
    1490:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ssd1306_AsyncWrite>
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	49 f5       	brne	.+82     	; 0x14ea <SSDsetXY+0xaa>
	           {
				   
		           SSDsetXYWritestates=2;
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	80 93 dd 03 	sts	0x03DD, r24
    149e:	08 95       	ret
	           }
	           /* Your code here */
	           break;
	           case 2:
	           if(ssd1306_AsyncWrite((x & 0x0f))==1)
    14a0:	8f 70       	andi	r24, 0x0F	; 15
    14a2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ssd1306_AsyncWrite>
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	11 f5       	brne	.+68     	; 0x14ee <SSDsetXY+0xae>
	           {
		           SSDsetXYWritestates=3;
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	80 93 dd 03 	sts	0x03DD, r24


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	08 95       	ret
		           SSDsetXYWritestates=3;
	           }
	           /* Your code here */
	           break;
	           case 3:
	           if(ssd1306_AsyncWrite(((x & 0xf0) >> 4) | 0x10)==1)
    14b4:	82 95       	swap	r24
    14b6:	8f 70       	andi	r24, 0x0F	; 15
    14b8:	80 61       	ori	r24, 0x10	; 16
    14ba:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ssd1306_AsyncWrite>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	c1 f4       	brne	.+48     	; 0x14f2 <SSDsetXY+0xb2>
	           {
		           SSDsetXYWritestates=0;
    14c2:	10 92 dd 03 	sts	0x03DD, r1
				   SSDsetXYstates=2;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	80 93 dc 03 	sts	0x03DC, r24
    14cc:	08 95       	ret
	           break;
           }
		/* Your code here */
		break;
		case 2:
		i2c_stop();
    14ce:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
		SSDsetXYstates=0;
    14d2:	10 92 dc 03 	sts	0x03DC, r1
		Reval=1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
		/* Your code here */
		break;
    14d8:	08 95       	ret


uint8_t SSDsetXY(uint8_t x,uint8_t y)
{
	static uint8_t SSDsetXYstates,SSDsetXYWritestates;
	uint8_t Reval=2;
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	08 95       	ret
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	08 95       	ret
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	08 95       	ret
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	08 95       	ret
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	08 95       	ret
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	08 95       	ret
    14f2:	82 e0       	ldi	r24, 0x02	; 2
		/* Your code here */
		break;
	}
	
	return Reval;
}
    14f4:	08 95       	ret

000014f6 <SSDWritechar_font6x8>:
uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
	   uint8_t fc;
   	switch (SSDWritecharstates)
    14f6:	90 91 e0 03 	lds	r25, 0x03E0
    14fa:	91 30       	cpi	r25, 0x01	; 1
    14fc:	79 f0       	breq	.+30     	; 0x151c <SSDWritechar_font6x8+0x26>
    14fe:	28 f0       	brcs	.+10     	; 0x150a <SSDWritechar_font6x8+0x14>
    1500:	92 30       	cpi	r25, 0x02	; 2
    1502:	d9 f0       	breq	.+54     	; 0x153a <SSDWritechar_font6x8+0x44>
    1504:	93 30       	cpi	r25, 0x03	; 3
    1506:	a9 f5       	brne	.+106    	; 0x1572 <SSDWritechar_font6x8+0x7c>
    1508:	2e c0       	rjmp	.+92     	; 0x1566 <SSDWritechar_font6x8+0x70>
   	{
	   	case 0:
	   	if(ssd1306_AsyncStart(0x78|0x00)==1)
    150a:	88 e7       	ldi	r24, 0x78	; 120
    150c:	0e 94 b6 09 	call	0x136c	; 0x136c <ssd1306_AsyncStart>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	89 f5       	brne	.+98     	; 0x1576 <SSDWritechar_font6x8+0x80>
	   	{
		   	SSDWritecharstates=1;
    1514:	80 93 e0 03 	sts	0x03E0, r24
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	08 95       	ret
		   	SSDWritecharstates=1;
	   	}
	   	/* Your code here */
	   	break;
	   	case 1:
		fc=ssd1306_AsyncWrite(0x40);
    151c:	80 e4       	ldi	r24, 0x40	; 64
    151e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ssd1306_AsyncWrite>
		if(fc==1)
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	21 f4       	brne	.+8      	; 0x152e <SSDWritechar_font6x8+0x38>
		{
			SSDWritecharstates=2;
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	80 93 e0 03 	sts	0x03E0, r24
    152c:	08 95       	ret
		}
		else if(fc==0)
    152e:	81 11       	cpse	r24, r1
    1530:	24 c0       	rjmp	.+72     	; 0x157a <SSDWritechar_font6x8+0x84>
		{
			SSDWritecharstates=0;
    1532:	10 92 e0 03 	sts	0x03E0, r1
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	08 95       	ret
		{
			SSDWritecharstates=0;
		}
		break;
		case 2:
		if(ssd1306_AsyncWrite(SSDGetByte(ch,Tablepointer))==1)
    153a:	60 91 e1 03 	lds	r22, 0x03E1
    153e:	0e 94 95 08 	call	0x112a	; 0x112a <SSDGetByte>
    1542:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ssd1306_AsyncWrite>
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	d1 f4       	brne	.+52     	; 0x157e <SSDWritechar_font6x8+0x88>
		{
			Tablepointer++;
    154a:	80 91 e1 03 	lds	r24, 0x03E1
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	80 93 e1 03 	sts	0x03E1, r24
			if(Tablepointer==6)
    1554:	86 30       	cpi	r24, 0x06	; 6
    1556:	a9 f4       	brne	.+42     	; 0x1582 <SSDWritechar_font6x8+0x8c>
			{
				SSDWritecharstates=3;
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	80 93 e0 03 	sts	0x03E0, r24
				Tablepointer=0;
    155e:	10 92 e1 03 	sts	0x03E1, r1
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	08 95       	ret
				Tablepointer=0;
			}
		}
		break;
		case 3:
	   	i2c_stop();
    1566:	0e 94 99 07 	call	0xf32	; 0xf32 <i2c_stop>
	   	SSDWritecharstates=0;
    156a:	10 92 e0 03 	sts	0x03E0, r1
	   	Reval=1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
	   	/* Your code here */
	   	break;
    1570:	08 95       	ret
}

uint8_t SSDWritechar_font6x8(char ch)
{
   	static uint8_t SSDWritecharstates,Tablepointer;
   	uint8_t Reval=2;
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	08 95       	ret
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	08 95       	ret
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	08 95       	ret
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	08 95       	ret
    1582:	82 e0       	ldi	r24, 0x02	; 2
	   	break;
   	}
   	
   	return Reval;

}
    1584:	08 95       	ret

00001586 <SSDi2cHandlerFunc>:
	static SSDdata SSDdataObj;
	static uint8_t SSDhandlerstates;
	char buffer[12];
	static uint8_t SSDR=0,SSDC=0;

	switch (SSDhandlerstates)
    1586:	80 91 d8 03 	lds	r24, 0x03D8
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	71 f0       	breq	.+28     	; 0x15aa <SSDi2cHandlerFunc+0x24>
    158e:	18 f0       	brcs	.+6      	; 0x1596 <SSDi2cHandlerFunc+0x10>
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	49 f5       	brne	.+82     	; 0x15e6 <SSDi2cHandlerFunc+0x60>
    1594:	20 c0       	rjmp	.+64     	; 0x15d6 <SSDi2cHandlerFunc+0x50>
	{
		case 0:
		if(ErasePoints[0]==0)
		{
			if(PopSSDinterface(&SSDdataObj)==BuffOk)
    1596:	89 ed       	ldi	r24, 0xD9	; 217
    1598:	93 e0       	ldi	r25, 0x03	; 3
    159a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <PopSSDinterface>
    159e:	81 11       	cpse	r24, r1
    15a0:	22 c0       	rjmp	.+68     	; 0x15e6 <SSDi2cHandlerFunc+0x60>
			{
			   SSDhandlerstates=1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	80 93 d8 03 	sts	0x03D8, r24
    15a8:	08 95       	ret

		}
		/* Your code here */
		break;
        case 1:
		if((SSDdataObj.SSDx>0 )||(SSDdataObj.SSDy>0) )
    15aa:	80 91 da 03 	lds	r24, 0x03DA
    15ae:	81 11       	cpse	r24, r1
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <SSDi2cHandlerFunc+0x34>
    15b2:	90 91 db 03 	lds	r25, 0x03DB
    15b6:	99 23       	and	r25, r25
    15b8:	51 f0       	breq	.+20     	; 0x15ce <SSDi2cHandlerFunc+0x48>
		{
		 if(SSDsetXY(SSDdataObj.SSDx,SSDdataObj.SSDy)==1)
    15ba:	60 91 db 03 	lds	r22, 0x03DB
    15be:	0e 94 20 0a 	call	0x1440	; 0x1440 <SSDsetXY>
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	81 f4       	brne	.+32     	; 0x15e6 <SSDi2cHandlerFunc+0x60>
		   {
			  SSDhandlerstates=2; 
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	80 93 d8 03 	sts	0x03D8, r24
    15cc:	08 95       	ret
		   }
		}
		else
		{
		   SSDhandlerstates=2; 	
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	80 93 d8 03 	sts	0x03D8, r24
    15d4:	08 95       	ret
		}
		
		break;
		case 2:
		//ssd1306_String_font6x8_test("nikhil",0,0);
		if(SSDWritechar_font6x8(SSDdataObj.SSDchar)==1)
    15d6:	80 91 d9 03 	lds	r24, 0x03D9
    15da:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <SSDWritechar_font6x8>
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <SSDi2cHandlerFunc+0x60>
		{
			SSDhandlerstates=0;
    15e2:	10 92 d8 03 	sts	0x03D8, r1
		default:
		/* Your code here */
		break;
	}
	
}
    15e6:	08 95       	ret

000015e8 <testfuc>:

}


uint8_t testfuc(void * data)
{
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	69 97       	sbiw	r28, 0x19	; 25
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
   char buffer[25];
   uint16_t address=0;
   
   if(ssdpos<8)
    15fc:	20 91 e2 03 	lds	r18, 0x03E2
    1600:	28 30       	cpi	r18, 0x08	; 8
    1602:	48 f5       	brcc	.+82     	; 0x1656 <testfuc+0x6e>
   {

	//strcpy_P(buffer,(PGM_P)pgm_read_word(Frame1+ssdpos));  
	 //&Frame1[ssdpos];//pgm_read_word(&Frames[1]);
	 address=(pgm_read_word(&Frames[FramePos])+(ssdpos*2));
    1604:	e0 91 e3 03 	lds	r30, 0x03E3
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	e2 54       	subi	r30, 0x42	; 66
    1610:	fd 4f       	sbci	r31, 0xFD	; 253
    1612:	85 91       	lpm	r24, Z+
    1614:	94 91       	lpm	r25, Z
    1616:	e2 2f       	mov	r30, r18
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	e8 0f       	add	r30, r24
    1620:	f9 1f       	adc	r31, r25
	 strcpy_P(buffer,(PGM_P)pgm_read_word(address));
    1622:	85 91       	lpm	r24, Z+
    1624:	94 91       	lpm	r25, Z
    1626:	68 2f       	mov	r22, r24
    1628:	79 2f       	mov	r23, r25
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	0e 94 27 20 	call	0x404e	; 0x404e <strcpy_P>
	 PopulateSSDbuffer(buffer,ssdposy,ssdposx);
    1632:	40 91 e4 03 	lds	r20, 0x03E4
    1636:	60 91 1f 02 	lds	r22, 0x021F
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
	 ssdposx++;
    1642:	80 91 e4 03 	lds	r24, 0x03E4
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	80 93 e4 03 	sts	0x03E4, r24
	 ssdpos++;
    164c:	80 91 e2 03 	lds	r24, 0x03E2
    1650:	8f 5f       	subi	r24, 0xFF	; 255
    1652:	80 93 e2 03 	sts	0x03E2, r24
   }

  if(ssdpos==8||ssdpos==16)
    1656:	80 91 e2 03 	lds	r24, 0x03E2
    165a:	88 30       	cpi	r24, 0x08	; 8
    165c:	11 f0       	breq	.+4      	; 0x1662 <testfuc+0x7a>
    165e:	80 31       	cpi	r24, 0x10	; 16
    1660:	39 f4       	brne	.+14     	; 0x1670 <testfuc+0x88>
  {
	  ssdposy=ssdposy+60;
    1662:	80 91 1f 02 	lds	r24, 0x021F
    1666:	84 5c       	subi	r24, 0xC4	; 196
    1668:	80 93 1f 02 	sts	0x021F, r24
	  ssdposx=0;
    166c:	10 92 e4 03 	sts	0x03E4, r1
	 // ssdpos=0;
  }
  Unknown++;
    1670:	80 91 e5 03 	lds	r24, 0x03E5
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	80 93 e5 03 	sts	0x03E5, r24
	return 0;
}
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	69 96       	adiw	r28, 0x19	; 25
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <SSDSetFramePos>:

uint8_t SSDSetFramePos(uint8_t Pos)
{
	FramePos=Pos;
    168e:	80 93 e3 03 	sts	0x03E3, r24
	ssdpos=0;
    1692:	10 92 e2 03 	sts	0x03E2, r1
    ssdposy=1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	80 93 1f 02 	sts	0x021F, r24
    ssdposx=0;
    169c:	10 92 e4 03 	sts	0x03E4, r1
	return 0;
}
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	08 95       	ret

000016a4 <Timer2Enable>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "UART.h"
void Timer2Enable()
{
	overflowfag=0;
    16a4:	10 92 13 05 	sts	0x0513, r1
	TimeReady=0;
    16a8:	10 92 10 05 	sts	0x0510, r1
	TCCR2B|=1<<CS21|1<<CS22;
    16ac:	e1 eb       	ldi	r30, 0xB1	; 177
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	86 60       	ori	r24, 0x06	; 6
    16b4:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);
    16b6:	e0 e7       	ldi	r30, 0x70	; 112
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	80 83       	st	Z, r24
	TCNT2 = 0;
    16c0:	10 92 b2 00 	sts	0x00B2, r1
	TimerValue=0;
    16c4:	10 92 12 05 	sts	0x0512, r1
    16c8:	10 92 11 05 	sts	0x0511, r1
    16cc:	08 95       	ret

000016ce <Timer2Disable>:
	TCNT2=0;
	return TCNT2;
}
void Timer2Disable()
{
	TCCR2B=0;
    16ce:	10 92 b1 00 	sts	0x00B1, r1
	TimeReady=1;	
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 93 10 05 	sts	0x0510, r24
    16d8:	08 95       	ret

000016da <Timer2Count>:
	//TCNT1L = 0;
	//TCNT1H=0;
}

uint8_t Timer2Count()
{
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    TimerValue=TCNT2;//((TCNT1L)*16)/58;//;	
    16de:	c2 eb       	ldi	r28, 0xB2	; 178
    16e0:	d0 e0       	ldi	r29, 0x00	; 0
    16e2:	88 81       	ld	r24, Y
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	90 93 12 05 	sts	0x0512, r25
    16ea:	80 93 11 05 	sts	0x0511, r24
	Timer2Disable();
    16ee:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Timer2Disable>
	TCNT2=0;
    16f2:	18 82       	st	Y, r1
	return TCNT2;
    16f4:	88 81       	ld	r24, Y
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <__vector_9>:
{
	TCCR2B=0;
	TimeReady=1;	
}
ISR(TIMER2_OVF_vect)
{
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	8f 93       	push	r24
	overflowfag=overflowfag+1;
    1708:	80 91 13 05 	lds	r24, 0x0513
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	80 93 13 05 	sts	0x0513, r24
	//uart_num(overflowfag);
	//TIMSK2|=(1<<TOIE2);
	//TimerValue+=255;
    1712:	8f 91       	pop	r24
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <ConfigureCallBack>:
	UDR0=dat;
}

void ConfigureCallBack(uint16_t  (*callbackarg)(void))
{
	callbackFunction= callbackarg;
    171e:	90 93 ff 04 	sts	0x04FF, r25
    1722:	80 93 fe 04 	sts	0x04FE, r24
    1726:	08 95       	ret

00001728 <Callhandler>:
}

//updated code
 uint16_t Callhandler(void *fptr)
{
	PushEventInterface(200,DebugHandlerFunc,PopInterface,0);
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	4d e9       	ldi	r20, 0x9D	; 157
    172c:	5b e0       	ldi	r21, 0x0B	; 11
    172e:	6c e9       	ldi	r22, 0x9C	; 156
    1730:	7f e0       	ldi	r23, 0x0F	; 15
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    1738:	08 95       	ret

0000173a <PopInterface>:
	}
	
}

uint8_t PopInterface(unsigned char *dataval)
{
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	1f 92       	push	r1
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8c 01       	movw	r16, r24
	unsigned char data;
	
	if(PopFromCircularBuffer(&CircularBuffer,&data)==BuffOk)
    174a:	be 01       	movw	r22, r28
    174c:	6f 5f       	subi	r22, 0xFF	; 255
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	0e 94 6e 06 	call	0xcdc	; 0xcdc <PopFromCircularBuffer>
    1758:	81 11       	cpse	r24, r1
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <PopInterface+0x2c>
	{
		*dataval=data;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	f8 01       	movw	r30, r16
    1760:	80 83       	st	Z, r24
		return 0;
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <PopInterface+0x2e>
	}
	return 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
}
    1768:	0f 90       	pop	r0
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	08 95       	ret

00001774 <uart_init>:
	y                      \
};                          \


void uart_init()
{   Data_Count=0;
    1774:	10 92 00 05 	sts	0x0500, r1
	UBRR0L=0x0C;//0x0C;//--> FOR BAUD esp;0x9b-->for 9800
	Data_Count=0;	
	//UCSRB|=(1<7);
	//uart_delay(100);*/
		//UCSR0A=0x02;//for esp baud 0x02
		UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);//UCSR0B=0x98;
    1778:	88 e9       	ldi	r24, 0x98	; 152
    177a:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);//UCSR0C=0x86;
    177e:	8e e0       	ldi	r24, 0x0E	; 14
    1780:	80 93 c2 00 	sts	0x00C2, r24
		UBRR0H=0x00;
    1784:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L=0x08;//--> FOR BAUD esp;0x9b-->for 9800//0x69
    1788:	88 e0       	ldi	r24, 0x08	; 8
    178a:	80 93 c4 00 	sts	0x00C4, r24
		//UDR0='B';
		//Data_Count=0;
		callbackFunction=0;
    178e:	10 92 ff 04 	sts	0x04FF, r1
    1792:	10 92 fe 04 	sts	0x04FE, r1
		callbackSetFunction(0,ConfigureCallBack);
    1796:	6f e8       	ldi	r22, 0x8F	; 143
    1798:	7b e0       	ldi	r23, 0x0B	; 11
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	0e 94 83 14 	call	0x2906	; 0x2906 <callbackSetFunction>
    17a0:	08 95       	ret

000017a2 <uart_delay>:
}

void uart_delay(unsigned int delaytime)
{
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
	...
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	82 17       	cp	r24, r18
    17c8:	93 07       	cpc	r25, r19
    17ca:	68 f7       	brcc	.-38     	; 0x17a6 <uart_delay+0x4>
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
	}
	
}
    17cc:	08 95       	ret

000017ce <uart_string>:
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
{
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29

	while ( *ustring)
    17da:	fc 01       	movw	r30, r24
    17dc:	20 81       	ld	r18, Z
    17de:	22 23       	and	r18, r18
    17e0:	c1 f0       	breq	.+48     	; 0x1812 <uart_string+0x44>
		//UDR=*ustring++;
		//while((UCSRA&0x40)==0x00);
		//uart_delay(1000);
	}	
}
void uart_string(const unsigned char *ustring)
    17e2:	8c 01       	movw	r16, r24
    17e4:	0f 5f       	subi	r16, 0xFF	; 255
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
{

	while ( *ustring)
	{
		UDR0=*ustring++;
    17e8:	0f 2e       	mov	r0, r31
    17ea:	f6 ec       	ldi	r31, 0xC6	; 198
    17ec:	ef 2e       	mov	r14, r31
    17ee:	f1 2c       	mov	r15, r1
    17f0:	f0 2d       	mov	r31, r0
		while((UCSR0A&0x40)==0x00);
    17f2:	c0 ec       	ldi	r28, 0xC0	; 192
    17f4:	d0 e0       	ldi	r29, 0x00	; 0
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
	{
		UDR0=*ustring++;
    17f6:	f7 01       	movw	r30, r14
    17f8:	20 83       	st	Z, r18
		while((UCSR0A&0x40)==0x00);
    17fa:	88 81       	ld	r24, Y
    17fc:	86 ff       	sbrs	r24, 6
    17fe:	fd cf       	rjmp	.-6      	; 0x17fa <uart_string+0x2c>
		uart_delay(1000);
    1800:	88 ee       	ldi	r24, 0xE8	; 232
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <uart_delay>
	}	
}
void uart_string(const unsigned char *ustring)
{

	while ( *ustring)
    1808:	f8 01       	movw	r30, r16
    180a:	21 91       	ld	r18, Z+
    180c:	8f 01       	movw	r16, r30
    180e:	21 11       	cpse	r18, r1
    1810:	f2 cf       	rjmp	.-28     	; 0x17f6 <uart_string+0x28>
	{
		UDR0=*ustring++;
		while((UCSR0A&0x40)==0x00);
		uart_delay(1000);
	}
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	08 95       	ret

00001820 <uart_char>:
		callbackSetFunction(0,ConfigureCallBack);
}

void uart_char(unsigned char uchar)
{
	UDR0=uchar;
    1820:	80 93 c6 00 	sts	0x00C6, r24
	while((UCSR0A&0x40)==0x00);
    1824:	e0 ec       	ldi	r30, 0xC0	; 192
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	86 ff       	sbrs	r24, 6
    182c:	fd cf       	rjmp	.-6      	; 0x1828 <uart_char+0x8>
	uart_delay(1000);
    182e:	88 ee       	ldi	r24, 0xE8	; 232
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <uart_delay>
    1836:	08 95       	ret

00001838 <uart_num>:
		uart_delay(1000);
	}
}

void uart_num(unsigned char num)
{
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	c8 2f       	mov	r28, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
    1842:	19 e2       	ldi	r17, 0x29	; 41
    1844:	81 9f       	mul	r24, r17
    1846:	11 2d       	mov	r17, r1
    1848:	11 24       	eor	r1, r1
    184a:	12 95       	swap	r17
    184c:	1f 70       	andi	r17, 0x0F	; 15
	T=(num - (H*100))/10;
    184e:	0c e9       	ldi	r16, 0x9C	; 156
    1850:	01 03       	mulsu	r16, r17
    1852:	90 01       	movw	r18, r0
    1854:	11 24       	eor	r1, r1
    1856:	c9 01       	movw	r24, r18
    1858:	8c 0f       	add	r24, r28
    185a:	91 1d       	adc	r25, r1
    185c:	6a e0       	ldi	r22, 0x0A	; 10
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__divmodhi4>
    1864:	d6 2f       	mov	r29, r22
	O=(num - (H*100) - (T*10));

	uart_char(H+48);
    1866:	81 2f       	mov	r24, r17
    1868:	80 5d       	subi	r24, 0xD0	; 208
    186a:	0e 94 10 0c 	call	0x1820	; 0x1820 <uart_char>
	uart_char(T+48);
    186e:	8d 2f       	mov	r24, r29
    1870:	80 5d       	subi	r24, 0xD0	; 208
    1872:	0e 94 10 0c 	call	0x1820	; 0x1820 <uart_char>
void uart_num(unsigned char num)
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
    1876:	c0 5d       	subi	r28, 0xD0	; 208
    1878:	8c 2f       	mov	r24, r28
    187a:	10 9f       	mul	r17, r16
    187c:	80 0d       	add	r24, r0
    187e:	11 24       	eor	r1, r1
    1880:	dd 0f       	add	r29, r29
    1882:	9d 2f       	mov	r25, r29
    1884:	99 0f       	add	r25, r25
    1886:	99 0f       	add	r25, r25
    1888:	d9 0f       	add	r29, r25

	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);
    188a:	8d 1b       	sub	r24, r29
    188c:	0e 94 10 0c 	call	0x1820	; 0x1820 <uart_char>
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <__vector_18>:
	}
	
}
circularbuff(CircularBuffer,100);
ISR(USART_RX_vect)
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	1f 92       	push	r1
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    
    static uint8_t flag=0;
	static UartBuffer BufferData;
	r=UDR0;
    18c6:	80 91 c6 00 	lds	r24, 0x00C6
    18ca:	80 93 fc 04 	sts	0x04FC, r24
	uint8_t i;
	char data;
	//cli();
	PushIntoCircularBuffer(&CircularBuffer,r);
    18ce:	60 91 fc 04 	lds	r22, 0x04FC
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <PushIntoCircularBuffer>
	//sei();
	if(r=='d')
    18da:	80 91 fc 04 	lds	r24, 0x04FC
    18de:	84 36       	cpi	r24, 0x64	; 100
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <__vector_18+0x4c>
	{
		Data_Count=0;
    18e2:	10 92 00 05 	sts	0x0500, r1
		
	}
	data_in[Data_Count]=r;
    18e6:	e0 91 00 05 	lds	r30, 0x0500
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 91 fc 04 	lds	r24, 0x04FC
    18f0:	e9 50       	subi	r30, 0x09	; 9
    18f2:	fb 4f       	sbci	r31, 0xFB	; 251
    18f4:	80 83       	st	Z, r24
	Data_Count++;
    18f6:	80 91 00 05 	lds	r24, 0x0500
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	80 93 00 05 	sts	0x0500, r24
	if(Data_Count==5)
    1900:	80 91 00 05 	lds	r24, 0x0500
    1904:	85 30       	cpi	r24, 0x05	; 5
    1906:	31 f5       	brne	.+76     	; 0x1954 <__vector_18+0xba>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
    1908:	80 91 f7 04 	lds	r24, 0x04F7
    190c:	84 36       	cpi	r24, 0x64	; 100
    190e:	01 f5       	brne	.+64     	; 0x1950 <__vector_18+0xb6>
    1910:	80 91 f8 04 	lds	r24, 0x04F8
    1914:	85 36       	cpi	r24, 0x65	; 101
    1916:	e1 f4       	brne	.+56     	; 0x1950 <__vector_18+0xb6>
    1918:	80 91 f9 04 	lds	r24, 0x04F9
    191c:	82 36       	cpi	r24, 0x62	; 98
    191e:	c1 f4       	brne	.+48     	; 0x1950 <__vector_18+0xb6>
    1920:	80 91 fa 04 	lds	r24, 0x04FA
    1924:	85 37       	cpi	r24, 0x75	; 117
    1926:	a1 f4       	brne	.+40     	; 0x1950 <__vector_18+0xb6>
    1928:	80 91 fb 04 	lds	r24, 0x04FB
    192c:	87 36       	cpi	r24, 0x67	; 103
    192e:	81 f4       	brne	.+32     	; 0x1950 <__vector_18+0xb6>
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <__vector_18+0x9e>
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
			{
				uart_char(data);
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	0e 94 10 0c 	call	0x1820	; 0x1820 <uart_char>
	{
		if(data_in[0]=='d'&&data_in[1]=='e'&&data_in[2]=='b'&&data_in[3]=='u'&&data_in[4]=='g')
		{
			

			while(PopFromCircularBuffer(&CircularBuffer,&data)==0)
    1938:	be 01       	movw	r22, r28
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 6e 06 	call	0xcdc	; 0xcdc <PopFromCircularBuffer>
    1946:	88 23       	and	r24, r24
    1948:	a1 f3       	breq	.-24     	; 0x1932 <__vector_18+0x98>
			{
				uart_char(data);
			}
			flag=1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 e6 03 	sts	0x03E6, r24
		}
		Data_Count=0;
    1950:	10 92 00 05 	sts	0x0500, r1
	}
	if(callbackFunction!=0&&flag==0)
    1954:	60 91 fe 04 	lds	r22, 0x04FE
    1958:	70 91 ff 04 	lds	r23, 0x04FF
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	59 f0       	breq	.+22     	; 0x1978 <__vector_18+0xde>
    1962:	80 91 e6 03 	lds	r24, 0x03E6
    1966:	81 11       	cpse	r24, r1
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <__vector_18+0xde>
	{
		PushEventInterface(200,callbackFunction,PopInterface,0);
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	4d e9       	ldi	r20, 0x9D	; 157
    196e:	5b e0       	ldi	r21, 0x0B	; 11
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    1976:	20 c0       	rjmp	.+64     	; 0x19b8 <__vector_18+0x11e>
	}
	else if(flag==2)
    1978:	80 91 e6 03 	lds	r24, 0x03E6
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	81 f4       	brne	.+32     	; 0x19a0 <__vector_18+0x106>
	{
		if(HeadTailDiff(&CircularBuffer,20)>=20)
    1980:	64 e1       	ldi	r22, 0x14	; 20
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 8c 06 	call	0xd18	; 0xd18 <HeadTailDiff>
    198a:	84 31       	cpi	r24, 0x14	; 20
    198c:	a8 f0       	brcs	.+42     	; 0x19b8 <__vector_18+0x11e>
		{
			PushEventInterface(200,Callhandler,PopInterface,0);
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	4d e9       	ldi	r20, 0x9D	; 157
    1992:	5b e0       	ldi	r21, 0x0B	; 11
    1994:	64 e9       	ldi	r22, 0x94	; 148
    1996:	7b e0       	ldi	r23, 0x0B	; 11
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    199e:	0c c0       	rjmp	.+24     	; 0x19b8 <__vector_18+0x11e>
		}
	}
	else if(flag==1)
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	51 f4       	brne	.+20     	; 0x19b8 <__vector_18+0x11e>
	{
		flag=2;
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	80 93 e6 03 	sts	0x03E6, r24
		PopFromCircularBuffer(&CircularBuffer,&data);
    19aa:	be 01       	movw	r22, r28
    19ac:	6f 5f       	subi	r22, 0xFF	; 255
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <PopFromCircularBuffer>
	}
	
}
    19b8:	0f 90       	pop	r0
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	ff 91       	pop	r31
    19c0:	ef 91       	pop	r30
    19c2:	bf 91       	pop	r27
    19c4:	af 91       	pop	r26
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	7f 91       	pop	r23
    19cc:	6f 91       	pop	r22
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	3f 91       	pop	r19
    19d4:	2f 91       	pop	r18
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <CheckUartReadyToSend>:
{
	PushIntoCircularBuffer(&CircularBuffer,dataval);
}
uint8_t CheckUartReadyToSend()
{ 
	return (!(UCSR0A&(1<<UDRE0)));
    19e0:	80 91 c0 00 	lds	r24, 0x00C0
    19e4:	85 fb       	bst	r24, 5
    19e6:	88 27       	eor	r24, r24
    19e8:	80 f9       	bld	r24, 0
}
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	89 27       	eor	r24, r25
    19ee:	08 95       	ret

000019f0 <SendByte>:

void SendByte(unsigned char dat)
{
	UDR0=dat;
    19f0:	80 93 c6 00 	sts	0x00C6, r24
    19f4:	08 95       	ret

000019f6 <ReadEveryValueADC>:
static ChannelBuffer channelBuffer_s[6]={{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0},{0xff,0,0}};
static uint8_t BufferLength;
static volatile uint16_t ADC_Array[10];
static uint8_t checkAlreadyThere(ChannelBuffer *Channel);
uint16_t ReadEveryValueADC(void)
{
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
	uint16_t Channel=0,status;
	static uint8_t position,conversionFlag;
	uint16_t Value;
	  if(conversionFlag==0)
    19fa:	80 91 fc 03 	lds	r24, 0x03FC
    19fe:	81 11       	cpse	r24, r1
    1a00:	37 c0       	rjmp	.+110    	; 0x1a70 <ReadEveryValueADC+0x7a>
	  { 
		  
		 if(channelBuffer_s[position].filled==1&&channelBuffer_s[position].State==start)
    1a02:	20 91 fd 03 	lds	r18, 0x03FD
    1a06:	82 2f       	mov	r24, r18
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	e8 0f       	add	r30, r24
    1a12:	f9 1f       	adc	r31, r25
    1a14:	eb 5d       	subi	r30, 0xDB	; 219
    1a16:	fd 4f       	sbci	r31, 0xFD	; 253
    1a18:	32 81       	ldd	r19, Z+2	; 0x02
    1a1a:	31 30       	cpi	r19, 0x01	; 1
    1a1c:	29 f5       	brne	.+74     	; 0x1a68 <ReadEveryValueADC+0x72>
    1a1e:	fc 01       	movw	r30, r24
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	e8 0f       	add	r30, r24
    1a26:	f9 1f       	adc	r31, r25
    1a28:	eb 5d       	subi	r30, 0xDB	; 219
    1a2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2c:	31 81       	ldd	r19, Z+1	; 0x01
    1a2e:	31 11       	cpse	r19, r1
    1a30:	1b c0       	rjmp	.+54     	; 0x1a68 <ReadEveryValueADC+0x72>
		 {
			 //uart_num(channelBuffer_s[position].channel);
			 adc_read(channelBuffer_s[position].channel);
    1a32:	fc 01       	movw	r30, r24
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	8e 0f       	add	r24, r30
    1a3a:	9f 1f       	adc	r25, r31
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	eb 5d       	subi	r30, 0xDB	; 219
    1a40:	fd 4f       	sbci	r31, 0xFD	; 253
    1a42:	80 81       	ld	r24, Z
    1a44:	0e 94 23 06 	call	0xc46	; 0xc46 <adc_read>
			 channelBuffer_s[position].State=busy;
    1a48:	80 91 fd 03 	lds	r24, 0x03FD
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	fc 01       	movw	r30, r24
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	8e 0f       	add	r24, r30
    1a56:	9f 1f       	adc	r25, r31
    1a58:	fc 01       	movw	r30, r24
    1a5a:	eb 5d       	subi	r30, 0xDB	; 219
    1a5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	81 83       	std	Z+1, r24	; 0x01
			 conversionFlag=1;
    1a62:	80 93 fc 03 	sts	0x03FC, r24
    1a66:	3a c0       	rjmp	.+116    	; 0x1adc <ReadEveryValueADC+0xe6>
		 } 	
		 else
		 {
			 position++;
    1a68:	2f 5f       	subi	r18, 0xFF	; 255
    1a6a:	20 93 fd 03 	sts	0x03FD, r18
    1a6e:	36 c0       	rjmp	.+108    	; 0x1adc <ReadEveryValueADC+0xe6>
		 }
	  }
	  else if(ADC_State()==0)
    1a70:	0e 94 34 06 	call	0xc68	; 0xc68 <ADC_State>
    1a74:	81 11       	cpse	r24, r1
    1a76:	32 c0       	rjmp	.+100    	; 0x1adc <ReadEveryValueADC+0xe6>
	  {   
		  if(channelBuffer_s[position].State==busy)
    1a78:	80 91 fd 03 	lds	r24, 0x03FD
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	fc 01       	movw	r30, r24
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	e8 0f       	add	r30, r24
    1a86:	f9 1f       	adc	r31, r25
    1a88:	eb 5d       	subi	r30, 0xDB	; 219
    1a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8c:	21 81       	ldd	r18, Z+1	; 0x01
    1a8e:	21 30       	cpi	r18, 0x01	; 1
    1a90:	29 f5       	brne	.+74     	; 0x1adc <ReadEveryValueADC+0xe6>
		  {  
			 //uart_string("in Second");
			 ADC_Array[channelBuffer_s[position].channel]=ADCValue();
    1a92:	fc 01       	movw	r30, r24
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	8e 0f       	add	r24, r30
    1a9a:	9f 1f       	adc	r25, r31
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	eb 5d       	subi	r30, 0xDB	; 219
    1aa0:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa2:	c0 81       	ld	r28, Z
    1aa4:	d0 e0       	ldi	r29, 0x00	; 0
    1aa6:	0e 94 38 06 	call	0xc70	; 0xc70 <ADCValue>
    1aaa:	cc 0f       	add	r28, r28
    1aac:	dd 1f       	adc	r29, r29
    1aae:	c9 51       	subi	r28, 0x19	; 25
    1ab0:	dc 4f       	sbci	r29, 0xFC	; 252
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	88 83       	st	Y, r24
			 channelBuffer_s[position].State=done;
    1ab6:	20 91 fd 03 	lds	r18, 0x03FD
    1aba:	82 2f       	mov	r24, r18
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	fc 01       	movw	r30, r24
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	8e 0f       	add	r24, r30
    1ac6:	9f 1f       	adc	r25, r31
    1ac8:	fc 01       	movw	r30, r24
    1aca:	eb 5d       	subi	r30, 0xDB	; 219
    1acc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	81 83       	std	Z+1, r24	; 0x01
			 position++;
    1ad2:	2f 5f       	subi	r18, 0xFF	; 255
    1ad4:	20 93 fd 03 	sts	0x03FD, r18
			 conversionFlag=0;
    1ad8:	10 92 fc 03 	sts	0x03FC, r1
		  }
	  }
	  if(position==6)
    1adc:	80 91 fd 03 	lds	r24, 0x03FD
    1ae0:	86 30       	cpi	r24, 0x06	; 6
    1ae2:	11 f4       	brne	.+4      	; 0x1ae8 <ReadEveryValueADC+0xf2>
	  {
		  position=0;
    1ae4:	10 92 fd 03 	sts	0x03FD, r1
	  }

	
	return 0;
}
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	08 95       	ret

00001af2 <GetADC_Value>:

uint16_t GetADC_Value(uint16_t ADC_ChannelAndValue)
{
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <GetADC_Value+0x6>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
	uint16_t returnValue=0;
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	86 95       	lsr	r24
    1b04:	86 95       	lsr	r24
    1b06:	86 95       	lsr	r24
    1b08:	87 70       	andi	r24, 0x07	; 7
    1b0a:	80 93 fb 03 	sts	0x03FB, r24
	channelProp.channel=ChannelSelect;
    1b0e:	30 91 fb 03 	lds	r19, 0x03FB
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    1b12:	80 91 25 02 	lds	r24, 0x0225
    1b16:	38 17       	cp	r19, r24
    1b18:	41 f0       	breq	.+16     	; 0x1b2a <GetADC_Value+0x38>
    1b1a:	e8 e2       	ldi	r30, 0x28	; 40
    1b1c:	f2 e0       	ldi	r31, 0x02	; 2

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
    1b22:	20 81       	ld	r18, Z
    1b24:	32 13       	cpse	r19, r18
    1b26:	13 c0       	rjmp	.+38     	; 0x1b4e <GetADC_Value+0x5c>
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GetADC_Value+0x3c>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(channelBuffer_s[index].channel==Channel->channel)
		{
          Channel->State=channelBuffer_s[index].State;
    1b2e:	dc 01       	movw	r26, r24
    1b30:	aa 0f       	add	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	a8 0f       	add	r26, r24
    1b36:	b9 1f       	adc	r27, r25
    1b38:	ab 5d       	subi	r26, 0xDB	; 219
    1b3a:	bd 4f       	sbci	r27, 0xFD	; 253
    1b3c:	11 96       	adiw	r26, 0x01	; 1
    1b3e:	2c 91       	ld	r18, X
		  Channel->filled=1;
		  buffpos=index;
    1b40:	80 93 fe 03 	sts	0x03FE, r24
			BufferLength++;
			//uart_num(BufferLength);
		}
		
	}
	if(channelProp.State==done)
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	99 f1       	breq	.+102    	; 0x1bae <GetADC_Value+0xbc>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	48 c0       	rjmp	.+144    	; 0x1bde <GetADC_Value+0xec>

static uint8_t checkAlreadyThere(ChannelBuffer *Channel)
{
	uint8_t state=0,buffpos;
	
	for(int index=0;index<6;index++)
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	33 96       	adiw	r30, 0x03	; 3
    1b52:	86 30       	cpi	r24, 0x06	; 6
    1b54:	91 05       	cpc	r25, r1
    1b56:	29 f7       	brne	.-54     	; 0x1b22 <GetADC_Value+0x30>
    1b58:	45 c0       	rjmp	.+138    	; 0x1be4 <GetADC_Value+0xf2>
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
		{
			if(channelBuffer_s[Buffer_empty].filled=Buffer_empty)
    1b5a:	10 92 27 02 	sts	0x0227, r1
    1b5e:	11 c0       	rjmp	.+34     	; 0x1b82 <GetADC_Value+0x90>
						BufferLength=0;
				}
		}
		else
		{
			if(channelBuffer_s[BufferLength].filled!=Buffer_empty)
    1b60:	82 2f       	mov	r24, r18
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	fc 01       	movw	r30, r24
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	8e 0f       	add	r24, r30
    1b6c:	9f 1f       	adc	r25, r31
    1b6e:	fc 01       	movw	r30, r24
    1b70:	eb 5d       	subi	r30, 0xDB	; 219
    1b72:	fd 4f       	sbci	r31, 0xFD	; 253
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	88 23       	and	r24, r24
    1b78:	21 f0       	breq	.+8      	; 0x1b82 <GetADC_Value+0x90>
			{
				FreeBuffer=1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 00 04 	sts	0x0400, r24
    1b80:	39 c0       	rjmp	.+114    	; 0x1bf4 <GetADC_Value+0x102>
			}
		}
		if(FreeBuffer==Buffer_empty)
    1b82:	80 91 00 04 	lds	r24, 0x0400
    1b86:	81 11       	cpse	r24, r1
    1b88:	35 c0       	rjmp	.+106    	; 0x1bf4 <GetADC_Value+0x102>
		{
			channelBuffer_s[BufferLength].channel=ChannelSelect;
    1b8a:	82 2f       	mov	r24, r18
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	30 91 fb 03 	lds	r19, 0x03FB
    1b92:	fc 01       	movw	r30, r24
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	e8 0f       	add	r30, r24
    1b9a:	f9 1f       	adc	r31, r25
    1b9c:	eb 5d       	subi	r30, 0xDB	; 219
    1b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1ba0:	30 83       	st	Z, r19
			channelBuffer_s[BufferLength].filled=1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	82 83       	std	Z+2, r24	; 0x02
			BufferLength++;
    1ba6:	2f 5f       	subi	r18, 0xFF	; 255
    1ba8:	20 93 ff 03 	sts	0x03FF, r18
    1bac:	23 c0       	rjmp	.+70     	; 0x1bf4 <GetADC_Value+0x102>
		}
		
	}
	if(channelProp.State==done)
	{
		returnValue=ADC_Array[channelProp.channel];
    1bae:	e3 2f       	mov	r30, r19
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	e9 51       	subi	r30, 0x19	; 25
    1bb8:	fc 4f       	sbci	r31, 0xFC	; 252
    1bba:	20 81       	ld	r18, Z
    1bbc:	31 81       	ldd	r19, Z+1	; 0x01
		returnValue|=0x8000;
    1bbe:	30 68       	ori	r19, 0x80	; 128
		channelBuffer_s[bufferpos].channel=ChannelSelect;	
    1bc0:	99 27       	eor	r25, r25
    1bc2:	40 91 fb 03 	lds	r20, 0x03FB
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	8e 0f       	add	r24, r30
    1bce:	9f 1f       	adc	r25, r31
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	eb 5d       	subi	r30, 0xDB	; 219
    1bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd6:	40 83       	st	Z, r20
		channelBuffer_s[bufferpos].State=0;
    1bd8:	11 82       	std	Z+1, r1	; 0x01
		channelBuffer_s[bufferpos].filled=1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	82 83       	std	Z+2, r24	; 0x02
	else
	{
		returnValue|=0x0000;
	}
    //returnValue|=0x8000;
	return returnValue;
    1bde:	82 2f       	mov	r24, r18
    1be0:	93 2f       	mov	r25, r19
    1be2:	0b c0       	rjmp	.+22     	; 0x1bfa <GetADC_Value+0x108>
	uint8_t *array=&ADC_ChannelAndValue;
	static uint8_t FreeBuffer,bufferpos;
	ChannelBuffer channelProp={0};
	ChannelSelect=(array[1]>>3)&CHANNEL;
	channelProp.channel=ChannelSelect;
    bufferpos=checkAlreadyThere(&channelProp);
    1be4:	10 92 fe 03 	sts	0x03FE, r1
	
	if(channelProp.filled==0)
	{
        
		if(BufferLength==6)
    1be8:	20 91 ff 03 	lds	r18, 0x03FF
    1bec:	26 30       	cpi	r18, 0x06	; 6
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <GetADC_Value+0x100>
    1bf0:	b7 cf       	rjmp	.-146    	; 0x1b60 <GetADC_Value+0x6e>
    1bf2:	b3 cf       	rjmp	.-154    	; 0x1b5a <GetADC_Value+0x68>
		channelBuffer_s[bufferpos].State=0;
		channelBuffer_s[bufferpos].filled=1;
	}
	else
	{
		returnValue|=0x0000;
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	f2 cf       	rjmp	.-28     	; 0x1bde <GetADC_Value+0xec>
	}
    //returnValue|=0x8000;
	return returnValue;
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <BaseTask1>:
#include "..\BaseLayer\UART.h"
#include "..\BaseLayer\pinout.h"
#include "..\BaseLayer\SSDi2cHandler.h"

uint16_t BaseTask1(void)
{
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <BaseTask1+0x6>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	uint16_t PulseData=0;
	static uint8_t CountTaskTime,BTF;
	PulseData=InterfacePulse(PulseData);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 ff 06 	call	0xdfe	; 0xdfe <InterfacePulse>
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
	if(((uint8_t*)(&PulseData))[1]==0x80 || ((uint8_t*)(&PulseData))[1]==0x00 )
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 38       	cpi	r24, 0x80	; 128
    1c1e:	21 f0       	breq	.+8      	; 0x1c28 <BaseTask1+0x24>
    1c20:	81 11       	cpse	r24, r1
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <BaseTask1+0x2a>
	{
		//CountTaskTime=CountTaskTime+2;
		if(((uint8_t*)(&PulseData))[1]==0x00)
		{
			((uint8_t*)(&PulseData))[0]=255;
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			CountTaskTime=CountTaskTime+2;
		}*/
		//((uint8_t*)(&PulseData))[0]=CountTaskTime;
		return PulseData;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <BaseTask1+0x2e>
    else
	{
		((uint8_t*)(&PulseData))[1]=0x01;
	}
	
	return PulseData;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	91 e0       	ldi	r25, 0x01	; 1
	
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <BaseTask1Open>:
uint16_t BaseTask1Open(void)
{
	return 0;
}
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	08 95       	ret

00001c42 <BaseTask2>:

uint16_t BaseTask2(void)
{
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <BaseTask2+0x6>
    1c48:	1f 92       	push	r1
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
	uint16_t RetVal;
	static uint8_t ButtonCount,previousButtonVal,currenButtonvalue,SuccessCount;
	PinValue(&value,PIN_OUT2,B );
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	ce 01       	movw	r24, r28
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	0e 94 9e 09 	call	0x133c	; 0x133c <PinValue>
	//uart_num(value);
	if(value==previousButtonVal)
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	90 91 01 04 	lds	r25, 0x0401
    1c60:	89 13       	cpse	r24, r25
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <BaseTask2+0x48>
	{
		ButtonCount++;
    1c64:	90 91 02 04 	lds	r25, 0x0402
    1c68:	9f 5f       	subi	r25, 0xFF	; 255
    1c6a:	90 93 02 04 	sts	0x0402, r25
		previousButtonVal=value;
    1c6e:	80 93 01 04 	sts	0x0401, r24
		currenButtonvalue=value;
    1c72:	80 93 03 04 	sts	0x0403, r24
		((uint8_t *)&RetVal)[1]=0x03;
    1c76:	93 e0       	ldi	r25, 0x03	; 3
    1c78:	9b 83       	std	Y+3, r25	; 0x03
		if(value==0)
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	34 c0       	rjmp	.+104    	; 0x1ce6 <BaseTask2+0xa4>
		{
			PinOutput(1,PIN_OUT7,D);
    1c7e:	42 e0       	ldi	r20, 0x02	; 2
    1c80:	66 e0       	ldi	r22, 0x06	; 6
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
    1c88:	2e c0       	rjmp	.+92     	; 0x1ce6 <BaseTask2+0xa4>
		}
	}
	else
	{
		if(value!=0)
    1c8a:	88 23       	and	r24, r24
    1c8c:	29 f1       	breq	.+74     	; 0x1cd8 <BaseTask2+0x96>
		{
		PinOutput(0,PIN_OUT7,D);
    1c8e:	42 e0       	ldi	r20, 0x02	; 2
    1c90:	66 e0       	ldi	r22, 0x06	; 6
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
		if(ButtonCount>100)	
    1c98:	80 91 02 04 	lds	r24, 0x0402
    1c9c:	85 36       	cpi	r24, 0x65	; 101
    1c9e:	38 f0       	brcs	.+14     	; 0x1cae <BaseTask2+0x6c>
		{
			((uint8_t *)&RetVal)[1]=0x02;
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
			((uint8_t *)&RetVal)[0]=currenButtonvalue+3;
    1ca4:	80 91 03 04 	lds	r24, 0x0403
    1ca8:	8d 5f       	subi	r24, 0xFD	; 253
    1caa:	8a 83       	std	Y+2, r24	; 0x02
    1cac:	17 c0       	rjmp	.+46     	; 0x1cdc <BaseTask2+0x9a>
		}
		
		else if(ButtonCount>50 )
    1cae:	83 33       	cpi	r24, 0x33	; 51
    1cb0:	38 f0       	brcs	.+14     	; 0x1cc0 <BaseTask2+0x7e>
		{
			((uint8_t *)&RetVal)[1]=0x02;
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
			((uint8_t *)&RetVal)[0]=currenButtonvalue+2;
    1cb6:	80 91 03 04 	lds	r24, 0x0403
    1cba:	8e 5f       	subi	r24, 0xFE	; 254
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <BaseTask2+0x9a>
		}
		else if(ButtonCount>5)
    1cc0:	86 30       	cpi	r24, 0x06	; 6
    1cc2:	38 f0       	brcs	.+14     	; 0x1cd2 <BaseTask2+0x90>
		{
			((uint8_t *)&RetVal)[1]=0x02;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
			((uint8_t *)&RetVal)[0]=currenButtonvalue+1;
    1cc8:	80 91 03 04 	lds	r24, 0x0403
    1ccc:	8f 5f       	subi	r24, 0xFF	; 255
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <BaseTask2+0x9a>
		}
		else
		{
			((uint8_t *)&RetVal)[1]=0x03;
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <BaseTask2+0x9a>
		}
		}
		else{
			((uint8_t *)&RetVal)[1]=0x03;
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	8b 83       	std	Y+3, r24	; 0x03
		}
		ButtonCount=0;
    1cdc:	10 92 02 04 	sts	0x0402, r1
		previousButtonVal=value;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	80 93 01 04 	sts	0x0401, r24
	{
		((uint8_t *)&RetVal)[1]=0x03;
	}*/
    //0((uint8_t *)&RetVal)[0]=currenButtonvalue;
	return RetVal;
}
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	08 95       	ret

00001cf6 <BaseTask2Open>:

uint16_t BaseTask2Open(void)
{
	return 0;
}
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	08 95       	ret

00001cfc <SSDtask>:

uint16_t SSDtask(void)
{
	SSDi2cHandlerFunc(0);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 c3 0a 	call	0x1586	; 0x1586 <SSDi2cHandlerFunc>
	return 0xfffff;
}
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	08 95       	ret

00001d0a <Testtask>:
uint16_t Testtask(void)
{
	static uint8_t count;
	count++;
    1d0a:	80 91 04 04 	lds	r24, 0x0404
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
	if(count>3)
    1d10:	84 30       	cpi	r24, 0x04	; 4
    1d12:	18 f4       	brcc	.+6      	; 0x1d1a <Testtask+0x10>
	return 0xfffff;
}
uint16_t Testtask(void)
{
	static uint8_t count;
	count++;
    1d14:	80 93 04 04 	sts	0x0404, r24
    1d18:	06 c0       	rjmp	.+12     	; 0x1d26 <Testtask+0x1c>
	if(count>3)
	{
		count=0;
    1d1a:	10 92 04 04 	sts	0x0404, r1
		testfuc(0);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <testfuc>
	}
	
	return 0xfffff;
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	9f ef       	ldi	r25, 0xFF	; 255
    1d2a:	08 95       	ret

00001d2c <chartohex>:
	return 0;
}

static uint8_t chartohex(char arg)
{
	if(arg>='0' && arg<='9' )
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	90 53       	subi	r25, 0x30	; 48
    1d30:	9a 30       	cpi	r25, 0x0A	; 10
    1d32:	30 f4       	brcc	.+12     	; 0x1d40 <chartohex+0x14>
	{
		return charHex[arg-'0'];
    1d34:	e8 2f       	mov	r30, r24
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	e9 5e       	subi	r30, 0xE9	; 233
    1d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d3c:	80 81       	ld	r24, Z
    1d3e:	08 95       	ret
	}
	else if(arg>='A' && arg<='F')
    1d40:	98 2f       	mov	r25, r24
    1d42:	91 54       	subi	r25, 0x41	; 65
    1d44:	96 30       	cpi	r25, 0x06	; 6
    1d46:	30 f4       	brcc	.+12     	; 0x1d54 <chartohex+0x28>
	{
		return charHex[arg-'A'+10];
    1d48:	e8 2f       	mov	r30, r24
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	e0 5f       	subi	r30, 0xF0	; 240
    1d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d50:	80 81       	ld	r24, Z
    1d52:	08 95       	ret
	}
	return 0;	
    1d54:	80 e0       	ldi	r24, 0x00	; 0
}
    1d56:	08 95       	ret

00001d58 <ReadRambytesNonCnt>:
//-->EXAMPLE ROUTINE :-FD01ED01EE01EF01F004
//01ED --> one address
//everything is in hex
//04-->length
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	7c 01       	movw	r14, r24
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
    1d68:	8a e0       	ldi	r24, 0x0A	; 10
    1d6a:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1d6e:	d7 01       	movw	r26, r14
    1d70:	1c 96       	adiw	r26, 0x0c	; 12
    1d72:	8c 91       	ld	r24, X
    1d74:	88 23       	and	r24, r24
    1d76:	69 f1       	breq	.+90     	; 0x1dd2 <ReadRambytesNonCnt+0x7a>
    1d78:	d1 2c       	mov	r13, r1
	{
		address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[i+1+4]<<8)|((uint8_t*)Ptr)[i+4]));
    1d7a:	f7 01       	movw	r30, r14
    1d7c:	ed 0d       	add	r30, r13
    1d7e:	f1 1d       	adc	r31, r1
    1d80:	b5 81       	ldd	r27, Z+5	; 0x05
    1d82:	db 2f       	mov	r29, r27
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	c8 2f       	mov	r28, r24
    1d88:	84 81       	ldd	r24, Z+4	; 0x04
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	08 2b       	or	r16, r24
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1d8e:	d8 01       	movw	r26, r16
    1d90:	ec 91       	ld	r30, X
    1d92:	e2 95       	swap	r30
    1d94:	ef 70       	andi	r30, 0x0F	; 15
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	e9 5c       	subi	r30, 0xC9	; 201
    1d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d9c:	80 81       	ld	r24, Z
    1d9e:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1da2:	d8 01       	movw	r26, r16
    1da4:	ec 91       	ld	r30, X
    1da6:	ef 70       	andi	r30, 0x0F	; 15
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	e9 5c       	subi	r30, 0xC9	; 201
    1dac:	fd 4f       	sbci	r31, 0xFD	; 253
    1dae:	80 81       	ld	r24, Z
    1db0:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
uint16_t ReadRambytesNonCnt(void *Ptr)
{
    uint8_t i;
	uint8_t *address;
	FillUartBufferSiglechar('\n');
	for(i=0;i<(((uint8_t*)Ptr)[12]*2);i=i+2)
    1dba:	d3 94       	inc	r13
    1dbc:	d3 94       	inc	r13
    1dbe:	2d 2d       	mov	r18, r13
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	84 85       	ldd	r24, Z+12	; 0x0c
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	28 17       	cp	r18, r24
    1dce:	39 07       	cpc	r19, r25
    1dd0:	a4 f2       	brlt	.-88     	; 0x1d7a <ReadRambytesNonCnt+0x22>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
	}
	
	return 0;	
}
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	ff 90       	pop	r15
    1de0:	ef 90       	pop	r14
    1de2:	df 90       	pop	r13
    1de4:	08 95       	ret

00001de6 <WriteRambyte>:
	
	return 0;
}

uint16_t WriteRambyte(void *Ptr)
{
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1df6:	fc 01       	movw	r30, r24
    1df8:	f5 81       	ldd	r31, Z+5	; 0x05
    1dfa:	df 2f       	mov	r29, r31
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	c8 2f       	mov	r28, r24
    1e00:	f8 01       	movw	r30, r16
    1e02:	84 81       	ldd	r24, Z+4	; 0x04
    1e04:	c8 2b       	or	r28, r24
	FillUartBufferSiglechar('\n');
    1e06:	8a e0       	ldi	r24, 0x0A	; 10
    1e08:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e10:	88 23       	and	r24, r24
    1e12:	39 f1       	breq	.+78     	; 0x1e62 <WriteRambyte+0x7c>
    1e14:	d1 2c       	mov	r13, r1
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
		FillUartBufferSiglechar(' ');
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
    1e16:	0f 2e       	mov	r0, r31
    1e18:	f2 e8       	ldi	r31, 0x82	; 130
    1e1a:	ef 2e       	mov	r14, r31
    1e1c:	f5 e0       	ldi	r31, 0x05	; 5
    1e1e:	ff 2e       	mov	r15, r31
    1e20:	f0 2d       	mov	r31, r0
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1e22:	e8 81       	ld	r30, Y
    1e24:	e2 95       	swap	r30
    1e26:	ef 70       	andi	r30, 0x0F	; 15
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	e9 5c       	subi	r30, 0xC9	; 201
    1e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2e:	80 81       	ld	r24, Z
    1e30:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1e34:	e8 81       	ld	r30, Y
    1e36:	ef 70       	andi	r30, 0x0F	; 15
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	e9 5c       	subi	r30, 0xC9	; 201
    1e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e3e:	80 81       	ld	r24, Z
    1e40:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(' ');
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		*address=((uint8_t*)Ptr)[i+6];
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	ed 0d       	add	r30, r13
    1e4e:	f1 1d       	adc	r31, r1
    1e50:	86 81       	ldd	r24, Z+6	; 0x06
    1e52:	89 93       	st	Y+, r24
		address++;
		Datastore[1]=0;
    1e54:	f7 01       	movw	r30, r14
    1e56:	10 82       	st	Z, r1
{
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	for(i=0;i<((uint8_t*)Ptr)[12];i++)
    1e58:	d3 94       	inc	r13
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e5e:	d8 16       	cp	r13, r24
    1e60:	00 f3       	brcs	.-64     	; 0x1e22 <WriteRambyte+0x3c>
		*address=((uint8_t*)Ptr)[i+6];
		address++;
		Datastore[1]=0;
	}

	PushEventInterface(52,1,Datastore,0);	
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	41 e8       	ldi	r20, 0x81	; 129
    1e68:	55 e0       	ldi	r21, 0x05	; 5
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	84 e3       	ldi	r24, 0x34	; 52
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
	return 0;
}
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	08 95       	ret

00001e8a <ReadRambyte>:
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
{
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	8c 01       	movw	r16, r24
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
    1e98:	fc 01       	movw	r30, r24
    1e9a:	f5 80       	ldd	r15, Z+5	; 0x05
    1e9c:	e1 2c       	mov	r14, r1
    1e9e:	84 81       	ldd	r24, Z+4	; 0x04
    1ea0:	e8 2a       	or	r14, r24
    1ea2:	e7 01       	movw	r28, r14
	FillUartBufferSiglechar('\n');
    1ea4:	8a e0       	ldi	r24, 0x0A	; 10
    1ea6:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
	PopulateSSDbuffer("Value:",3,5);
    1eaa:	45 e0       	ldi	r20, 0x05	; 5
    1eac:	63 e0       	ldi	r22, 0x03	; 3
    1eae:	8e ef       	ldi	r24, 0xFE	; 254
    1eb0:	92 e0       	ldi	r25, 0x02	; 2
    1eb2:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	86 81       	ldd	r24, Z+6	; 0x06
    1eba:	88 23       	and	r24, r24
    1ebc:	a1 f1       	breq	.+104    	; 0x1f26 <ReadRambyte+0x9c>
	{
		FillUartBufferSiglechar(HexChar[((address[0]&0XF0)>>4)]);
    1ebe:	e8 81       	ld	r30, Y
    1ec0:	e2 95       	swap	r30
    1ec2:	ef 70       	andi	r30, 0x0F	; 15
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	e9 5c       	subi	r30, 0xC9	; 201
    1ec8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eca:	80 81       	ld	r24, Z
    1ecc:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		FillUartBufferSiglechar(HexChar[(address[0]&0X0F)]);
    1ed0:	e8 81       	ld	r30, Y
    1ed2:	ef 70       	andi	r30, 0x0F	; 15
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	e9 5c       	subi	r30, 0xC9	; 201
    1ed8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eda:	80 81       	ld	r24, Z
    1edc:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		PopulateSSDbufferChar(HexChar[((address[0]&0XF0)>>4)],0,0);
    1ee0:	e8 81       	ld	r30, Y
    1ee2:	e2 95       	swap	r30
    1ee4:	ef 70       	andi	r30, 0x0F	; 15
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	e9 5c       	subi	r30, 0xC9	; 201
    1eea:	fd 4f       	sbci	r31, 0xFD	; 253
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <PopulateSSDbufferChar>
		PopulateSSDbufferChar(HexChar[(address[0]&0X0F)],0,0);
    1ef6:	e9 91       	ld	r30, Y+
    1ef8:	ef 70       	andi	r30, 0x0F	; 15
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	e9 5c       	subi	r30, 0xC9	; 201
    1efe:	fd 4f       	sbci	r31, 0xFD	; 253
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	0e 94 71 12 	call	0x24e2	; 0x24e2 <PopulateSSDbufferChar>
		PopulateSSDbufferChar(' ',0,0);
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	0e 94 71 12 	call	0x24e2	; 0x24e2 <PopulateSSDbufferChar>
		FillUartBufferSiglechar(' ');
    1f14:	80 e2       	ldi	r24, 0x20	; 32
    1f16:	0e 94 a3 12 	call	0x2546	; 0x2546 <FillUartBufferSiglechar>
		return charHex[arg-'A'+10];
	}
	return 0;	
}

uint16_t ReadRambyte(void *Ptr)
    1f1a:	9c 2f       	mov	r25, r28
    1f1c:	9e 19       	sub	r25, r14
	uint8_t i;
	uint8_t *address;
	address=((uint8_t*)((uint16_t)(((uint8_t*)Ptr)[5]<<8)|((uint8_t*)Ptr)[4]));
	FillUartBufferSiglechar('\n');
	PopulateSSDbuffer("Value:",3,5);
	for(i=0;i<((uint8_t*)Ptr)[6];i++)
    1f1e:	f8 01       	movw	r30, r16
    1f20:	86 81       	ldd	r24, Z+6	; 0x06
    1f22:	98 17       	cp	r25, r24
    1f24:	60 f2       	brcs	.-104    	; 0x1ebe <ReadRambyte+0x34>
		FillUartBufferSiglechar(' ');
		address++;
	}
	
	return 0;
}
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <DebugHandlerFunc>:
VariableManager VariableManager_t[5];
static	uint8_t chartohex(char arg);
typedef uint16_t (*argp)(void *);
argp argp1;
uint16_t DebugHandlerFunc(void *fptr)
{
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <DebugHandlerFunc+0x12>
    1f4a:	1f 92       	push	r1
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	8c 01       	movw	r16, r24
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
    1f52:	85 e4       	ldi	r24, 0x45	; 69
    1f54:	9f e0       	ldi	r25, 0x0F	; 15
    1f56:	9b 83       	std	Y+3, r25	; 0x03
    1f58:	8a 83       	std	Y+2, r24	; 0x02
uint16_t DebugHandlerFunc(void *fptr)
{
	static uint8_t Pos[12];
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
    1f5a:	d1 2c       	mov	r13, r1
    1f5c:	f1 2c       	mov	r15, r1
		}
		k++;
		if(k==2)
		{
		  i++;
		  k=0;	
    1f5e:	e1 2c       	mov	r14, r1
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1f60:	34 c0       	rjmp	.+104    	; 0x1fca <DebugHandlerFunc+0x92>
	{
		uart_char(data);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	0e 94 10 0c 	call	0x1820	; 0x1820 <uart_char>
		if(i<10)
    1f68:	29 e0       	ldi	r18, 0x09	; 9
    1f6a:	2f 15       	cp	r18, r15
    1f6c:	38 f1       	brcs	.+78     	; 0x1fbc <DebugHandlerFunc+0x84>
	{
		if(k==0)
    1f6e:	d1 10       	cpse	r13, r1
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <DebugHandlerFunc+0x56>
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <chartohex>
    1f78:	ef 2d       	mov	r30, r15
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	eb 5f       	subi	r30, 0xFB	; 251
    1f7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f80:	a0 e1       	ldi	r26, 0x10	; 16
    1f82:	8a 9f       	mul	r24, r26
    1f84:	c0 01       	movw	r24, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	80 83       	st	Z, r24
		}
		if(k==1)
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
		}
		k++;
    1f8a:	d3 94       	inc	r13
    1f8c:	1e c0       	rjmp	.+60     	; 0x1fca <DebugHandlerFunc+0x92>
	{
		if(k==0)
		{
        Pos[i]=(0xF0 &((chartohex(data))<<4));
		}
		if(k==1)
    1f8e:	b1 e0       	ldi	r27, 0x01	; 1
    1f90:	db 12       	cpse	r13, r27
    1f92:	0d c0       	rjmp	.+26     	; 0x1fae <DebugHandlerFunc+0x76>
		{
		Pos[i]=Pos[i]|((0x0F &(chartohex(data))));	
    1f94:	cf 2c       	mov	r12, r15
    1f96:	d1 2c       	mov	r13, r1
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <chartohex>
    1f9e:	f6 01       	movw	r30, r12
    1fa0:	eb 5f       	subi	r30, 0xFB	; 251
    1fa2:	fb 4f       	sbci	r31, 0xFB	; 251
    1fa4:	8f 70       	andi	r24, 0x0F	; 15
    1fa6:	90 81       	ld	r25, Z
    1fa8:	89 2b       	or	r24, r25
    1faa:	80 83       	st	Z, r24
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <DebugHandlerFunc+0x7e>
		}
		k++;
    1fae:	d3 94       	inc	r13
		if(k==2)
    1fb0:	e2 e0       	ldi	r30, 0x02	; 2
    1fb2:	de 12       	cpse	r13, r30
    1fb4:	0a c0       	rjmp	.+20     	; 0x1fca <DebugHandlerFunc+0x92>
		{
		  i++;
    1fb6:	f3 94       	inc	r15
		  k=0;	
    1fb8:	de 2c       	mov	r13, r14
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <DebugHandlerFunc+0x92>
		}
	}
	else
	{
	  Pos[i]=data;
    1fbc:	ef 2d       	mov	r30, r15
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	eb 5f       	subi	r30, 0xFB	; 251
    1fc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	80 83       	st	Z, r24
	  i++;
    1fc8:	f3 94       	inc	r15
	char data;
	void *CallBackptr;
	uint8_t i=0,k=0;
	uint16_t TEMP=ReadRambyte;
	
	while((*((PopFuncPointer)fptr))(&data)==0)
    1fca:	ce 01       	movw	r24, r28
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	f8 01       	movw	r30, r16
    1fd0:	09 95       	icall
    1fd2:	88 23       	and	r24, r24
    1fd4:	31 f2       	breq	.-116    	; 0x1f62 <DebugHandlerFunc+0x2a>
	  i++;
	}
			
	}

	if(Pos[0]==0xab)
    1fd6:	80 91 05 04 	lds	r24, 0x0405
    1fda:	8b 3a       	cpi	r24, 0xAB	; 171
    1fdc:	71 f5       	brne	.+92     	; 0x203a <DebugHandlerFunc+0x102>
	{
	   
        TEMP=ReadRambyte;
		if(Pos[3]==0)
    1fde:	80 91 08 04 	lds	r24, 0x0408
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	1a c0       	rjmp	.+52     	; 0x201a <DebugHandlerFunc+0xe2>
		{
		  //uart_string((char*)0x01ed/*(char*)((uint16_t)(Pos[1]<<8)|Pos[2])*/);	
          Datastore[0]=0;
    1fe6:	10 92 81 05 	sts	0x0581, r1
          Datastore[1]=1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	80 93 82 05 	sts	0x0582, r24
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	80 93 83 05 	sts	0x0583, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	80 93 84 05 	sts	0x0584, r24
          Datastore[4]=Pos[2];
    1ffc:	80 91 07 04 	lds	r24, 0x0407
    2000:	80 93 85 05 	sts	0x0585, r24
          Datastore[5]=Pos[1];
    2004:	80 91 06 04 	lds	r24, 0x0406
    2008:	80 93 86 05 	sts	0x0586, r24
          Datastore[6]=Pos[4];
    200c:	80 91 09 04 	lds	r24, 0x0409
    2010:	80 93 87 05 	sts	0x0587, r24
		  Datastore[12]=Pos[4];
    2014:	80 93 8d 05 	sts	0x058D, r24
    2018:	a1 c0       	rjmp	.+322    	; 0x215c <DebugHandlerFunc+0x224>
		 //ReadRambyte(Datastore);;
		 //PushEventInterface(52,1,Datastore,0);
		}
		else if(Pos[3]==1)
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	09 f0       	breq	.+2      	; 0x2020 <DebugHandlerFunc+0xe8>
    201e:	9e c0       	rjmp	.+316    	; 0x215c <DebugHandlerFunc+0x224>
		{
		  //
		  Datastore[1]=0;
    2020:	10 92 82 05 	sts	0x0582, r1
		  PushEventInterface(52,1,Datastore,0);
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	41 e8       	ldi	r20, 0x81	; 129
    202a:	55 e0       	ldi	r21, 0x05	; 5
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	84 e3       	ldi	r24, 0x34	; 52
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    2038:	91 c0       	rjmp	.+290    	; 0x215c <DebugHandlerFunc+0x224>
		} else if(Pos[3]==2)
		{
			
		}
	}
	else if(Pos[0]==0xac)
    203a:	8c 3a       	cpi	r24, 0xAC	; 172
    203c:	99 f5       	brne	.+102    	; 0x20a4 <DebugHandlerFunc+0x16c>
	{
		 TEMP=WriteRambyte;
    203e:	83 ef       	ldi	r24, 0xF3	; 243
    2040:	9e e0       	ldi	r25, 0x0E	; 14
    2042:	9b 83       	std	Y+3, r25	; 0x03
    2044:	8a 83       	std	Y+2, r24	; 0x02
          Datastore[0]=0;
    2046:	10 92 81 05 	sts	0x0581, r1
          Datastore[1]=1;
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	90 93 82 05 	sts	0x0582, r25
          Datastore[2]=((uint8_t*)(&TEMP))[0];
    2050:	80 93 83 05 	sts	0x0583, r24
          Datastore[3]=((uint8_t*)(&TEMP))[1];
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	80 93 84 05 	sts	0x0584, r24
          Datastore[4]=Pos[2];
    205a:	80 91 07 04 	lds	r24, 0x0407
    205e:	80 93 85 05 	sts	0x0585, r24
          Datastore[5]=Pos[1];
    2062:	80 91 06 04 	lds	r24, 0x0406
    2066:	80 93 86 05 	sts	0x0586, r24
          Datastore[6]=Pos[3];
    206a:	80 91 08 04 	lds	r24, 0x0408
    206e:	80 93 87 05 	sts	0x0587, r24
		  Datastore[7]=Pos[4];
    2072:	80 91 09 04 	lds	r24, 0x0409
    2076:	80 93 88 05 	sts	0x0588, r24
		  Datastore[8]=Pos[5];
    207a:	80 91 0a 04 	lds	r24, 0x040A
    207e:	80 93 89 05 	sts	0x0589, r24
		  Datastore[9]=Pos[6];
    2082:	80 91 0b 04 	lds	r24, 0x040B
    2086:	80 93 8a 05 	sts	0x058A, r24
	      Datastore[10]=Pos[7];
    208a:	80 91 0c 04 	lds	r24, 0x040C
    208e:	80 93 8b 05 	sts	0x058B, r24
		  Datastore[11]=Pos[8];
    2092:	80 91 0d 04 	lds	r24, 0x040D
    2096:	80 93 8c 05 	sts	0x058C, r24
		  Datastore[12]=Pos[9];
    209a:	80 91 0e 04 	lds	r24, 0x040E
    209e:	80 93 8d 05 	sts	0x058D, r24
    20a2:	5c c0       	rjmp	.+184    	; 0x215c <DebugHandlerFunc+0x224>
		  //PushEventInterface(52,1,Datastore,0);	
	}
	else if(Pos[0]==0xfd)
    20a4:	8d 3f       	cpi	r24, 0xFD	; 253
    20a6:	99 f5       	brne	.+102    	; 0x210e <DebugHandlerFunc+0x1d6>
	{
		TEMP=ReadRambytesNonCnt;
    20a8:	8c ea       	ldi	r24, 0xAC	; 172
    20aa:	9e e0       	ldi	r25, 0x0E	; 14
    20ac:	9b 83       	std	Y+3, r25	; 0x03
    20ae:	8a 83       	std	Y+2, r24	; 0x02
		Datastore[0]=0;
    20b0:	10 92 81 05 	sts	0x0581, r1
		Datastore[1]=1;
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	90 93 82 05 	sts	0x0582, r25
		Datastore[2]=((uint8_t*)(&TEMP))[0];
    20ba:	80 93 83 05 	sts	0x0583, r24
		Datastore[3]=((uint8_t*)(&TEMP))[1];
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	80 93 84 05 	sts	0x0584, r24
		Datastore[4]=Pos[2];
    20c4:	80 91 07 04 	lds	r24, 0x0407
    20c8:	80 93 85 05 	sts	0x0585, r24
		Datastore[5]=Pos[1];
    20cc:	80 91 06 04 	lds	r24, 0x0406
    20d0:	80 93 86 05 	sts	0x0586, r24
		Datastore[6]=Pos[4];
    20d4:	80 91 09 04 	lds	r24, 0x0409
    20d8:	80 93 87 05 	sts	0x0587, r24
		Datastore[7]=Pos[3];
    20dc:	80 91 08 04 	lds	r24, 0x0408
    20e0:	80 93 88 05 	sts	0x0588, r24
		Datastore[8]=Pos[6];
    20e4:	80 91 0b 04 	lds	r24, 0x040B
    20e8:	80 93 89 05 	sts	0x0589, r24
		Datastore[9]=Pos[5];
    20ec:	80 91 0a 04 	lds	r24, 0x040A
    20f0:	80 93 8a 05 	sts	0x058A, r24
	    Datastore[10]=Pos[8];
    20f4:	80 91 0d 04 	lds	r24, 0x040D
    20f8:	80 93 8b 05 	sts	0x058B, r24
	    Datastore[11]=Pos[7];
    20fc:	80 91 0c 04 	lds	r24, 0x040C
    2100:	80 93 8c 05 	sts	0x058C, r24
	    Datastore[12]=Pos[9];
    2104:	80 91 0e 04 	lds	r24, 0x040E
    2108:	80 93 8d 05 	sts	0x058D, r24
    210c:	27 c0       	rjmp	.+78     	; 0x215c <DebugHandlerFunc+0x224>
		
	}
	else if(Pos[0]==0xbd)
    210e:	8d 3b       	cpi	r24, 0xBD	; 189
    2110:	29 f5       	brne	.+74     	; 0x215c <DebugHandlerFunc+0x224>
	{
		
		TEMP=ReadRambyte;
		uart_num(Pos[1]);
    2112:	06 e0       	ldi	r16, 0x06	; 6
    2114:	14 e0       	ldi	r17, 0x04	; 4
    2116:	d8 01       	movw	r26, r16
    2118:	8c 91       	ld	r24, X
    211a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
        Datastore[0]=0;
    211e:	10 92 81 05 	sts	0x0581, r1
        Datastore[1]=1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	80 93 82 05 	sts	0x0582, r24
        Datastore[2]=((uint8_t*)(&TEMP))[0];
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	80 93 83 05 	sts	0x0583, r24
        Datastore[3]=((uint8_t*)(&TEMP))[1];
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	80 93 84 05 	sts	0x0584, r24
        Datastore[4]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[0];
    2134:	d8 01       	movw	r26, r16
    2136:	ec 91       	ld	r30, X
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	e9 56       	subi	r30, 0x69	; 105
    2144:	fa 4f       	sbci	r31, 0xFA	; 250
    2146:	80 81       	ld	r24, Z
    2148:	80 93 85 05 	sts	0x0585, r24
        Datastore[5]=((uint8_t *)&(VariableManager_t[Pos[1]].VariableAdd))[1];
    214c:	81 81       	ldd	r24, Z+1	; 0x01
    214e:	80 93 86 05 	sts	0x0586, r24
        Datastore[6]=VariableManager_t[Pos[1]].VariableSize;
    2152:	83 81       	ldd	r24, Z+3	; 0x03
    2154:	80 93 87 05 	sts	0x0587, r24
        Datastore[12]=VariableManager_t[Pos[1]].VariableSize;
    2158:	80 93 8d 05 	sts	0x058D, r24
	}
	
	if(data=='!')
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	81 32       	cpi	r24, 0x21	; 33
    2160:	f9 f4       	brne	.+62     	; 0x21a0 <DebugHandlerFunc+0x268>
	{
	  argp1=(argp *)(((uint16_t*)(Pos+11))[0]);
    2162:	60 91 10 04 	lds	r22, 0x0410
    2166:	70 91 11 04 	lds	r23, 0x0411
    216a:	70 93 96 05 	sts	0x0596, r23
    216e:	60 93 95 05 	sts	0x0595, r22
	  if(argp1!=0)
    2172:	61 15       	cp	r22, r1
    2174:	71 05       	cpc	r23, r1
    2176:	49 f0       	breq	.+18     	; 0x218a <DebugHandlerFunc+0x252>
	  {
		  PushEventInterface(201,argp1,Datastore,0);
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	41 e8       	ldi	r20, 0x81	; 129
    217e:	55 e0       	ldi	r21, 0x05	; 5
    2180:	89 ec       	ldi	r24, 0xC9	; 201
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    2188:	15 c0       	rjmp	.+42     	; 0x21b4 <DebugHandlerFunc+0x27c>
	  }
	  else
	  {
		  
		  PushEventInterface(52,1,Datastore,0);
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	41 e8       	ldi	r20, 0x81	; 129
    2190:	55 e0       	ldi	r21, 0x05	; 5
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	84 e3       	ldi	r24, 0x34	; 52
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    219e:	0a c0       	rjmp	.+20     	; 0x21b4 <DebugHandlerFunc+0x27c>
	  }
	  
	}
	else
	{
	  PushEventInterface(52,1,Datastore,0);
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	41 e8       	ldi	r20, 0x81	; 129
    21a6:	55 e0       	ldi	r21, 0x05	; 5
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	84 e3       	ldi	r24, 0x34	; 52
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
	}
	return 0;
}
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	ef 90       	pop	r14
    21ca:	df 90       	pop	r13
    21cc:	cf 90       	pop	r12
    21ce:	08 95       	ret

000021d0 <OutPutVariableRegister>:
	return 0;	
}

uint8_t OutPutVariableRegister(uint16_t Outadd,uint8_t Varsize,uint8_t Varid)
{
	VariableManager_t[Varid].VariableAdd=Outadd;
    21d0:	e4 2f       	mov	r30, r20
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	e9 56       	subi	r30, 0x69	; 105
    21de:	fa 4f       	sbci	r31, 0xFA	; 250
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
	VariableManager_t[Varid].VariableId=Varid;
    21e4:	42 83       	std	Z+2, r20	; 0x02
	VariableManager_t[Varid].VariableSize=Varsize;
    21e6:	63 83       	std	Z+3, r22	; 0x03
    21e8:	08 95       	ret

000021ea <Nvm_TableInit>:
 *  Author: Nikhil
 */ 
#include "EepromStructure.h"
void Nvm_TableInit()
{
	Nvm_Table_t[0].Id=0;
    21ea:	10 92 05 05 	sts	0x0505, r1
	Nvm_Table_t[0].Nvm_Size=sizeof(Nvm_T_Ping);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	80 93 06 05 	sts	0x0506, r24
	Nvm_Table_t[1].Id=1;
    21f4:	80 93 07 05 	sts	0x0507, r24
	Nvm_Table_t[1].Nvm_Size=sizeof(Nvm_T_OH);
    21f8:	94 e0       	ldi	r25, 0x04	; 4
    21fa:	90 93 08 05 	sts	0x0508, r25
	Nvm_Table_t[2].Id=5;
    21fe:	95 e0       	ldi	r25, 0x05	; 5
    2200:	90 93 09 05 	sts	0x0509, r25
	Nvm_Table_t[2].Nvm_Size=sizeof(Nvm_T_TankOverflow);
    2204:	80 93 0a 05 	sts	0x050A, r24
	Nvm_Table_t[3].Id=6;
    2208:	96 e0       	ldi	r25, 0x06	; 6
    220a:	90 93 0b 05 	sts	0x050B, r25
	Nvm_Table_t[3].Nvm_Size=sizeof(Nvm_T_TankOverflowLevel);
    220e:	80 93 0c 05 	sts	0x050C, r24
	Nvm_Table_t[4].Id=7;
    2212:	97 e0       	ldi	r25, 0x07	; 7
    2214:	90 93 0d 05 	sts	0x050D, r25
	Nvm_Table_t[4].Nvm_Size=sizeof(Nvm_T_TankHeight);
    2218:	80 93 0e 05 	sts	0x050E, r24
    221c:	08 95       	ret

0000221e <NVMTask>:
   PushEventInterface(52,1,NVMDataArray,0);	
 }
}
static uint32_t NVMdat=200; 
uint16_t NVMTask(void *NvmData)
{
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	ec 01       	movw	r28, r24
	//uart_string("in nvm");
	uint8_t state;
	uint8_t *NVMDataPtr;
	uint8_t* extemp;
	NVMDataPtr=(uint8_t *)NvmData;
	state=GetNVMState();
    2224:	0e 94 4d 09 	call	0x129a	; 0x129a <GetNVMState>
	//uart_num(state);
	NVMdat++;
    2228:	40 91 5b 02 	lds	r20, 0x025B
    222c:	50 91 5c 02 	lds	r21, 0x025C
    2230:	60 91 5d 02 	lds	r22, 0x025D
    2234:	70 91 5e 02 	lds	r23, 0x025E
    2238:	4f 5f       	subi	r20, 0xFF	; 255
    223a:	5f 4f       	sbci	r21, 0xFF	; 255
    223c:	6f 4f       	sbci	r22, 0xFF	; 255
    223e:	7f 4f       	sbci	r23, 0xFF	; 255
    2240:	40 93 5b 02 	sts	0x025B, r20
    2244:	50 93 5c 02 	sts	0x025C, r21
    2248:	60 93 5d 02 	sts	0x025D, r22
    224c:	70 93 5e 02 	sts	0x025E, r23
	if(state==2 && NVMProcess==0)
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	09 f0       	breq	.+2      	; 0x2256 <NVMTask+0x38>
    2254:	40 c0       	rjmp	.+128    	; 0x22d6 <NVMTask+0xb8>
    2256:	80 91 11 04 	lds	r24, 0x0411
    225a:	81 11       	cpse	r24, r1
    225c:	18 c0       	rjmp	.+48     	; 0x228e <NVMTask+0x70>
	     //CurrentEvent()->EEid
		//uart_string("IN nvm task");
		 
		
	    extemp=((uint16_t*)(NVMDataPtr+4))[0];
		NvmPopulateWriteSize(Nvm_Table_t[NVMDataPtr[6]].Nvm_Size,Nvm_Table_t[NVMDataPtr[6]].Id,NVMDataPtr[7],extemp);
    225e:	ee 81       	ldd	r30, Y+6	; 0x06
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	2c 81       	ldd	r18, Y+4	; 0x04
    2264:	3d 81       	ldd	r19, Y+5	; 0x05
    2266:	4f 81       	ldd	r20, Y+7	; 0x07
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	eb 5f       	subi	r30, 0xFB	; 251
    226e:	fa 4f       	sbci	r31, 0xFA	; 250
    2270:	60 81       	ld	r22, Z
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	81 81       	ldd	r24, Z+1	; 0x01
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 29 09 	call	0x1252	; 0x1252 <NvmPopulateWriteSize>
		SwitchNvmOn();
    227e:	0e 94 49 09 	call	0x1292	; 0x1292 <SwitchNvmOn>
		NVMProcess=1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	80 93 11 04 	sts	0x0411, r24
	    return 1;
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	25 c0       	rjmp	.+74     	; 0x22d8 <NVMTask+0xba>
	}
	else if(state==2 && NVMProcess==1)
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	11 f5       	brne	.+68     	; 0x22d6 <NVMTask+0xb8>
	{
		extemp=((uint16_t*)(NVMDataPtr+4))[0];
    2292:	0c 80       	ldd	r0, Y+4	; 0x04
    2294:	dd 81       	ldd	r29, Y+5	; 0x05
    2296:	c0 2d       	mov	r28, r0
		uart_num(extemp[0]);
    2298:	88 81       	ld	r24, Y
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
		uart_num(extemp[1]);
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
		uart_num(extemp[2]);
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
		uart_num(extemp[3]);
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
	    NVMDataArray[1]=0;
    22b8:	10 92 13 04 	sts	0x0413, r1
		PushEventInterface(52,1,NVMDataArray,0);
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	42 e1       	ldi	r20, 0x12	; 18
    22c0:	54 e0       	ldi	r21, 0x04	; 4
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	84 e3       	ldi	r24, 0x34	; 52
    22c8:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
        NVMProcess=0;
    22cc:	10 92 11 04 	sts	0x0411, r1
	    return 0;
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <NVMTask+0xba>
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <NVMTask+0xbe>
    22d8:	82 2f       	mov	r24, r18
    22da:	93 2f       	mov	r25, r19
	}
}
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <StoreNVM>:
static uint8_t NVMProcess;
uint16_t TEMP;
void StoreNVM(Nvm_Id ID, void * ptr,uint8_t ReadorWrite)
{
static uint32_t nnn=0x01020304;
if(NVMProcess==0)
    22e2:	90 91 11 04 	lds	r25, 0x0411
    22e6:	91 11       	cpse	r25, r1
    22e8:	3b c0       	rjmp	.+118    	; 0x2360 <StoreNVM+0x7e>
 {
   TEMP=NVMTask;
    22ea:	2f e0       	ldi	r18, 0x0F	; 15
    22ec:	31 e1       	ldi	r19, 0x11	; 17
    22ee:	30 93 ac 05 	sts	0x05AC, r19
    22f2:	20 93 ab 05 	sts	0x05AB, r18
   NVMDataArray[0]=2;
    22f6:	92 e0       	ldi	r25, 0x02	; 2
    22f8:	90 93 12 04 	sts	0x0412, r25
   NVMDataArray[1]=1;
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	90 93 13 04 	sts	0x0413, r25
   NVMDataArray[2]=((uint8_t*)(&TEMP))[0];
    2302:	eb ea       	ldi	r30, 0xAB	; 171
    2304:	f5 e0       	ldi	r31, 0x05	; 5
    2306:	20 93 14 04 	sts	0x0414, r18
   NVMDataArray[3]=((uint8_t*)(&TEMP))[1];
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	90 93 15 04 	sts	0x0415, r25
   TEMP=ptr;
    2310:	60 93 ab 05 	sts	0x05AB, r22
    2314:	70 93 ac 05 	sts	0x05AC, r23
   //uart_num(((uint8_t *)TEMP)[0]);
   //uart_num(((uint8_t *)TEMP)[1]);
   NVMDataArray[4]=((uint8_t*)(&TEMP))[0];
    2318:	60 93 16 04 	sts	0x0416, r22
   NVMDataArray[5]=((uint8_t*)(&TEMP))[1];
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	90 93 17 04 	sts	0x0417, r25
   NVMDataArray[6]=ID;
    2322:	80 93 18 04 	sts	0x0418, r24
   NVMDataArray[7]=ReadorWrite;
    2326:	40 93 19 04 	sts	0x0419, r20
   nnn++;
    232a:	80 91 57 02 	lds	r24, 0x0257
    232e:	90 91 58 02 	lds	r25, 0x0258
    2332:	a0 91 59 02 	lds	r26, 0x0259
    2336:	b0 91 5a 02 	lds	r27, 0x025A
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	a1 1d       	adc	r26, r1
    233e:	b1 1d       	adc	r27, r1
    2340:	80 93 57 02 	sts	0x0257, r24
    2344:	90 93 58 02 	sts	0x0258, r25
    2348:	a0 93 59 02 	sts	0x0259, r26
    234c:	b0 93 5a 02 	sts	0x025A, r27
   extemp=((uint16_t*)(NVMDataArray+4))[0];//((uint16_t)(NVMDataArray[5]<<8)|NVMDataArray[4]);//0x0257;//(((uint16_t*) NVMDataArray[4])[0]);
	/*	uart_num(extemp[0]);
		uart_num(extemp[1]);
		uart_num(extemp[2]);
		uart_num(extemp[3]);*/
   PushEventInterface(52,1,NVMDataArray,0);	
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	42 e1       	ldi	r20, 0x12	; 18
    2354:	54 e0       	ldi	r21, 0x04	; 4
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	84 e3       	ldi	r24, 0x34	; 52
    235c:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    2360:	08 95       	ret

00002362 <NvmReadSync>:
	}
}


uint8_t NvmReadSync(Nvm_Id ID, void * ptr)
{
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	9b 01       	movw	r18, r22
	static uint8_t WriteState;
	uint8_t restate=1;
    NvmPopulateWriteSize(Nvm_Table_t[ID].Nvm_Size,Nvm_Table_t[ID].Id,1,ptr);
    2368:	c8 2f       	mov	r28, r24
    236a:	d0 e0       	ldi	r29, 0x00	; 0
    236c:	cc 0f       	add	r28, r28
    236e:	dd 1f       	adc	r29, r29
    2370:	cb 5f       	subi	r28, 0xFB	; 251
    2372:	da 4f       	sbci	r29, 0xFA	; 250
    2374:	68 81       	ld	r22, Y
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 29 09 	call	0x1252	; 0x1252 <NvmPopulateWriteSize>
	uart_num((Nvm_Table_t[ID].Id+Nvm_Table_t[ID].Nvm_Size));	
    2384:	28 81       	ld	r18, Y
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	82 0f       	add	r24, r18
    238c:	91 1d       	adc	r25, r1
    238e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
	uart_string("done\n");
    2392:	85 e0       	ldi	r24, 0x05	; 5
    2394:	93 e0       	ldi	r25, 0x03	; 3
    2396:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <uart_string>
	SwitchNvmOn();	
    239a:	0e 94 49 09 	call	0x1292	; 0x1292 <SwitchNvmOn>
	while(GetNVMState()==0)		
	WriteState=1;
    239e:	c1 e0       	ldi	r28, 0x01	; 1
	uint8_t restate=1;
    NvmPopulateWriteSize(Nvm_Table_t[ID].Nvm_Size,Nvm_Table_t[ID].Id,1,ptr);
	uart_num((Nvm_Table_t[ID].Id+Nvm_Table_t[ID].Nvm_Size));	
	uart_string("done\n");
	SwitchNvmOn();	
	while(GetNVMState()==0)		
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <NvmReadSync+0x44>
	WriteState=1;
    23a2:	c0 93 1a 04 	sts	0x041A, r28
	uint8_t restate=1;
    NvmPopulateWriteSize(Nvm_Table_t[ID].Nvm_Size,Nvm_Table_t[ID].Id,1,ptr);
	uart_num((Nvm_Table_t[ID].Id+Nvm_Table_t[ID].Nvm_Size));	
	uart_string("done\n");
	SwitchNvmOn();	
	while(GetNVMState()==0)		
    23a6:	0e 94 4d 09 	call	0x129a	; 0x129a <GetNVMState>
    23aa:	89 2b       	or	r24, r25
    23ac:	d1 f3       	breq	.-12     	; 0x23a2 <NvmReadSync+0x40>
	WriteState=1;
	restate=0;
	return restate;
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <SignalHandlerFunc>:
 *  Author: Nikhil
 */ 
#include "..\OS\EventQ.h"
static uint16_t SignalData[5];
uint16_t SignalHandlerFunc(void *data)
{
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	ec 01       	movw	r28, r24
	uint8_t *ptr=(uint8_t*)data;
	uint16_t reval;
	if(ptr[0]==0)
    23bc:	28 81       	ld	r18, Y
    23be:	21 11       	cpse	r18, r1
    23c0:	21 c0       	rjmp	.+66     	; 0x2404 <SignalHandlerFunc+0x4e>
	{
		
		if(((uint8_t*)&SignalData[ptr[1]])[1]==2)
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	fc 01       	movw	r30, r24
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	e5 5e       	subi	r30, 0xE5	; 229
    23ce:	fb 4f       	sbci	r31, 0xFB	; 251
    23d0:	21 81       	ldd	r18, Z+1	; 0x01
    23d2:	22 30       	cpi	r18, 0x02	; 2
    23d4:	21 f4       	brne	.+8      	; 0x23de <SignalHandlerFunc+0x28>
		{
			reval= SignalData[ptr[1]];
    23d6:	40 81       	ld	r20, Z
    23d8:	32 2f       	mov	r19, r18
			((uint8_t*)&SignalData[ptr[1]])[1]=0;
    23da:	11 82       	std	Z+1, r1	; 0x01
    23dc:	25 c0       	rjmp	.+74     	; 0x2428 <SignalHandlerFunc+0x72>
		}
		else 
		{
			PushEventInterface(50,SignalHandlerFunc,0,ptr[2]);
    23de:	2a 81       	ldd	r18, Y+2	; 0x02
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	6b ed       	ldi	r22, 0xDB	; 219
    23e6:	71 e1       	ldi	r23, 0x11	; 17
    23e8:	82 e3       	ldi	r24, 0x32	; 50
    23ea:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
			reval= SignalData[ptr[1]];
    23ee:	e9 81       	ldd	r30, Y+1	; 0x01
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e5 5e       	subi	r30, 0xE5	; 229
    23f8:	fb 4f       	sbci	r31, 0xFB	; 251
    23fa:	40 81       	ld	r20, Z
    23fc:	31 81       	ldd	r19, Z+1	; 0x01
			((uint8_t*)&SignalData[ptr[1]])[1]=1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	81 83       	std	Z+1, r24	; 0x01
    2402:	12 c0       	rjmp	.+36     	; 0x2428 <SignalHandlerFunc+0x72>
		}
	}
	else if(ptr[0]==1)
    2404:	21 30       	cpi	r18, 0x01	; 1
    2406:	81 f4       	brne	.+32     	; 0x2428 <SignalHandlerFunc+0x72>
	{
		((uint8_t*)&SignalData[ptr[1]])[0]=ptr[2];
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	e9 81       	ldd	r30, Y+1	; 0x01
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	e5 5e       	subi	r30, 0xE5	; 229
    2414:	fb 4f       	sbci	r31, 0xFB	; 251
    2416:	80 83       	st	Z, r24
		((uint8_t*)&SignalData[ptr[1]])[1]=2;
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	e5 5e       	subi	r30, 0xE5	; 229
    2422:	fb 4f       	sbci	r31, 0xFB	; 251
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	81 83       	std	Z+1, r24	; 0x01
		//uart_string("here");
	}
	
	return reval;
    2428:	84 2f       	mov	r24, r20
    242a:	93 2f       	mov	r25, r19
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <PushIntoSSDCircularBuffer>:
	y                      \
};

circularbuffSSD(CircularBufferSSD,21);                    
CbuffState_t PushIntoSSDCircularBuffer(SSDbuff_t* CircularBuffer,SSDdata data)
{
    2432:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->head+1;
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	28 2f       	mov	r18, r24
    2438:	2f 5f       	subi	r18, 0xFF	; 255
	CbuffState_t ReturnVal=BuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    243a:	94 81       	ldd	r25, Z+4	; 0x04
    243c:	29 17       	cp	r18, r25
    243e:	08 f0       	brcs	.+2      	; 0x2442 <PushIntoSSDCircularBuffer+0x10>
	{
		next=0;
    2440:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	92 17       	cp	r25, r18
    2446:	81 f0       	breq	.+32     	; 0x2468 <PushIntoSSDCircularBuffer+0x36>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	dc 01       	movw	r26, r24
    244c:	aa 0f       	add	r26, r26
    244e:	bb 1f       	adc	r27, r27
    2450:	8a 0f       	add	r24, r26
    2452:	9b 1f       	adc	r25, r27
    2454:	a0 81       	ld	r26, Z
    2456:	b1 81       	ldd	r27, Z+1	; 0x01
    2458:	a8 0f       	add	r26, r24
    245a:	b9 1f       	adc	r27, r25
    245c:	4d 93       	st	X+, r20
    245e:	5d 93       	st	X+, r21
    2460:	6c 93       	st	X, r22
		CircularBuffer->head=next;
    2462:	22 83       	std	Z+2, r18	; 0x02
		ReturnVal=BuffOk;
	}
	return ReturnVal;
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	08 95       	ret
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return BuffFull;
    2468:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=BuffOk;
	}
	return ReturnVal;
}
    246a:	08 95       	ret

0000246c <PopFromSSDCircularBuffer>:

CbuffState_t PopFromSSDCircularBuffer(SSDbuff_t  *CircularBuffer,SSDdata *data)
{
    246c:	fc 01       	movw	r30, r24
	uint8_t next=CircularBuffer->tail+1;
    246e:	83 81       	ldd	r24, Z+3	; 0x03
    2470:	58 2f       	mov	r21, r24
    2472:	5f 5f       	subi	r21, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    2474:	92 81       	ldd	r25, Z+2	; 0x02
    2476:	89 17       	cp	r24, r25
    2478:	c1 f0       	breq	.+48     	; 0x24aa <PopFromSSDCircularBuffer+0x3e>
	{
		return BuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    247a:	94 81       	ldd	r25, Z+4	; 0x04
    247c:	59 17       	cp	r21, r25
    247e:	08 f0       	brcs	.+2      	; 0x2482 <PopFromSSDCircularBuffer+0x16>
	{
		next=0;
    2480:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	dc 01       	movw	r26, r24
    2486:	aa 0f       	add	r26, r26
    2488:	bb 1f       	adc	r27, r27
    248a:	8a 0f       	add	r24, r26
    248c:	9b 1f       	adc	r25, r27
    248e:	a0 81       	ld	r26, Z
    2490:	b1 81       	ldd	r27, Z+1	; 0x01
    2492:	a8 0f       	add	r26, r24
    2494:	b9 1f       	adc	r27, r25
    2496:	2d 91       	ld	r18, X+
    2498:	3d 91       	ld	r19, X+
    249a:	4c 91       	ld	r20, X
    249c:	db 01       	movw	r26, r22
    249e:	2d 93       	st	X+, r18
    24a0:	3d 93       	st	X+, r19
    24a2:	4c 93       	st	X, r20
	CircularBuffer->tail=next;
    24a4:	53 83       	std	Z+3, r21	; 0x03
	
	return BuffOk;
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	08 95       	ret
CbuffState_t PopFromSSDCircularBuffer(SSDbuff_t  *CircularBuffer,SSDdata *data)
{
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return BuffEmpty;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	
	return BuffOk;
}
    24ac:	08 95       	ret

000024ae <PopulateSSDbuffer>:
	}
	return BuffOk;
}

uint8_t PopulateSSDbuffer(unsigned char* SSDstring,uint8_t x,uint8_t y)
{
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
	SSDdata SSDdataMediator;
	uint8_t SSDlen;
	SSDlen=strlen(SSDstring)-1;
	SSDdataMediator.SSDx=x;
    24b4:	56 2f       	mov	r21, r22
	SSDdataMediator.SSDy=y;
    24b6:	64 2f       	mov	r22, r20

	while(*SSDstring)	
    24b8:	fc 01       	movw	r30, r24
    24ba:	40 81       	ld	r20, Z
    24bc:	44 23       	and	r20, r20
    24be:	61 f0       	breq	.+24     	; 0x24d8 <PopulateSSDbuffer+0x2a>
		return BuffEmpty;
	}
	return BuffOk;
}

uint8_t PopulateSSDbuffer(unsigned char* SSDstring,uint8_t x,uint8_t y)
    24c0:	ec 01       	movw	r28, r24
    24c2:	21 96       	adiw	r28, 0x01	; 1
	while(*SSDstring)	
	{
		//uart_char(*SSDstring);
		SSDdataMediator.SSDchar=*SSDstring++;
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
		SSDdataMediator.SSDx=0;
    24c4:	10 e0       	ldi	r17, 0x00	; 0

	while(*SSDstring)	
	{
		//uart_char(*SSDstring);
		SSDdataMediator.SSDchar=*SSDstring++;
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
    24c6:	8f e5       	ldi	r24, 0x5F	; 95
    24c8:	92 e0       	ldi	r25, 0x02	; 2
    24ca:	0e 94 19 12 	call	0x2432	; 0x2432 <PushIntoSSDCircularBuffer>
		SSDdataMediator.SSDx=0;
    24ce:	51 2f       	mov	r21, r17
		SSDdataMediator.SSDy=0;
    24d0:	61 2f       	mov	r22, r17
	uint8_t SSDlen;
	SSDlen=strlen(SSDstring)-1;
	SSDdataMediator.SSDx=x;
	SSDdataMediator.SSDy=y;

	while(*SSDstring)	
    24d2:	49 91       	ld	r20, Y+
    24d4:	41 11       	cpse	r20, r1
    24d6:	f7 cf       	rjmp	.-18     	; 0x24c6 <PopulateSSDbuffer+0x18>
		PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
		SSDdataMediator.SSDx=0;
		SSDdataMediator.SSDy=0;
	}
	return 1;
}
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	08 95       	ret

000024e2 <PopulateSSDbufferChar>:
uint8_t PopulateSSDbufferChar(unsigned char SSDChar,uint8_t x,uint8_t y)
{
    24e2:	56 2f       	mov	r21, r22
    24e4:	64 2f       	mov	r22, r20
	SSDdata SSDdataMediator;
	SSDdataMediator.SSDx=x;
	SSDdataMediator.SSDy=y;
	SSDdataMediator.SSDchar=SSDChar;	
	PushIntoSSDCircularBuffer(&CircularBufferSSD,SSDdataMediator);
    24e6:	48 2f       	mov	r20, r24
    24e8:	8f e5       	ldi	r24, 0x5F	; 95
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	0e 94 19 12 	call	0x2432	; 0x2432 <PushIntoSSDCircularBuffer>
	return 1;
}
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	08 95       	ret

000024f4 <PopSSDinterface>:
CbuffState_t PopSSDinterface(SSDdata *SSDdataPara)
{
	return (PopFromSSDCircularBuffer(&CircularBufferSSD,SSDdataPara));
    24f4:	bc 01       	movw	r22, r24
    24f6:	8f e5       	ldi	r24, 0x5F	; 95
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	0e 94 36 12 	call	0x246c	; 0x246c <PopFromSSDCircularBuffer>
}
    24fe:	08 95       	ret

00002500 <DataTransmit>:

circularbuffOut(CircularBufferOut,100);
void DataTransmit()
{
	static unsigned char data='&';
	if(CheckUartReadyToSend()==0 && PopFromCircularBuffer(&CircularBufferOut,&data)==BuffOk)
    2500:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <CheckUartReadyToSend>
    2504:	81 11       	cpse	r24, r1
    2506:	0c c0       	rjmp	.+24     	; 0x2520 <DataTransmit+0x20>
    2508:	69 e6       	ldi	r22, 0x69	; 105
    250a:	72 e0       	ldi	r23, 0x02	; 2
    250c:	84 e6       	ldi	r24, 0x64	; 100
    250e:	92 e0       	ldi	r25, 0x02	; 2
    2510:	0e 94 6e 06 	call	0xcdc	; 0xcdc <PopFromCircularBuffer>
    2514:	81 11       	cpse	r24, r1
    2516:	04 c0       	rjmp	.+8      	; 0x2520 <DataTransmit+0x20>
	{    

			//UDR=data;
		SendByte(data);
    2518:	80 91 69 02 	lds	r24, 0x0269
    251c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SendByte>
    2520:	08 95       	ret

00002522 <FillUartBuffer>:
	}

}

void FillUartBuffer(unsigned char *Uchar)
{
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
	
	while(*Uchar)
    2526:	fc 01       	movw	r30, r24
    2528:	60 81       	ld	r22, Z
    252a:	66 23       	and	r22, r22
    252c:	49 f0       	breq	.+18     	; 0x2540 <FillUartBuffer+0x1e>

	}

}

void FillUartBuffer(unsigned char *Uchar)
    252e:	ec 01       	movw	r28, r24
    2530:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*Uchar)
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
    2532:	84 e6       	ldi	r24, 0x64	; 100
    2534:	92 e0       	ldi	r25, 0x02	; 2
    2536:	0e 94 59 06 	call	0xcb2	; 0xcb2 <PushIntoCircularBuffer>
}

void FillUartBuffer(unsigned char *Uchar)
{
	
	while(*Uchar)
    253a:	69 91       	ld	r22, Y+
    253c:	61 11       	cpse	r22, r1
    253e:	f9 cf       	rjmp	.-14     	; 0x2532 <FillUartBuffer+0x10>
	{
	   //uart_char(*Uchar);
	   PushIntoCircularBuffer(&CircularBufferOut,*Uchar++);	
	}
	
}
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <FillUartBufferSiglechar>:
void FillUartBufferSiglechar(char Uchar)
{
	PushIntoCircularBuffer(&CircularBufferOut,Uchar);	
    2546:	68 2f       	mov	r22, r24
    2548:	84 e6       	ldi	r24, 0x64	; 100
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <PushIntoCircularBuffer>
    2550:	08 95       	ret

00002552 <TransmitBufferEmpty>:
}
void TransmitBufferEmpty()
{
	if(IsBuffempty(&CircularBufferOut)==BuffOk)
    2552:	84 e6       	ldi	r24, 0x64	; 100
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	0e 94 85 06 	call	0xd0a	; 0xd0a <IsBuffempty>
    255a:	81 11       	cpse	r24, r1
    255c:	08 c0       	rjmp	.+16     	; 0x256e <TransmitBufferEmpty+0x1c>
	{

		PushEventInterface(3,DataTransmit,0,0);
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	60 e8       	ldi	r22, 0x80	; 128
    2566:	72 e1       	ldi	r23, 0x12	; 18
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    256e:	08 95       	ret

00002570 <create>:
circularbuffevent(CircularBufferEvent,15);
//
/* Create an empty queue */
void create()
{
front = rear = NULL;
    2570:	10 92 8a 04 	sts	0x048A, r1
    2574:	10 92 89 04 	sts	0x0489, r1
    2578:	10 92 8c 04 	sts	0x048C, r1
    257c:	10 92 8b 04 	sts	0x048B, r1
    2580:	08 95       	ret

00002582 <countSize>:
}

uint8_t countSize()
{
	return count;
}
    2582:	80 91 8d 04 	lds	r24, 0x048D
    2586:	08 95       	ret

00002588 <PushIntoCircularEventBuffer>:

ebuffState_t PushIntoCircularEventBuffer(ebuff_t* CircularBuffer,struct EventQ data)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	00 d0       	rcall	.+0      	; 0x258e <PushIntoCircularEventBuffer+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <PushIntoCircularEventBuffer+0x8>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <PushIntoCircularEventBuffer+0xa>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	29 83       	std	Y+1, r18	; 0x01
    2598:	3a 83       	std	Y+2, r19	; 0x02
    259a:	4b 83       	std	Y+3, r20	; 0x03
    259c:	5c 83       	std	Y+4, r21	; 0x04
    259e:	6d 83       	std	Y+5, r22	; 0x05
    25a0:	7e 83       	std	Y+6, r23	; 0x06
	uint8_t next=CircularBuffer->head+1;
    25a2:	fc 01       	movw	r30, r24
    25a4:	22 81       	ldd	r18, Z+2	; 0x02
    25a6:	42 2f       	mov	r20, r18
    25a8:	4f 5f       	subi	r20, 0xFF	; 255
	ebuffState_t ReturnVal=eBuffStateEndOfList;
	if(next>=CircularBuffer->MaxLen)
    25aa:	34 81       	ldd	r19, Z+4	; 0x04
    25ac:	43 17       	cp	r20, r19
    25ae:	08 f0       	brcs	.+2      	; 0x25b2 <PushIntoCircularEventBuffer+0x2a>
	{
		next=0;
    25b0:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	if(next==CircularBuffer->tail)
    25b2:	fc 01       	movw	r30, r24
    25b4:	33 81       	ldd	r19, Z+3	; 0x03
    25b6:	34 17       	cp	r19, r20
    25b8:	b9 f0       	breq	.+46     	; 0x25e8 <PushIntoCircularEventBuffer+0x60>
	}
	
	else
	{
		
		CircularBuffer->buffer[CircularBuffer->head]=data;
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	d9 01       	movw	r26, r18
    25be:	aa 0f       	add	r26, r26
    25c0:	bb 1f       	adc	r27, r27
    25c2:	2a 0f       	add	r18, r26
    25c4:	3b 1f       	adc	r19, r27
    25c6:	22 0f       	add	r18, r18
    25c8:	33 1f       	adc	r19, r19
    25ca:	a0 81       	ld	r26, Z
    25cc:	b1 81       	ldd	r27, Z+1	; 0x01
    25ce:	a2 0f       	add	r26, r18
    25d0:	b3 1f       	adc	r27, r19
    25d2:	26 e0       	ldi	r18, 0x06	; 6
    25d4:	fe 01       	movw	r30, r28
    25d6:	31 96       	adiw	r30, 0x01	; 1
    25d8:	01 90       	ld	r0, Z+
    25da:	0d 92       	st	X+, r0
    25dc:	2a 95       	dec	r18
    25de:	e1 f7       	brne	.-8      	; 0x25d8 <PushIntoCircularEventBuffer+0x50>
		CircularBuffer->head=next;
    25e0:	fc 01       	movw	r30, r24
    25e2:	42 83       	std	Z+2, r20	; 0x02
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <PushIntoCircularEventBuffer+0x62>
		next=0;
	}
	
	if(next==CircularBuffer->tail)
	{
		return eBuffFull;
    25e8:	82 e0       	ldi	r24, 0x02	; 2
		CircularBuffer->buffer[CircularBuffer->head]=data;
		CircularBuffer->head=next;
		ReturnVal=eBuffOk;
	}
	return ReturnVal;
}
    25ea:	26 96       	adiw	r28, 0x06	; 6
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <PopFromCircularEventBuffer>:

ebuffState_t PopFromCircularEventBuffer(ebuff_t  *CircularBuffer,struct EventQ *data)
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	ec 01       	movw	r28, r24
	//cli();
	uint8_t next=CircularBuffer->tail+1;
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	28 2f       	mov	r18, r24
    2606:	2f 5f       	subi	r18, 0xFF	; 255
	if(CircularBuffer->tail==CircularBuffer->head)
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	89 17       	cp	r24, r25
    260c:	c9 f0       	breq	.+50     	; 0x2640 <PopFromCircularEventBuffer+0x44>
	{
		return eBuffEmpty;
	}
	else if(next>=CircularBuffer->MaxLen)
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	29 17       	cp	r18, r25
    2612:	08 f0       	brcs	.+2      	; 0x2616 <PopFromCircularEventBuffer+0x1a>
	{
		next=0;
    2614:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	fc 01       	movw	r30, r24
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	8e 0f       	add	r24, r30
    2620:	9f 1f       	adc	r25, r31
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	e8 81       	ld	r30, Y
    2628:	f9 81       	ldd	r31, Y+1	; 0x01
    262a:	e8 0f       	add	r30, r24
    262c:	f9 1f       	adc	r31, r25
    262e:	86 e0       	ldi	r24, 0x06	; 6
    2630:	db 01       	movw	r26, r22
    2632:	01 90       	ld	r0, Z+
    2634:	0d 92       	st	X+, r0
    2636:	8a 95       	dec	r24
    2638:	e1 f7       	brne	.-8      	; 0x2632 <PopFromCircularEventBuffer+0x36>
	CircularBuffer->tail=next;
    263a:	2b 83       	std	Y+3, r18	; 0x03
	//sei();
	return eBuffOk;
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <PopFromCircularEventBuffer+0x46>
{
	//cli();
	uint8_t next=CircularBuffer->tail+1;
	if(CircularBuffer->tail==CircularBuffer->head)
	{
		return eBuffEmpty;
    2640:	81 e0       	ldi	r24, 0x01	; 1
	
	*data=CircularBuffer->buffer[CircularBuffer->tail];
	CircularBuffer->tail=next;
	//sei();
	return eBuffOk;
}
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <PushEventInterface>:
	return eBuffOk;
}


void PushEventInterface(uint8_t eventid,uint16_t  (*EventFuncarg)(void),void *func,uint8_t dataid)
{
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	00 d0       	rcall	.+0      	; 0x264e <PushEventInterface+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <PushEventInterface+0x8>
    2650:	00 d0       	rcall	.+0      	; 0x2652 <PushEventInterface+0xa>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	92 2f       	mov	r25, r18
	cli();
    2658:	f8 94       	cli
	struct EventQ data;
	data.EventFunction=EventFuncarg;
    265a:	26 2f       	mov	r18, r22
    265c:	69 83       	std	Y+1, r22	; 0x01
    265e:	7a 83       	std	Y+2, r23	; 0x02
	data.EventId=eventid;
    2660:	8c 83       	std	Y+4, r24	; 0x04
	data.ptr=func;
    2662:	64 2f       	mov	r22, r20
    2664:	4d 83       	std	Y+5, r20	; 0x05
    2666:	5e 83       	std	Y+6, r21	; 0x06
	data.State=dataid;
    2668:	9b 83       	std	Y+3, r25	; 0x03
	PushIntoCircularEventBuffer(&CircularBufferEvent,data);
    266a:	37 2f       	mov	r19, r23
    266c:	49 2f       	mov	r20, r25
    266e:	58 2f       	mov	r21, r24
    2670:	7e 81       	ldd	r23, Y+6	; 0x06
    2672:	8a e6       	ldi	r24, 0x6A	; 106
    2674:	92 e0       	ldi	r25, 0x02	; 2
    2676:	0e 94 c4 12 	call	0x2588	; 0x2588 <PushIntoCircularEventBuffer>
	sei();
    267a:	78 94       	sei
}
    267c:	26 96       	adiw	r28, 0x06	; 6
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <PopEventInterface>:

ebuffState_t PopEventInterface(struct EventQ *e)
{
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	00 d0       	rcall	.+0      	; 0x2698 <PopEventInterface+0xa>
    2698:	00 d0       	rcall	.+0      	; 0x269a <PopEventInterface+0xc>
    269a:	00 d0       	rcall	.+0      	; 0x269c <PopEventInterface+0xe>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	8c 01       	movw	r16, r24
    struct EventQ data;
	if(PopFromCircularEventBuffer(&CircularBufferEvent,&data)==eBuffOk)
    26a2:	be 01       	movw	r22, r28
    26a4:	6f 5f       	subi	r22, 0xFF	; 255
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8a e6       	ldi	r24, 0x6A	; 106
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	0e 94 fe 12 	call	0x25fc	; 0x25fc <PopFromCircularEventBuffer>
    26b0:	81 11       	cpse	r24, r1
    26b2:	0a c0       	rjmp	.+20     	; 0x26c8 <PopEventInterface+0x3a>
	{
		*e=data;
    26b4:	86 e0       	ldi	r24, 0x06	; 6
    26b6:	fe 01       	movw	r30, r28
    26b8:	31 96       	adiw	r30, 0x01	; 1
    26ba:	d8 01       	movw	r26, r16
    26bc:	01 90       	ld	r0, Z+
    26be:	0d 92       	st	X+, r0
    26c0:	8a 95       	dec	r24
    26c2:	e1 f7       	brne	.-8      	; 0x26bc <PopEventInterface+0x2e>
		return eBuffOk;
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <PopEventInterface+0x3c>
	}
	return eBuffEmpty;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	26 96       	adiw	r28, 0x06	; 6
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	08 95       	ret

000026e0 <__vector_16>:


//ISR(TIMER0_COMP_vect) {
static volatile uint8_t pin_timeout=1;
static volatile uint8_t TimeCount;
ISR(TIMER0_OVF_vect){
    26e0:	1f 92       	push	r1
    26e2:	0f 92       	push	r0
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	0f 92       	push	r0
    26e8:	11 24       	eor	r1, r1
    26ea:	8f 93       	push	r24
    26ec:	9f 93       	push	r25
    26ee:	af 93       	push	r26
    26f0:	bf 93       	push	r27
	static uint32_t counter5ms=0;
	if(counter5ms==1)
    26f2:	80 91 8f 04 	lds	r24, 0x048F
    26f6:	90 91 90 04 	lds	r25, 0x0490
    26fa:	a0 91 91 04 	lds	r26, 0x0491
    26fe:	b0 91 92 04 	lds	r27, 0x0492
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	a1 05       	cpc	r26, r1
    2706:	b1 05       	cpc	r27, r1
    2708:	69 f4       	brne	.+26     	; 0x2724 <__vector_16+0x44>
	{   
		TimeCount++;
    270a:	80 91 8e 04 	lds	r24, 0x048E
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	80 93 8e 04 	sts	0x048E, r24
		counter5ms=0;
    2714:	10 92 8f 04 	sts	0x048F, r1
    2718:	10 92 90 04 	sts	0x0490, r1
    271c:	10 92 91 04 	sts	0x0491, r1
    2720:	10 92 92 04 	sts	0x0492, r1
		

	}
	//TCNT0=70;
	TCNT0=0;
    2724:	16 bc       	out	0x26, r1	; 38
	counter5ms++;
    2726:	80 91 8f 04 	lds	r24, 0x048F
    272a:	90 91 90 04 	lds	r25, 0x0490
    272e:	a0 91 91 04 	lds	r26, 0x0491
    2732:	b0 91 92 04 	lds	r27, 0x0492
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	a1 1d       	adc	r26, r1
    273a:	b1 1d       	adc	r27, r1
    273c:	80 93 8f 04 	sts	0x048F, r24
    2740:	90 93 90 04 	sts	0x0490, r25
    2744:	a0 93 91 04 	sts	0x0491, r26
    2748:	b0 93 92 04 	sts	0x0492, r27

}
    274c:	bf 91       	pop	r27
    274e:	af 91       	pop	r26
    2750:	9f 91       	pop	r25
    2752:	8f 91       	pop	r24
    2754:	0f 90       	pop	r0
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	0f 90       	pop	r0
    275a:	1f 90       	pop	r1
    275c:	18 95       	reti

0000275e <set_timer>:
void set_timer(uint16_t enable)
{
	//PORTB|=x;
	if(enable==1)
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	29 f4       	brne	.+10     	; 0x276c <set_timer+0xe>
	{
		TIMSK0|=(1<<TOIE0);
    2762:	ee e6       	ldi	r30, 0x6E	; 110
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	81 60       	ori	r24, 0x01	; 1
    276a:	80 83       	st	Z, r24
    276c:	08 95       	ret

0000276e <main>:
   // event=0;
	uint16_t tmp;
	uint16_t Limitflag=0;
	//
    
	ExtIntInit();
    276e:	0e 94 f4 06 	call	0xde8	; 0xde8 <ExtIntInit>
	//
	//
	DDRC=0x00;
    2772:	17 b8       	out	0x07, r1	; 7
	//PinOutConfig(PIN_OUT1);
	DDRD=0b11111011;					// set pd2 as input for int
    2774:	8b ef       	ldi	r24, 0xFB	; 251
    2776:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PIND2);	
    2778:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD|=(1<<PIND3);				// Port C lower nibble initialization as high (Pull-up mode)
    277a:	5b 9a       	sbi	0x0b, 3	; 11
	//uart_string("I am working.");
	sei();
    277c:	78 94       	sei
	// enable timer overflow interrupt for Timer0
	TIMSK0|=(1<<TOIE0);
    277e:	ee e6       	ldi	r30, 0x6E	; 110
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	81 60       	ori	r24, 0x01	; 1
    2786:	80 83       	st	Z, r24
	// set timer0 counter initial value to 0
	TCNT0=70;//255-(clock_freq/1000000);
    2788:	86 e4       	ldi	r24, 0x46	; 70
    278a:	86 bd       	out	0x26, r24	; 38
	// start timer0 with / prescaler 78 Hz
	TCCR0B = (1<<CS01)|(1<<CS00);
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	85 bd       	out	0x25, r24	; 37

uart_init();
    2790:	0e 94 ba 0b 	call	0x1774	; 0x1774 <uart_init>
	adc_init();				//initialization of UART
    2794:	0e 94 12 06 	call	0xc24	; 0xc24 <adc_init>
	create();
    2798:	0e 94 b8 12 	call	0x2570	; 0x2570 <create>
    uart_string("working");
    279c:	8b e0       	ldi	r24, 0x0B	; 11
    279e:	93 e0       	ldi	r25, 0x03	; 3
    27a0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <uart_string>
	// enable interrupts
	//sei();
	//pin
	set_timer(1);
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 af 13 	call	0x275e	; 0x275e <set_timer>
	PCICR |=(1<<PCIE0);
    27ac:	e8 e6       	ldi	r30, 0x68	; 104
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	81 60       	ori	r24, 0x01	; 1
    27b4:	80 83       	st	Z, r24
	PCMSK0 |=(1<<PCINT0);
    27b6:	eb e6       	ldi	r30, 0x6B	; 107
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	81 60       	ori	r24, 0x01	; 1
    27be:	80 83       	st	Z, r24
	//uart_string(testev2->ptr);
	//AddEvent((uint8_t *)str,0);
	//AddEvent((uint8_t *)str,1);
	//AddEvent((uint8_t *)str1,2);
	//PrintEvents();
								e.EventId=1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	80 93 5d 06 	sts	0x065D, r24
								e.EventFunction=tasks;
    27c6:	89 e3       	ldi	r24, 0x39	; 57
    27c8:	9f e1       	ldi	r25, 0x1F	; 31
    27ca:	90 93 5b 06 	sts	0x065B, r25
    27ce:	80 93 5a 06 	sts	0x065A, r24
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
	   {
		   if(e.EventFunction!=0)
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    27d2:	cd e5       	ldi	r28, 0x5D	; 93
    27d4:	d6 e0       	ldi	r29, 0x06	; 6
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
				  if(e.EventId==52)
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    27d6:	0e e5       	ldi	r16, 0x5E	; 94
    27d8:	16 e0       	ldi	r17, 0x06	; 6
	//PrintEvents();
								e.EventId=1;
								e.EventFunction=tasks;
	while(1)
	{
		if(TimeCount==1)
    27da:	80 91 8e 04 	lds	r24, 0x048E
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	b9 f4       	brne	.+46     	; 0x2810 <main+0xa2>
		{
			static uint8_t odd=1;
			odd++;
    27e2:	80 91 6f 02 	lds	r24, 0x026F
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	80 93 6f 02 	sts	0x026F, r24
		   PushEventInterface(1,tasks,0,0);
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	69 e3       	ldi	r22, 0x39	; 57
    27f4:	7f e1       	ldi	r23, 0x1F	; 31
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
		   PushEventInterface(2,NonPeriodicTaskFuncCall,0,0);
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	65 e9       	ldi	r22, 0x95	; 149
    2804:	7f e1       	ldi	r23, 0x1F	; 31
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
           TimeCount=0;
    280c:	10 92 8e 04 	sts	0x048E, r1
		}
	//	enq(e);
	   if(PopEventInterface(&e)==eBuffOk)
    2810:	8a e5       	ldi	r24, 0x5A	; 90
    2812:	96 e0       	ldi	r25, 0x06	; 6
    2814:	0e 94 47 13 	call	0x268e	; 0x268e <PopEventInterface>
    2818:	81 11       	cpse	r24, r1
    281a:	3f c0       	rjmp	.+126    	; 0x289a <main+0x12c>
	   {
		   if(e.EventFunction!=0)
    281c:	60 91 5a 06 	lds	r22, 0x065A
    2820:	70 91 5b 06 	lds	r23, 0x065B
    2824:	61 15       	cp	r22, r1
    2826:	71 05       	cpc	r23, r1
    2828:	c1 f1       	breq	.+112    	; 0x289a <main+0x12c>
		   {		   
		   if(e.EventId>=125 && e.EventId<200)
    282a:	98 81       	ld	r25, Y
    282c:	89 2f       	mov	r24, r25
    282e:	8d 57       	subi	r24, 0x7D	; 125
    2830:	8b 34       	cpi	r24, 0x4B	; 75
    2832:	80 f4       	brcc	.+32     	; 0x2854 <main+0xe6>
		   {
			   if(e.EventId<175)
    2834:	9f 3a       	cpi	r25, 0xAF	; 175
    2836:	48 f4       	brcc	.+18     	; 0x284a <main+0xdc>
			   {
			   callbackgetFunction(e.EventId-125)(e.EventFunction);		
    2838:	0e 94 8c 14 	call	0x2918	; 0x2918 <callbackgetFunction>
    283c:	fc 01       	movw	r30, r24
    283e:	80 91 5a 06 	lds	r24, 0x065A
    2842:	90 91 5b 06 	lds	r25, 0x065B
    2846:	09 95       	icall
    2848:	28 c0       	rjmp	.+80     	; 0x289a <main+0x12c>
			   }
			   else
			   {
				 callbackSetFunction(e.EventId-173,e.EventFunction);  
    284a:	89 2f       	mov	r24, r25
    284c:	8d 5a       	subi	r24, 0xAD	; 173
    284e:	0e 94 83 14 	call	0x2906	; 0x2906 <callbackSetFunction>
    2852:	23 c0       	rjmp	.+70     	; 0x289a <main+0x12c>
			   }
		   }
		   else
		   {
			   if(e.EventId>=200)
    2854:	98 3c       	cpi	r25, 0xC8	; 200
    2856:	30 f0       	brcs	.+12     	; 0x2864 <main+0xf6>
			   {
				  e.EventFunction(e.ptr); 
    2858:	d8 01       	movw	r26, r16
    285a:	8d 91       	ld	r24, X+
    285c:	9c 91       	ld	r25, X
    285e:	fb 01       	movw	r30, r22
    2860:	09 95       	icall
    2862:	1b c0       	rjmp	.+54     	; 0x289a <main+0x12c>
			   }
			   else if(e.EventId>=50 && e.EventId<125)
    2864:	89 2f       	mov	r24, r25
    2866:	82 53       	subi	r24, 0x32	; 50
    2868:	8b 34       	cpi	r24, 0x4B	; 75
    286a:	98 f4       	brcc	.+38     	; 0x2892 <main+0x124>
			   {
				  //uart_num(e.EventId);
				  callbackgetFunction(e.EventId-49)((&e.State));
    286c:	8f 5f       	subi	r24, 0xFF	; 255
    286e:	0e 94 8c 14 	call	0x2918	; 0x2918 <callbackgetFunction>
    2872:	fc 01       	movw	r30, r24
    2874:	8c e5       	ldi	r24, 0x5C	; 92
    2876:	96 e0       	ldi	r25, 0x06	; 6
    2878:	09 95       	icall
				  if(e.EventId==52)
    287a:	88 81       	ld	r24, Y
    287c:	84 33       	cpi	r24, 0x34	; 52
    287e:	69 f4       	brne	.+26     	; 0x289a <main+0x12c>
				  {
					 callbackgetFunction(e.EventId-49)((e.ptr)); 
    2880:	83 e0       	ldi	r24, 0x03	; 3
    2882:	0e 94 8c 14 	call	0x2918	; 0x2918 <callbackgetFunction>
    2886:	fc 01       	movw	r30, r24
    2888:	d8 01       	movw	r26, r16
    288a:	8d 91       	ld	r24, X+
    288c:	9c 91       	ld	r25, X
    288e:	09 95       	icall
    2890:	04 c0       	rjmp	.+8      	; 0x289a <main+0x12c>
				  }
				  //callbackSetFunction(e.EventId-48,e.EventFunction);
			   }
			   else
			   {
				  e.EventFunction(0); 
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	fb 01       	movw	r30, r22
    2898:	09 95       	icall
			   }
			   
		   }
		   }
	   }
		  if(countSize()>1)
    289a:	0e 94 c1 12 	call	0x2582	; 0x2582 <countSize>
		  {
			  
			//OSRR_Events();  
		 }
	if(event ==1 || event ==0)
    289e:	80 91 01 05 	lds	r24, 0x0501
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	21 f0       	breq	.+8      	; 0x28ae <main+0x140>
    28a6:	80 91 01 05 	lds	r24, 0x0501
    28aa:	81 11       	cpse	r24, r1
    28ac:	96 cf       	rjmp	.-212    	; 0x27da <main+0x6c>
	{
		ApplicationHookUP(&event);
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	95 e0       	ldi	r25, 0x05	; 5
    28b2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <ApplicationHookUP>
    28b6:	91 cf       	rjmp	.-222    	; 0x27da <main+0x6c>

000028b8 <__vector_3>:
		//uart_string(testev1->ptr);
	}
}

ISR(PCINT0_vect)
{
    28b8:	1f 92       	push	r1
    28ba:	0f 92       	push	r0
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	0f 92       	push	r0
    28c0:	11 24       	eor	r1, r1
    28c2:	2f 93       	push	r18
    28c4:	3f 93       	push	r19
    28c6:	4f 93       	push	r20
    28c8:	5f 93       	push	r21
    28ca:	6f 93       	push	r22
    28cc:	7f 93       	push	r23
    28ce:	8f 93       	push	r24
    28d0:	9f 93       	push	r25
    28d2:	af 93       	push	r26
    28d4:	bf 93       	push	r27
    28d6:	ef 93       	push	r30
    28d8:	ff 93       	push	r31
				PinOutput(1,PIN_OUT7,D);
    28da:	42 e0       	ldi	r20, 0x02	; 2
    28dc:	66 e0       	ldi	r22, 0x06	; 6
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
				//_delay_ms(2000);
    28e4:	ff 91       	pop	r31
    28e6:	ef 91       	pop	r30
    28e8:	bf 91       	pop	r27
    28ea:	af 91       	pop	r26
    28ec:	9f 91       	pop	r25
    28ee:	8f 91       	pop	r24
    28f0:	7f 91       	pop	r23
    28f2:	6f 91       	pop	r22
    28f4:	5f 91       	pop	r21
    28f6:	4f 91       	pop	r20
    28f8:	3f 91       	pop	r19
    28fa:	2f 91       	pop	r18
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	0f 90       	pop	r0
    2902:	1f 90       	pop	r1
    2904:	18 95       	reti

00002906 <callbackSetFunction>:
 */ 
#include "OSRR.h"
callbackarrayfuc callbackarray[10];
void callbackSetFunction(uint8_t pos,callbackarrayfuc arg)
{
	callbackarray[pos]=arg;
    2906:	e8 2f       	mov	r30, r24
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	e0 5a       	subi	r30, 0xA0	; 160
    2910:	f9 4f       	sbci	r31, 0xF9	; 249
    2912:	71 83       	std	Z+1, r23	; 0x01
    2914:	60 83       	st	Z, r22
    2916:	08 95       	ret

00002918 <callbackgetFunction>:
}
callbackarrayfuc callbackgetFunction(uint8_t pos)
{
	return callbackarray[pos];
    2918:	e8 2f       	mov	r30, r24
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	e0 5a       	subi	r30, 0xA0	; 160
    2922:	f9 4f       	sbci	r31, 0xF9	; 249
}
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	08 95       	ret

0000292a <num2CharArray>:
    //}

}

static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	c8 2f       	mov	r28, r24
    2930:	fb 01       	movw	r30, r22
    unsigned char H=0,T=0,O=0;
    H=num/100;
    2932:	49 e2       	ldi	r20, 0x29	; 41
    2934:	84 9f       	mul	r24, r20
    2936:	41 2d       	mov	r20, r1
    2938:	11 24       	eor	r1, r1
    293a:	42 95       	swap	r20
    293c:	4f 70       	andi	r20, 0x0F	; 15
    T=(num - (H*100))/10;
    293e:	1c e9       	ldi	r17, 0x9C	; 156
    2940:	14 03       	mulsu	r17, r20
    2942:	90 01       	movw	r18, r0
    2944:	11 24       	eor	r1, r1
    2946:	c9 01       	movw	r24, r18
    2948:	8c 0f       	add	r24, r28
    294a:	91 1d       	adc	r25, r1
    294c:	6a e0       	ldi	r22, 0x0A	; 10
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__divmodhi4>
    O=(num - (H*100) - (T*10));

    Ustring[0]=(H+48);
    2954:	84 2f       	mov	r24, r20
    2956:	80 5d       	subi	r24, 0xD0	; 208
    2958:	80 83       	st	Z, r24
    Ustring[1]=(T+48);
    295a:	86 2f       	mov	r24, r22
    295c:	80 5d       	subi	r24, 0xD0	; 208
    295e:	81 83       	std	Z+1, r24	; 0x01
static void num2CharArray(unsigned char num,unsigned char *Ustring)
{
    unsigned char H=0,T=0,O=0;
    H=num/100;
    T=(num - (H*100))/10;
    O=(num - (H*100) - (T*10));
    2960:	c0 5d       	subi	r28, 0xD0	; 208
    2962:	41 9f       	mul	r20, r17
    2964:	c0 0d       	add	r28, r0
    2966:	11 24       	eor	r1, r1
    2968:	66 0f       	add	r22, r22
    296a:	86 2f       	mov	r24, r22
    296c:	88 0f       	add	r24, r24
    296e:	88 0f       	add	r24, r24
    2970:	68 0f       	add	r22, r24

    Ustring[0]=(H+48);
    Ustring[1]=(T+48);
    Ustring[2]=(O+48);
    2972:	c6 1b       	sub	r28, r22
    2974:	c2 83       	std	Z+2, r28	; 0x02
}
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	08 95       	ret

0000297c <Digitset>:
    }

}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	00 d0       	rcall	.+0      	; 0x2982 <Digitset+0x6>
    2982:	00 d0       	rcall	.+0      	; 0x2984 <Digitset+0x8>
    2984:	00 d0       	rcall	.+0      	; 0x2986 <Digitset+0xa>
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    char valx[4]="255";
    298a:	82 e3       	ldi	r24, 0x32	; 50
    298c:	95 e3       	ldi	r25, 0x35	; 53
    298e:	a5 e3       	ldi	r26, 0x35	; 53
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	ab 83       	std	Y+3, r26	; 0x03
    2998:	bc 83       	std	Y+4, r27	; 0x04
    char ch[2]="0";
    299a:	80 e3       	ldi	r24, 0x30	; 48
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    ch[1]='\0';
    switch (DigitPos)
    29a2:	80 91 d4 04 	lds	r24, 0x04D4
    29a6:	81 30       	cpi	r24, 0x01	; 1
    29a8:	c1 f1       	breq	.+112    	; 0x2a1a <Digitset+0x9e>
    29aa:	20 f0       	brcs	.+8      	; 0x29b4 <Digitset+0x38>
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <Digitset+0x36>
    29b0:	ab c0       	rjmp	.+342    	; 0x2b08 <Digitset+0x18c>
    29b2:	6a c0       	rjmp	.+212    	; 0x2a88 <Digitset+0x10c>
    {
    case 0:
        if(SwitchPressed==1)
    29b4:	80 91 b6 04 	lds	r24, 0x04B6
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	c9 f4       	brne	.+50     	; 0x29ee <Digitset+0x72>
        {
            SwitchPressed=0;
    29bc:	10 92 b6 04 	sts	0x04B6, r1
            ch[0]=ch[0]+number;
    29c0:	80 91 d5 04 	lds	r24, 0x04D5
    29c4:	80 5d       	subi	r24, 0xD0	; 208
    29c6:	8d 83       	std	Y+5, r24	; 0x05
            PopulateSSDbuffer(ch,76,pY);
    29c8:	46 2f       	mov	r20, r22
    29ca:	6c e4       	ldi	r22, 0x4C	; 76
    29cc:	ce 01       	movw	r24, r28
    29ce:	05 96       	adiw	r24, 0x05	; 5
    29d0:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
            number++;
    29d4:	80 91 d5 04 	lds	r24, 0x04D5
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
            if(number==10)
    29da:	8a 30       	cpi	r24, 0x0A	; 10
    29dc:	21 f0       	breq	.+8      	; 0x29e6 <Digitset+0x6a>
        if(SwitchPressed==1)
        {
            SwitchPressed=0;
            ch[0]=ch[0]+number;
            PopulateSSDbuffer(ch,76,pY);
            number++;
    29de:	80 93 d5 04 	sts	0x04D5, r24
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	98 c0       	rjmp	.+304    	; 0x2b16 <Digitset+0x19a>
            ch[0]=ch[0]+number;
            PopulateSSDbuffer(ch,76,pY);
            number++;
            if(number==10)
            {
                number=0;
    29e6:	10 92 d5 04 	sts	0x04D5, r1
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	94 c0       	rjmp	.+296    	; 0x2b16 <Digitset+0x19a>
            if(number==10)
            {
                number=0;
            }
        }
        else if(SwitchPressed==2||SwitchPressed==3)
    29ee:	82 50       	subi	r24, 0x02	; 2
    29f0:	82 30       	cpi	r24, 0x02	; 2
    29f2:	08 f0       	brcs	.+2      	; 0x29f6 <Digitset+0x7a>
    29f4:	8b c0       	rjmp	.+278    	; 0x2b0c <Digitset+0x190>
        {
            number--;
    29f6:	80 91 d5 04 	lds	r24, 0x04D5
    29fa:	81 50       	subi	r24, 0x01	; 1
            Inval=(100*number);
    29fc:	94 e6       	ldi	r25, 0x64	; 100
    29fe:	89 9f       	mul	r24, r25
    2a00:	80 2d       	mov	r24, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	80 93 d6 04 	sts	0x04D6, r24
            DigitPos++;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	80 93 d4 04 	sts	0x04D4, r24
            ch[0]='0';
            number=0;
    2a0e:	10 92 d5 04 	sts	0x04D5, r1
            SwitchPressed=0;
    2a12:	10 92 b6 04 	sts	0x04B6, r1
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	7e c0       	rjmp	.+252    	; 0x2b16 <Digitset+0x19a>
            SwitchPressed=0;
        }
        /* Your code here */
        break;
    case 1:
        if(SwitchPressed==1)
    2a1a:	80 91 b6 04 	lds	r24, 0x04B6
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	c9 f4       	brne	.+50     	; 0x2a54 <Digitset+0xd8>
        {
            SwitchPressed=0;
    2a22:	10 92 b6 04 	sts	0x04B6, r1
            ch[0]=ch[0]+number;
    2a26:	80 91 d5 04 	lds	r24, 0x04D5
    2a2a:	80 5d       	subi	r24, 0xD0	; 208
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
            PopulateSSDbuffer(ch,82,pY);
    2a2e:	46 2f       	mov	r20, r22
    2a30:	62 e5       	ldi	r22, 0x52	; 82
    2a32:	ce 01       	movw	r24, r28
    2a34:	05 96       	adiw	r24, 0x05	; 5
    2a36:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
            number++;
    2a3a:	80 91 d5 04 	lds	r24, 0x04D5
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
            if(number==10)
    2a40:	8a 30       	cpi	r24, 0x0A	; 10
    2a42:	21 f0       	breq	.+8      	; 0x2a4c <Digitset+0xd0>
        if(SwitchPressed==1)
        {
            SwitchPressed=0;
            ch[0]=ch[0]+number;
            PopulateSSDbuffer(ch,82,pY);
            number++;
    2a44:	80 93 d5 04 	sts	0x04D5, r24
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	65 c0       	rjmp	.+202    	; 0x2b16 <Digitset+0x19a>
            ch[0]=ch[0]+number;
            PopulateSSDbuffer(ch,82,pY);
            number++;
            if(number==10)
            {
                number=0;
    2a4c:	10 92 d5 04 	sts	0x04D5, r1
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	61 c0       	rjmp	.+194    	; 0x2b16 <Digitset+0x19a>
            if(number==10)
            {
                number=0;
            }
        }
        else if(SwitchPressed==2||SwitchPressed==3)
    2a54:	82 50       	subi	r24, 0x02	; 2
    2a56:	82 30       	cpi	r24, 0x02	; 2
    2a58:	08 f0       	brcs	.+2      	; 0x2a5c <Digitset+0xe0>
    2a5a:	5a c0       	rjmp	.+180    	; 0x2b10 <Digitset+0x194>
        {
            number--;
    2a5c:	80 91 d5 04 	lds	r24, 0x04D5
    2a60:	81 50       	subi	r24, 0x01	; 1
            Inval=Inval+(10*number);
    2a62:	88 0f       	add	r24, r24
    2a64:	98 2f       	mov	r25, r24
    2a66:	99 0f       	add	r25, r25
    2a68:	99 0f       	add	r25, r25
    2a6a:	89 0f       	add	r24, r25
    2a6c:	90 91 d6 04 	lds	r25, 0x04D6
    2a70:	89 0f       	add	r24, r25
    2a72:	80 93 d6 04 	sts	0x04D6, r24
            DigitPos++;
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	80 93 d4 04 	sts	0x04D4, r24
            number=0;
    2a7c:	10 92 d5 04 	sts	0x04D5, r1
            ch[0]='0';
            SwitchPressed=0;
    2a80:	10 92 b6 04 	sts	0x04B6, r1
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	47 c0       	rjmp	.+142    	; 0x2b16 <Digitset+0x19a>
            ch[0]='0';
            SwitchPressed=0;
        }
        break;
    case 2:
        if(SwitchPressed==1)
    2a88:	80 91 b6 04 	lds	r24, 0x04B6
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	c9 f4       	brne	.+50     	; 0x2ac2 <Digitset+0x146>
        {
            SwitchPressed=0;
    2a90:	10 92 b6 04 	sts	0x04B6, r1
            ch[0]=ch[0]+number;
    2a94:	80 91 d5 04 	lds	r24, 0x04D5
    2a98:	80 5d       	subi	r24, 0xD0	; 208
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
            PopulateSSDbuffer(ch,88,pY);
    2a9c:	46 2f       	mov	r20, r22
    2a9e:	68 e5       	ldi	r22, 0x58	; 88
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	05 96       	adiw	r24, 0x05	; 5
    2aa4:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
            number++;
    2aa8:	80 91 d5 04 	lds	r24, 0x04D5
    2aac:	8f 5f       	subi	r24, 0xFF	; 255
            if(number==10)
    2aae:	8a 30       	cpi	r24, 0x0A	; 10
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <Digitset+0x13e>
        if(SwitchPressed==1)
        {
            SwitchPressed=0;
            ch[0]=ch[0]+number;
            PopulateSSDbuffer(ch,88,pY);
            number++;
    2ab2:	80 93 d5 04 	sts	0x04D5, r24
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	2e c0       	rjmp	.+92     	; 0x2b16 <Digitset+0x19a>
            ch[0]=ch[0]+number;
            PopulateSSDbuffer(ch,88,pY);
            number++;
            if(number==10)
            {
                number=0;
    2aba:	10 92 d5 04 	sts	0x04D5, r1
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	2a c0       	rjmp	.+84     	; 0x2b16 <Digitset+0x19a>
            if(number==10)
            {
                number=0;
            }
        }
        else if(SwitchPressed==2||SwitchPressed==3)
    2ac2:	82 50       	subi	r24, 0x02	; 2
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	30 f5       	brcc	.+76     	; 0x2b14 <Digitset+0x198>
        {
            number--;
    2ac8:	90 91 d5 04 	lds	r25, 0x04D5
    2acc:	80 91 d6 04 	lds	r24, 0x04D6
    2ad0:	89 0f       	add	r24, r25
            Inval=Inval+number;
    2ad2:	81 50       	subi	r24, 0x01	; 1
    2ad4:	80 93 d6 04 	sts	0x04D6, r24
            DigitPos=0;
    2ad8:	10 92 d4 04 	sts	0x04D4, r1
            number=0;
    2adc:	10 92 d5 04 	sts	0x04D5, r1
            ch[0]='0';
            SwitchPressed=0;
    2ae0:	10 92 b6 04 	sts	0x04B6, r1
            retval=1;
            *ptr=Inval;
    2ae4:	fa 01       	movw	r30, r20
    2ae6:	80 83       	st	Z, r24
            num2CharArray(Inval,valx);
    2ae8:	be 01       	movw	r22, r28
    2aea:	6f 5f       	subi	r22, 0xFF	; 255
    2aec:	7f 4f       	sbci	r23, 0xFF	; 255
    2aee:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
            valx[3]='\0';
    2af2:	1c 82       	std	Y+4, r1	; 0x04
            PopulateSSDbuffer(valx,0,4);
    2af4:	44 e0       	ldi	r20, 0x04	; 4
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	ce 01       	movw	r24, r28
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
            Inval=0;
    2b00:	10 92 d6 04 	sts	0x04D6, r1
            Inval=Inval+number;
            DigitPos=0;
            number=0;
            ch[0]='0';
            SwitchPressed=0;
            retval=1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	07 c0       	rjmp	.+14     	; 0x2b16 <Digitset+0x19a>
}

static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr)
{
    static uint8_t DigitPos,number,Inval;
    uint8_t retval=0;
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	05 c0       	rjmp	.+10     	; 0x2b16 <Digitset+0x19a>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	03 c0       	rjmp	.+6      	; 0x2b16 <Digitset+0x19a>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <Digitset+0x19a>
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    default:
        /* Your code here */
        break;
    }
    return retval;
    2b16:	26 96       	adiw	r28, 0x06	; 6
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <BlinkSelection>:
        break;
    }
    return 0;
}
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <BlinkSelection+0x6>
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <BlinkSelection+0x8>
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <BlinkSelection+0xa>
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	da 01       	movw	r26, r20
    static uint8_t Blinka;
    uint8_t i=0;
    char FillSpace[6];
    while(datstring[i]!='\0')
    2b38:	9c 91       	ld	r25, X
    2b3a:	99 23       	and	r25, r25
    2b3c:	89 f0       	breq	.+34     	; 0x2b60 <BlinkSelection+0x38>
    return 0;
}
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
    static uint8_t Blinka;
    uint8_t i=0;
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    char FillSpace[6];
    while(datstring[i]!='\0')
    {
        FillSpace[i]=' ';
    2b40:	30 e2       	ldi	r19, 0x20	; 32
    2b42:	e1 e0       	ldi	r30, 0x01	; 1
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	ec 0f       	add	r30, r28
    2b48:	fd 1f       	adc	r31, r29
    2b4a:	e9 0f       	add	r30, r25
    2b4c:	f1 1d       	adc	r31, r1
    2b4e:	30 83       	st	Z, r19
        i++;
    2b50:	9f 5f       	subi	r25, 0xFF	; 255
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
    static uint8_t Blinka;
    uint8_t i=0;
    char FillSpace[6];
    while(datstring[i]!='\0')
    2b52:	fd 01       	movw	r30, r26
    2b54:	e9 0f       	add	r30, r25
    2b56:	f1 1d       	adc	r31, r1
    2b58:	20 81       	ld	r18, Z
    2b5a:	21 11       	cpse	r18, r1
    2b5c:	f2 cf       	rjmp	.-28     	; 0x2b42 <BlinkSelection+0x1a>
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <BlinkSelection+0x3a>
    return 0;
}
static void BlinkSelection(uint8_t posx,uint8_t posy,unsigned char * datstring)
{
    static uint8_t Blinka;
    uint8_t i=0;
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    while(datstring[i]!='\0')
    {
        FillSpace[i]=' ';
        i++;
    }
    FillSpace[i]='\0';
    2b62:	fe 01       	movw	r30, r28
    2b64:	e9 0f       	add	r30, r25
    2b66:	f1 1d       	adc	r31, r1
    2b68:	11 82       	std	Z+1, r1	; 0x01
    if(Blinka==0)
    2b6a:	90 91 d7 04 	lds	r25, 0x04D7
    2b6e:	91 11       	cpse	r25, r1
    2b70:	0c c0       	rjmp	.+24     	; 0x2b8a <BlinkSelection+0x62>
    {
        PopulateSSDbuffer(FillSpace,posx,posy);
    2b72:	46 2f       	mov	r20, r22
    2b74:	68 2f       	mov	r22, r24
    2b76:	ce 01       	movw	r24, r28
    2b78:	01 96       	adiw	r24, 0x01	; 1
    2b7a:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
        Blinka++;
    2b7e:	80 91 d7 04 	lds	r24, 0x04D7
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	80 93 d7 04 	sts	0x04D7, r24
    2b88:	0d c0       	rjmp	.+26     	; 0x2ba4 <BlinkSelection+0x7c>
    }
    else
    {
        Blinka++;
    2b8a:	9f 5f       	subi	r25, 0xFF	; 255
    2b8c:	90 93 d7 04 	sts	0x04D7, r25
        if(Blinka==50)
    2b90:	92 33       	cpi	r25, 0x32	; 50
    2b92:	41 f4       	brne	.+16     	; 0x2ba4 <BlinkSelection+0x7c>
        {
            PopulateSSDbuffer(datstring,posx,posy);
    2b94:	46 2f       	mov	r20, r22
    2b96:	68 2f       	mov	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
            Blinka=200;
    2b9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ba0:	80 93 d7 04 	sts	0x04D7, r24
        }
    }

}
    2ba4:	26 96       	adiw	r28, 0x06	; 6
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	08 95       	ret

00002bb6 <task6>:
{
    static uint8_t CommunicationStates;
    static funPtrDebug fp;
    static uint16_t pointersave;
    uint8_t *length;
    if(EspConnected==1)
    2bb6:	20 91 c5 04 	lds	r18, 0x04C5
    2bba:	21 30       	cpi	r18, 0x01	; 1
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <task6+0xa>
    2bbe:	4a c0       	rjmp	.+148    	; 0x2c54 <task6+0x9e>
    {
        switch (CommunicationStates)
    2bc0:	20 91 c6 04 	lds	r18, 0x04C6
    2bc4:	21 30       	cpi	r18, 0x01	; 1
    2bc6:	79 f0       	breq	.+30     	; 0x2be6 <task6+0x30>
    2bc8:	30 f0       	brcs	.+12     	; 0x2bd6 <task6+0x20>
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	d1 f0       	breq	.+52     	; 0x2c02 <task6+0x4c>
    2bce:	23 30       	cpi	r18, 0x03	; 3
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <task6+0x1e>
    2bd2:	40 c0       	rjmp	.+128    	; 0x2c54 <task6+0x9e>
    2bd4:	28 c0       	rjmp	.+80     	; 0x2c26 <task6+0x70>
        {
        case 0:
            if(RequestWait()==ESP_CmdSndOK)
    2bd6:	0e 94 91 05 	call	0xb22	; 0xb22 <RequestWait>
    2bda:	81 11       	cpse	r24, r1
    2bdc:	3b c0       	rjmp	.+118    	; 0x2c54 <task6+0x9e>
            {
                CommunicationStates=1;
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	80 93 c6 04 	sts	0x04C6, r24
    2be4:	37 c0       	rjmp	.+110    	; 0x2c54 <task6+0x9e>
            }
            break;
        case 1:
            CheckInput();
    2be6:	0e 94 2b 05 	call	0xa56	; 0xa56 <CheckInput>
            PushEventInterface(200,DebugHandlerFunc,ESPpop,0);
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	41 ee       	ldi	r20, 0xE1	; 225
    2bee:	55 e0       	ldi	r21, 0x05	; 5
    2bf0:	6c e9       	ldi	r22, 0x9C	; 156
    2bf2:	7f e0       	ldi	r23, 0x0F	; 15
    2bf4:	88 ec       	ldi	r24, 0xC8	; 200
    2bf6:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
            //DebugHandlerFunc(ESPpop);
            CommunicationStates=2;
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
    2bfc:	80 93 c6 04 	sts	0x04C6, r24
            break;
    2c00:	29 c0       	rjmp	.+82     	; 0x2c54 <task6+0x9e>
        case 2:
            if(((uint8_t*)callback)[1]==1)
    2c02:	fc 01       	movw	r30, r24
    2c04:	21 81       	ldd	r18, Z+1	; 0x01
    2c06:	21 30       	cpi	r18, 0x01	; 1
    2c08:	29 f5       	brne	.+74     	; 0x2c54 <task6+0x9e>
            {
                pointersave=callback;
    2c0a:	90 93 c8 04 	sts	0x04C8, r25
    2c0e:	80 93 c7 04 	sts	0x04C7, r24
                fp=(funPtrDebug*)(((uint16_t*)(callback+2))[0]);
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	90 93 ca 04 	sts	0x04CA, r25
    2c1a:	80 93 c9 04 	sts	0x04C9, r24
                CommunicationStates=3;
    2c1e:	83 e0       	ldi	r24, 0x03	; 3
    2c20:	80 93 c6 04 	sts	0x04C6, r24
    2c24:	17 c0       	rjmp	.+46     	; 0x2c54 <task6+0x9e>
            }
            break;
        case 3:
            length=pointersave;
            if(ESP_CmdSndOK==SendData(((length[6]*3))))
    2c26:	e0 91 c7 04 	lds	r30, 0x04C7
    2c2a:	f0 91 c8 04 	lds	r31, 0x04C8
    2c2e:	86 81       	ldd	r24, Z+6	; 0x06
    2c30:	98 2f       	mov	r25, r24
    2c32:	99 0f       	add	r25, r25
    2c34:	89 0f       	add	r24, r25
    2c36:	0e 94 17 05 	call	0xa2e	; 0xa2e <SendData>
    2c3a:	81 11       	cpse	r24, r1
    2c3c:	0b c0       	rjmp	.+22     	; 0x2c54 <task6+0x9e>
            {
                CommunicationStates=0;
    2c3e:	10 92 c6 04 	sts	0x04C6, r1
                char val2[4]="255\0";
                fp(pointersave);
    2c42:	e0 91 c9 04 	lds	r30, 0x04C9
    2c46:	f0 91 ca 04 	lds	r31, 0x04CA
    2c4a:	80 91 c7 04 	lds	r24, 0x04C7
    2c4e:	90 91 c8 04 	lds	r25, 0x04C8
    2c52:	09 95       	icall
            }
        }
    }
    return 0;
}
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	08 95       	ret

00002c5a <task1>:
static uint8_t Digitset(uint8_t pX,uint8_t pY,uint8_t* ptr);
//Esp_Index=Mode_Command;
//Site[36]=name;
//background-color:#757575;height;100%;position:absolute;line-height:inherit;width:62%" ><center><span style="color:white">62</span></center></div></body></html>";
uint16_t task1(void)
{
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	28 97       	sbiw	r28, 0x08	; 8
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    static uint16_t Init_Flag=0;
    static uint8_t Toggle=0,Toggle1=1,ssdcount;
    uint16_t value,one,two,three;
    char SSDNUM[4];
    uint16_t Out;
    time1=time1+1;
    2c72:	20 91 95 04 	lds	r18, 0x0495
    2c76:	30 91 96 04 	lds	r19, 0x0496
    2c7a:	2f 5f       	subi	r18, 0xFF	; 255
    2c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7e:	30 93 96 04 	sts	0x0496, r19
    2c82:	20 93 95 04 	sts	0x0495, r18
    if(Init_Flag==0)
    2c86:	60 91 97 04 	lds	r22, 0x0497
    2c8a:	70 91 98 04 	lds	r23, 0x0498
    2c8e:	67 2b       	or	r22, r23
    2c90:	61 f4       	brne	.+24     	; 0x2caa <task1+0x50>
    {
        //InitMax();
        Init_Flag=1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	90 93 98 04 	sts	0x0498, r25
    2c9a:	80 93 97 04 	sts	0x0497, r24
        TankSize=10000/124;
    2c9e:	80 e5       	ldi	r24, 0x50	; 80
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	90 93 9a 04 	sts	0x049A, r25
    2ca6:	80 93 99 04 	sts	0x0499, r24
    }
    //DispChar(0x0d,7);
    if(time1==10)
    2caa:	2a 30       	cpi	r18, 0x0A	; 10
    2cac:	31 05       	cpc	r19, r1
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <task1+0x58>
    2cb0:	87 c0       	rjmp	.+270    	; 0x2dc0 <task1+0x166>
    {   //ssd1036_chumma();

        uint16_t percnt;
        Out=(10000-(SensorValue*TankSize))/100;
    2cb2:	40 91 9b 04 	lds	r20, 0x049B
    2cb6:	20 91 99 04 	lds	r18, 0x0499
    2cba:	30 91 9a 04 	lds	r19, 0x049A
    2cbe:	42 9f       	mul	r20, r18
    2cc0:	c0 01       	movw	r24, r0
    2cc2:	43 9f       	mul	r20, r19
    2cc4:	90 0d       	add	r25, r0
    2cc6:	11 24       	eor	r1, r1
    2cc8:	20 e1       	ldi	r18, 0x10	; 16
    2cca:	37 e2       	ldi	r19, 0x27	; 39
    2ccc:	28 1b       	sub	r18, r24
    2cce:	39 0b       	sbc	r19, r25
    2cd0:	36 95       	lsr	r19
    2cd2:	27 95       	ror	r18
    2cd4:	36 95       	lsr	r19
    2cd6:	27 95       	ror	r18
    2cd8:	ab e7       	ldi	r26, 0x7B	; 123
    2cda:	b4 e1       	ldi	r27, 0x14	; 20
    2cdc:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	56 95       	lsr	r21
    2ce4:	47 95       	ror	r20
        percnt=Out;
        SSDNUM[3]='\0';
    2ce6:	1c 82       	std	Y+4, r1	; 0x04
        Out=Out*127;
    2ce8:	9a 01       	movw	r18, r20
    2cea:	36 95       	lsr	r19
    2cec:	32 2f       	mov	r19, r18
    2cee:	22 27       	eor	r18, r18
    2cf0:	37 95       	ror	r19
    2cf2:	27 95       	ror	r18
    2cf4:	24 1b       	sub	r18, r20
    2cf6:	35 0b       	sbc	r19, r21
        Out=Out/100;														//ssdcount=one;
    2cf8:	36 95       	lsr	r19
    2cfa:	27 95       	ror	r18
    2cfc:	36 95       	lsr	r19
    2cfe:	27 95       	ror	r18
    2d00:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
    2d04:	8c 01       	movw	r16, r24
    2d06:	16 95       	lsr	r17
    2d08:	07 95       	ror	r16
        num2CharArray(percnt,SSDNUM);
    2d0a:	be 01       	movw	r22, r28
    2d0c:	6f 5f       	subi	r22, 0xFF	; 255
    2d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d10:	84 2f       	mov	r24, r20
    2d12:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
        ssd1306_String_font6x8(SSDNUM,74,3);
    2d16:	43 e0       	ldi	r20, 0x03	; 3
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	6a e4       	ldi	r22, 0x4A	; 74
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	ce 01       	movw	r24, r28
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <ssd1306_String_font6x8>
        ssd1306_String_font6x8("'/.",96,3);
    2d26:	43 e0       	ldi	r20, 0x03	; 3
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	60 e6       	ldi	r22, 0x60	; 96
    2d2c:	70 e0       	ldi	r23, 0x00	; 0
    2d2e:	83 e1       	ldi	r24, 0x13	; 19
    2d30:	93 e0       	ldi	r25, 0x03	; 3
    2d32:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <ssd1306_String_font6x8>
        if(SensorValue<20 && Upcounter<40)
    2d36:	20 91 9b 04 	lds	r18, 0x049B
    2d3a:	24 31       	cpi	r18, 0x14	; 20
    2d3c:	88 f4       	brcc	.+34     	; 0x2d60 <task1+0x106>
    2d3e:	80 91 9c 04 	lds	r24, 0x049C
    2d42:	90 91 9d 04 	lds	r25, 0x049D
    2d46:	88 32       	cpi	r24, 0x28	; 40
    2d48:	91 05       	cpc	r25, r1
    2d4a:	50 f4       	brcc	.+20     	; 0x2d60 <task1+0x106>
        {
            Upcounter++;
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	90 93 9d 04 	sts	0x049D, r25
    2d52:	80 93 9c 04 	sts	0x049C, r24
            DownCounter=0;
    2d56:	10 92 9f 04 	sts	0x049F, r1
    2d5a:	10 92 9e 04 	sts	0x049E, r1
    2d5e:	26 c0       	rjmp	.+76     	; 0x2dac <task1+0x152>
        }
        else if(SensorValue>122 && DownCounter<40 && SensorValue<255)
    2d60:	2b 37       	cpi	r18, 0x7B	; 123
    2d62:	98 f0       	brcs	.+38     	; 0x2d8a <task1+0x130>
    2d64:	80 91 9e 04 	lds	r24, 0x049E
    2d68:	90 91 9f 04 	lds	r25, 0x049F
    2d6c:	88 32       	cpi	r24, 0x28	; 40
    2d6e:	91 05       	cpc	r25, r1
    2d70:	60 f4       	brcc	.+24     	; 0x2d8a <task1+0x130>
    2d72:	2f 3f       	cpi	r18, 0xFF	; 255
    2d74:	51 f0       	breq	.+20     	; 0x2d8a <task1+0x130>
        {
            Upcounter=0;
    2d76:	10 92 9d 04 	sts	0x049D, r1
    2d7a:	10 92 9c 04 	sts	0x049C, r1
            DownCounter++;
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	90 93 9f 04 	sts	0x049F, r25
    2d84:	80 93 9e 04 	sts	0x049E, r24
    2d88:	11 c0       	rjmp	.+34     	; 0x2dac <task1+0x152>
        }
        else
        {
            Upcounter=0;
    2d8a:	10 92 9d 04 	sts	0x049D, r1
    2d8e:	10 92 9c 04 	sts	0x049C, r1
            DownCounter=0;
    2d92:	10 92 9f 04 	sts	0x049F, r1
    2d96:	10 92 9e 04 	sts	0x049E, r1
            COUNT=0;
    2d9a:	10 92 a1 04 	sts	0x04A1, r1
    2d9e:	10 92 a0 04 	sts	0x04A0, r1
            PinOutput(0,PIN_OUT7,D);
    2da2:	42 e0       	ldi	r20, 0x02	; 2
    2da4:	66 e0       	ldi	r22, 0x06	; 6
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>

        //PinOutput(Toggle,PIN_OUT1,B);
        //
        //COUNT=COUNT+1;

        Toggle1=Toggle1^1;
    2dac:	90 91 70 02 	lds	r25, 0x0270
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	89 27       	eor	r24, r25
    2db4:	80 93 70 02 	sts	0x0270, r24

        //
        time1=0;
    2db8:	10 92 96 04 	sts	0x0496, r1
    2dbc:	10 92 95 04 	sts	0x0495, r1



    }

    if(Upcounter!=0||DownCounter!=0 )
    2dc0:	20 91 9c 04 	lds	r18, 0x049C
    2dc4:	30 91 9d 04 	lds	r19, 0x049D
    2dc8:	23 2b       	or	r18, r19
    2dca:	31 f4       	brne	.+12     	; 0x2dd8 <task1+0x17e>
    2dcc:	80 91 9e 04 	lds	r24, 0x049E
    2dd0:	90 91 9f 04 	lds	r25, 0x049F
    2dd4:	89 2b       	or	r24, r25
    2dd6:	f1 f0       	breq	.+60     	; 0x2e14 <task1+0x1ba>
    {

        if (COUNT>100)
    2dd8:	80 91 a0 04 	lds	r24, 0x04A0
    2ddc:	90 91 a1 04 	lds	r25, 0x04A1
    2de0:	85 36       	cpi	r24, 0x65	; 101
    2de2:	91 05       	cpc	r25, r1
    2de4:	70 f0       	brcs	.+28     	; 0x2e02 <task1+0x1a8>
        {
            COUNT=0;
    2de6:	10 92 a1 04 	sts	0x04A1, r1
    2dea:	10 92 a0 04 	sts	0x04A0, r1
            Toggle=Toggle^1;
    2dee:	90 91 a2 04 	lds	r25, 0x04A2
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	89 27       	eor	r24, r25
    2df6:	80 93 a2 04 	sts	0x04A2, r24
            PinOutput(Toggle,PIN_OUT7,D);
    2dfa:	42 e0       	ldi	r20, 0x02	; 2
    2dfc:	66 e0       	ldi	r22, 0x06	; 6
    2dfe:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
        }
        COUNT++;
    2e02:	80 91 a0 04 	lds	r24, 0x04A0
    2e06:	90 91 a1 04 	lds	r25, 0x04A1
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	90 93 a1 04 	sts	0x04A1, r25
    2e10:	80 93 a0 04 	sts	0x04A0, r24
    }

    if(time2>1)
    2e14:	20 91 a3 04 	lds	r18, 0x04A3
    2e18:	30 91 a4 04 	lds	r19, 0x04A4
    2e1c:	22 30       	cpi	r18, 0x02	; 2
    2e1e:	31 05       	cpc	r19, r1
    2e20:	08 f4       	brcc	.+2      	; 0x2e24 <task1+0x1ca>
    2e22:	57 c0       	rjmp	.+174    	; 0x2ed2 <task1+0x278>
    {
        uint16_t a=0x0000,c;
    2e24:	18 86       	std	Y+8, r1	; 0x08
    2e26:	1f 82       	std	Y+7, r1	; 0x07
        uint8_t *array=&c,*Val=&a;
        RTEReadFirstCh(&a);
    2e28:	ce 01       	movw	r24, r28
    2e2a:	07 96       	adiw	r24, 0x07	; 7
    2e2c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <RTEModuleFirstCh>
        //uart_num(array[1]);
        //if(a&0x8000==0x8000)
        //{
        //uart_string("in 1");
        c=(a>>15)&0x0001;
    2e30:	8f 81       	ldd	r24, Y+7	; 0x07
    2e32:	98 85       	ldd	r25, Y+8	; 0x08
    2e34:	29 2f       	mov	r18, r25
    2e36:	22 1f       	adc	r18, r18
    2e38:	22 27       	eor	r18, r18
    2e3a:	22 1f       	adc	r18, r18
    2e3c:	2d 83       	std	Y+5, r18	; 0x05
    2e3e:	1e 82       	std	Y+6, r1	; 0x06
        if(array[0]==0x01)
    2e40:	21 30       	cpi	r18, 0x01	; 1
    2e42:	d9 f4       	brne	.+54     	; 0x2e7a <task1+0x220>
        {
            //a=(a&0x03ff);
            //a=a*(4882);
            //a=a/1000;
            a=a&0x03ff;
    2e44:	93 70       	andi	r25, 0x03	; 3
    2e46:	98 87       	std	Y+8, r25	; 0x08
    2e48:	8f 83       	std	Y+7, r24	; 0x07
            one=(110*a);
            one=one/1024;
            one=(one);

            SSDNUM[3]='\0';															//ssdcount=one;
    2e4a:	1c 82       	std	Y+4, r1	; 0x04
            num2CharArray(SensorValue,SSDNUM);
    2e4c:	be 01       	movw	r22, r28
    2e4e:	6f 5f       	subi	r22, 0xFF	; 255
    2e50:	7f 4f       	sbci	r23, 0xFF	; 255
    2e52:	80 91 9b 04 	lds	r24, 0x049B
    2e56:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
            ssd1306_String_font6x8(SSDNUM,92,0);
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	6c e5       	ldi	r22, 0x5C	; 92
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	ce 01       	movw	r24, r28
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <ssd1306_String_font6x8>
            ssd1306_String_font6x8("cm",112,0);
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	60 e7       	ldi	r22, 0x70	; 112
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	87 e1       	ldi	r24, 0x17	; 23
    2e74:	93 e0       	ldi	r25, 0x03	; 3
    2e76:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <ssd1306_String_font6x8>
            }
            //uart_num(one);
            //uart_string("#1#");
            // uart_num(Val[0]);
        }
        a=0x0800;
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	98 e0       	ldi	r25, 0x08	; 8
    2e7e:	98 87       	std	Y+8, r25	; 0x08
    2e80:	8f 83       	std	Y+7, r24	; 0x07
        RTEReadFirstCh(&a);
    2e82:	ce 01       	movw	r24, r28
    2e84:	07 96       	adiw	r24, 0x07	; 7
    2e86:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <RTEModuleFirstCh>
            two=(5*a)*10/1024;
            //uart_string("#2#");
            //uart_num(two);
            //uart_string("#2#");					   // uart_num(Val[0]);
        }
        a=0x1000;
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e1       	ldi	r25, 0x10	; 16
    2e8e:	98 87       	std	Y+8, r25	; 0x08
    2e90:	8f 83       	std	Y+7, r24	; 0x07
        RTEReadFirstCh(&a);
    2e92:	ce 01       	movw	r24, r28
    2e94:	07 96       	adiw	r24, 0x07	; 7
    2e96:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <RTEModuleFirstCh>
        //uart_num(array[1]);
        //if(a&0x8000==0x8000)
        //{
        //uart_string("in 1");
        c=(a>>15)&0x0001;
    2e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9c:	98 85       	ldd	r25, Y+8	; 0x08
    2e9e:	29 2f       	mov	r18, r25
    2ea0:	22 1f       	adc	r18, r18
    2ea2:	22 27       	eor	r18, r18
    2ea4:	22 1f       	adc	r18, r18
    2ea6:	2d 83       	std	Y+5, r18	; 0x05
    2ea8:	1e 82       	std	Y+6, r1	; 0x06
        if(array[0]==0x01)
    2eaa:	21 30       	cpi	r18, 0x01	; 1
    2eac:	19 f4       	brne	.+6      	; 0x2eb4 <task1+0x25a>
        {
            a=a&0x03ff;
    2eae:	93 70       	andi	r25, 0x03	; 3
    2eb0:	98 87       	std	Y+8, r25	; 0x08
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
            three=(5*a)*10/1024;
            //uart_string("#3#");
            //uart_16Uint(a);
            //uart_string("#3#");						//uart_num(Val[0]);
        }
        time2=0;
    2eb4:	10 92 a4 04 	sts	0x04A4, r1
    2eb8:	10 92 a3 04 	sts	0x04A3, r1
        if(ssdcount<127)
    2ebc:	80 91 a5 04 	lds	r24, 0x04A5
    2ec0:	8f 37       	cpi	r24, 0x7F	; 127
    2ec2:	20 f4       	brcc	.+8      	; 0x2ecc <task1+0x272>
        {
            ssdcount++;
    2ec4:	8f 5f       	subi	r24, 0xFF	; 255
    2ec6:	80 93 a5 04 	sts	0x04A5, r24
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <task1+0x278>
        }
        else
        {
            ssdcount=ssdcount-55;
    2ecc:	87 53       	subi	r24, 0x37	; 55
    2ece:	80 93 a5 04 	sts	0x04A5, r24
        }

    }


    if(Out<127)
    2ed2:	0f 37       	cpi	r16, 0x7F	; 127
    2ed4:	11 05       	cpc	r17, r1
    2ed6:	38 f4       	brcc	.+14     	; 0x2ee6 <task1+0x28c>
    {
        ssd1306_Fill_Rectangle(0,5,Out);
    2ed8:	a8 01       	movw	r20, r16
    2eda:	65 e0       	ldi	r22, 0x05	; 5
    2edc:	70 e0       	ldi	r23, 0x00	; 0
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	0e 94 6f 08 	call	0x10de	; 0x10de <ssd1306_Fill_Rectangle>
    }

    time2++;
    2ee6:	80 91 a3 04 	lds	r24, 0x04A3
    2eea:	90 91 a4 04 	lds	r25, 0x04A4
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	90 93 a4 04 	sts	0x04A4, r25
    2ef4:	80 93 a3 04 	sts	0x04A3, r24
    //a=4;
    return 0;
}
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	28 96       	adiw	r28, 0x08	; 8
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	08 95       	ret

00002f12 <task2>:
uint16_t task2(void)
{
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	27 97       	sbiw	r28, 0x07	; 7
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    static uint16_t time1=0,k;
    static uint8_t Errorcount;
    time1=time1+1;
    2f28:	80 91 a6 04 	lds	r24, 0x04A6
    2f2c:	90 91 a7 04 	lds	r25, 0x04A7
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	90 93 a7 04 	sts	0x04A7, r25
    2f36:	80 93 a6 04 	sts	0x04A6, r24
    uint16_t Pulse=0;
    uint8_t *check=&Pulse;
    if(time1==100)
    2f3a:	84 36       	cpi	r24, 0x64	; 100
    2f3c:	91 05       	cpc	r25, r1
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <task2+0x30>
    2f40:	4d c1       	rjmp	.+666    	; 0x31dc <task2+0x2ca>
    {

        signal=0;
    2f42:	10 92 94 04 	sts	0x0494, r1
        time1=0;
    2f46:	10 92 a7 04 	sts	0x04A7, r1
    2f4a:	10 92 a6 04 	sts	0x04A6, r1
        uint8_t arr[3];
        arr[0]=0;
    2f4e:	1d 82       	std	Y+5, r1	; 0x05
        arr[1]=0;
    2f50:	1e 82       	std	Y+6, r1	; 0x06
        arr[2]=1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	8f 83       	std	Y+7, r24	; 0x07
        ((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    2f56:	ce 01       	movw	r24, r28
    2f58:	05 96       	adiw	r24, 0x05	; 5
    2f5a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <SignalHandlerFunc>
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
        if(arr[1]==0x02)
    2f62:	8e 81       	ldd	r24, Y+6	; 0x06
    2f64:	82 30       	cpi	r24, 0x02	; 2
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <task2+0x58>
    2f68:	1b c1       	rjmp	.+566    	; 0x31a0 <task2+0x28e>
        {
            if(1)
            {
                FilterUltrasonic(arr[0]);
    2f6a:	ed 81       	ldd	r30, Y+5	; 0x05
static void FilterUltrasonic(uint8_t Distance)
{
    static uint16_t value, previousvalue=0,offset,onebyk,settlecount;
    uint16_t multiplier;
    static uint8_t saveflag;
    onebyk=181;
    2f6c:	85 eb       	ldi	r24, 0xB5	; 181
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	90 93 aa 04 	sts	0x04AA, r25
    2f74:	80 93 a9 04 	sts	0x04A9, r24
    //value=(Distance+previousvalue);
    if(Distance>value)
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	40 91 ab 04 	lds	r20, 0x04AB
    2f7e:	50 91 ac 04 	lds	r21, 0x04AC
    2f82:	4e 17       	cp	r20, r30
    2f84:	5f 07       	cpc	r21, r31
    2f86:	08 f0       	brcs	.+2      	; 0x2f8a <task2+0x78>
    2f88:	42 c0       	rjmp	.+132    	; 0x300e <task2+0xfc>
    {
        multiplier=(Distance-value)*100;
    2f8a:	cf 01       	movw	r24, r30
    2f8c:	84 1b       	sub	r24, r20
    2f8e:	95 0b       	sbc	r25, r21
    2f90:	64 e6       	ldi	r22, 0x64	; 100
    2f92:	68 9f       	mul	r22, r24
    2f94:	90 01       	movw	r18, r0
    2f96:	69 9f       	mul	r22, r25
    2f98:	30 0d       	add	r19, r0
    2f9a:	11 24       	eor	r1, r1
        if(multiplier<1804)
    2f9c:	2c 30       	cpi	r18, 0x0C	; 12
    2f9e:	87 e0       	ldi	r24, 0x07	; 7
    2fa0:	38 07       	cpc	r19, r24
    2fa2:	90 f4       	brcc	.+36     	; 0x2fc8 <task2+0xb6>
        {
            offset=((Distance-value)*100)/onebyk;
    2fa4:	a5 e8       	ldi	r26, 0x85	; 133
    2fa6:	ba e5       	ldi	r27, 0x5A	; 90
    2fa8:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
    2fac:	00 24       	eor	r0, r0
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	00 1c       	adc	r0, r0
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	00 1c       	adc	r0, r0
    2fba:	89 2f       	mov	r24, r25
    2fbc:	90 2d       	mov	r25, r0
    2fbe:	90 93 ae 04 	sts	0x04AE, r25
    2fc2:	80 93 ad 04 	sts	0x04AD, r24
    2fc6:	11 c0       	rjmp	.+34     	; 0x2fea <task2+0xd8>
        }
        else
        {
            offset=((Distance-value)*100)/1804;
    2fc8:	36 95       	lsr	r19
    2fca:	27 95       	ror	r18
    2fcc:	36 95       	lsr	r19
    2fce:	27 95       	ror	r18
    2fd0:	a9 ea       	ldi	r26, 0xA9	; 169
    2fd2:	b8 e4       	ldi	r27, 0x48	; 72
    2fd4:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
    2fd8:	88 0f       	add	r24, r24
    2fda:	89 2f       	mov	r24, r25
    2fdc:	88 1f       	adc	r24, r24
    2fde:	99 0b       	sbc	r25, r25
    2fe0:	91 95       	neg	r25
    2fe2:	90 93 ae 04 	sts	0x04AE, r25
    2fe6:	80 93 ad 04 	sts	0x04AD, r24
        }
        if(offset==0)
    2fea:	80 91 ad 04 	lds	r24, 0x04AD
    2fee:	90 91 ae 04 	lds	r25, 0x04AE
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <task2+0xee>
        {
            value=Distance;
    2ff6:	f0 93 ac 04 	sts	0x04AC, r31
    2ffa:	e0 93 ab 04 	sts	0x04AB, r30
    2ffe:	48 c0       	rjmp	.+144    	; 0x3090 <task2+0x17e>
        }
        else
        {
            value=value+offset;
    3000:	84 0f       	add	r24, r20
    3002:	95 1f       	adc	r25, r21
    3004:	90 93 ac 04 	sts	0x04AC, r25
    3008:	80 93 ab 04 	sts	0x04AB, r24
    300c:	41 c0       	rjmp	.+130    	; 0x3090 <task2+0x17e>


    }
    else
    {
        multiplier=(value-Distance)*100;
    300e:	ca 01       	movw	r24, r20
    3010:	8e 1b       	sub	r24, r30
    3012:	9f 0b       	sbc	r25, r31
    3014:	64 e6       	ldi	r22, 0x64	; 100
    3016:	68 9f       	mul	r22, r24
    3018:	90 01       	movw	r18, r0
    301a:	69 9f       	mul	r22, r25
    301c:	30 0d       	add	r19, r0
    301e:	11 24       	eor	r1, r1
        if(multiplier<1804)
    3020:	2c 30       	cpi	r18, 0x0C	; 12
    3022:	87 e0       	ldi	r24, 0x07	; 7
    3024:	38 07       	cpc	r19, r24
    3026:	90 f4       	brcc	.+36     	; 0x304c <task2+0x13a>
        {
            offset=((value-Distance)*100)/onebyk;
    3028:	a5 e8       	ldi	r26, 0x85	; 133
    302a:	ba e5       	ldi	r27, 0x5A	; 90
    302c:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
    3030:	00 24       	eor	r0, r0
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	00 1c       	adc	r0, r0
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	00 1c       	adc	r0, r0
    303e:	89 2f       	mov	r24, r25
    3040:	90 2d       	mov	r25, r0
    3042:	90 93 ae 04 	sts	0x04AE, r25
    3046:	80 93 ad 04 	sts	0x04AD, r24
    304a:	11 c0       	rjmp	.+34     	; 0x306e <task2+0x15c>
        }
        else
        {
            offset=((value-Distance)*100)/1804;
    304c:	36 95       	lsr	r19
    304e:	27 95       	ror	r18
    3050:	36 95       	lsr	r19
    3052:	27 95       	ror	r18
    3054:	a9 ea       	ldi	r26, 0xA9	; 169
    3056:	b8 e4       	ldi	r27, 0x48	; 72
    3058:	0e 94 07 20 	call	0x400e	; 0x400e <__umulhisi3>
    305c:	88 0f       	add	r24, r24
    305e:	89 2f       	mov	r24, r25
    3060:	88 1f       	adc	r24, r24
    3062:	99 0b       	sbc	r25, r25
    3064:	91 95       	neg	r25
    3066:	90 93 ae 04 	sts	0x04AE, r25
    306a:	80 93 ad 04 	sts	0x04AD, r24
        }


        if(offset==0)
    306e:	80 91 ad 04 	lds	r24, 0x04AD
    3072:	90 91 ae 04 	lds	r25, 0x04AE
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	29 f4       	brne	.+10     	; 0x3084 <task2+0x172>
        {
            value=Distance;
    307a:	f0 93 ac 04 	sts	0x04AC, r31
    307e:	e0 93 ab 04 	sts	0x04AB, r30
    3082:	06 c0       	rjmp	.+12     	; 0x3090 <task2+0x17e>
        }
        else
        {
            value=value-offset;
    3084:	48 1b       	sub	r20, r24
    3086:	59 0b       	sbc	r21, r25
    3088:	50 93 ac 04 	sts	0x04AC, r21
    308c:	40 93 ab 04 	sts	0x04AB, r20
        }
    }
    previousvalue=value;
    3090:	80 91 ab 04 	lds	r24, 0x04AB
    3094:	90 91 ac 04 	lds	r25, 0x04AC
    3098:	80 93 af 04 	sts	0x04AF, r24
    309c:	90 93 b0 04 	sts	0x04B0, r25
    Sigout=(uint8_t)previousvalue;
    30a0:	28 2f       	mov	r18, r24
    30a2:	80 93 74 06 	sts	0x0674, r24
    SensorValue=(uint8_t)previousvalue;
    30a6:	80 93 9b 04 	sts	0x049B, r24
    if(settlecount>100)
    30aa:	80 91 b1 04 	lds	r24, 0x04B1
    30ae:	90 91 b2 04 	lds	r25, 0x04B2
    30b2:	85 36       	cpi	r24, 0x65	; 101
    30b4:	91 05       	cpc	r25, r1
    30b6:	08 f4       	brcc	.+2      	; 0x30ba <task2+0x1a8>
    30b8:	4f c0       	rjmp	.+158    	; 0x3158 <task2+0x246>
    {
        if(SensorValue<7&&saveflag==0)
    30ba:	27 30       	cpi	r18, 0x07	; 7
    30bc:	90 f4       	brcc	.+36     	; 0x30e2 <task2+0x1d0>
    30be:	80 91 b3 04 	lds	r24, 0x04B3
    30c2:	81 11       	cpse	r24, r1
    30c4:	0e c0       	rjmp	.+28     	; 0x30e2 <task2+0x1d0>
        {
            testnvm++;
    30c6:	80 91 b4 04 	lds	r24, 0x04B4
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	80 93 b4 04 	sts	0x04B4, r24
            StoreNVM(Nvm_TankOverflow,(uint8_t*)&testnvm,0);
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	64 eb       	ldi	r22, 0xB4	; 180
    30d4:	74 e0       	ldi	r23, 0x04	; 4
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <StoreNVM>
            saveflag=1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	80 93 b3 04 	sts	0x04B3, r24
        }
        if(SensorValue>10)
    30e2:	60 91 9b 04 	lds	r22, 0x049B
    30e6:	6b 30       	cpi	r22, 0x0B	; 11
    30e8:	10 f0       	brcs	.+4      	; 0x30ee <task2+0x1dc>
        {
            saveflag=0;
    30ea:	10 92 b3 04 	sts	0x04B3, r1
    //uart_string("\n");
}
static uint8_t CaliberateDistanceValues(uint8_t Pingvalue)
{
    static uint8_t PreviousValue=3,PingCount;
    if(PreviousValue>=3 && Pingvalue!=255 && Pingvalue!=0)
    30ee:	20 91 71 02 	lds	r18, 0x0271
    30f2:	23 30       	cpi	r18, 0x03	; 3
    30f4:	08 f4       	brcc	.+2      	; 0x30f8 <task2+0x1e6>
    30f6:	6b c0       	rjmp	.+214    	; 0x31ce <task2+0x2bc>
    30f8:	6f 3f       	cpi	r22, 0xFF	; 255
    30fa:	09 f4       	brne	.+2      	; 0x30fe <task2+0x1ec>
    30fc:	68 c0       	rjmp	.+208    	; 0x31ce <task2+0x2bc>
    30fe:	66 23       	and	r22, r22
    3100:	09 f4       	brne	.+2      	; 0x3104 <task2+0x1f2>
    3102:	65 c0       	rjmp	.+202    	; 0x31ce <task2+0x2bc>
    {
        if(Pingvalue>=(PreviousValue+3) && Pingvalue<=(PreviousValue-3))
    3104:	86 2f       	mov	r24, r22
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	a9 01       	movw	r20, r18
    310c:	4d 5f       	subi	r20, 0xFD	; 253
    310e:	5f 4f       	sbci	r21, 0xFF	; 255
    3110:	84 17       	cp	r24, r20
    3112:	95 07       	cpc	r25, r21
    3114:	5c f0       	brlt	.+22     	; 0x312c <task2+0x21a>
    3116:	23 50       	subi	r18, 0x03	; 3
    3118:	31 09       	sbc	r19, r1
    311a:	28 17       	cp	r18, r24
    311c:	39 07       	cpc	r19, r25
    311e:	34 f0       	brlt	.+12     	; 0x312c <task2+0x21a>
        {
            PingCount=PingCount-1;
    3120:	80 91 b5 04 	lds	r24, 0x04B5
    3124:	81 50       	subi	r24, 0x01	; 1
    3126:	80 93 b5 04 	sts	0x04B5, r24
    312a:	51 c0       	rjmp	.+162    	; 0x31ce <task2+0x2bc>
        }
        else
        {
            PingCount++;
    312c:	80 91 b5 04 	lds	r24, 0x04B5
    3130:	8f 5f       	subi	r24, 0xFF	; 255
    3132:	80 93 b5 04 	sts	0x04B5, r24
            PreviousValue=Pingvalue;
    3136:	60 93 71 02 	sts	0x0271, r22
            if(PingCount>=20)
    313a:	84 31       	cpi	r24, 0x14	; 20
    313c:	08 f4       	brcc	.+2      	; 0x3140 <task2+0x22e>
    313e:	47 c0       	rjmp	.+142    	; 0x31ce <task2+0x2bc>
            {
                PingCount=0;
    3140:	10 92 b5 04 	sts	0x04B5, r1
                PreviousValue=3;
    3144:	83 e0       	ldi	r24, 0x03	; 3
    3146:	80 93 71 02 	sts	0x0271, r24
        {
            saveflag=0;
        }
        if(CaliberateDistanceValues(SensorValue)==0)
        {
            PopulateSSDbuffer("C ",96,0);;
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	60 e6       	ldi	r22, 0x60	; 96
    314e:	8a e1       	ldi	r24, 0x1A	; 26
    3150:	93 e0       	ldi	r25, 0x03	; 3
    3152:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3156:	05 c0       	rjmp	.+10     	; 0x3162 <task2+0x250>
            PopulateSSDbuffer("C!",96,0);
        }
    }
    else
    {
        settlecount++;
    3158:	01 96       	adiw	r24, 0x01	; 1
    315a:	90 93 b2 04 	sts	0x04B2, r25
    315e:	80 93 b1 04 	sts	0x04B1, r24
    }
    //uart_num(Sigout);
    quality=100;
    3162:	14 e6       	ldi	r17, 0x64	; 100
    3164:	10 93 93 04 	sts	0x0493, r17
        if(arr[1]==0x02)
        {
            if(1)
            {
                FilterUltrasonic(arr[0]);
                char val[4]="255";
    3168:	82 e3       	ldi	r24, 0x32	; 50
    316a:	95 e3       	ldi	r25, 0x35	; 53
    316c:	a5 e3       	ldi	r26, 0x35	; 53
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	ab 83       	std	Y+3, r26	; 0x03
    3176:	bc 83       	std	Y+4, r27	; 0x04
                val[3]='\0';
                num2CharArray(arr[0],val);
    3178:	be 01       	movw	r22, r28
    317a:	6f 5f       	subi	r22, 0xFF	; 255
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
                val[3]='\0';
    3184:	1c 82       	std	Y+4, r1	; 0x04
                //TODO//PopulateSSDbuffer(val,0,1);
                //PopulateSSDbuffer("=L",arr[0],3);
                SetBlink(PIN_OUT1,0x1000,B);
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	70 e1       	ldi	r23, 0x10	; 16
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 98 02 	call	0x530	; 0x530 <SetBlink>
                Errorcount=0;
    3196:	10 92 a8 04 	sts	0x04A8, r1
                quality=100;
    319a:	10 93 93 04 	sts	0x0493, r17
    319e:	1e c0       	rjmp	.+60     	; 0x31dc <task2+0x2ca>
            }
        }
        else
        {
            Errorcount++;
    31a0:	80 91 a8 04 	lds	r24, 0x04A8
    31a4:	8f 5f       	subi	r24, 0xFF	; 255
    31a6:	80 93 a8 04 	sts	0x04A8, r24
            if(Errorcount>=10)
    31aa:	8a 30       	cpi	r24, 0x0A	; 10
    31ac:	b8 f0       	brcs	.+46     	; 0x31dc <task2+0x2ca>
            {

                SetBlink(PIN_OUT1,0x1002,B);
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	50 e0       	ldi	r21, 0x00	; 0
    31b2:	62 e0       	ldi	r22, 0x02	; 2
    31b4:	70 e1       	ldi	r23, 0x10	; 16
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 98 02 	call	0x530	; 0x530 <SetBlink>
                Sigout=0xff;
    31be:	8f ef       	ldi	r24, 0xFF	; 255
    31c0:	80 93 74 06 	sts	0x0674, r24
                SensorValue=0xff;
    31c4:	80 93 9b 04 	sts	0x049B, r24
                quality=0;
    31c8:	10 92 93 04 	sts	0x0493, r1
    31cc:	07 c0       	rjmp	.+14     	; 0x31dc <task2+0x2ca>
        {
            PopulateSSDbuffer("C ",96,0);;
        }
        else
        {
            PopulateSSDbuffer("C!",96,0);
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	60 e6       	ldi	r22, 0x60	; 96
    31d2:	8d e1       	ldi	r24, 0x1D	; 29
    31d4:	93 e0       	ldi	r25, 0x03	; 3
    31d6:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    31da:	c3 cf       	rjmp	.-122    	; 0x3162 <task2+0x250>


    }

    return 0;
}
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	27 96       	adiw	r28, 0x07	; 7
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	08 95       	ret

000031f4 <task3>:
uint16_t task3(void)
{
    Blink();
    31f4:	0e 94 bb 02 	call	0x576	; 0x576 <Blink>
    //



    return 0;
}
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	08 95       	ret

000031fe <task4>:
uint16_t task4(void)
{
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	00 d0       	rcall	.+0      	; 0x3204 <task4+0x6>
    3204:	1f 92       	push	r1
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    uint8_t value;
    static uint16_t countTask4;
    static uint8_t PreviousState,SWITCHCOUNT;
    uint8_t arr[3];
    arr[0]=0;
    320a:	19 82       	std	Y+1, r1	; 0x01
    arr[1]=1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	8a 83       	std	Y+2, r24	; 0x02
    arr[2]=2;
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	8b 83       	std	Y+3, r24	; 0x03
    ((uint16_t*)arr)[0]=SignalHandlerFunc(arr);
    3214:	ce 01       	movw	r24, r28
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	0e 94 db 11 	call	0x23b6	; 0x23b6 <SignalHandlerFunc>
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
    // RTE_WriteBufferUart("\n");
    char val[4]="255";

    if(arr[1]==2)
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	82 30       	cpi	r24, 0x02	; 2
    3224:	e9 f4       	brne	.+58     	; 0x3260 <task4+0x62>
    {
        //RTE_WriteBufferUart("data1");
        uart_num(arr[0]);
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
        uart_string("ON\n");
    322c:	81 e5       	ldi	r24, 0x51	; 81
    322e:	93 e0       	ldi	r25, 0x03	; 3
    3230:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <uart_string>
        switch (arr[0])
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	82 30       	cpi	r24, 0x02	; 2
    3238:	39 f0       	breq	.+14     	; 0x3248 <task4+0x4a>
    323a:	83 30       	cpi	r24, 0x03	; 3
    323c:	49 f0       	breq	.+18     	; 0x3250 <task4+0x52>
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	51 f4       	brne	.+20     	; 0x3256 <task4+0x58>
        {
        case 1:
            SwitchPressed=1;
    3242:	80 93 b6 04 	sts	0x04B6, r24
            /* Your code here */
            break;
    3246:	07 c0       	rjmp	.+14     	; 0x3256 <task4+0x58>
        case 2:
            SwitchPressed=2;
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	80 93 b6 04 	sts	0x04B6, r24
            break;
    324e:	03 c0       	rjmp	.+6      	; 0x3256 <task4+0x58>
        case 3:
            SwitchPressed=3;
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	80 93 b6 04 	sts	0x04B6, r24
        default:
            /* Your code here */
            break;
        }

        SWITCHCOUNT++;
    3256:	80 91 b7 04 	lds	r24, 0x04B7
    325a:	8f 5f       	subi	r24, 0xFF	; 255
    325c:	80 93 b7 04 	sts	0x04B7, r24
    }
    if(SWITCHCOUNT>2)
    3260:	80 91 b7 04 	lds	r24, 0x04B7
    3264:	83 30       	cpi	r24, 0x03	; 3
    3266:	10 f0       	brcs	.+4      	; 0x326c <task4+0x6e>
    {

        SWITCHCOUNT=0;
    3268:	10 92 b7 04 	sts	0x04B7, r1
    }


    countTask4++;
    326c:	80 91 b8 04 	lds	r24, 0x04B8
    3270:	90 91 b9 04 	lds	r25, 0x04B9
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	90 93 b9 04 	sts	0x04B9, r25
    327a:	80 93 b8 04 	sts	0x04B8, r24
    if(countTask4>=15000)
    327e:	88 39       	cpi	r24, 0x98	; 152
    3280:	9a 43       	sbci	r25, 0x3A	; 58
    3282:	e8 f0       	brcs	.+58     	; 0x32be <task4+0xc0>
    {
        hours.OperatingHours++;
    3284:	80 91 ba 04 	lds	r24, 0x04BA
    3288:	90 91 bb 04 	lds	r25, 0x04BB
    328c:	a0 91 bc 04 	lds	r26, 0x04BC
    3290:	b0 91 bd 04 	lds	r27, 0x04BD
    3294:	01 96       	adiw	r24, 0x01	; 1
    3296:	a1 1d       	adc	r26, r1
    3298:	b1 1d       	adc	r27, r1
    329a:	80 93 ba 04 	sts	0x04BA, r24
    329e:	90 93 bb 04 	sts	0x04BB, r25
    32a2:	a0 93 bc 04 	sts	0x04BC, r26
    32a6:	b0 93 bd 04 	sts	0x04BD, r27
        StoreNVM(Nvm_OH,(uint8_t*)&hours,0);;
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	6a eb       	ldi	r22, 0xBA	; 186
    32ae:	74 e0       	ldi	r23, 0x04	; 4
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <StoreNVM>
        countTask4=0;
    32b6:	10 92 b9 04 	sts	0x04B9, r1
    32ba:	10 92 b8 04 	sts	0x04B8, r1
    }

}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	08 95       	ret

000032ca <task5>:
uint16_t task5(void)
{
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <task5+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <task5+0x8>
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    f.LargestValue++;
    32d6:	80 91 be 04 	lds	r24, 0x04BE
    32da:	8f 5f       	subi	r24, 0xFF	; 255
    32dc:	80 93 be 04 	sts	0x04BE, r24
    }

    ESPRetVal RetVal;
    static uint8_t done=0,ConnectionLost,send=0;
    static uint16_t Tc;
    if(ConnectionLost==0)
    32e0:	80 91 bf 04 	lds	r24, 0x04BF
    32e4:	81 11       	cpse	r24, r1
    32e6:	a2 c0       	rjmp	.+324    	; 0x342c <task5+0x162>
    {
        if(ESP_flags.Server_flag==0 && done==0)
    32e8:	80 91 c0 04 	lds	r24, 0x04C0
    32ec:	82 fd       	sbrc	r24, 2
    32ee:	11 c0       	rjmp	.+34     	; 0x3312 <task5+0x48>
    32f0:	90 91 c1 04 	lds	r25, 0x04C1
    32f4:	91 11       	cpse	r25, r1
    32f6:	0d c0       	rjmp	.+26     	; 0x3312 <task5+0x48>
        {

            RetVal=ESPAsServer();
    32f8:	0e 94 96 04 	call	0x92c	; 0x92c <ESPAsServer>

            if(RetVal==ESP_CmdSndOK)
    32fc:	81 11       	cpse	r24, r1
    32fe:	7b c0       	rjmp	.+246    	; 0x33f6 <task5+0x12c>
            {
                ESP_flags.Server_flag=1;
    3300:	80 91 c0 04 	lds	r24, 0x04C0
    3304:	84 60       	ori	r24, 0x04	; 4
    3306:	80 93 c0 04 	sts	0x04C0, r24
                done=1;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	80 93 c1 04 	sts	0x04C1, r24
    3310:	7a c0       	rjmp	.+244    	; 0x3406 <task5+0x13c>
            }

        }
        else if(ESP_flags.Request_Flag==0 && done ==1)
    3312:	83 fd       	sbrc	r24, 3
    3314:	12 c0       	rjmp	.+36     	; 0x333a <task5+0x70>
    3316:	80 91 c1 04 	lds	r24, 0x04C1
    331a:	81 30       	cpi	r24, 0x01	; 1
    331c:	09 f0       	breq	.+2      	; 0x3320 <task5+0x56>
    331e:	6b c0       	rjmp	.+214    	; 0x33f6 <task5+0x12c>
        {
            //uart_string("DONE");
            if(RetVal==RequestWait())
    3320:	0e 94 91 05 	call	0xb22	; 0xb22 <RequestWait>
    3324:	81 11       	cpse	r24, r1
    3326:	67 c0       	rjmp	.+206    	; 0x33f6 <task5+0x12c>
            {
                ESP_flags.Request_Flag=1;
    3328:	80 91 c0 04 	lds	r24, 0x04C0
    332c:	88 60       	ori	r24, 0x08	; 8
    332e:	80 93 c0 04 	sts	0x04C0, r24
                done =2;
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	80 93 c1 04 	sts	0x04C1, r24
    3338:	66 c0       	rjmp	.+204    	; 0x3406 <task5+0x13c>
            }
        }

        else if(ESP_flags.Request_Flag==1&& done ==2)
    333a:	80 91 c1 04 	lds	r24, 0x04C1
    333e:	82 30       	cpi	r24, 0x02	; 2
    3340:	09 f0       	breq	.+2      	; 0x3344 <task5+0x7a>
    3342:	59 c0       	rjmp	.+178    	; 0x33f6 <task5+0x12c>
        {

            CheckInput();
    3344:	0e 94 2b 05 	call	0xa56	; 0xa56 <CheckInput>
            if(enable()==1)
    3348:	0e 94 b9 05 	call	0xb72	; 0xb72 <enable>
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	09 f0       	breq	.+2      	; 0x3352 <task5+0x88>
    3350:	52 c0       	rjmp	.+164    	; 0x33f6 <task5+0x12c>
            {
                Tc++;
    3352:	80 91 c2 04 	lds	r24, 0x04C2
    3356:	90 91 c3 04 	lds	r25, 0x04C3
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	90 93 c3 04 	sts	0x04C3, r25
    3360:	80 93 c2 04 	sts	0x04C2, r24
                if(send==0)
                {

                }

                if(Tc>400)
    3364:	81 39       	cpi	r24, 0x91	; 145
    3366:	91 40       	sbci	r25, 0x01	; 1
    3368:	08 f4       	brcc	.+2      	; 0x336c <task5+0xa2>
    336a:	45 c0       	rjmp	.+138    	; 0x33f6 <task5+0x12c>
                {
                    RetVal=SendData(36);
    336c:	84 e2       	ldi	r24, 0x24	; 36
    336e:	0e 94 17 05 	call	0xa2e	; 0xa2e <SendData>
                    if(/* &&*/ ESP_CmdSndOK==RetVal)
    3372:	81 11       	cpse	r24, r1
    3374:	40 c0       	rjmp	.+128    	; 0x33f6 <task5+0x12c>
                    {
                        send=0;
    3376:	10 92 c4 04 	sts	0x04C4, r1
                        Tc=0;
    337a:	10 92 c3 04 	sts	0x04C3, r1
    337e:	10 92 c2 04 	sts	0x04C2, r1
                        char val[4]="255";
    3382:	82 e3       	ldi	r24, 0x32	; 50
    3384:	95 e3       	ldi	r25, 0x35	; 53
    3386:	a5 e3       	ldi	r26, 0x35	; 53
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	9a 83       	std	Y+2, r25	; 0x02
    338e:	ab 83       	std	Y+3, r26	; 0x03
    3390:	bc 83       	std	Y+4, r27	; 0x04
                        val[3]='\0';
                        if(quality==100)
    3392:	80 91 93 04 	lds	r24, 0x0493
    3396:	84 36       	cpi	r24, 0x64	; 100
    3398:	31 f5       	brne	.+76     	; 0x33e6 <task5+0x11c>
                        {

                            val[3]='\0';
                            num2CharArray(SensorValue,val);
    339a:	be 01       	movw	r22, r28
    339c:	6f 5f       	subi	r22, 0xFF	; 255
    339e:	7f 4f       	sbci	r23, 0xFF	; 255
    33a0:	80 91 9b 04 	lds	r24, 0x049B
    33a4:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
                            RTE_WriteBufferUart("Water Level Monitor");
    33a8:	80 e2       	ldi	r24, 0x20	; 32
    33aa:	93 e0       	ldi	r25, 0x03	; 3
    33ac:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    33b0:	82 ec       	ldi	r24, 0xC2	; 194
    33b2:	92 e0       	ldi	r25, 0x02	; 2
    33b4:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("1.Level");
    33b8:	84 e3       	ldi	r24, 0x34	; 52
    33ba:	93 e0       	ldi	r25, 0x03	; 3
    33bc:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    33c0:	82 ec       	ldi	r24, 0xC2	; 194
    33c2:	92 e0       	ldi	r25, 0x02	; 2
    33c4:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("2.Debug");
    33c8:	8c e3       	ldi	r24, 0x3C	; 60
    33ca:	93 e0       	ldi	r25, 0x03	; 3
    33cc:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    33d0:	82 ec       	ldi	r24, 0xC2	; 194
    33d2:	92 e0       	ldi	r25, 0x02	; 2
    33d4:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            done=3;
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	80 93 c1 04 	sts	0x04C1, r24
                            EspConnected=1;
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	80 93 c5 04 	sts	0x04C5, r24
    33e4:	08 c0       	rjmp	.+16     	; 0x33f6 <task5+0x12c>
                            //printBuffer();
                        }
                        else
                        {
                            RTE_WriteBufferUart(val);
    33e6:	ce 01       	movw	r24, r28
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
                            RTE_WriteBufferUart("\n");
    33ee:	82 ec       	ldi	r24, 0xC2	; 194
    33f0:	92 e0       	ldi	r25, 0x02	; 2
    33f2:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>

                }
            }

        }
        if(done==3)
    33f6:	80 91 c1 04 	lds	r24, 0x04C1
    33fa:	83 30       	cpi	r24, 0x03	; 3
    33fc:	21 f4       	brne	.+8      	; 0x3406 <task5+0x13c>
        {
            task6(0);
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <task6>
        }
        if(ESP_CmdSndOK==WifiDisconnectCheck())
    3406:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <WifiDisconnectCheck>
    340a:	81 11       	cpse	r24, r1
    340c:	0f c0       	rjmp	.+30     	; 0x342c <task5+0x162>
        {
            ConnectionLost=1;
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	80 93 bf 04 	sts	0x04BF, r24
            SetBlink(PIN_OUT1,0x3028,B);
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	68 e2       	ldi	r22, 0x28	; 40
    341a:	70 e3       	ldi	r23, 0x30	; 48
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0e 94 98 02 	call	0x530	; 0x530 <SetBlink>
            RTE_WriteBufferUart("HEREOff\n");
    3424:	84 e4       	ldi	r24, 0x44	; 68
    3426:	93 e0       	ldi	r25, 0x03	; 3
    3428:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
        }
    }
    if(ESP_CmdSndOK==ConnectCommand())
    342c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ConnectCommand>
    3430:	81 11       	cpse	r24, r1
    3432:	16 c0       	rjmp	.+44     	; 0x3460 <task5+0x196>
    {
        RTE_WriteBufferUart("HEREON\n");
    3434:	8d e4       	ldi	r24, 0x4D	; 77
    3436:	93 e0       	ldi	r25, 0x03	; 3
    3438:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
        ConnectionLost=0;
    343c:	10 92 bf 04 	sts	0x04BF, r1
        ESP_flags.Server_flag=0;
    3440:	80 91 c0 04 	lds	r24, 0x04C0
        ESP_flags.Request_Flag=0;
    3444:	8b 7f       	andi	r24, 0xFB	; 251
    3446:	87 7f       	andi	r24, 0xF7	; 247
    3448:	80 93 c0 04 	sts	0x04C0, r24
        done=0;
    344c:	10 92 c1 04 	sts	0x04C1, r1
        SetBlink(PIN_OUT1,0x3000,B);
    3450:	40 e0       	ldi	r20, 0x00	; 0
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	70 e3       	ldi	r23, 0x30	; 48
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 98 02 	call	0x530	; 0x530 <SetBlink>
    }
}
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	08 95       	ret

0000346e <task1Open>:
    return 0;
}
uint16_t task1Open(void)
{

    PinOutConfig(0,PIN_OUT2,C);
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    PinOutConfig(0,PIN_OUT3,C);
    3478:	41 e0       	ldi	r20, 0x01	; 1
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    PinOutConfig(1,PIN_OUT1,B);
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    //uart_string("In open 1");

    return 0;
}
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	08 95       	ret

00003492 <task2Open>:
uint16_t task2Open(void)
{

    //uart_string("In open 2");
    PinOutConfig(0,PIN_OUT2,B);
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    PinOutput(1,PIN_OUT2,B);
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	61 e0       	ldi	r22, 0x01	; 1
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
    PinOutConfig(1,PIN_OUT1,B);
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    PinOutConfig(1,PIN_OUT8,D);
    34b0:	42 e0       	ldi	r20, 0x02	; 2
    34b2:	67 e0       	ldi	r22, 0x07	; 7
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>

    return 0;
}
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	08 95       	ret

000034c0 <task3Open>:
uint16_t task3Open(void)
{
    uart_string("In open 3");
    34c0:	85 e5       	ldi	r24, 0x55	; 85
    34c2:	93 e0       	ldi	r25, 0x03	; 3
    34c4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <uart_string>
    uart_num(countSize());
    34c8:	0e 94 c1 12 	call	0x2582	; 0x2582 <countSize>
    34cc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    return 0;
}
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	08 95       	ret

000034d6 <task4Open>:
uint16_t task4Open(void)
{
    static uint16_t tracker;
    tracker++;
    34d6:	80 91 cb 04 	lds	r24, 0x04CB
    34da:	90 91 cc 04 	lds	r25, 0x04CC
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	90 93 cc 04 	sts	0x04CC, r25
    34e4:	80 93 cb 04 	sts	0x04CB, r24
    if(tracker>500)
    34e8:	85 3f       	cpi	r24, 0xF5	; 245
    34ea:	91 40       	sbci	r25, 0x01	; 1
    34ec:	40 f0       	brcs	.+16     	; 0x34fe <task4Open+0x28>
    {
        RTE_WriteBufferUart("open4");
    34ee:	8f e5       	ldi	r24, 0x5F	; 95
    34f0:	93 e0       	ldi	r25, 0x03	; 3
    34f2:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <Rte_Uart_WriteBuffer>
        //uart_string("open4c");
        tracker=0;
    34f6:	10 92 cc 04 	sts	0x04CC, r1
    34fa:	10 92 cb 04 	sts	0x04CB, r1
    }

    PinOutConfig(0,PIN_OUT3,B);
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	62 e0       	ldi	r22, 0x02	; 2
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    PinOutConfig(1,PIN_OUT7,D);
    3508:	42 e0       	ldi	r20, 0x02	; 2
    350a:	66 e0       	ldi	r22, 0x06	; 6
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PinOutConfig>
    PinOutput(1,PIN_OUT3,B);
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	62 e0       	ldi	r22, 0x02	; 2
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
    PinOutput(0,PIN_OUT7,D);
    351c:	42 e0       	ldi	r20, 0x02	; 2
    351e:	66 e0       	ldi	r22, 0x06	; 6
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	0e 94 77 09 	call	0x12ee	; 0x12ee <PinOutput>
    return 0;
}
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	08 95       	ret

0000352c <task5Open>:

uint16_t task5Open(void)
{
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	00 d0       	rcall	.+0      	; 0x3536 <task5Open+0xa>
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    353a:	2f e7       	ldi	r18, 0x7F	; 127
    353c:	8a e1       	ldi	r24, 0x1A	; 26
    353e:	96 e0       	ldi	r25, 0x06	; 6
    3540:	21 50       	subi	r18, 0x01	; 1
    3542:	80 40       	sbci	r24, 0x00	; 0
    3544:	90 40       	sbci	r25, 0x00	; 0
    3546:	e1 f7       	brne	.-8      	; 0x3540 <task5Open+0x14>
    3548:	00 c0       	rjmp	.+0      	; 0x354a <task5Open+0x1e>
    354a:	00 00       	nop
    _delay_ms(2000);
    uart_init();
    354c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <uart_init>
    PushEventInterface(125,ESPreadvalue,0,0);
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	40 e0       	ldi	r20, 0x00	; 0
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	6d ee       	ldi	r22, 0xED	; 237
    3558:	72 e0       	ldi	r23, 0x02	; 2
    355a:	8d e7       	ldi	r24, 0x7D	; 125
    355c:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    PushEventInterface(175,SignalHandlerFunc,0,0);
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	6b ed       	ldi	r22, 0xDB	; 219
    3568:	71 e1       	ldi	r23, 0x11	; 17
    356a:	8f ea       	ldi	r24, 0xAF	; 175
    356c:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
    uint16_t Address;
    Address=task6;
    3570:	8b ed       	ldi	r24, 0xDB	; 219
    3572:	95 e1       	ldi	r25, 0x15	; 21
    3574:	9a 83       	std	Y+2, r25	; 0x02
    3576:	89 83       	std	Y+1, r24	; 0x01
    ESPCallBack(&Address);
    3578:	ce 01       	movw	r24, r28
    357a:	01 96       	adiw	r24, 0x01	; 1
    357c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ESPCallBack>
    OutPutVariableRegister(&SensorValue,1,0);
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	8b e9       	ldi	r24, 0x9B	; 155
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <OutPutVariableRegister>
    OutPutVariableRegister(&hours,4,1);
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	64 e0       	ldi	r22, 0x04	; 4
    3590:	8a eb       	ldi	r24, 0xBA	; 186
    3592:	94 e0       	ldi	r25, 0x04	; 4
    3594:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <OutPutVariableRegister>
    i2c_init();
    3598:	0e 94 52 07 	call	0xea4	; 0xea4 <i2c_init>
    uart_num(i2c_start(0x78));
    359c:	88 e7       	ldi	r24, 0x78	; 120
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 62 07 	call	0xec4	; 0xec4 <i2c_start>
    35a4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    uart_num(ssd1036_Init());
    35a8:	0e 94 ff 07 	call	0xffe	; 0xffe <ssd1036_Init>
    35ac:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    uart_num(ssd1036_chumma());
    35b0:	0e 94 06 08 	call	0x100c	; 0x100c <ssd1036_chumma>
    35b4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    35b8:	00 e0       	ldi	r16, 0x00	; 0
    35ba:	14 e0       	ldi	r17, 0x04	; 4
    for(uint16_t i=0; i<1024; i++)
    {
        ssd1036_chumma();
    35bc:	0e 94 06 08 	call	0x100c	; 0x100c <ssd1036_chumma>
    35c0:	01 50       	subi	r16, 0x01	; 1
    35c2:	11 09       	sbc	r17, r1
    OutPutVariableRegister(&hours,4,1);
    i2c_init();
    uart_num(i2c_start(0x78));
    uart_num(ssd1036_Init());
    uart_num(ssd1036_chumma());
    for(uint16_t i=0; i<1024; i++)
    35c4:	d9 f7       	brne	.-10     	; 0x35bc <task5Open+0x90>
    }
    */
    //ssd1306_Rectangle(0,5);
    // ssd1306_String_font6x8("Menu",0,7);
    //ssd1306_String_font6x8("Back",(127-6*4),7);
    uart_string("In open 5");
    35c6:	85 e6       	ldi	r24, 0x65	; 101
    35c8:	93 e0       	ldi	r25, 0x03	; 3
    35ca:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <uart_string>
    while(NvmReadSync(Nvm_OH,&hours)!=0)
    35ce:	6a eb       	ldi	r22, 0xBA	; 186
    35d0:	74 e0       	ldi	r23, 0x04	; 4
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	0e 94 b1 11 	call	0x2362	; 0x2362 <NvmReadSync>
    35d8:	81 11       	cpse	r24, r1
    35da:	f9 cf       	rjmp	.-14     	; 0x35ce <task5Open+0xa2>
    {

    }
    uint8_t * point=(uint8_t *)&hours.OperatingHours;
    uart_num(point[0]);
    35dc:	0a eb       	ldi	r16, 0xBA	; 186
    35de:	14 e0       	ldi	r17, 0x04	; 4
    35e0:	f8 01       	movw	r30, r16
    35e2:	80 81       	ld	r24, Z
    35e4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    uart_num(point[1]);
    35e8:	f8 01       	movw	r30, r16
    35ea:	81 81       	ldd	r24, Z+1	; 0x01
    35ec:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    uart_num(point[2]);
    35f0:	f8 01       	movw	r30, r16
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    uart_num(point[3]);
    35f8:	f8 01       	movw	r30, r16
    35fa:	83 81       	ldd	r24, Z+3	; 0x03
    35fc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <uart_num>
    while(NvmReadSync(Nvm_TankHeight,&TankHeight)!=0)
    3600:	6d ec       	ldi	r22, 0xCD	; 205
    3602:	74 e0       	ldi	r23, 0x04	; 4
    3604:	84 e0       	ldi	r24, 0x04	; 4
    3606:	0e 94 b1 11 	call	0x2362	; 0x2362 <NvmReadSync>
    360a:	81 11       	cpse	r24, r1
    360c:	f9 cf       	rjmp	.-14     	; 0x3600 <task5Open+0xd4>
    {

    }
    while(NvmReadSync(Nvm_TankOverflowLevel,&TankUpperThresh)!=0)
    360e:	6e ec       	ldi	r22, 0xCE	; 206
    3610:	74 e0       	ldi	r23, 0x04	; 4
    3612:	83 e0       	ldi	r24, 0x03	; 3
    3614:	0e 94 b1 11 	call	0x2362	; 0x2362 <NvmReadSync>
    3618:	81 11       	cpse	r24, r1
    361a:	f9 cf       	rjmp	.-14     	; 0x360e <task5Open+0xe2>
    {

    }

    static Nvm_T_TankOverflow Tankov;
    ESP_Init();
    361c:	0e 94 86 03 	call	0x70c	; 0x70c <ESP_Init>

    //Tankov.Tank=2;
    a.LargestValue=52;
    3620:	84 e3       	ldi	r24, 0x34	; 52
    3622:	80 93 cf 04 	sts	0x04CF, r24
    f.LargestValue=48;
    3626:	80 e3       	ldi	r24, 0x30	; 48
    3628:	80 93 be 04 	sts	0x04BE, r24
    c.LargestValue=54;
    362c:	86 e3       	ldi	r24, 0x36	; 54
    362e:	80 93 d0 04 	sts	0x04D0, r24

    return 0;
}
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	08 95       	ret

00003644 <HookupTasks>:
    //uart_num(event);
    //uart_string("\n");
    //if(event==0x01)
    //{

    if(UartEvents==0x01)
    3644:	80 91 f6 04 	lds	r24, 0x04F6
    3648:	81 30       	cpi	r24, 0x01	; 1
    364a:	11 f0       	breq	.+4      	; 0x3650 <HookupTasks+0xc>
        //DebugMode();
    }
    else
    {
        // ESPreadvalue(PopInterface);
        checkRecievedData();
    364c:	0e 94 bc 05 	call	0xb78	; 0xb78 <checkRecievedData>
    3650:	08 95       	ret

00003652 <TaskFrames>:
    Ustring[2]=(O+48);
}


uint16_t TaskFrames()
{
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	00 d0       	rcall	.+0      	; 0x3658 <TaskFrames+0x6>
    3658:	00 d0       	rcall	.+0      	; 0x365a <TaskFrames+0x8>
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    static uint8_t FrameNo,SubframeNo,SubSubframe;
    char val[4]="255";
    365e:	82 e3       	ldi	r24, 0x32	; 50
    3660:	95 e3       	ldi	r25, 0x35	; 53
    3662:	a5 e3       	ldi	r26, 0x35	; 53
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	ab 83       	std	Y+3, r26	; 0x03
    366c:	bc 83       	std	Y+4, r27	; 0x04
    switch (FrameNo)
    366e:	80 91 d1 04 	lds	r24, 0x04D1
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	89 f0       	breq	.+34     	; 0x3698 <TaskFrames+0x46>
    3676:	30 f0       	brcs	.+12     	; 0x3684 <TaskFrames+0x32>
    3678:	82 30       	cpi	r24, 0x02	; 2
    367a:	49 f1       	breq	.+82     	; 0x36ce <TaskFrames+0x7c>
    367c:	83 30       	cpi	r24, 0x03	; 3
    367e:	09 f0       	breq	.+2      	; 0x3682 <TaskFrames+0x30>
    3680:	24 c3       	rjmp	.+1608   	; 0x3cca <TaskFrames+0x678>
    3682:	2f c0       	rjmp	.+94     	; 0x36e2 <TaskFrames+0x90>
    {
    case 0:
        SSDSetFramePos(0);
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 47 0b 	call	0x168e	; 0x168e <SSDSetFramePos>
        FrameNo++;
    368c:	80 91 d1 04 	lds	r24, 0x04D1
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	80 93 d1 04 	sts	0x04D1, r24
        break;
    3696:	19 c3       	rjmp	.+1586   	; 0x3cca <TaskFrames+0x678>
    case 1:
        num2CharArray(SensorValue,val);
    3698:	be 01       	movw	r22, r28
    369a:	6f 5f       	subi	r22, 0xFF	; 255
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	80 91 9b 04 	lds	r24, 0x049B
    36a2:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
        val[3]='\0';
    36a6:	1c 82       	std	Y+4, r1	; 0x04
        PopulateSSDbuffer(val,66,2);
    36a8:	42 e0       	ldi	r20, 0x02	; 2
    36aa:	62 e4       	ldi	r22, 0x42	; 66
    36ac:	ce 01       	movw	r24, r28
    36ae:	01 96       	adiw	r24, 0x01	; 1
    36b0:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
        if(SwitchPressed==1)
    36b4:	80 91 b6 04 	lds	r24, 0x04B6
    36b8:	81 30       	cpi	r24, 0x01	; 1
    36ba:	09 f0       	breq	.+2      	; 0x36be <TaskFrames+0x6c>
    36bc:	06 c3       	rjmp	.+1548   	; 0x3cca <TaskFrames+0x678>
        {
            FrameNo++;
    36be:	80 91 d1 04 	lds	r24, 0x04D1
    36c2:	8f 5f       	subi	r24, 0xFF	; 255
    36c4:	80 93 d1 04 	sts	0x04D1, r24
            SwitchPressed=0;
    36c8:	10 92 b6 04 	sts	0x04B6, r1
    36cc:	fe c2       	rjmp	.+1532   	; 0x3cca <TaskFrames+0x678>
        }
        break;
    case 2:
        SSDSetFramePos(1);
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 47 0b 	call	0x168e	; 0x168e <SSDSetFramePos>
        FrameNo++;
    36d6:	80 91 d1 04 	lds	r24, 0x04D1
    36da:	8f 5f       	subi	r24, 0xFF	; 255
    36dc:	80 93 d1 04 	sts	0x04D1, r24
        break;
    36e0:	f4 c2       	rjmp	.+1512   	; 0x3cca <TaskFrames+0x678>
    case 3:
        switch (SubframeNo)
    36e2:	80 91 d2 04 	lds	r24, 0x04D2
    36e6:	83 30       	cpi	r24, 0x03	; 3
    36e8:	09 f4       	brne	.+2      	; 0x36ec <TaskFrames+0x9a>
    36ea:	00 c1       	rjmp	.+512    	; 0x38ec <TaskFrames+0x29a>
    36ec:	28 f4       	brcc	.+10     	; 0x36f8 <TaskFrames+0xa6>
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	11 f1       	breq	.+68     	; 0x3736 <TaskFrames+0xe4>
    36f2:	08 f0       	brcs	.+2      	; 0x36f6 <TaskFrames+0xa4>
    36f4:	45 c0       	rjmp	.+138    	; 0x3780 <TaskFrames+0x12e>
    36f6:	0c c0       	rjmp	.+24     	; 0x3710 <TaskFrames+0xbe>
    36f8:	85 30       	cpi	r24, 0x05	; 5
    36fa:	09 f4       	brne	.+2      	; 0x36fe <TaskFrames+0xac>
    36fc:	fe c1       	rjmp	.+1020   	; 0x3afa <TaskFrames+0x4a8>
    36fe:	08 f4       	brcc	.+2      	; 0x3702 <TaskFrames+0xb0>
    3700:	1c c1       	rjmp	.+568    	; 0x393a <TaskFrames+0x2e8>
    3702:	86 30       	cpi	r24, 0x06	; 6
    3704:	09 f4       	brne	.+2      	; 0x3708 <TaskFrames+0xb6>
    3706:	20 c2       	rjmp	.+1088   	; 0x3b48 <TaskFrames+0x4f6>
    3708:	87 30       	cpi	r24, 0x07	; 7
    370a:	09 f0       	breq	.+2      	; 0x370e <TaskFrames+0xbc>
    370c:	de c2       	rjmp	.+1468   	; 0x3cca <TaskFrames+0x678>
    370e:	bc c2       	rjmp	.+1400   	; 0x3c88 <TaskFrames+0x636>
        {
        case 0:
            if(SwitchPressed==1)
    3710:	80 91 b6 04 	lds	r24, 0x04B6
    3714:	81 30       	cpi	r24, 0x01	; 1
    3716:	09 f0       	breq	.+2      	; 0x371a <TaskFrames+0xc8>
    3718:	d8 c2       	rjmp	.+1456   	; 0x3cca <TaskFrames+0x678>
            {
                PopulateSSDbuffer("#",0,2);
    371a:	42 e0       	ldi	r20, 0x02	; 2
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	8c ef       	ldi	r24, 0xFC	; 252
    3720:	92 e0       	ldi	r25, 0x02	; 2
    3722:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                SubframeNo++;
    3726:	80 91 d2 04 	lds	r24, 0x04D2
    372a:	8f 5f       	subi	r24, 0xFF	; 255
    372c:	80 93 d2 04 	sts	0x04D2, r24
                SwitchPressed=0;
    3730:	10 92 b6 04 	sts	0x04B6, r1
    3734:	ca c2       	rjmp	.+1428   	; 0x3cca <TaskFrames+0x678>
            }
            break;
        case 1:
            BlinkSelection(0,2,"1");
    3736:	40 ef       	ldi	r20, 0xF0	; 240
    3738:	52 e0       	ldi	r21, 0x02	; 2
    373a:	62 e0       	ldi	r22, 0x02	; 2
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
            if(SwitchPressed==2||SwitchPressed==3)
    3742:	80 91 b6 04 	lds	r24, 0x04B6
    3746:	98 2f       	mov	r25, r24
    3748:	92 50       	subi	r25, 0x02	; 2
    374a:	92 30       	cpi	r25, 0x02	; 2
    374c:	50 f4       	brcc	.+20     	; 0x3762 <TaskFrames+0x110>
            {
                //FrameNo=2;
                SubframeNo=2;
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	80 93 d2 04 	sts	0x04D2, r24
                SSDSetFramePos(2);
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	0e 94 47 0b 	call	0x168e	; 0x168e <SSDSetFramePos>
                SwitchPressed=0;
    375c:	10 92 b6 04 	sts	0x04B6, r1
    3760:	b4 c2       	rjmp	.+1384   	; 0x3cca <TaskFrames+0x678>
            }
            else if(SwitchPressed==1)
    3762:	81 30       	cpi	r24, 0x01	; 1
    3764:	09 f0       	breq	.+2      	; 0x3768 <TaskFrames+0x116>
    3766:	b1 c2       	rjmp	.+1378   	; 0x3cca <TaskFrames+0x678>
            {
                SubframeNo=3;
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	80 93 d2 04 	sts	0x04D2, r24
                SwitchPressed=0;
    376e:	10 92 b6 04 	sts	0x04B6, r1
                PopulateSSDbuffer("1",0,2);
    3772:	42 e0       	ldi	r20, 0x02	; 2
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	80 ef       	ldi	r24, 0xF0	; 240
    3778:	92 e0       	ldi	r25, 0x02	; 2
    377a:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    377e:	a5 c2       	rjmp	.+1354   	; 0x3cca <TaskFrames+0x678>
            }
            break;
        case 2:
            switch (SubSubframe)
    3780:	80 91 d3 04 	lds	r24, 0x04D3
    3784:	82 30       	cpi	r24, 0x02	; 2
    3786:	09 f4       	brne	.+2      	; 0x378a <TaskFrames+0x138>
    3788:	3f c0       	rjmp	.+126    	; 0x3808 <TaskFrames+0x1b6>
    378a:	30 f4       	brcc	.+12     	; 0x3798 <TaskFrames+0x146>
    378c:	88 23       	and	r24, r24
    378e:	59 f0       	breq	.+22     	; 0x37a6 <TaskFrames+0x154>
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	09 f0       	breq	.+2      	; 0x3796 <TaskFrames+0x144>
    3794:	9a c2       	rjmp	.+1332   	; 0x3cca <TaskFrames+0x678>
    3796:	11 c0       	rjmp	.+34     	; 0x37ba <TaskFrames+0x168>
    3798:	83 30       	cpi	r24, 0x03	; 3
    379a:	09 f4       	brne	.+2      	; 0x379e <TaskFrames+0x14c>
    379c:	5c c0       	rjmp	.+184    	; 0x3856 <TaskFrames+0x204>
    379e:	84 30       	cpi	r24, 0x04	; 4
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <TaskFrames+0x152>
    37a2:	93 c2       	rjmp	.+1318   	; 0x3cca <TaskFrames+0x678>
    37a4:	7f c0       	rjmp	.+254    	; 0x38a4 <TaskFrames+0x252>
            {
            case 0:
                if(SwitchPressed==1)
    37a6:	80 91 b6 04 	lds	r24, 0x04B6
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <TaskFrames+0x15e>
    37ae:	8d c2       	rjmp	.+1306   	; 0x3cca <TaskFrames+0x678>
                {
                    SwitchPressed=0;
    37b0:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    37b4:	80 93 d3 04 	sts	0x04D3, r24
    37b8:	88 c2       	rjmp	.+1296   	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 1:

                if(SwitchPressed==2||SwitchPressed==3)
    37ba:	80 91 b6 04 	lds	r24, 0x04B6
    37be:	98 2f       	mov	r25, r24
    37c0:	92 50       	subi	r25, 0x02	; 2
    37c2:	92 30       	cpi	r25, 0x02	; 2
    37c4:	60 f4       	brcc	.+24     	; 0x37de <TaskFrames+0x18c>
                {
                    PopulateSSDbuffer("o",60,2);
    37c6:	42 e0       	ldi	r20, 0x02	; 2
    37c8:	6c e3       	ldi	r22, 0x3C	; 60
    37ca:	8f e6       	ldi	r24, 0x6F	; 111
    37cc:	93 e0       	ldi	r25, 0x03	; 3
    37ce:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    SwitchPressed=0;
    37d2:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=4;
    37d6:	84 e0       	ldi	r24, 0x04	; 4
    37d8:	80 93 d3 04 	sts	0x04D3, r24
    37dc:	76 c2       	rjmp	.+1260   	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    37de:	81 30       	cpi	r24, 0x01	; 1
    37e0:	61 f4       	brne	.+24     	; 0x37fa <TaskFrames+0x1a8>
                {
                    SwitchPressed=0;
    37e2:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("1",0,2);
    37ec:	42 e0       	ldi	r20, 0x02	; 2
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	80 ef       	ldi	r24, 0xF0	; 240
    37f2:	92 e0       	ldi	r25, 0x02	; 2
    37f4:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    37f8:	68 c2       	rjmp	.+1232   	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,2,"1");
    37fa:	40 ef       	ldi	r20, 0xF0	; 240
    37fc:	52 e0       	ldi	r21, 0x02	; 2
    37fe:	62 e0       	ldi	r22, 0x02	; 2
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3806:	61 c2       	rjmp	.+1218   	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 2:
                if(SwitchPressed==2||SwitchPressed==3)
    3808:	80 91 b6 04 	lds	r24, 0x04B6
    380c:	98 2f       	mov	r25, r24
    380e:	92 50       	subi	r25, 0x02	; 2
    3810:	92 30       	cpi	r25, 0x02	; 2
    3812:	60 f4       	brcc	.+24     	; 0x382c <TaskFrames+0x1da>
                {
                    PopulateSSDbuffer("o",60,3);
    3814:	43 e0       	ldi	r20, 0x03	; 3
    3816:	6c e3       	ldi	r22, 0x3C	; 60
    3818:	8f e6       	ldi	r24, 0x6F	; 111
    381a:	93 e0       	ldi	r25, 0x03	; 3
    381c:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    SwitchPressed=0;
    3820:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=4;
    3824:	84 e0       	ldi	r24, 0x04	; 4
    3826:	80 93 d3 04 	sts	0x04D3, r24
    382a:	4f c2       	rjmp	.+1182   	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    382c:	81 30       	cpi	r24, 0x01	; 1
    382e:	61 f4       	brne	.+24     	; 0x3848 <TaskFrames+0x1f6>
                {
                    SwitchPressed=0;
    3830:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    3834:	83 e0       	ldi	r24, 0x03	; 3
    3836:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("2",0,3);
    383a:	43 e0       	ldi	r20, 0x03	; 3
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	8a ee       	ldi	r24, 0xEA	; 234
    3840:	92 e0       	ldi	r25, 0x02	; 2
    3842:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3846:	41 c2       	rjmp	.+1154   	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,3,"2");
    3848:	4a ee       	ldi	r20, 0xEA	; 234
    384a:	52 e0       	ldi	r21, 0x02	; 2
    384c:	63 e0       	ldi	r22, 0x03	; 3
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3854:	3a c2       	rjmp	.+1140   	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 3:
                if(SwitchPressed==2||SwitchPressed==3)
    3856:	80 91 b6 04 	lds	r24, 0x04B6
    385a:	98 2f       	mov	r25, r24
    385c:	92 50       	subi	r25, 0x02	; 2
    385e:	92 30       	cpi	r25, 0x02	; 2
    3860:	60 f4       	brcc	.+24     	; 0x387a <TaskFrames+0x228>
                {
                    PopulateSSDbuffer("o",60,4);
    3862:	44 e0       	ldi	r20, 0x04	; 4
    3864:	6c e3       	ldi	r22, 0x3C	; 60
    3866:	8f e6       	ldi	r24, 0x6F	; 111
    3868:	93 e0       	ldi	r25, 0x03	; 3
    386a:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    SwitchPressed=0;
    386e:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=4;
    3872:	84 e0       	ldi	r24, 0x04	; 4
    3874:	80 93 d3 04 	sts	0x04D3, r24
    3878:	28 c2       	rjmp	.+1104   	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	61 f4       	brne	.+24     	; 0x3896 <TaskFrames+0x244>
                {
                    SwitchPressed=0;
    387e:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    3882:	84 e0       	ldi	r24, 0x04	; 4
    3884:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("3",0,4);
    3888:	44 e0       	ldi	r20, 0x04	; 4
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	8d e5       	ldi	r24, 0x5D	; 93
    388e:	93 e0       	ldi	r25, 0x03	; 3
    3890:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3894:	1a c2       	rjmp	.+1076   	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,4,"3");
    3896:	4d e5       	ldi	r20, 0x5D	; 93
    3898:	53 e0       	ldi	r21, 0x03	; 3
    389a:	64 e0       	ldi	r22, 0x04	; 4
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    38a2:	13 c2       	rjmp	.+1062   	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 4:
                if(SwitchPressed==2||SwitchPressed==3)
    38a4:	80 91 b6 04 	lds	r24, 0x04B6
    38a8:	98 2f       	mov	r25, r24
    38aa:	92 50       	subi	r25, 0x02	; 2
    38ac:	92 30       	cpi	r25, 0x02	; 2
    38ae:	50 f4       	brcc	.+20     	; 0x38c4 <TaskFrames+0x272>
                {
                    FrameNo=2;
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	80 93 d1 04 	sts	0x04D1, r24
                    SubframeNo=0;
    38b6:	10 92 d2 04 	sts	0x04D2, r1
                    SwitchPressed=0;
    38ba:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=0;
    38be:	10 92 d3 04 	sts	0x04D3, r1
    38c2:	03 c2       	rjmp	.+1030   	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	59 f4       	brne	.+22     	; 0x38de <TaskFrames+0x28c>
                {
                    SwitchPressed=0;
    38c8:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=0;
    38cc:	10 92 d3 04 	sts	0x04D3, r1
                    PopulateSSDbuffer("BACK",48,7);
    38d0:	47 e0       	ldi	r20, 0x07	; 7
    38d2:	60 e3       	ldi	r22, 0x30	; 48
    38d4:	81 e7       	ldi	r24, 0x71	; 113
    38d6:	93 e0       	ldi	r25, 0x03	; 3
    38d8:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    38dc:	f6 c1       	rjmp	.+1004   	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(48,7,"BACK ");
    38de:	46 e7       	ldi	r20, 0x76	; 118
    38e0:	53 e0       	ldi	r21, 0x03	; 3
    38e2:	67 e0       	ldi	r22, 0x07	; 7
    38e4:	80 e3       	ldi	r24, 0x30	; 48
    38e6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    38ea:	ef c1       	rjmp	.+990    	; 0x3cca <TaskFrames+0x678>
                /*Your code here */
                break;
            }
            break;
        case 3:
            BlinkSelection(0,3,"2");
    38ec:	4a ee       	ldi	r20, 0xEA	; 234
    38ee:	52 e0       	ldi	r21, 0x02	; 2
    38f0:	63 e0       	ldi	r22, 0x03	; 3
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
            if(SwitchPressed==2||SwitchPressed==3)
    38f8:	80 91 b6 04 	lds	r24, 0x04B6
    38fc:	98 2f       	mov	r25, r24
    38fe:	92 50       	subi	r25, 0x02	; 2
    3900:	92 30       	cpi	r25, 0x02	; 2
    3902:	60 f4       	brcc	.+24     	; 0x391c <TaskFrames+0x2ca>
            {
                //FrameNo=2;
                SubframeNo=4;
    3904:	84 e0       	ldi	r24, 0x04	; 4
    3906:	80 93 d2 04 	sts	0x04D2, r24
                SubSubframe=0;
    390a:	10 92 d3 04 	sts	0x04D3, r1
                SSDSetFramePos(3);
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	0e 94 47 0b 	call	0x168e	; 0x168e <SSDSetFramePos>
                SwitchPressed=0;
    3916:	10 92 b6 04 	sts	0x04B6, r1
    391a:	d7 c1       	rjmp	.+942    	; 0x3cca <TaskFrames+0x678>

            }
            else if(SwitchPressed==1)
    391c:	81 30       	cpi	r24, 0x01	; 1
    391e:	09 f0       	breq	.+2      	; 0x3922 <TaskFrames+0x2d0>
    3920:	d4 c1       	rjmp	.+936    	; 0x3cca <TaskFrames+0x678>
            {
                SwitchPressed=0;
    3922:	10 92 b6 04 	sts	0x04B6, r1
                SubframeNo=5;
    3926:	85 e0       	ldi	r24, 0x05	; 5
    3928:	80 93 d2 04 	sts	0x04D2, r24
                PopulateSSDbuffer("2",0,3);
    392c:	43 e0       	ldi	r20, 0x03	; 3
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	8a ee       	ldi	r24, 0xEA	; 234
    3932:	92 e0       	ldi	r25, 0x02	; 2
    3934:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3938:	c8 c1       	rjmp	.+912    	; 0x3cca <TaskFrames+0x678>
            }
            break;
        case 4:
            switch (SubSubframe)
    393a:	80 91 d3 04 	lds	r24, 0x04D3
    393e:	82 30       	cpi	r24, 0x02	; 2
    3940:	09 f4       	brne	.+2      	; 0x3944 <TaskFrames+0x2f2>
    3942:	6c c0       	rjmp	.+216    	; 0x3a1c <TaskFrames+0x3ca>
    3944:	30 f4       	brcc	.+12     	; 0x3952 <TaskFrames+0x300>
    3946:	88 23       	and	r24, r24
    3948:	69 f0       	breq	.+26     	; 0x3964 <TaskFrames+0x312>
    394a:	81 30       	cpi	r24, 0x01	; 1
    394c:	09 f0       	breq	.+2      	; 0x3950 <TaskFrames+0x2fe>
    394e:	bd c1       	rjmp	.+890    	; 0x3cca <TaskFrames+0x678>
    3950:	32 c0       	rjmp	.+100    	; 0x39b6 <TaskFrames+0x364>
    3952:	84 30       	cpi	r24, 0x04	; 4
    3954:	09 f4       	brne	.+2      	; 0x3958 <TaskFrames+0x306>
    3956:	9b c0       	rjmp	.+310    	; 0x3a8e <TaskFrames+0x43c>
    3958:	08 f4       	brcc	.+2      	; 0x395c <TaskFrames+0x30a>
    395a:	87 c0       	rjmp	.+270    	; 0x3a6a <TaskFrames+0x418>
    395c:	85 30       	cpi	r24, 0x05	; 5
    395e:	09 f0       	breq	.+2      	; 0x3962 <TaskFrames+0x310>
    3960:	b4 c1       	rjmp	.+872    	; 0x3cca <TaskFrames+0x678>
    3962:	a7 c0       	rjmp	.+334    	; 0x3ab2 <TaskFrames+0x460>
            {
            case 0:
                if(SwitchPressed==1)
    3964:	80 91 b6 04 	lds	r24, 0x04B6
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	09 f0       	breq	.+2      	; 0x396e <TaskFrames+0x31c>
    396c:	ae c1       	rjmp	.+860    	; 0x3cca <TaskFrames+0x678>
                {
                    num2CharArray(TankHeight,val);
    396e:	be 01       	movw	r22, r28
    3970:	6f 5f       	subi	r22, 0xFF	; 255
    3972:	7f 4f       	sbci	r23, 0xFF	; 255
    3974:	80 91 cd 04 	lds	r24, 0x04CD
    3978:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
                    val[3]='\0';
    397c:	1c 82       	std	Y+4, r1	; 0x04
                    PopulateSSDbuffer(val,76,2);
    397e:	42 e0       	ldi	r20, 0x02	; 2
    3980:	6c e4       	ldi	r22, 0x4C	; 76
    3982:	ce 01       	movw	r24, r28
    3984:	01 96       	adiw	r24, 0x01	; 1
    3986:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    num2CharArray(TankUpperThresh,val);
    398a:	be 01       	movw	r22, r28
    398c:	6f 5f       	subi	r22, 0xFF	; 255
    398e:	7f 4f       	sbci	r23, 0xFF	; 255
    3990:	80 91 ce 04 	lds	r24, 0x04CE
    3994:	0e 94 95 14 	call	0x292a	; 0x292a <num2CharArray>
                    val[3]='\0';
    3998:	1c 82       	std	Y+4, r1	; 0x04
                    PopulateSSDbuffer(val,76,3);
    399a:	43 e0       	ldi	r20, 0x03	; 3
    399c:	6c e4       	ldi	r22, 0x4C	; 76
    399e:	ce 01       	movw	r24, r28
    39a0:	01 96       	adiw	r24, 0x01	; 1
    39a2:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    SwitchPressed=0;
    39a6:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    39aa:	80 91 d3 04 	lds	r24, 0x04D3
    39ae:	8f 5f       	subi	r24, 0xFF	; 255
    39b0:	80 93 d3 04 	sts	0x04D3, r24
    39b4:	8a c1       	rjmp	.+788    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 1:

                if(SwitchPressed==2||SwitchPressed==3)
    39b6:	80 91 b6 04 	lds	r24, 0x04B6
    39ba:	98 2f       	mov	r25, r24
    39bc:	92 50       	subi	r25, 0x02	; 2
    39be:	92 30       	cpi	r25, 0x02	; 2
    39c0:	c0 f4       	brcc	.+48     	; 0x39f2 <TaskFrames+0x3a0>
                {
                    PopulateSSDbuffer("o",60,2);
    39c2:	42 e0       	ldi	r20, 0x02	; 2
    39c4:	6c e3       	ldi	r22, 0x3C	; 60
    39c6:	8f e6       	ldi	r24, 0x6F	; 111
    39c8:	93 e0       	ldi	r25, 0x03	; 3
    39ca:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    StoreNVM(Nvm_TankOverflow,(uint8_t*)&testnvm,1);
    39ce:	41 e0       	ldi	r20, 0x01	; 1
    39d0:	64 eb       	ldi	r22, 0xB4	; 180
    39d2:	74 e0       	ldi	r23, 0x04	; 4
    39d4:	82 e0       	ldi	r24, 0x02	; 2
    39d6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <StoreNVM>
                    SwitchPressed=0;
    39da:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=3;
    39de:	83 e0       	ldi	r24, 0x03	; 3
    39e0:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("1",0,2);
    39e4:	42 e0       	ldi	r20, 0x02	; 2
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	80 ef       	ldi	r24, 0xF0	; 240
    39ea:	92 e0       	ldi	r25, 0x02	; 2
    39ec:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    39f0:	6c c1       	rjmp	.+728    	; 0x3cca <TaskFrames+0x678>

                }
                else if(SwitchPressed==1)
    39f2:	81 30       	cpi	r24, 0x01	; 1
    39f4:	61 f4       	brne	.+24     	; 0x3a0e <TaskFrames+0x3bc>
                {
                    SwitchPressed=0;
    39f6:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("1",0,2);
    3a00:	42 e0       	ldi	r20, 0x02	; 2
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	80 ef       	ldi	r24, 0xF0	; 240
    3a06:	92 e0       	ldi	r25, 0x02	; 2
    3a08:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3a0c:	5e c1       	rjmp	.+700    	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,2,"1");
    3a0e:	40 ef       	ldi	r20, 0xF0	; 240
    3a10:	52 e0       	ldi	r21, 0x02	; 2
    3a12:	62 e0       	ldi	r22, 0x02	; 2
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3a1a:	57 c1       	rjmp	.+686    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 2:
                if(SwitchPressed==2||SwitchPressed==3)
    3a1c:	80 91 b6 04 	lds	r24, 0x04B6
    3a20:	98 2f       	mov	r25, r24
    3a22:	92 50       	subi	r25, 0x02	; 2
    3a24:	92 30       	cpi	r25, 0x02	; 2
    3a26:	60 f4       	brcc	.+24     	; 0x3a40 <TaskFrames+0x3ee>
                {
                    PopulateSSDbuffer("o",60,3);
    3a28:	43 e0       	ldi	r20, 0x03	; 3
    3a2a:	6c e3       	ldi	r22, 0x3C	; 60
    3a2c:	8f e6       	ldi	r24, 0x6F	; 111
    3a2e:	93 e0       	ldi	r25, 0x03	; 3
    3a30:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    SwitchPressed=0;
    3a34:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=4;
    3a38:	84 e0       	ldi	r24, 0x04	; 4
    3a3a:	80 93 d3 04 	sts	0x04D3, r24
    3a3e:	45 c1       	rjmp	.+650    	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    3a40:	81 30       	cpi	r24, 0x01	; 1
    3a42:	61 f4       	brne	.+24     	; 0x3a5c <TaskFrames+0x40a>
                {
                    SwitchPressed=0;
    3a44:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=5;
    3a48:	85 e0       	ldi	r24, 0x05	; 5
    3a4a:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("2",0,3);
    3a4e:	43 e0       	ldi	r20, 0x03	; 3
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	8a ee       	ldi	r24, 0xEA	; 234
    3a54:	92 e0       	ldi	r25, 0x02	; 2
    3a56:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3a5a:	37 c1       	rjmp	.+622    	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,3,"2");
    3a5c:	4a ee       	ldi	r20, 0xEA	; 234
    3a5e:	52 e0       	ldi	r21, 0x02	; 2
    3a60:	63 e0       	ldi	r22, 0x03	; 3
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3a68:	30 c1       	rjmp	.+608    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 3:
                if(Digitset(0,2,&TankHeight)==1)
    3a6a:	4d ec       	ldi	r20, 0xCD	; 205
    3a6c:	54 e0       	ldi	r21, 0x04	; 4
    3a6e:	62 e0       	ldi	r22, 0x02	; 2
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	0e 94 be 14 	call	0x297c	; 0x297c <Digitset>
    3a76:	81 30       	cpi	r24, 0x01	; 1
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <TaskFrames+0x42a>
    3a7a:	27 c1       	rjmp	.+590    	; 0x3cca <TaskFrames+0x678>
                {
                    SubSubframe=1;
    3a7c:	80 93 d3 04 	sts	0x04D3, r24
                    StoreNVM(Nvm_TankHeight,(uint8_t*)&TankHeight,0);
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	6d ec       	ldi	r22, 0xCD	; 205
    3a84:	74 e0       	ldi	r23, 0x04	; 4
    3a86:	84 e0       	ldi	r24, 0x04	; 4
    3a88:	0e 94 71 11 	call	0x22e2	; 0x22e2 <StoreNVM>
    3a8c:	1e c1       	rjmp	.+572    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 4:
                if(Digitset(0,3,&TankUpperThresh)==1)
    3a8e:	4e ec       	ldi	r20, 0xCE	; 206
    3a90:	54 e0       	ldi	r21, 0x04	; 4
    3a92:	63 e0       	ldi	r22, 0x03	; 3
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	0e 94 be 14 	call	0x297c	; 0x297c <Digitset>
    3a9a:	81 30       	cpi	r24, 0x01	; 1
    3a9c:	09 f0       	breq	.+2      	; 0x3aa0 <TaskFrames+0x44e>
    3a9e:	15 c1       	rjmp	.+554    	; 0x3cca <TaskFrames+0x678>
                {
                    SubSubframe=2;
    3aa0:	82 e0       	ldi	r24, 0x02	; 2
    3aa2:	80 93 d3 04 	sts	0x04D3, r24
                    StoreNVM(Nvm_TankOverflow,(uint8_t*)&TankUpperThresh,0);
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	6e ec       	ldi	r22, 0xCE	; 206
    3aaa:	74 e0       	ldi	r23, 0x04	; 4
    3aac:	0e 94 71 11 	call	0x22e2	; 0x22e2 <StoreNVM>
    3ab0:	0c c1       	rjmp	.+536    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 5:
                if(SwitchPressed==2||SwitchPressed==3)
    3ab2:	80 91 b6 04 	lds	r24, 0x04B6
    3ab6:	98 2f       	mov	r25, r24
    3ab8:	92 50       	subi	r25, 0x02	; 2
    3aba:	92 30       	cpi	r25, 0x02	; 2
    3abc:	50 f4       	brcc	.+20     	; 0x3ad2 <TaskFrames+0x480>
                {
                    FrameNo=2;
    3abe:	82 e0       	ldi	r24, 0x02	; 2
    3ac0:	80 93 d1 04 	sts	0x04D1, r24
                    SubframeNo=0;
    3ac4:	10 92 d2 04 	sts	0x04D2, r1
                    SwitchPressed=0;
    3ac8:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=0;
    3acc:	10 92 d3 04 	sts	0x04D3, r1
    3ad0:	fc c0       	rjmp	.+504    	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    3ad2:	81 30       	cpi	r24, 0x01	; 1
    3ad4:	59 f4       	brne	.+22     	; 0x3aec <TaskFrames+0x49a>
                {
                    SwitchPressed=0;
    3ad6:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=0;
    3ada:	10 92 d3 04 	sts	0x04D3, r1
                    PopulateSSDbuffer("BACK",48,7);
    3ade:	47 e0       	ldi	r20, 0x07	; 7
    3ae0:	60 e3       	ldi	r22, 0x30	; 48
    3ae2:	81 e7       	ldi	r24, 0x71	; 113
    3ae4:	93 e0       	ldi	r25, 0x03	; 3
    3ae6:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3aea:	ef c0       	rjmp	.+478    	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(48,7,"BACK ");
    3aec:	46 e7       	ldi	r20, 0x76	; 118
    3aee:	53 e0       	ldi	r21, 0x03	; 3
    3af0:	67 e0       	ldi	r22, 0x07	; 7
    3af2:	80 e3       	ldi	r24, 0x30	; 48
    3af4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3af8:	e8 c0       	rjmp	.+464    	; 0x3cca <TaskFrames+0x678>
                /*Your code here */
                break;
            }
            break;
        case 5:
            BlinkSelection(0,4,"3");
    3afa:	4d e5       	ldi	r20, 0x5D	; 93
    3afc:	53 e0       	ldi	r21, 0x03	; 3
    3afe:	64 e0       	ldi	r22, 0x04	; 4
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
            if(SwitchPressed==2||SwitchPressed==3)
    3b06:	80 91 b6 04 	lds	r24, 0x04B6
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	92 50       	subi	r25, 0x02	; 2
    3b0e:	92 30       	cpi	r25, 0x02	; 2
    3b10:	60 f4       	brcc	.+24     	; 0x3b2a <TaskFrames+0x4d8>
            {
                //FrameNo=2;
                SubframeNo=6;
    3b12:	86 e0       	ldi	r24, 0x06	; 6
    3b14:	80 93 d2 04 	sts	0x04D2, r24
                SubSubframe=0;
    3b18:	10 92 d3 04 	sts	0x04D3, r1
                SSDSetFramePos(4);
    3b1c:	84 e0       	ldi	r24, 0x04	; 4
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 47 0b 	call	0x168e	; 0x168e <SSDSetFramePos>
                SwitchPressed=0;
    3b24:	10 92 b6 04 	sts	0x04B6, r1
    3b28:	d0 c0       	rjmp	.+416    	; 0x3cca <TaskFrames+0x678>
            }
            else if(SwitchPressed==1)
    3b2a:	81 30       	cpi	r24, 0x01	; 1
    3b2c:	09 f0       	breq	.+2      	; 0x3b30 <TaskFrames+0x4de>
    3b2e:	cd c0       	rjmp	.+410    	; 0x3cca <TaskFrames+0x678>
            {
                SwitchPressed=0;
    3b30:	10 92 b6 04 	sts	0x04B6, r1
                SubframeNo=7;
    3b34:	87 e0       	ldi	r24, 0x07	; 7
    3b36:	80 93 d2 04 	sts	0x04D2, r24
                PopulateSSDbuffer("3",0,4);
    3b3a:	44 e0       	ldi	r20, 0x04	; 4
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	8d e5       	ldi	r24, 0x5D	; 93
    3b40:	93 e0       	ldi	r25, 0x03	; 3
    3b42:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3b46:	c1 c0       	rjmp	.+386    	; 0x3cca <TaskFrames+0x678>
            }
            break;
        case 6:
            switch (SubSubframe)
    3b48:	80 91 d3 04 	lds	r24, 0x04D3
    3b4c:	81 30       	cpi	r24, 0x01	; 1
    3b4e:	91 f0       	breq	.+36     	; 0x3b74 <TaskFrames+0x522>
    3b50:	38 f0       	brcs	.+14     	; 0x3b60 <TaskFrames+0x50e>
    3b52:	82 30       	cpi	r24, 0x02	; 2
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <TaskFrames+0x506>
    3b56:	3f c0       	rjmp	.+126    	; 0x3bd6 <TaskFrames+0x584>
    3b58:	83 30       	cpi	r24, 0x03	; 3
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <TaskFrames+0x50c>
    3b5c:	b6 c0       	rjmp	.+364    	; 0x3cca <TaskFrames+0x678>
    3b5e:	70 c0       	rjmp	.+224    	; 0x3c40 <TaskFrames+0x5ee>
            {
            case 0:
                if(SwitchPressed==1)
    3b60:	80 91 b6 04 	lds	r24, 0x04B6
    3b64:	81 30       	cpi	r24, 0x01	; 1
    3b66:	09 f0       	breq	.+2      	; 0x3b6a <TaskFrames+0x518>
    3b68:	b0 c0       	rjmp	.+352    	; 0x3cca <TaskFrames+0x678>
                {
                    SwitchPressed=0;
    3b6a:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    3b6e:	80 93 d3 04 	sts	0x04D3, r24
    3b72:	ab c0       	rjmp	.+342    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 1:

                if(SwitchPressed==2||SwitchPressed==3)
    3b74:	80 91 b6 04 	lds	r24, 0x04B6
    3b78:	98 2f       	mov	r25, r24
    3b7a:	92 50       	subi	r25, 0x02	; 2
    3b7c:	92 30       	cpi	r25, 0x02	; 2
    3b7e:	b0 f4       	brcc	.+44     	; 0x3bac <TaskFrames+0x55a>
                {
                    PopulateSSDbuffer("o",60,2);
    3b80:	42 e0       	ldi	r20, 0x02	; 2
    3b82:	6c e3       	ldi	r22, 0x3C	; 60
    3b84:	8f e6       	ldi	r24, 0x6F	; 111
    3b86:	93 e0       	ldi	r25, 0x03	; 3
    3b88:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    EmulateMessage();
    3b8c:	0e 94 00 06 	call	0xc00	; 0xc00 <EmulateMessage>
                    PushEventInterface(200,DebugHandlerFunc,ESPpop,0);
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	41 ee       	ldi	r20, 0xE1	; 225
    3b94:	55 e0       	ldi	r21, 0x05	; 5
    3b96:	6c e9       	ldi	r22, 0x9C	; 156
    3b98:	7f e0       	ldi	r23, 0x0F	; 15
    3b9a:	88 ec       	ldi	r24, 0xC8	; 200
    3b9c:	0e 94 24 13 	call	0x2648	; 0x2648 <PushEventInterface>
                    //hours.OperatingHours=0;
                    //StoreNVM(Nvm_OH,(uint8_t*)&hours,0);
                    SwitchPressed=0;
    3ba0:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=3;
    3ba4:	83 e0       	ldi	r24, 0x03	; 3
    3ba6:	80 93 d3 04 	sts	0x04D3, r24
    3baa:	8f c0       	rjmp	.+286    	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    3bac:	81 30       	cpi	r24, 0x01	; 1
    3bae:	61 f4       	brne	.+24     	; 0x3bc8 <TaskFrames+0x576>
                {
                    SwitchPressed=0;
    3bb0:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    3bb4:	82 e0       	ldi	r24, 0x02	; 2
    3bb6:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("1",0,2);
    3bba:	42 e0       	ldi	r20, 0x02	; 2
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	80 ef       	ldi	r24, 0xF0	; 240
    3bc0:	92 e0       	ldi	r25, 0x02	; 2
    3bc2:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3bc6:	81 c0       	rjmp	.+258    	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,2,"1");
    3bc8:	40 ef       	ldi	r20, 0xF0	; 240
    3bca:	52 e0       	ldi	r21, 0x02	; 2
    3bcc:	62 e0       	ldi	r22, 0x02	; 2
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3bd4:	7a c0       	rjmp	.+244    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 2:
                if(SwitchPressed==2||SwitchPressed==3)
    3bd6:	80 91 b6 04 	lds	r24, 0x04B6
    3bda:	98 2f       	mov	r25, r24
    3bdc:	92 50       	subi	r25, 0x02	; 2
    3bde:	92 30       	cpi	r25, 0x02	; 2
    3be0:	d0 f4       	brcc	.+52     	; 0x3c16 <TaskFrames+0x5c4>
                {
                    PopulateSSDbuffer("o",60,3);
    3be2:	43 e0       	ldi	r20, 0x03	; 3
    3be4:	6c e3       	ldi	r22, 0x3C	; 60
    3be6:	8f e6       	ldi	r24, 0x6F	; 111
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
                    hours.OperatingHours=0;
    3bee:	10 92 ba 04 	sts	0x04BA, r1
    3bf2:	10 92 bb 04 	sts	0x04BB, r1
    3bf6:	10 92 bc 04 	sts	0x04BC, r1
    3bfa:	10 92 bd 04 	sts	0x04BD, r1
                    StoreNVM(Nvm_OH,(uint8_t*)&hours,1);
    3bfe:	41 e0       	ldi	r20, 0x01	; 1
    3c00:	6a eb       	ldi	r22, 0xBA	; 186
    3c02:	74 e0       	ldi	r23, 0x04	; 4
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	0e 94 71 11 	call	0x22e2	; 0x22e2 <StoreNVM>
                    SwitchPressed=0;
    3c0a:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=3;
    3c0e:	83 e0       	ldi	r24, 0x03	; 3
    3c10:	80 93 d3 04 	sts	0x04D3, r24
    3c14:	5a c0       	rjmp	.+180    	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    3c16:	81 30       	cpi	r24, 0x01	; 1
    3c18:	61 f4       	brne	.+24     	; 0x3c32 <TaskFrames+0x5e0>
                {
                    SwitchPressed=0;
    3c1a:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe++;
    3c1e:	83 e0       	ldi	r24, 0x03	; 3
    3c20:	80 93 d3 04 	sts	0x04D3, r24
                    PopulateSSDbuffer("2",0,3);
    3c24:	43 e0       	ldi	r20, 0x03	; 3
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	8a ee       	ldi	r24, 0xEA	; 234
    3c2a:	92 e0       	ldi	r25, 0x02	; 2
    3c2c:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3c30:	4c c0       	rjmp	.+152    	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(0,3,"2");
    3c32:	4a ee       	ldi	r20, 0xEA	; 234
    3c34:	52 e0       	ldi	r21, 0x02	; 2
    3c36:	63 e0       	ldi	r22, 0x03	; 3
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3c3e:	45 c0       	rjmp	.+138    	; 0x3cca <TaskFrames+0x678>
                }
                break;
            case 3:
                if(SwitchPressed==2||SwitchPressed==3)
    3c40:	80 91 b6 04 	lds	r24, 0x04B6
    3c44:	98 2f       	mov	r25, r24
    3c46:	92 50       	subi	r25, 0x02	; 2
    3c48:	92 30       	cpi	r25, 0x02	; 2
    3c4a:	50 f4       	brcc	.+20     	; 0x3c60 <TaskFrames+0x60e>
                {
                    FrameNo=2;
    3c4c:	82 e0       	ldi	r24, 0x02	; 2
    3c4e:	80 93 d1 04 	sts	0x04D1, r24
                    SubframeNo=0;
    3c52:	10 92 d2 04 	sts	0x04D2, r1
                    SwitchPressed=0;
    3c56:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=0;
    3c5a:	10 92 d3 04 	sts	0x04D3, r1
    3c5e:	35 c0       	rjmp	.+106    	; 0x3cca <TaskFrames+0x678>
                }
                else if(SwitchPressed==1)
    3c60:	81 30       	cpi	r24, 0x01	; 1
    3c62:	59 f4       	brne	.+22     	; 0x3c7a <TaskFrames+0x628>
                {
                    SwitchPressed=0;
    3c64:	10 92 b6 04 	sts	0x04B6, r1
                    SubSubframe=0;
    3c68:	10 92 d3 04 	sts	0x04D3, r1
                    PopulateSSDbuffer("BACK",48,7);
    3c6c:	47 e0       	ldi	r20, 0x07	; 7
    3c6e:	60 e3       	ldi	r22, 0x30	; 48
    3c70:	81 e7       	ldi	r24, 0x71	; 113
    3c72:	93 e0       	ldi	r25, 0x03	; 3
    3c74:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    3c78:	28 c0       	rjmp	.+80     	; 0x3cca <TaskFrames+0x678>
                }
                else
                {
                    BlinkSelection(48,7,"BACK ");
    3c7a:	46 e7       	ldi	r20, 0x76	; 118
    3c7c:	53 e0       	ldi	r21, 0x03	; 3
    3c7e:	67 e0       	ldi	r22, 0x07	; 7
    3c80:	80 e3       	ldi	r24, 0x30	; 48
    3c82:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
    3c86:	21 c0       	rjmp	.+66     	; 0x3cca <TaskFrames+0x678>
                break;
            }
            break;
        case 7:

            BlinkSelection(48,7,"BACK ");
    3c88:	46 e7       	ldi	r20, 0x76	; 118
    3c8a:	53 e0       	ldi	r21, 0x03	; 3
    3c8c:	67 e0       	ldi	r22, 0x07	; 7
    3c8e:	80 e3       	ldi	r24, 0x30	; 48
    3c90:	0e 94 94 15 	call	0x2b28	; 0x2b28 <BlinkSelection>
            if(SwitchPressed==2||SwitchPressed==3)
    3c94:	80 91 b6 04 	lds	r24, 0x04B6
    3c98:	82 50       	subi	r24, 0x02	; 2
    3c9a:	82 30       	cpi	r24, 0x02	; 2
    3c9c:	40 f4       	brcc	.+16     	; 0x3cae <TaskFrames+0x65c>
            {
                //FrameNo=2;
                SubframeNo=0;
    3c9e:	10 92 d2 04 	sts	0x04D2, r1
                SubSubframe=0;
    3ca2:	10 92 d3 04 	sts	0x04D3, r1
                SwitchPressed=0;
    3ca6:	10 92 b6 04 	sts	0x04B6, r1
                FrameNo=0;
    3caa:	10 92 d1 04 	sts	0x04D1, r1
            }
            if(SwitchPressed==1)
    3cae:	80 91 b6 04 	lds	r24, 0x04B6
    3cb2:	81 30       	cpi	r24, 0x01	; 1
    3cb4:	51 f4       	brne	.+20     	; 0x3cca <TaskFrames+0x678>
            {
                SwitchPressed=0;
    3cb6:	10 92 b6 04 	sts	0x04B6, r1
                SubframeNo=0;
    3cba:	10 92 d2 04 	sts	0x04D2, r1
                PopulateSSDbuffer("BACK",48,7);
    3cbe:	47 e0       	ldi	r20, 0x07	; 7
    3cc0:	60 e3       	ldi	r22, 0x30	; 48
    3cc2:	81 e7       	ldi	r24, 0x71	; 113
    3cc4:	93 e0       	ldi	r25, 0x03	; 3
    3cc6:	0e 94 57 12 	call	0x24ae	; 0x24ae <PopulateSSDbuffer>
    default:
        /* Your code here */
        break;
    }
    return 0;
}
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	08 95       	ret

00003cdc <NonPeriodicTaskFuncSet>:
			}
		}
		return 0;
}
uint16_t NonPeriodicTaskFuncSet(void *ptr)
{
    3cdc:	fc 01       	movw	r30, r24
	uint8_t *data;
	uint8_t funcpoint[2];
	data=(uint8_t*)ptr;
	NonPeriodictaskArr[data[0]].taskfucntion=(funPtrBase*)(((uint16_t*)(data+2))[0]);
    3cde:	80 81       	ld	r24, Z
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	aa 0f       	add	r26, r26
    3ce6:	bb 1f       	adc	r27, r27
    3ce8:	aa 0f       	add	r26, r26
    3cea:	bb 1f       	adc	r27, r27
    3cec:	8a 0f       	add	r24, r26
    3cee:	9b 1f       	adc	r25, r27
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	a8 52       	subi	r26, 0x28	; 40
    3cf4:	bb 4f       	sbci	r27, 0xFB	; 251
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	8d 93       	st	X+, r24
    3cfc:	9c 93       	st	X, r25
	NonPeriodictaskArr[data[0]].On=data[1];
    3cfe:	21 81       	ldd	r18, Z+1	; 0x01
    3d00:	80 81       	ld	r24, Z
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	dc 01       	movw	r26, r24
    3d06:	aa 0f       	add	r26, r26
    3d08:	bb 1f       	adc	r27, r27
    3d0a:	aa 0f       	add	r26, r26
    3d0c:	bb 1f       	adc	r27, r27
    3d0e:	8a 0f       	add	r24, r26
    3d10:	9b 1f       	adc	r25, r27
    3d12:	dc 01       	movw	r26, r24
    3d14:	a8 52       	subi	r26, 0x28	; 40
    3d16:	bb 4f       	sbci	r27, 0xFB	; 251
    3d18:	12 96       	adiw	r26, 0x02	; 2
    3d1a:	2c 93       	st	X, r18
	NonPeriodictaskArr[data[0]].ptr=ptr;	
    3d1c:	80 81       	ld	r24, Z
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	dc 01       	movw	r26, r24
    3d22:	aa 0f       	add	r26, r26
    3d24:	bb 1f       	adc	r27, r27
    3d26:	aa 0f       	add	r26, r26
    3d28:	bb 1f       	adc	r27, r27
    3d2a:	8a 0f       	add	r24, r26
    3d2c:	9b 1f       	adc	r25, r27
    3d2e:	dc 01       	movw	r26, r24
    3d30:	a8 52       	subi	r26, 0x28	; 40
    3d32:	bb 4f       	sbci	r27, 0xFB	; 251
    3d34:	14 96       	adiw	r26, 0x04	; 4
    3d36:	fc 93       	st	X, r31
    3d38:	ee 93       	st	-X, r30
    3d3a:	13 97       	sbiw	r26, 0x03	; 3
}
    3d3c:	08 95       	ret

00003d3e <BaseHandler>:
uint16_t BaseHandler(void *ptr)
{
	uint8_t *data;
	data=(uint8_t*)ptr;
    taskfuncbase[*data-1].On=1;
    3d3e:	fc 01       	movw	r30, r24
    3d40:	80 81       	ld	r24, Z
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	fc 01       	movw	r30, r24
    3d48:	ee 0f       	add	r30, r30
    3d4a:	ff 1f       	adc	r31, r31
    3d4c:	ee 0f       	add	r30, r30
    3d4e:	ff 1f       	adc	r31, r31
    3d50:	ee 0f       	add	r30, r30
    3d52:	ff 1f       	adc	r31, r31
    3d54:	e8 1b       	sub	r30, r24
    3d56:	f9 0b       	sbc	r31, r25
    3d58:	ee 58       	subi	r30, 0x8E	; 142
    3d5a:	fd 4f       	sbci	r31, 0xFD	; 253
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	85 83       	std	Z+5, r24	; 0x05
	//uart_string("bhandler\n");
}
    3d60:	08 95       	ret

00003d62 <tasksBase>:
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
{
    3d62:	7f 92       	push	r7
    3d64:	8f 92       	push	r8
    3d66:	9f 92       	push	r9
    3d68:	af 92       	push	r10
    3d6a:	bf 92       	push	r11
    3d6c:	cf 92       	push	r12
    3d6e:	df 92       	push	r13
    3d70:	ef 92       	push	r14
    3d72:	ff 92       	push	r15
    3d74:	0f 93       	push	r16
    3d76:	1f 93       	push	r17
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	00 d0       	rcall	.+0      	; 0x3d7e <tasksBase+0x1c>
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <tasksBase+0x1e>
    3d80:	1f 92       	push	r1
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
    3d86:	80 91 f3 04 	lds	r24, 0x04F3
    3d8a:	81 11       	cpse	r24, r1
    3d8c:	4c c0       	rjmp	.+152    	; 0x3e26 <tasksBase+0xc4>
    3d8e:	07 e7       	ldi	r16, 0x77	; 119
    3d90:	12 e0       	ldi	r17, 0x02	; 2
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3d92:	0f 2e       	mov	r0, r31
    3d94:	fc e8       	ldi	r31, 0x8C	; 140
    3d96:	ef 2e       	mov	r14, r31
    3d98:	f2 e0       	ldi	r31, 0x02	; 2
    3d9a:	ff 2e       	mov	r15, r31
    3d9c:	f0 2d       	mov	r31, r0
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<3;i++)
		{
			if(taskfuncbase[i].On==dON)
    3d9e:	f8 01       	movw	r30, r16
    3da0:	80 81       	ld	r24, Z
    3da2:	81 30       	cpi	r24, 0x01	; 1
    3da4:	29 f4       	brne	.+10     	; 0x3db0 <tasksBase+0x4e>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3da6:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<3;i++)
		{
			if(taskfuncbase[i].On==dON)
			{
				
				taskfuncbase[i].Openfucntion();
    3da8:	01 90       	ld	r0, Z+
    3daa:	f0 81       	ld	r31, Z
    3dac:	e0 2d       	mov	r30, r0
    3dae:	09 95       	icall
    3db0:	09 5f       	subi	r16, 0xF9	; 249
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
uint16_t tasksBase()
{
	static uint8_t opentaskbase=0;
	if(opentaskbase==0)
	{
		for(int i=0;i<3;i++)
    3db4:	0e 15       	cp	r16, r14
    3db6:	1f 05       	cpc	r17, r15
    3db8:	91 f7       	brne	.-28     	; 0x3d9e <tasksBase+0x3c>
			{
				
				taskfuncbase[i].Openfucntion();
			}
		}
		opentaskbase=1;
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	80 93 f3 04 	sts	0x04F3, r24
    3dc0:	32 c0       	rjmp	.+100    	; 0x3e26 <tasksBase+0xc4>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3dc2:	58 01       	movw	r10, r16
		
	}
	
	for(int i=0;i<3;i++)
	{
		taskfuncbase[i].counter++;
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	80 81       	ld	r24, Z
    3dc8:	8f 5f       	subi	r24, 0xFF	; 255
    3dca:	80 83       	st	Z, r24
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    3dcc:	f7 01       	movw	r30, r14
    3dce:	90 81       	ld	r25, Z
    3dd0:	91 30       	cpi	r25, 0x01	; 1
    3dd2:	01 f5       	brne	.+64     	; 0x3e14 <tasksBase+0xb2>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<3;i++)
	{
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
    3dd8:	90 81       	ld	r25, Z
    3dda:	89 17       	cp	r24, r25
    3ddc:	d8 f0       	brcs	.+54     	; 0x3e14 <tasksBase+0xb2>
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3dde:	f8 01       	movw	r30, r16
    3de0:	36 97       	sbiw	r30, 0x06	; 6
		taskfuncbase[i].counter++;
		if(taskfuncbase[i].On==dON && taskfuncbase[i].counter>=taskfuncbase[i].time )
		{
			uint16_t Temp;
			uint8_t arr[3];
			Temp=taskfuncbase[i].taskfucntion();
    3de2:	01 90       	ld	r0, Z+
    3de4:	f0 81       	ld	r31, Z
    3de6:	e0 2d       	mov	r30, r0
    3de8:	09 95       	icall
    3dea:	9d 83       	std	Y+5, r25	; 0x05
    3dec:	8c 83       	std	Y+4, r24	; 0x04
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
    3dee:	8d 81       	ldd	r24, Y+5	; 0x05
    3df0:	80 fd       	sbrc	r24, 0
    3df2:	0e c0       	rjmp	.+28     	; 0x3e10 <tasksBase+0xae>
			{
				//uart_string("done");
				arr[0]=1;
    3df4:	79 82       	std	Y+1, r7	; 0x01
				arr[1]=(((uint8_t*)&Temp)[1]>>1)&0x7f;
    3df6:	86 95       	lsr	r24
    3df8:	8a 83       	std	Y+2, r24	; 0x02
				arr[2]=((uint8_t*)&Temp)[0];
    3dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfc:	8b 83       	std	Y+3, r24	; 0x03
				callbackarrayfuc func;
				func=callbackgetFunction(2);
    3dfe:	82 e0       	ldi	r24, 0x02	; 2
    3e00:	0e 94 8c 14 	call	0x2918	; 0x2918 <callbackgetFunction>
    3e04:	fc 01       	movw	r30, r24
				func(arr);
    3e06:	ce 01       	movw	r24, r28
    3e08:	01 96       	adiw	r24, 0x01	; 1
    3e0a:	09 95       	icall
				taskfuncbase[i].On=0;
    3e0c:	f7 01       	movw	r30, r14
    3e0e:	10 82       	st	Z, r1
			}
			taskfuncbase[i].counter=0;
    3e10:	f5 01       	movw	r30, r10
    3e12:	10 82       	st	Z, r1
    3e14:	09 5f       	subi	r16, 0xF9	; 249
    3e16:	1f 4f       	sbci	r17, 0xFF	; 255
    3e18:	f7 e0       	ldi	r31, 0x07	; 7
    3e1a:	ef 0e       	add	r14, r31
    3e1c:	f1 1c       	adc	r15, r1
		}
		opentaskbase=1;
		
	}
	
	for(int i=0;i<3;i++)
    3e1e:	0c 15       	cp	r16, r12
    3e20:	1d 05       	cpc	r17, r13
    3e22:	79 f6       	brne	.-98     	; 0x3dc2 <tasksBase+0x60>
    3e24:	11 c0       	rjmp	.+34     	; 0x3e48 <tasksBase+0xe6>
    3e26:	08 e7       	ldi	r16, 0x78	; 120
    3e28:	12 e0       	ldi	r17, 0x02	; 2
    3e2a:	0f 2e       	mov	r0, r31
    3e2c:	f7 e7       	ldi	r31, 0x77	; 119
    3e2e:	ef 2e       	mov	r14, r31
    3e30:	f2 e0       	ldi	r31, 0x02	; 2
    3e32:	ff 2e       	mov	r15, r31
    3e34:	f0 2d       	mov	r31, r0
	}
    ReadEveryValueADC();
	
	return 0;
}
uint16_t tasksBase()
    3e36:	0f 2e       	mov	r0, r31
    3e38:	fd e8       	ldi	r31, 0x8D	; 141
    3e3a:	cf 2e       	mov	r12, r31
    3e3c:	f2 e0       	ldi	r31, 0x02	; 2
    3e3e:	df 2e       	mov	r13, r31
    3e40:	f0 2d       	mov	r31, r0
			Temp=taskfuncbase[i].taskfucntion();
			//uart_num((((uint8_t*)&Temp)[1]&0x01));
			if((((uint8_t*)&Temp)[1]&0x01)==0)
			{
				//uart_string("done");
				arr[0]=1;
    3e42:	77 24       	eor	r7, r7
    3e44:	73 94       	inc	r7
    3e46:	bd cf       	rjmp	.-134    	; 0x3dc2 <tasksBase+0x60>
			//UartHandlerMain();
		}
	}
	
	return 0;
}
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	ff 90       	pop	r15
    3e60:	ef 90       	pop	r14
    3e62:	df 90       	pop	r13
    3e64:	cf 90       	pop	r12
    3e66:	bf 90       	pop	r11
    3e68:	af 90       	pop	r10
    3e6a:	9f 90       	pop	r9
    3e6c:	8f 90       	pop	r8
    3e6e:	7f 90       	pop	r7
    3e70:	08 95       	ret

00003e72 <tasks>:
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
{
    3e72:	ef 92       	push	r14
    3e74:	ff 92       	push	r15
    3e76:	0f 93       	push	r16
    3e78:	1f 93       	push	r17
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
	static uint8_t opentask=0;
	if(opentask==0)
    3e7e:	80 91 f1 04 	lds	r24, 0x04F1
    3e82:	81 11       	cpse	r24, r1
    3e84:	3e c0       	rjmp	.+124    	; 0x3f02 <tasks+0x90>
	{
		callbackSetFunction(1,BaseHandler);
    3e86:	6f e9       	ldi	r22, 0x9F	; 159
    3e88:	7e e1       	ldi	r23, 0x1E	; 30
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	0e 94 83 14 	call	0x2906	; 0x2906 <callbackSetFunction>
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
    3e90:	6e e6       	ldi	r22, 0x6E	; 110
    3e92:	7e e1       	ldi	r23, 0x1E	; 30
    3e94:	83 e0       	ldi	r24, 0x03	; 3
    3e96:	0e 94 83 14 	call	0x2906	; 0x2906 <callbackSetFunction>
		Nvm_TableInit();
    3e9a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <Nvm_TableInit>
    3e9e:	cc e8       	ldi	r28, 0x8C	; 140
    3ea0:	d2 e0       	ldi	r29, 0x02	; 2
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3ea2:	04 ec       	ldi	r16, 0xC4	; 196
    3ea4:	12 e0       	ldi	r17, 0x02	; 2
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
    3ea6:	88 81       	ld	r24, Y
    3ea8:	81 30       	cpi	r24, 0x01	; 1
    3eaa:	31 f4       	brne	.+12     	; 0x3eb8 <tasks+0x46>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3eac:	fe 01       	movw	r30, r28
    3eae:	33 97       	sbiw	r30, 0x03	; 3
		for(int i=0;i<eTaskEndoflist;i++)
		{
			if(taskfunc[i].On==dON)
			{
				
				taskfunc[i].Openfucntion();
    3eb0:	01 90       	ld	r0, Z+
    3eb2:	f0 81       	ld	r31, Z
    3eb4:	e0 2d       	mov	r30, r0
    3eb6:	09 95       	icall
    3eb8:	27 96       	adiw	r28, 0x07	; 7
	if(opentask==0)
	{
		callbackSetFunction(1,BaseHandler);
		callbackSetFunction(3,NonPeriodicTaskFuncSet);
		Nvm_TableInit();
		for(int i=0;i<eTaskEndoflist;i++)
    3eba:	c0 17       	cp	r28, r16
    3ebc:	d1 07       	cpc	r29, r17
    3ebe:	99 f7       	brne	.-26     	; 0x3ea6 <tasks+0x34>
			{
				
				taskfunc[i].Openfucntion();
			}
		}
		opentask=1;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	80 93 f1 04 	sts	0x04F1, r24
		openDone=1;
    3ec6:	80 93 f2 04 	sts	0x04F2, r24
		UartHandlerInit();
    3eca:	0e 94 11 06 	call	0xc22	; 0xc22 <UartHandlerInit>
    3ece:	19 c0       	rjmp	.+50     	; 0x3f02 <tasks+0x90>
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
    3ed0:	88 81       	ld	r24, Y
    3ed2:	8f 5f       	subi	r24, 0xFF	; 255
    3ed4:	88 83       	st	Y, r24
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    3eda:	90 81       	ld	r25, Z
    3edc:	91 30       	cpi	r25, 0x01	; 1
    3ede:	61 f4       	brne	.+24     	; 0x3ef8 <tasks+0x86>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	32 97       	sbiw	r30, 0x02	; 2
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
    3ee4:	90 81       	ld	r25, Z
    3ee6:	89 17       	cp	r24, r25
    3ee8:	38 f0       	brcs	.+14     	; 0x3ef8 <tasks+0x86>
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3eea:	fe 01       	movw	r30, r28
    3eec:	36 97       	sbiw	r30, 0x06	; 6
	for(int i=0;i<eTaskEndoflist;i++)
	{
		taskfunc[i].counter++;
		if(taskfunc[i].On==dON && taskfunc[i].counter>=taskfunc[i].time )
		{
			taskfunc[i].taskfucntion();
    3eee:	01 90       	ld	r0, Z+
    3ef0:	f0 81       	ld	r31, Z
    3ef2:	e0 2d       	mov	r30, r0
    3ef4:	09 95       	icall
			taskfunc[i].counter=0;
    3ef6:	18 82       	st	Y, r1
    3ef8:	27 96       	adiw	r28, 0x07	; 7
		openDone=1;
		UartHandlerInit();
		
	}
	
	for(int i=0;i<eTaskEndoflist;i++)
    3efa:	ce 15       	cp	r28, r14
    3efc:	df 05       	cpc	r29, r15
    3efe:	41 f7       	brne	.-48     	; 0x3ed0 <tasks+0x5e>
    3f00:	09 c0       	rjmp	.+18     	; 0x3f14 <tasks+0xa2>
    3f02:	cd e8       	ldi	r28, 0x8D	; 141
    3f04:	d2 e0       	ldi	r29, 0x02	; 2
						{Testtask,BaseTask2Open,1,dON,0}};	
NonPeriodictask NonPeriodictaskArr[5]={0};			   
EventList EventFunc[1]={{0,NVMTask}};

static uint8_t openDone;
uint16_t tasks( )
    3f06:	0f 2e       	mov	r0, r31
    3f08:	f5 ec       	ldi	r31, 0xC5	; 197
    3f0a:	ef 2e       	mov	r14, r31
    3f0c:	f2 e0       	ldi	r31, 0x02	; 2
    3f0e:	ff 2e       	mov	r15, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	de cf       	rjmp	.-68     	; 0x3ed0 <tasks+0x5e>
			taskfunc[i].counter=0;
			
			//UartHandlerMain();
		}
	}
    ReadEveryValueADC();
    3f14:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <ReadEveryValueADC>
	
	return 0;
}
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	ff 90       	pop	r15
    3f26:	ef 90       	pop	r14
    3f28:	08 95       	ret

00003f2a <NonPeriodicTaskFuncCall>:
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
    3f2a:	0f 93       	push	r16
    3f2c:	1f 93       	push	r17
    3f2e:	cf 93       	push	r28
    3f30:	df 93       	push	r29
    3f32:	ca ed       	ldi	r28, 0xDA	; 218
    3f34:	d4 e0       	ldi	r29, 0x04	; 4
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    3f36:	03 ef       	ldi	r16, 0xF3	; 243
    3f38:	14 e0       	ldi	r17, 0x04	; 4
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
		{
			tasktime++;
    3f3a:	80 91 f4 04 	lds	r24, 0x04F4
    3f3e:	90 91 f5 04 	lds	r25, 0x04F5
    3f42:	01 96       	adiw	r24, 0x01	; 1
    3f44:	90 93 f5 04 	sts	0x04F5, r25
    3f48:	80 93 f4 04 	sts	0x04F4, r24
			if(NonPeriodictaskArr[i].On==dON &&tasktime>900)
    3f4c:	28 81       	ld	r18, Y
    3f4e:	21 30       	cpi	r18, 0x01	; 1
    3f50:	79 f4       	brne	.+30     	; 0x3f70 <NonPeriodicTaskFuncCall+0x46>
    3f52:	85 38       	cpi	r24, 0x85	; 133
    3f54:	93 40       	sbci	r25, 0x03	; 3
    3f56:	60 f0       	brcs	.+24     	; 0x3f70 <NonPeriodicTaskFuncCall+0x46>
		}
	}
	
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
    3f58:	fe 01       	movw	r30, r28
    3f5a:	32 97       	sbiw	r30, 0x02	; 2
		{
			tasktime++;
			if(NonPeriodictaskArr[i].On==dON &&tasktime>900)
			{
				
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
    3f5c:	01 90       	ld	r0, Z+
    3f5e:	f0 81       	ld	r31, Z
    3f60:	e0 2d       	mov	r30, r0
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	9a 81       	ldd	r25, Y+2	; 0x02
    3f66:	09 95       	icall
				tasktime=0;			
    3f68:	10 92 f5 04 	sts	0x04F5, r1
    3f6c:	10 92 f4 04 	sts	0x04F4, r1
    3f70:	25 96       	adiw	r28, 0x05	; 5
	return 0;
}
uint16_t NonPeriodicTaskFuncCall( )
{
	    static uint16_t tasktime;
		for(int i=0;i<5;i++)
    3f72:	c0 17       	cp	r28, r16
    3f74:	d1 07       	cpc	r29, r17
    3f76:	09 f7       	brne	.-62     	; 0x3f3a <NonPeriodicTaskFuncCall+0x10>
				NonPeriodictaskArr[i].taskfucntion(NonPeriodictaskArr[i].ptr);	
				tasktime=0;			
			}
		}
		return 0;
}
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	df 91       	pop	r29
    3f7e:	cf 91       	pop	r28
    3f80:	1f 91       	pop	r17
    3f82:	0f 91       	pop	r16
    3f84:	08 95       	ret

00003f86 <ApplicationHookUP>:
		}
    }
	}
}
void ApplicationHookUP(uint8_t * event)
{
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	ec 01       	movw	r28, r24
	SSDtask();
    3f8c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <SSDtask>
	if(openDone==1)
    3f90:	80 91 f2 04 	lds	r24, 0x04F2
    3f94:	81 30       	cpi	r24, 0x01	; 1
    3f96:	19 f4       	brne	.+6      	; 0x3f9e <ApplicationHookUP+0x18>
	{
		HookupTasks(event);
    3f98:	ce 01       	movw	r24, r28
    3f9a:	0e 94 22 1b 	call	0x3644	; 0x3644 <HookupTasks>
		//DataTransmit();
	}
	if(UartEvents==1)
    3f9e:	80 91 f6 04 	lds	r24, 0x04F6
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	11 f4       	brne	.+4      	; 0x3faa <ApplicationHookUP+0x24>
	{
		taskfunc[5].On=1;
    3fa6:	80 93 af 02 	sts	0x02AF, r24
	}
	
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	08 95       	ret

00003fb0 <RTEModuleFirstCh>:
#ifndef RTE_ASW_H_
#define RTE_ASW_H_
#include <avr/io.h>
extern void RTEModuleFirstCh(uint16_t *ChannelValue)
{
    Rte_Base2AswLAYERADCReadConnector(ChannelValue)	;
    3fb0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <Rte_Base2AswLAYERADCReadConnector>
    3fb4:	08 95       	ret

00003fb6 <Rte_Uart_WriteBuffer>:
{
	Rte_recievebuffer0.ustring=ustring;
}*/
void Rte_Uart_WriteBuffer(unsigned char *ustring)
{
	Rte_Base2AswLayerUartWriteBuffer(ustring);	
    3fb6:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <Rte_Base2AswLayerUartWriteBuffer>
    3fba:	08 95       	ret

00003fbc <RTE_BaseWriteCh1Data>:
#include "..\MddleLayer\ADCread.h"
#include "..\BaseLayer\ExtInterrupt.h"
#include "..\MddleLayer\UartTransmit.h"

extern void RTE_BaseWriteCh1Data(uint16_t *ChannelValue)
{
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	ec 01       	movw	r28, r24
	//uart_num(*ChannelValue);
	//*ChannelValue=2;
	uint16_t val=*ChannelValue;
	*ChannelValue=GetADC_Value(val);
    3fc2:	88 81       	ld	r24, Y
    3fc4:	99 81       	ldd	r25, Y+1	; 0x01
    3fc6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <GetADC_Value>
    3fca:	99 83       	std	Y+1, r25	; 0x01
    3fcc:	88 83       	st	Y, r24
}
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

00003fd4 <Rte_BaseWriteUartData>:
	*PingEcho=InterfacePulse(val);
}

void Rte_BaseWriteUartData(unsigned char *Ustring)
{
	FillUartBuffer(Ustring);
    3fd4:	0e 94 91 12 	call	0x2522	; 0x2522 <FillUartBuffer>
    3fd8:	08 95       	ret

00003fda <Rte_Base2AswLAYERADCReadConnector>:
 *  Author: Nikhil
 */ 
#include <avr/io.h>
void Rte_Base2AswLAYERADCReadConnector(uint16_t *DATA)
{
	RTE_BaseWriteCh1Data(DATA);
    3fda:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <RTE_BaseWriteCh1Data>
    3fde:	08 95       	ret

00003fe0 <Rte_Base2AswLayerUartWriteBuffer>:
	Rte_BaseWritePingEchoData(DATA);
}

Rte_Base2AswLayerUartWriteBuffer(unsigned char *ustring)
{
	Rte_BaseWriteUartData(ustring);
    3fe0:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <Rte_BaseWriteUartData>
    3fe4:	08 95       	ret

00003fe6 <__divmodhi4>:
    3fe6:	97 fb       	bst	r25, 7
    3fe8:	07 2e       	mov	r0, r23
    3fea:	16 f4       	brtc	.+4      	; 0x3ff0 <__divmodhi4+0xa>
    3fec:	00 94       	com	r0
    3fee:	07 d0       	rcall	.+14     	; 0x3ffe <__divmodhi4_neg1>
    3ff0:	77 fd       	sbrc	r23, 7
    3ff2:	09 d0       	rcall	.+18     	; 0x4006 <__divmodhi4_neg2>
    3ff4:	0e 94 13 20 	call	0x4026	; 0x4026 <__udivmodhi4>
    3ff8:	07 fc       	sbrc	r0, 7
    3ffa:	05 d0       	rcall	.+10     	; 0x4006 <__divmodhi4_neg2>
    3ffc:	3e f4       	brtc	.+14     	; 0x400c <__divmodhi4_exit>

00003ffe <__divmodhi4_neg1>:
    3ffe:	90 95       	com	r25
    4000:	81 95       	neg	r24
    4002:	9f 4f       	sbci	r25, 0xFF	; 255
    4004:	08 95       	ret

00004006 <__divmodhi4_neg2>:
    4006:	70 95       	com	r23
    4008:	61 95       	neg	r22
    400a:	7f 4f       	sbci	r23, 0xFF	; 255

0000400c <__divmodhi4_exit>:
    400c:	08 95       	ret

0000400e <__umulhisi3>:
    400e:	a2 9f       	mul	r26, r18
    4010:	b0 01       	movw	r22, r0
    4012:	b3 9f       	mul	r27, r19
    4014:	c0 01       	movw	r24, r0
    4016:	a3 9f       	mul	r26, r19
    4018:	01 d0       	rcall	.+2      	; 0x401c <__umulhisi3+0xe>
    401a:	b2 9f       	mul	r27, r18
    401c:	70 0d       	add	r23, r0
    401e:	81 1d       	adc	r24, r1
    4020:	11 24       	eor	r1, r1
    4022:	91 1d       	adc	r25, r1
    4024:	08 95       	ret

00004026 <__udivmodhi4>:
    4026:	aa 1b       	sub	r26, r26
    4028:	bb 1b       	sub	r27, r27
    402a:	51 e1       	ldi	r21, 0x11	; 17
    402c:	07 c0       	rjmp	.+14     	; 0x403c <__udivmodhi4_ep>

0000402e <__udivmodhi4_loop>:
    402e:	aa 1f       	adc	r26, r26
    4030:	bb 1f       	adc	r27, r27
    4032:	a6 17       	cp	r26, r22
    4034:	b7 07       	cpc	r27, r23
    4036:	10 f0       	brcs	.+4      	; 0x403c <__udivmodhi4_ep>
    4038:	a6 1b       	sub	r26, r22
    403a:	b7 0b       	sbc	r27, r23

0000403c <__udivmodhi4_ep>:
    403c:	88 1f       	adc	r24, r24
    403e:	99 1f       	adc	r25, r25
    4040:	5a 95       	dec	r21
    4042:	a9 f7       	brne	.-22     	; 0x402e <__udivmodhi4_loop>
    4044:	80 95       	com	r24
    4046:	90 95       	com	r25
    4048:	bc 01       	movw	r22, r24
    404a:	cd 01       	movw	r24, r26
    404c:	08 95       	ret

0000404e <strcpy_P>:
    404e:	fb 01       	movw	r30, r22
    4050:	dc 01       	movw	r26, r24
    4052:	05 90       	lpm	r0, Z+
    4054:	0d 92       	st	X+, r0
    4056:	00 20       	and	r0, r0
    4058:	e1 f7       	brne	.-8      	; 0x4052 <strcpy_P+0x4>
    405a:	08 95       	ret

0000405c <strcmp>:
    405c:	fb 01       	movw	r30, r22
    405e:	dc 01       	movw	r26, r24
    4060:	8d 91       	ld	r24, X+
    4062:	01 90       	ld	r0, Z+
    4064:	80 19       	sub	r24, r0
    4066:	01 10       	cpse	r0, r1
    4068:	d9 f3       	breq	.-10     	; 0x4060 <strcmp+0x4>
    406a:	99 0b       	sbc	r25, r25
    406c:	08 95       	ret

0000406e <_exit>:
    406e:	f8 94       	cli

00004070 <__stop_program>:
    4070:	ff cf       	rjmp	.-2      	; 0x4070 <__stop_program>
